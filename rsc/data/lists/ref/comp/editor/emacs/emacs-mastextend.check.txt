set foldmethod=indent foldlevel=2
vim: fdm=indent:fdl=2:

~/Dropbox/rsc/data/lists/learnqna/vanki/pick.legacy/em-mastext1.txt {{{
              ---- p32
                [ modeline ]  ,,  mini-buffer | echo area

              ---- p35
                cut           copy           paste
                kill    save to kill-ring    yank


              ---- p38
                'faces'             # fonts
                'font locking'
                'font-lock faces'   # set syntax highlight + color theme
              ---- p50
                'key sequence'      # =seq. of keyb/muose actions
                'prefix key'        # eg. c-x
                'complete key'      # =one or more key-seq.s that invoce a command
                'key map'           # eg. c-f, c-x 8  (=prefix w. set of sub-cmds)
                  'c-'               ='the c- modifier'   p111
              ---- p54-p55, p53
                interactive commands
                extended command funcionality

              ---- p58 ****
                Check keys in c-x 8--map ; c-x 8 c-h  *******


              ---- p66
                open customize interface ; a-x customize
                                                a-x customize-colors
                a-x list-colors-display
                a-x info-apropos Colors on a TTY
                 a-x customize-themes  p71
              ---- p66
                a-x customize subcommands
                    = customized, changed, face, group,  mode, saved,  themes


              ---- p68
                Evaluating Elisp Code ***!(!)
                    a-x eval-buffer
                    a-x eval-region
                      --
                    ca-x (eval-defun)  +(do) in every defvar/defcustom form
                    c-x c-e (eval-last-sexp)
                    c-j
                    sa-.
                    a-x ielm (**)  (+auto-complete ??)
              ---- p70
                Repos + Packages
                    (setq package-archives  [+addresses + eval-buffer]
                a-x package-list-packages
                a-x package-install
                 a-x package-refresh-contents
                --  p164
                Installing Helm **
                    (set elpa + melpa repos), a-x package-install helm Ent, (+restart/refresh) **


              ---- p73  (the 'Help/Man/Info/Describe'-system)
                Open Info ; c-h i
                  node navig.   ]  [
                                l  r
                  to parent node   u
                                   space
                  cycle xref /
                    / links     tab
                  search by name   m
                     everyday use-tips for navig.   p74
                Apropos for the info manuals (=will crawl all manual-pages)  p254
                                  a-x info-apropos
              ---- p75, p80
                c-h F       doc for cmd (=a function)
                 c-h m
                c-h a -word$
                           regex-search for cmd (=not function) for words
                Find Info. ab. Version Control **(*)
                               c-h i + emacs(=hyp.link), c-s 'version control' / c-h a ^vc-
                 c-h v     variable
                c-h k / c key  (***)
                 c-h d      search doc-string
                 c-h f vc-dir
                --
                c-h C Ent   coding system in curr. buffer  p89
                c-h s


              ---- p80  some basic commands
                c-x b       switch buffer
                c-x k
                c-x o       (other buffer)
                c-x c-b     list buffers
                 c-x c-c
                c-x c-w     save as *
                --
               go to first non-blank
                 char. of line **       a-m   p113
               a-g a-g 50            go to line 50
               ---- p251  insert literal character
               insert literal esc char.   c-q Esc
               insert line feed (=not CR)   c-q c-j
               ----
               a-z c  (=zap to char. 'c')
              ---- p206
                character-info (ab. char. at point)   c-u c-x =
               ----
               move / recenter point (=to top / mid / bot) **   p177
                  a-r
                  c-l
                    ca-l
              ---- p56
                a-0  c-0  ca-0   c_-  a_-  ca_-
                kill prev. word from point   a_- a_d
                -- p183
                kill to beg. of line   a-0 c-k
                 Kill S-Express.   ca-k
                copy   a-w
                Append-Kill(!!) (+use for
                  refactoring)   ca-w
                Tip: Cut three words
                  to kill ring **(!)   a-d a-d a-d
                            # +can then be pasted
                              as one chunk(!)
              ---- p210
                upcase word bef. point
              ---- p189  transposing
                char.      c-t
                words      a-t
                S-Expr.s *  ca-t
                lines      c-x c-t
                 (+paragraphs / sentences)
                [+Emacs ignores some punct.char.s when word-moving(!!)]

              ---- p140  setting mark + switch/jump back
                c-space
                c-space c-space
                c-x c-x
                 c-u c-space     = setting marks

              ---- p146  mark units (eg. words, paragraphs)
                a-h      next paragr.
                c-x h    whole buffer
                ca-h **  Next Defun (=function)
                a-@ **   Next Word
                ca-space   =NEXT S-EXPRESSION  (or ca-@)
                --
                Tip: Mark Three Words   a-@ a-@ a-@ // a-2 a-@

              
              ---- p93
                completion of buffer-names (=when buffer-switching)
                    = ido/fido  (+Helm, Ivy  etc)     (+c-x o  (??))
                      a-x customize-option Ent ido-mode Ent
                      a-x customize-option Ent ido-enable-flex-matching Ent
                      a-x customize-group ido
                      a-x customize-group icomplete

              ---- p100
                saving + returning to past win.config
                    winner-mode  + c-c left/right

              ---- p101
                Set/Bind Keyboard Shortcut: a-o = c-x o ****
                    (global-set-key (kbd "M-o") 'other-window)

              ---- p105(+), p108
                tab bar mode
                 tab line mode
                a-x customize-option tab-line-tabs-function


              ---- p110
                read manpage for readline ; a-x man Ent readline Ent


              ---- p116
                display line/column numbers *
                    a-x display-line-numbers-mode
                    (etc) (!!(**))
                      column-number-mode
                      line-number-mode

              ---- p115+(?), p196
                word/line wrapping in em. ; 'truncation' / 'fill column/paragraph'
                    a-x toggle-truncate-lines
                    --
                    a-q
                    c-x f 78
                set fill-prefix *(*)
                    c-x .   #text up to point =fill prefix (next time using a-q)
                a-x auto-fill-mode
              ---- p198+
                Comment/Uncomment (line)
                    a-;
                    c-x a-;
                    a-x comment-box    #=around region
                    --
                    a-j ca-j     #new line + comment
                        (+some customization-options)

              ---- p123
                ca-f / ca-b         balanced s-expr. back/forw
                 ca-k
                 ca-n / ca-p        next / prev. balanced s-expr.
                ca-d / ca-u
                ca-u              # to string's opening quote
                a-}
                ca-a / ca-e       # to beg/end of function


              ---- p213
                Count Things
                    a-x count-matches
                    a-x count-words
                    a-x count-words-region  /  a-=
                Del. Duplic. Lines
                    a-x delete-duplicate-lines  (+versions with c-u)
                flush/keep
                    a-x flush-lines
                    a-x keep-lines
              ---- p216
                + blank lines | white-space
                    c-o    insert blank line after point  (or split line)
                    c-x c-o   del. all blank lines after point
                    ca-o   split line after point + keep indentation **(*)
                    join point-line w. line above   a-^
                  Splitting / Joining with Fill Prefixes   ca-o (with fill prefix active)
                    del. all but one space/tab
                      left/right of point   a-space
                    (+a-x whitespace-mode  , whitespace-report  etc)
              ----
              ---- sorting (!!)  p239


              ---- p136  (for files, dired-dirs, man-pages, org-mode,
                                        DocView(=pdf), info man-pages
                          [=saved in file in ~/.emacs.d/]
                Bookmarks: Set / List / Jump to *****
                    c-x r m
                    c-x r l
                    c-x r b

              ---- p138  registers
                store point in register + jump back
                    c-x r space,  c-x r j
                      c-x r s,  c-x r i  #region to reg. + insert content at point


              ---- p149  Isearch (=incremental search)  c-s / c-r
                Recall Last Search     c-s c-s
                 Case Folding       a-x customize-option case-fold-search Ent
                 a-n / a-p
                TAB-COMPLETE STRING AGAINST
                  PREV. ISEARCH-STRING   ca-i  (eg. 'complete-symbol')
                isearch word at point   c-w  #=add word at point to search-string
                                        #+times several
                                         (etc)
                 a-s c    search case sensit.
                 a-s r    regex-mode search
                  + word-mode
                    symbol-mode
                    lax whitesp.matching   a-s space
                    char.folding (**)
                isearch forw. for symbol at point (*)    a-s .


              ---- p158  Print/Edit lines (in buf.) matching regex (****(*))
                a-s o      occur mode   # a-x occur
                activate occur on curr.
                    search-string (=inside isearch)    a-s o  (**(*))
                (+set context-lines)
                Jump to Match    Ent
                go to next / prev. match    a-n / a-p
                Revert occur.buffer / Refresh search-results     g
                Switch occur.buff. to Edit Mode **(*)   e
                --
                To next/prev. occur-match / error
                  after a-x compile **(*)    a-g a-n // a-g a-p
                search sever. buf.s with multi-occur (eg. '\.py$' in all py-buffers) **
                    a-x multi-occur-in-matching-buffers    p161
                    a-x multi-occur
                Tip Using multi-occur (**)   e (for across multip. buf.s)
                                               + combine w. keyb.macros / search/replace
                                               + c-c c-c  (=commit)

              ---- p162
                search functions, class def.s etc (=when programming)
                    Imenu    a-x imenu
                (+Tip: bind to a-i  (global-set-key (kbd "M-i") 'imenu) )
                --  Tip: Use Helm for Completion **
                        =uses powerful 'filter-when-typing' + uses pow.ful fuzzy-searching **

              ---- p165  Helm
                Helm-Completions Prefix **    c-x c ....
                  c-h a ^Helm-              c-x c c-h
                MOST IMPORTANT HELM-COMMANDS  p167
                  primary action     Ent  #=jump to open +display candidate
                  second.action     c-e
                  tert.action       c-j
                  switch to action-selector(?)   tab
                  next/prev. candidate    c-n / c-p
                    to end/beg. complet.list   a-< / sa-<
                 --
                  Resume last Helm command    c-x c b   p168
                  c-x c /
                  Complete 'a-x apropos'-results
                       c-x c a
                    (+MANY (MANY) MORE (**) ....)

              ---- p170  Helm Search vs Ido Search
                Helm
                    in-depth search wh. not knowing what to look for
                    + if requires addit. context-awareness of similar matches
                Ido
                    seamless finding of files/dirs through the mini-buffer
                   eg. for finding widgets.c     c-x b wc

              ---- p170  Ido/Fido 2(!!)
                set ido mode (=in init)
                    (ido-mode 1)
                    (setq ido-everywhere t)
                    (setq ido-enable-flex-matching t)
                Ido shortcuts (etc)
                    c-s / c-r
                  tab
                  Ent
                  c-d        open a-x dired-buf in curr. buf
                   //  go to root dir
                   ~/  go to home dir

              ---- p173  using grep (from inside emacs)
                a-x grep  /  a-x grep-find
                lgrep  /  rgrep  /  rzgrep    #+highlighting
                Recursive grep-search for
                  Symbol point is on ***    a-x rgrep Ent Ent
                (find + don't search cert. directories)
                jump to next/prev. match
                  in emacs grep **    a-g a-n / a-g a-p
                        (+using grep-mode (=major mode))

              
              ---- p201   Regex Search & Replace (**!)
                ca-%
                  (+ space  .  !     ^  u U )
                ca-% hello  (+Case Folding (**))  p202
                give string for search & replace    a-%


              ---- KEYBOARD MACROS ******* p221
                record / stop recording    c-x (  /  c-x )
                                           f3
                play last macro    c-x e
                                   f4
                stop rec. macro    c-g
                stop rec. macro + play it   f4
                --
                Append-Record Macro (=to last)   c-u f3
                Play sec. to Last Macro   c-u f4
                  set counter + rec. macro  c-3 f3
                play last macro 5 times   c-5 f4
                --
                Run Macro Until Done / Fails on Error   c-0 f4
                 group of advanced cmds for macros **   the c-x c-k map
                                                   (the map is called 'kmacro')
                        *****  p223,p224
                   (Query for user input--actions)
                cycle macro ring
                name last macro
                bind last macro to a key
                Edit Last Macro    c-x c-k e   p226

                Edit Lossage (=last 300 key-strokes)   c-x c-k l   p226
                INSERT MACRO (INTO BUFFER) AS ELISP   a-x insert-kbd-macro
                Save Macro to a File (=the init-file)
                  - name macro
                  - open init
                  - insert macro as lisp
               create macro (+see what each entry in
                the macro string corresponds to (as a command))  a-x kmacro-edit-lossage
              TIP: EXTRACT MACRO FROM LAST 300 ACTIONS
                - print the lossage buffer (c-x c-k l)
                - edit (as though it were text)
                - commit the changes  c-c c-c

              ---- Abbrev. Expansion  (=Hippie Expand (+snip, hip, abbrev))
                c-x a:
                  .
                a-\  ca-\

              ---- electric-indent-mode / 'interactive indentation mode'

              ---- Aligning  p242

              ---- aspell / ispell
              ---- Flycheck (+syntax check(!))

              ---- Xref (!)  p264
                a-.   find def. at point
                a-,   'pop marker and return'
                  +Dumb Jump / RipGrep
                xref + dired: search/search+replace xrefs via dired **   A / Q
                  .
                (highlight + updating)

              ---- Filter with Terminal (!!)
                a-!
                a-&    # filter asynchronously
                        ((+may not be good for long-running processes
                          =use a-x compile instead))
                --
                a-|    # filter + reinsert region(!!)

              ---- Compile / Recompile (**)  p294
                a-x compile
                a-x recompile
                  a-g a-n / a-g a-p
                re-run last command  g  ***
                compile in the current project   c-x p c

              ---- emacs shells (=x3)  p295

              ---- VERSION CONTROL (**(!))  p253
                - c-h i
                - go to 'emacs' hyperlink
                - c-s (=search) + 'version' / 'version control'  (+c-s for next)
                  --
                - find 'vc-' via docstring  //  c-h a ^vc- (=list all instances)
                -- -- p257
                  c-x v +    vc-update
                  c-x v =    vc-diff
                  c-x v D    vc-root-diff
                  c-x v G    vc-ignore
                  c-x v I    vc-log-incoming
                  c-x v L    vc-print-root-log
                  c-x v O    vc-log-outgoing
                  c-x v a    vc-update-change-log
                  c-x v b    vc-switch-backend
              ---- Magit  p304 , p261,p262
              ---- Project Management (projectile, +newer Cedet(em 27+) (=based fr. version control)
              ---- DokView
              ---- nov  (=epub reader emacs)
                https://depp.brause.cc/nov.el/
              ---- presentation (mode)
                https://www.emacswiki.org/emacs/EmacsPresentation
                  https://www.youtube.com/watch?v=vz9aLmxYJB0
                    https://www.youtube.com/watch?v=1-dUkyn_fZA
              ---- Eww  p280
                a-x eww
                create new eww-buffer (if does not alr. exist)  c-u a-x eww
                a-x browse-url
                --
                +Browsing Keys (****(!))  p281
              ---- Dired (+ cross dir(ectories))  p282
                a-x dired
                c-d (=from ido wh. browsing when browsing w. c-x c-f etc)
                  customize dired-listing-switches
                up one dir   ^
                n/p  c-n / c-p
                mark/unmark active  m/u
                unmark ev.thing   U
                 flag for deletion   d
                [sign by marked files  '*']
                  Exploring more   explore like before // M.Petersons 'Discover' package
                -- dired operations (=on marked or active objects)
                  copy         C
                  move/rename  R
                  chown        O
                  chgrp        G
                  chmod(=perm.s)  M
                  delete marked   D
                  delete flagged  x
                  visit files (=requires dired-x)  F | c-u F (p289)
                  compress marked to a (zip) file        c
                -- more dired commands (=not marked files)
                  refresh dired buffer  g
                  create sub-dir        +
                  toggle sorting by name/date   s
                  jump to prev/next dir         < // >
                  jump to file                j
                  --
                     #'g is the universal refresh key'
                -- search/replace in dired-files
                  begin isearch       a-s a c-s
                  xref search|replace regex(!!)        A||Q
                  synchr./asynchr. shell command ***   !/&
                -- 'working across directories / collapse subdir.s'
                  i  $
                    +tip: find_wrapper-commands (replacing find + xargs)  p291-
                     + find-lisp-find-dired
              ---- Tramp  p278(??)
                bookmark remote files   c-x r m



              ---- Hydra

            }}}

Emacs (quicklists super-condensed**** 2021-03  (Mastering, +extending(='glickstein',)  ('+thoughtbot-elisp'(???)) ) {{{
            ~/legacy/gdrive-cleanlast-2021/transcribe_phonenotes_Emacs-Fmoviebox-AlltodoscriptNamingscheme/emacs1/curr/
                ~/gdrive/Doks/Emacs1.pdf
            Marked (=Blue) Headers/Topics (***(!!)) -- -- -- -- -- {{{
                  c-u 0  a-0  c-0  ca-0  (+neg.)
                  CUSTOMIZE   +apply.save
                  Eval. Elisp **  (+ielm (!!))
                  Repos: =elpa, melpa  **
                  more help|docs (**)  ++(=later)
                  * Open File, Save, Buf.s (+switch), close
                  * Save As, Save All, c-x b, c-x c-b
                  CUSTOMIZE KEYS !!! (=bind)
                  a-x python-mode
                  (restructured text-mode (!!))
                  sexpr			ca-f / b	ca-d / u   ca-k (??)
                  c-u c-space  ;  jump back to mark  (+more =moves back in mark-ring)
                  Bookmark tips (*) + !
                  (registers (=point, numbers, text)
                  [DIFFERENT RINGS]
                  sexpr			ca-space
                  Isearch	  c-s / c-r
                  Occur (=print/edit lines matching regex) **
                  (e **!  + c-c c-c  =commit)
                  multi buf.s + multi-occur(?)(=for multi-buf)
                  Helm **
                  imenu  (+search functions, class-def.s etc when programming(??)  + a-i (=bind))
                  Helm <--> Ido:
                  grep (**)  find w. em.grep  ='neg. dir-matches' ('*' (=??))
                  a-r (goal column(?))  c-l  ca-l
                  55 a-g a-g  (=line(!))
                  =for refactoring etc (=picking fr. diff. places etc) (**!)
                  a-d, a-d osv  **!  [+cases for building vs killing]
                  Transpose
                  line wrap = 'fill'
                  comment	  a-;
                  S & Repl.
                  Regex:  \|  \( |)  etc
                  Upcase etc
                  Count Matches
                  Delete duplic. lines (+only adjac.)  etc
                  Remove / Keep Flush
                  ----
                  insert blank line ; c-o
                  c-x c-o
                  ca-o
                  a-^
                  Split/Join (+Fill Prefixes)(*)
                  m-space   Cycle-spacing  (wh.sp. mode  wh.sp.report)
                  Macros (+why are macros so good) **
                  Abbreviations:
                  indent
                  Sort
                  zapping   a-z
                  aspell, ispell
                  flyspell mode (*)
                  Version Control ; c-x v (+c-h)
                  (Projectile +) Cedet  *!
                  Xref   a-.
                  tip: list lines matching patt = can be narrowed further w. occur *
                  Highlighting
                  Bookmarking remote Files ***
                  Dired **(!)
                  (Em.s find-wrapper cmd.s
                  Call shell cmd     a-!
                  a-x compile
                  Magit **    p304
                  LSP mode / EGlot

                }}}

                extended topics-list (=including Blue Headers) -- -- --

                      evince -p 1 ~/gdrive/Doks/Emacs1.pdf &

                    dumb jump
                    rip
                    svg, xpm etc (??=im)
                    [perh. modeline etc]
                    init.el (xdg)  [a-x + customize]
                    'the extended cmd-functionality' (+interactive)
                      region
                      'font-locking', 'faces',   'font-lock faces'
                      -q
                        ((client-server))
                      'key-sequence', 'complete key', 'prefix key'
                      'key-maps'
                    -----
                    c-x #		f10 (??)
                      'the c-modifyer'
                      'truncation' (+filling / wrapping(??))
                    ----
                    a_- a-d  ;  upcase last word
                  c-u 0  a-0  c-0  ca-0  (+neg.)
                    ----
                     (eg. c-x 8) c-h  ****
                    info-apropos
                    INFO NAVIG.-CMD.S * ( ']' etc)
                    (INFO AB. VERSION CONTROL)
                    [ a-x apropos Ent. hook
                    Hippie Expand
                  CUSTOMIZE   +apply.save
                    [groups = packages]
                    +"sub-commands"(*!)
                    a-x customize-themes
                    customize-option Ent global-....
                    customize-group Ent display-line-numbers
                      [[set Ido mode]]
                      set FIDO (etc) via Customize
                        FIDO, Helm, ivy, Selectrum, icicles,
                          Icomplete
                    +extra compl. options
                  Eval. Elisp **  (+ielm (!!))
                    (=  ca-x  c-x c-e  etc)
                    a-:  c-u c-x c-e // c-j		#glickstein
                    + Esc-Tab  (=completion ??)
                            lisp interact. mode
                  Repos: =elpa, melpa  **
                    packages  = : list, install, (refresh)
                     [install Helm]
                    ----
                    (eg. c-x 8) c-h  ****
                  more help|docs (**)  ++(=later)
                    c-h F
                    c-h a  word-regex ^helm-
                            (=package name as prefix)
                    manual info  Describe
                    [c-h b   =list key-bindings
                         m
                         f
                         v
                          d  (=apropos-search in docstrings)
                                ( +'*'  =  [  )
                     c-h k / c
                    +Check maj.modes menus (*)
                     c-h i m Emacs (++)
                     c-u a-x apropos  (??  =glickst.)
                     c-h s  =syntax table (for maj.mode etc)

                    local / regional / global  movements
                  * Open File, Save, Buf.s (+switch), close
                            ('progr.loader directives')
                          file local var.s
                  * Save As, Save All, c-x b, c-x c-b
                    'transient buffers'

                      evince -p 2 ~/gdrive/Doks/Emacs1.pdf &

                  CUSTOMIZE KEYS !!! (=bind)
                    (MAPPING KEYS--SYNTAX) +Glickst. **
                     +Glickstein **
                    Check key for binding  -describe key  (**)

                    WinCmds     tab-bar
                    - tab-line
                    - Only cycling w. same maj.mode **(!!)

                    read manpage
                    ----
                    "10 c-n"
                    a-m ......
                      (line num.)
                          ----
                    a-f / a-b  (+concerning m.(inor?/ajor) modes)
                  a-x python-mode
                    subword-mode // superword-mode
                            (glasses-mode)
                  (restructured text-mode (!!))
                    a-x text-mode
                    ----
                    ----
                        (objects + movement)
                  sexpr			ca-f / b	ca-d / u   ca-k (??)
                    defun
                    strings			ca-n / p
                    sentence	a-a / e
                    funct.		ca-a / e
                    (page)
                    paragraph
                    buf
                    word
                  c-u c-space  ;  jump back to mark  (+more =moves back in mark-ring)
                    jump betw. two marks  ;  c-x c-x

                  Bookmark tips (*) + !
                    + the bookmark file
                    (bookmark-default-file)  + custom handlers
                      =files, dirs, manual (**)
                    c-x r m   (=set(??) bookmark)
                          r
                          b

                  (registers (=point, numbers, text)
                        c-x r
                    c-x r space  c-x r j

                  [DIFFERENT RINGS]
                    (=mark ring, global mark ring, (etc))
                  
                    (objects: set mark for | mark)
                  sexpr			ca-space
                    defun		(or  a-@)
                    strings
                    sentence
                    funct.
                    (page)		c-x c-p
                    paragraph	a-h
                    buf			c-x h
                    word		a-@
                    --
                    a-@, a-@ osv *** / (a-2 a-@)


                      evince -p 3 ~/gdrive/Doks/Emacs1.pdf &


                  Isearch	  c-s / c-r
                    " regex     ca-s / ca-r
                    recall last search  ;  c-s c-s
                      change direction
                      start fr. beg. (again)
                      Case insens. + Case Folding
                    tab-complete against prev. search  ;  ca-i **(!!)
                    a-n / a-p
                    c-w *  ca-y  c-s c-e  *
                      c-y
                    add sever. words  ;  c-w, c-w, ....  (**)
                    modes: a-s   c r w - space ' .
                  Occur (=print/edit lines matching regex) **
                    [a-x occur // a-s o  (+inside isearch) ]
                      lmb / ent
                      a-n / p
                      < / >
                        g [=refresh buffer *]
                    next/prev. match in occur / after a-x compile  ;  a-g  a-n / a-p
                    context-lines
                        -- --
                  (e **!  + c-c c-c  =commit)
                  multi buf.s + multi-occur(?)(=for multi-buf)
                    *** keyb. macros // search & replace
                  Helm **
                    find Helm-cmds w. apropos ; c-h a ^helm-
                    c-x c  + c-h
                     Helm <--> imenu ; fuzzy + filter directly <--> tab-style completion (!)
                  imenu  (+search functions, class-def.s etc when programming(??)  + a-i (=bind))
                    helm-apropos (**)
                    MOST IMPORTANT HELM COMMANDS
                    Ent  c-e  c-j  **   tab (etc)
                    c-x c b (resume last)
                    Complete a-x apropos w. Helm ; c-x c a  c-x c m
                     c-x c i
                           r
                     c-x c h r			a-x info
                             a-x
                             a-s o		Occur (*(*))
                             c-c g		google suggest
                  Helm <--> Ido:
                     - indepth (+more context)  - not knowing exactly wh. looking for  <-->  - seamless finding of files|dirs through minibuffer (eg. c-x b wc (=for 'widgets.c')
                    (Set Ido mode)


                      evince -p 4 ~/gdrive/Doks/Emacs1.pdf &


                    +=Ido:  c-s/r  tab  c-d *   '//' '~/'  (+extra info)

                  grep (**)  find w. em.grep  ='neg. dir-matches' ('*' (=??))
                    a-g  a-n / a-p
                    grep-mode (**)

                  a-r (goal column(?))  c-l  ca-l
                  55 a-g a-g  (=line(!))
                    ((a-g tab))
                    a-g c


                     a-d  (c-bs)
                     a-0 c-k
                      a-k
                      ca-k
                     cs-bs  #kill current line
                    --
                    c-w   kill active region
                    a-w
                    ca-w
                  =for refactoring etc (=picking fr. diff. places etc) (**!)
                    a-y
                    --
                  a-d, a-d osv  **!  [+cases for building vs killing]
                    ----
                  Transpose
                    char
                    word		a-t
                      + p192(??) =For Source Code (!!)
                    sexpr		ca-t
                    lines		c-x c-t
                    paragr.
                    sentence
                  line wrap = 'fill'
                    a-q
                      c-x f
                    c-u a-q
                     c-x .   #fill-prefix *
                    empty line + c-x ..
                    autofill-mode
                    ----
                  comment	  a-;
                    c-x a-;
                    comment-box
                    a-j ca-j
                     +Options (=customize)
                    ----
                  S & Repl.
                    ca-%    #+can be run fr. w.in isearch
                    +space (??)
                     .
                     ,
                     Ent
                     !			replace all
                     ^			back to prev. match
                     u / U		undo last / all(!) replaces
                    Replace 'Hello' 'HEllo' 'hello'  etc
                     (=uses case folding *) !!
                  Regex:  \|  \( |)  etc
                    [0-9]  #no \d or [:digit:]
                     \<
                    \_<  beg. of Symbol (**)
                    \scode \Scode  (??)



                      evince -p 5 ~/gdrive/Doks/Emacs1.pdf &



                    regex SYNTAX CLASSES **!
                    wh.sp.
                    word constituents
                    symbol constituents
                    punct. char.s
                    brackets
                    string char.s
                    comments
                    ----
                    show char. info (=blue highl.)  c-u c-x =
                    \#1
                    \#  increm. num.
                    \?  prompt user
                    \&
                     \,(form ...)   eg. (upcase)  (**!)
                    tip: Use keyb.macros most of the time (**)
                    ----
                    \`  \´		glickstein
                    \=
                    \b
                    ----
                  Upcase etc
                    c-x c-u
                    a-u
                    UPCASE LAST WORD *
                    ---
                      Unicode  a-x describe  categories (??)
                    ----
                  Count Matches
                  Delete duplic. lines (+only adjac.)  etc
                  Remove / Keep Flush
                  ----
                  insert blank line ; c-o
                  c-x c-o
                  ca-o
                  a-^
                  Split/Join (+Fill Prefixes)(*)
                  m-space   Cycle-spacing  (wh.sp. mode  wh.sp.report)


                  Macros (+why are macros so good) **
                    c-x (    f3 | f4
                        +num.
                    Append to last
                        play sec. to last
                    play 3 times
                    Run until fails
                     c-x c-k (=map)(!!)
                    Counters
                     Query for user input
                    Recursive Editing
                     ----
                    Cycle  Name  Bind
                      Edit last Macro ** ; c-x c-k e
                    Edit Last 300 Keystrokes (='lossage')
                    [INSERT MACROS AS ELISP **!!]
                    Save Macro to init-file **!!
                    [- Create macro (from lossage?) +
                     Inspect the String's Corresp. Commands (!!)

                    EXTRACT MACRO FR. LAST 300 ACTIONS (=if forgot to record) *



                      evince -p 6 ~/gdrive/Doks/Emacs1.pdf &



                  Abbreviations:
                    Hippie(!!) expand   a-/     , skeletons, 
                    YASnippet, Autoinsert
                     --
                    electric-indent-mode
                    ---
                  indent
                    indent-tabs-mode
                     tab (etc)
                    num + indent
                    c-x tab  =interactive indent-mode
                    ---
                  Sort
                    sort-regexp-fields
                    ----
                    Aligning etc (=based on regex) 'sections'
                    tip: Align py on '='
                      (=em.s autom. alignm. tools)
                    Regex Align Complex Mode (**)
                    ----
                  zapping   a-z
                    ----
                  aspell, ispell
                    a-$   word at point
                  flyspell mode (*)
                        +for linting (*!(!))
                     for Latex etc (=customize)
                     +custom dict.s
                    --
                    c-q tab  =literal tab
                    c-q c-j
                  Version Control ; c-x v (+c-h)
                    vc-update (etc)
                      c-h f vc-dir (??)
                  (Projectile +) Cedet  *!
                    c-x p
                  Xref   a-.
                    pop marker   a-,
                    classic tags files (=for larger proj.s)
                    dumb-jump
                    regex  a-? / ca-.   + searchres. cmds *
                    [jump to def. for symb. under point
                                dumb-jump + ripgrep (??)
                    Xref + Dired  + S&R
                      =A / Q
                    --
                    a-s o  (+flush/keep)
                    ----
                  tip: list lines matching patt = can be narrowed further w. occur *
                  Highlighting
                    ((autorevert-mode))



                      evince -p 7 ~/gdrive/Doks/Emacs1.pdf &



                    image-dired * **
                    image-mode
                    ----
                    DocView  (+pdf-tools | org-pdftools) *   +options
                      =pdf, Msoffice etc
                      Reading List  - links format
                      org-store link
                      - store clip link
                      annot.s (**)
                      - search
                      --
                    Epub nov
                    ----
                    Presentation-mode
                    ----
                    tramp  (+autoparses ssh)
                      ((invoke fr. root))
                      helm-tramp
                      rgrep
                      multi-hops
                    +sudo multihop
                    ----
                  Bookmarking remote Files ***
                    ----
                    Browser   EWW
                      a-x eww
                      a-x browse-url
                      Browsing Keys   = b.m
                        hist
                        copy link
                    ----
                  Dired **(!)
                    ^			m / u  U d
                    ('*')		M.Petersons 'Discover-Package'
                      +Extras(!)
                    C	M
                    R	D
                    O	x(!!)
                    G		visit
                    (+more for not(!) marked)
                    +(require 'dired-x)
                    ----
                    S&R in Dired-Files **
                    ----
                    collapse subdirs etc
                    ----
                  (Em.s find-wrapper cmd.s
                    =replace find + xargs  (find-lisp-find-dired)
                    ----
                  Call shell cmd     a-!
                    -- " --	 +insert outp.    c-u a-!
                     --
                    -- " --	 asynchr. + print    a-&    #or a-x compile
                    -- " " " --    + insert    c-u a-&

                    Pipe Region to Shell cmd *    a-|
                    -- " --	 +replace region    c-u a-|
                    -----
                  a-x compile
                    // recompile
                    - rerun last cmd
                    - compile in the curr. proj. (**)



                      evince -p 8 ~/gdrive/Doks/Emacs1.pdf &



                    shell
                    eshell
                    ansi-term
                     proced  + readline  (etc.)
                    ----
                  Magit **    p304
                    ----
                    multi cursors  (**)
                  LSP mode / EGlot
                    ----
                    Build popup UI:s ; Hydra
                    ----
                    - +links to some blogs and resources
                    ======
                        Glickstein
                    Define (+bind?) 'other-window-backward'

                    parametrizing interactive (p, b,    optional
                    ----
                    nil (/t)   #+more
                    if
                    (some prop(ertie?)s of nil)

                    CONDENSING CODE
                    or
                    common use of if
                    and
                     when

                    defalias
                     hook * (=like aucmds(?))
                    predicates
                    progn
                     lambda f.s
                    local vars = let
                    yes-or-nop
                     format
                     Advice code =code attached to a lisp function
                    
                     (+macros)
                    null <--> not (=one is an alias)
                    defvar ((=shared var.s))
                     eq
                    "read inwards"
                    Symbols (+put/get)
                    (set-marker)
                     while

                    --
                    "return last expr."    &rest
                    defgroup
                    dufcustom
                    cons|setq
                    load-file
                    load-library
                    autoload
                    require
                    provide
                    inferring

                    --
                    a-x byte-compile
                    eval after load
                    eval
                     ---
                     lists
                    cons
                    reverse
                    +Useful Functions
                    setcar|setcdr
                    "CAN BUILD ANY(!!) STRUCTS W. LISTS!"


                    thoughtbot 'getting started w. elisp'
                    builtin vars
                    message   (=like echo and printf (**))
                    ielm | eshell
                    insert
                     (append)
                    format
                    defun
                     let*
                    defun
                     cond (=like case)
                    ----
                    fset
                    mapcar
                    reduce
                    local-set-key
                    add-hook
                     Help *!

                }}}

