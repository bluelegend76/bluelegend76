set foldmethod=indent foldlevel=0
vim:fdm=indent:fdl=0:
___zzzz

___basicoperations
___DataStructs
            files.legacy
            ~/dropbox-legacy/databas_programmeringsspråk.txt
            ~/dropbox-legacy/databasen_programmeringsspråk.txt

Reflect over the Db-list:
grep -E '(_c|_LANG_)$' % | sed '/·/d' | sed 's/  *_LANG_//' | sed 's/  *_c//' | gvim -
grep -E '(_c|_py_)$' % | sed '/·/d' | sed 's/  *_py_//' | sed 's/  *_c//' | gvim -
grep -E '(_c|_py_)$' \
  PROGRLANG.DB.ref.txt \
  | sed '/·/d' \
  | sed 's/  *_py_//' \
  | sed 's/  *_c//' \
  | gvim -

langs.codes [=filytype fileendings]
    _sh_
    _pshell_  .ps1
    _bas_, _vb_
    _vim_
    _py_
    _php_
    _js_
    _lua_
      .re   reasonml
    _cl_, _lsp_  _lisp_
    _scm_
    _el_
    _c_
    _cpp_
    _d_
    _java_
    _kt_  kts=script
    _clj_
    _cs_
    _fs_
    _hs_  lhs       haskell
    _v_ _go_
     _erl_
     _ny_           nyquist
    _ex_            elixir
    _dart_
    _fst_           fstar
    _sml_   .sml
     ocaml  .ml
    puppet  .pp
    --
    _asm_
    _fth_           forth
    _pl_            prolog
    _m_             mercury
    _rs_            rust
     _ps_
    _sd_            solidity
    _r_
<[langs.pick/paste-list]>
    category                    _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _zig_
        ·       _cpp_
        ·       _d_
        ·       _java_
        .       _rs_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _pl_
        ·       _m_  ??
        ·       _fth_
        ·       _ps_
        ·       _r_
_swift_

Pick (mostly Dlang)
        Associative Arrays
        f F L U UL
        write() writeln() writef() writefln()
         print() (????)
        readf()
        readln() + strip()
        stderr.writefln("ERROR: %s is not valid!", number);)
        std.getopt()  (+ args.d(??))
        -checkaction=content
        std.array.replicate()
        a[]  (=means all(!) elements)
         q"string"
         r"string" (**)
        --
        .properties
        readf() + ' '-flush
          Logic +short circuit
        power  ^^ (dup, idup etc)
        core.checkedint.adds()
          .nan indicates ___
        std.math + isNaN()
        int[5] Arr;
            'scalar variables'
        (implicit array element concatenation when printing)  +  ~ ~=
        Arrays + Lambda  =>
        std.algorithm (=sort, reverse )
          static foreach (!)
        std.string.icmp()
        std.format.formattedRead()
          std.array/algorithm/range
          +Structs
        indexOf() (??)
        file.eof()
        --------
        std.process
          executeShell()
        std.process.environment
        std.file.exists()
          static assert + enum
        unittest {  (+read to understand intended use of a function)
        std.stdio: File
        --------
        ========  '20 Smålapparna, nr 1'
        --------
        -inline
        std.datetime.stopwatch
        -O
        pragma(mangle)
        'recursive aliases'  ('two aliases')
          +'even fundamental types like int can have aliases'
        with  = 'removing repeated references to an object or symbol'(!!)
            (creating a temporary object)
         +'with case sections for removing repeated references to eg. an enum type'
        alias MEMBER this='enables automatic type conversions (also known as implicit type conversions) =of user-defined types
        --
        foreach loops with ref pointer vars
        null pointers  ='not active'/not pointing to anything
        --------
        ========  '20 Smålapparna, nr 2'
        --------
        
        --------
        Java Methods
More categories
    enums
Todo: Add
    repr  _py_  (=return a printable representation of an object)

'syntax-families'
    def ... do ... end
        bash, lua, elixir

teterms                         _c
    .
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        chunk         _lua_
         block(??)    _lua_
         sets, bags   _lua_
         do-blocks    _lua_
        ·       _lisp_
        form                                          _scm_
        thunk (=void-function w. just side-effects)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        Polymorphism =functions can operate on vals of diff. types   _sml_
        binding ='variable definition'                               _sml_
                                                                     _sml_
        ·       _go_
        ·       _v_
        'atoms'   :foo                            _ex_
          ='a constant whose name is its value'   _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
Tools, Compilation (etc)        _c
    .
    package manager             _c
        apt brew                _sh_
        ·                       _bas_
        ·                       _vb_
        pack vundle             _vim_
        pip                     _py_
        packagist               _php_
        npm(++?)                _js_
        luarocks                _lua_
        quicklisp               _lisp_
        guild (=guile)  raco (=racket/mzscheme)   _scm_
             https://github.com/ijp/guildhall  _scm_
             https://pkgs.racket-lang.org/     _scm_
        use-package(??)         _el_
        conan  vcpk             _c_
        conan  vcpk             _cpp_
        dub(??)                 _d_
        gradle maven  ant       _java_
        (abstract class PackageManager ??)   _kt_
        lein(ingen) capra       _clj_
        nuget                   _cs_
        ·                       _fs_
        cabal                   _hs_
        smlpkg smackage  mlkit  _sml_
        ·                       _sml_
        opam                    _ocaml_
        ·                       _go_
        ·                       _v_
        hex                     _ex_
        pub                     _dart_
        ·                       _ny_
        ·                       _asm_
        ·                       _fth_
        cargo                   _rs_
        ·                       _ps_
        posit mran(?)           _r_
        tlmgr                   _tex_  texlive
    central repo                _c
        maven central           _java_
    Compile, Run                _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        luac -o f1 f2    _lua_
        ·       _lisp_
        gsc (gambit), guile     _scm_
        ·       _el_
        gcc     _c_
        g++     _cpp_
        dmd, gdc, ldc    _d_
        c: javac greeting.java (=w. greeting.class)   _java_
        r: java greeting                              _java_
        ·       _kt_
        ·       _clj_
        c: mcs, csc       (=ubuntu)    _cs_
        r: mono file.exe  (=ubuntu)    _cs_
        dotnet fsi   _fs_
        ·       _hs_
        exportFn : string * (string list * string list -> unit) -> unit  _sml_
        ·       _go_
        v       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _pl_
        mmc     _m_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Project, Build              _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        dub     _d_
        ·       _java_
        ·       _kt_
        lein    _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _sml_
        dune    _ocaml_  (?? =or ml)
        ·       _go_
        ·       _v_
        mix     _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Repl                        _c
        ·                   _sh_
        ·                   _bas_
        ·                   _vb_
        ·                   _vim_
        ipython bpython     _py_
        ·                   _php_
        ·                   _js_
         = 3 + 5    #=for lua before 5.3    _lua_
         = a        #      --"--            _lua_
        sbcl, slime(=emacs)                 _lisp_
        guile, gsi          _scm_
        ·                   _el_
        ·                   _c_
        ·                   _cpp_
        ·                   _d_
        jshell              _java_
        ·                   _kt_
        clj                 _clj_
        cs (=ubuntu)        _cs_
        ·                   _fs_
        ghci                _hs_
        sml                 _sml_
        utop                _ocaml_
        ·                   _go_
        ·                   _v_
        iex                 _ex_
        ·                   _dart_
        ·                   _ny_
        ·                   _asm_
        ·                   _fth_
        ·                   _ps_
        ·                   _r_
    Visualization Tools
    --- Doxygen, Vizgraph, Fern
basic properties                _c
    .
    Misc / Notes                _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        Function parameters are immutable                                 _kt_
         (=parameters cannot be reassigned from within the function body) _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    special file endings        _c
        ·       _sh_
          .ps1    _pshell_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        kts (=script)  _kt_
        ·       _clj_
        ·       _cs_
        fsx (=script)  _fs_
        ·       _hs_
        .sml       _sml_
          .ml     _ocaml
        ·       _go_
        ·       _v_
        .ex .exs       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _ps_
        ·       _r_
    typing (static / dynamic)   _c
        ·        _sh_
        ·        _bas_
        ·        _vb_
        ·        _vim_
        dynamic (+typehints)  _py_
        ·        _php_
        ·        _js_
        ·        _lua_
        ·        _lisp_
        ·        _scm_
        ·        _el_
        static   _c_
        static   _cpp_
        static   _d_
        static   _java_
        static   _kt_
        ·        _clj_
        ·        _cs_
        ·        _fs_
        ·        _hs_
        ·        _sml_
        ·        _go_
        ·        _v_
        ·        _ex_
        ·        _dart_
        ·        _ny_
        ·        _asm_
        ·        _fth_
        ·        _ps_
        ·        _r_
    type inference              _c
                _sh_
                _bas_
                _vb_
                _vim_
                _py_
                _php_
                _js_
                _lua_
                _lisp_
                _scm_
                _el_
                _c_
        y(11+)  _cpp_
        y       _d_
                _java_
        y       _kt_
                _clj_
                _cs_
                _fs_
                _hs_
                _sml_
                _go_
                _v_
                _ex_
                _dart_
                _ny_
                _asm_
                _fth_
                _ps_
                _r_
    white-space insens?         _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        y       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        Y       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    case insens?                _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        N       _py_
        ·       _php_
        ·       _js_
        N       _lua_
        Y       _lisp_
        Y       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        N       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    casing (=standard/preferred)  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        snake_case    _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        snake_case   _cpp_
        camelCase    _d_
        ·       _java_
        camelCase    _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    strings immutable?          _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        Yes(ish)     _py_
        ·       _php_
        ·       _js_
        Yes       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        Yes       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    [instruction/statement ending ]      _c
        ; (=1+ instruct.s on same line)  _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ; (=1+ instruct.s on same line)  _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ;       _c_
        ;       _cpp_
        ;       _d_
        ;       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ;       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    'double-line'               _c
        ;       _sh_
        ·       _bas_
        ·       _vb_
        |       _vim_
        ;       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _pl_
        ·       _m_
        ·       _fth_
        ·       _ps_
        ·       _r_
    line continuation           _c
        \       _sh_
        _ // &  _bas_
        ·       _vb_
        line 1      _vim_
          \ line 2  _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _pl_
        ·       _m_
        ·       _fth_
        ·       _ps_
        ·       _r_
    0 / no value  (eg. in a return(??))  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        None    _py_
        ·       _php_
        undefined    _js_
        ·       _lua_
        nil     _lisp_
        ·       _scm_  (=nil?)
        nil     _el_
        void    _c_
        void    _cpp_
        void    _d_
        void    _java_
        Unit (=optional)  null  _kt_
        nil     _clj_
        null    _cs_
        ·       _fs_
        ·       _hs_
        nil (='[]', an empty list)  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        Void / () (=empty tuple)  _swift_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    true/false | truthy/falsey  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        1-9(+non-empty(?))  0   _vim_
        True / False  _py_
        1 / 0         _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        #t / #f  _scm_
        nil / non-nil   _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        true / false    _kt_
        ·               _clj_
        true / false    _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        true / false    _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    not true values (!)         _c
        [=truthy/falsy values]  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        =any value that is not '#f'    _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        all except false/nil // false / nil  _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    default/dummy variable      _c
        $_       _sh_
        https://askubuntu.com/questions/1198935/what-is-the-purpose-of-the-special-parameter-single-underscore-in-environm
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        _       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        it _    _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    strings                     _c
        "string"  'string'      _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        "Hello, world!"  _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    (function) hoisting         _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        y       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        Y       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    --
    closures?
    first class functions?
basic operations                _c
___basicoperations
    .
    --
    print | formatted print      _c
        echo, printf    _sh_
        ·               _bas_
        ·               _vb_
        :echo  :echom  :printf   _vim_
        print()         _py_
        ·               _php_
        ·               _js_
        print("\n")           _lua_
        io.write("\n")        _lua_
        string.format()       _lua_
            #with "%a" etc    _lua_
        ·       _lisp_
        (display       _scm_
        (message       _el_
        ·       _c_
        cout, printf       _cpp_
        write() writeln()                       _d_
        writef() writefln()                     _d_
         writefln("Hex: %x", value)             _d_
         [+see 'flags and format specifiers']   _d_
        System.out.println("Hi there!");    _java_
        println("Hello, world!")                _kt_
         (=single println() prints empty line)  _kt_
        (println "Hello, there!")           _clj_
        Console.WriteLine("Hi there!");     _cs_
        ·       _fs_
        ·       _hs_
        print it;   _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    <newline>                   _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (newline)  _scm_
        ·          _el_
        ·          _c_
        endl       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        newline       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Help | Documentation (inspect object etc:s methods)    _c
        (=ties into reflection??)                          _c
        vim
            :help
        bash
            man
            info
        python
            dir(
            help(
            obj.__doc__
        ·       _sh_
        ·       _bas_
        ·       _vb_
        :h       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ,h compile  ,h all  (guile)     _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Comments                    _c
                _sh_
        ' REM   _bas_
        ·       _vb_
        "       _vim_
        #       _py_
        ·       _php_
        //       _js_
        --       _lua_
        ;       _lisp_
        ;       _scm_
        ;       _el_
        //  /*  */   _c_
        //  /*  */   _cpp_
        //  /*  */   /+  +/   _d_
        //  /*  */   _java_
        //  /*  */   _kt_
        ;       _clj_
        //       _cs_
        ·       _fs_
        ·       _hs_
        (*   *)   _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _pl_
        %       _m_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Get cmd-line argument list **   _c
        $1 (etc)            _sh_
        ·                   _bas_
        ·                   _vb_
        ·                   _vim_
        import sys          _py_
        print(sys.argv)     _py_
        sys.argv[1:]        _py_
        tip: argparse       _py_
        ·                   _php_
        ·                   _js_
        arg[-3] (etc)       _lua_
        ·                   _lisp_
        (command-line) // -e flag  _scm_
        ·                   _el_
        argv[0]             _c_
        args*(??)           _cpp_
        std.getopt          _d_
        ·                   _java_
        ·                   _kt_
        ·                   _clj_
        ·                   _cs_
        ·                   _fs_
        ·                   _hs_
        ·                   _sml_
        ·                   _go_
        ·                   _v_
        ·                   _ex_
        ·                   _dart_
        ·                   _ny_
        ·                   _asm_
        ·                   _fth_
        ·                   _ps_
        ·                   _r_
    define/declare variable     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        var variable;   _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        val count: Int   _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Set variable *              _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        var = 1       _py_
        ·       _php_
        ·       _js_
        var = 1           _lua_
        local var = 1     _lua_
        ·       _lisp_
        (define xyz 9)  global                   _scm_
        (let xyz 9)     local                    _scm_
        (let* xyz 9)    local in sequence        _scm_
        (fluid-let                               _scm_
        (letrec                                  _scm_
        (let name ((                             _scm_
             =like macro expanding to a letrec   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        val count: Int = 2                         _kt_
        val count = 2  (=Int by type inference)    _kt_
        var count = 0  (=can be changed)           _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        val a = 12;                      _sml_
        val (d,e) = (2,"two");  ___idiom _sml_
         let (=??)                       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    change|rebind variable value  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (set! xyz #\c)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Read/Get user input *           _c
        read -p "mess" VAR   _sh_
        ·                    _bas_
        ·                    _vb_
        input()              _vim_
        val = input()                           _py_
        uname = input("Enter username:")        _py_
          uname = raw_input("Enter username:")  _py_
        ·                                       _php_
        ·                                       _js_
        io.read(" ")                            _lua_
         +"a", "l", "L", "n" (etc)              _lua_
        ·                                       _lisp_
        read, readline                          _scm_
        ·                                       _el_
        ·                                       _c_
        cin >> varname;                         _cpp_
        readf() readfln() + strip()             _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        Console.ReadLine()       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    string/val concatenation **     _c
        ·       _sh_
        &       _bas_
        ·       _bas_
        ·       _vb_
        .       _vim_
        +       _py_
        .       _php_
        +       _js_
        ..      _lua_
        ·       _lisp_
        (string-append "E "          _scm_
                       "Pluribus "   _scm_
                       "Unum")       _scm_
        ·       _el_
        ·       _c_
        <<      _cpp_
        ·       _d_
        ·       _java_
        +       _kt_
        (str "s1 " "s2")    _clj_
        str1 + str2         _cs_
        ·       _fs_
        ·       _hs_
        ^       _sml_
        ::  1::[]        'cons operator' =push one item onto a list  _sml_
        @   [4]@[5,6,7]  list concatenation operator                 _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    string variable substitution        _c
        $var    _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        TODO    _py_
        TODO    _php_
        TODO    _js_  #=es6?
        TODO    _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        TODO    _d_
        ????    _java_
        "You have $val new messages"  'string templates'                _kt_
        println("You have ${unreadCount + readCount} total messages.")  _kt_
        ????    _clj_
        ????    _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    increment/decrement         _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        var += 1   _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ++ --   _cpp_
        ++ --   _d_
        ·       _java_
        ++ --   _kt_
        (inc 8) (dec 8)  _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    spread operation  #x to y   _c
        1 .. $      dlangl
        .
    ---- [=may want to move to 'os' --v ] ----
    exit program/script         _c
        exit 1     _sh_
        ·       _bas_
        ·       _vb_
        finish     _vim_
        sys.exit("some error message")  #raises the SystemExit exception    _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        return 1  return 0    _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    run shell|system functions  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        system('echo $RANDOM')   _vim_
        os.system(?? // subprocess.run(   _py_
          https://stackoverflow.com/questions/89228/how-do-i-execute-a-program-or-call-a-system-command   _py_
        ·       _php_
        ·       _js_
        os.execute()  (??)     _lua_
        ·       _lisp_
        (system "ls")   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        executeShell("ls -l");  #std.process   _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        val (a,_) = execute("/usr/bin/who",[]);  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Handling files (**)           _c
        < file     _sh_
        > file     _sh_
         >> file   _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        open(  ***    _py_
        ·       _php_
        ·       _js_
        io.open, io.popen (??)       _lua_
        os.remove, os.rename         _lua_
        ·       _lisp_
        (delete-file    _scm_
        (file-exists?   _scm_
        ·       _el_
        fopen()  create/open file  _c_
            with attributes as “a” or “a+” or “w” or “w+”  _c_
        fscanf() / fgets()  read from file  _c_
        fprintf() / fputs()  write to file  _c_
        fseek() / rewind()  move to loc. in file  _c_
        fclose()  close file  _c_
        ·       _cpp_
        std.stdio.File[   _d_
        java.io.File   _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    stream, io, ports           _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        current-output-port   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
Types                           _c
    .
    Testing/Checking Type               _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        type()  _py_
        ·       _php_
        ·       _js_
        type(x) _lua_
        ·       _lisp_
        (boolean? ), (symbol? ) ((etc))    _scm_
         (pair?  (list?   (null?           _scm_
        (testname-p                        _el_
        ·                                  _c_
        ·                                  _cpp_
        writeln(typeof(var).stringof);     _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    types                       _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        nums(=int, float?), strings    _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        bool, num(+floats?), string    _lua_
        ·       _lisp_
        s(ymbolic) expression   _scm_
         bool, number(integer, rational, real, complex), character, symbol  _scm_
         procedure (ie. cons, display, +                     _scm_
            and other primitive procedures                   _scm_
            (plus note: not the global variable holding it)  _scm_
         port (conduit through which input and output is performed (=usually associated with files and consoles))    _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        string  int  double  float  boolean  char.s  Arrays    _kt_
        "string" 32 501.15 5.0f/F true/false                   _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        int real string bool  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    type inference              _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        var        _c_
        auto       _cpp_
        auto       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _pl_
        ·       _m_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Casting/Conversion
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        tonumber("fff", 16)       _lua_
        tostring()                _lua_
        math.tointeger()          _lua_
        ·       _lisp_
        (char->integer #\d), (integer->char 50)   _scm_
         string->list, vector->list, (string->number "16" 2)      _scm_
                                       =string 16 to num binary   _scm_
        (symbol->string ’symbol)   _scm_
           = "symbol"              _scm_
        (string->symbol "string")  _scm_
           = string                _scm_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        to!string(count)  #std.conv  _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Create custom data-types    _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        structs(??)  _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        datatype 'a  (etc)   _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
notation(bin, oct, hex, sci), special char.s/strings **    _c
    .
    decimal                     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        \100    _lua_
        ·       _lisp_
        #d100    _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    binary                      _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        #b1100  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        0b0110  _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        0b0100 (syntax is builtin to elixir)  _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    oct                         _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        #o       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        octal!576  _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        0o644 (syntax is builtin to elixir)  _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    hex                         _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        \xff    _lua_
        ·       _lisp_
        #xff    _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        0x12 0x9a.bc    _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        0x, 0X   _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        0x1F (syntax is builtin to elixir)  _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    scientific                  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        3.4e5 (=34000) 7.8e-3   _d_
        0xab.deP4   _d_
        2e3 (shorthand for 2.0e3)  _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        1.0e-10   _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    float                       _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        .25 (=0.25)   _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        3.14 (= .14 etc not valid)   _ex_
         [64 bit double precision]   _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    -- spec. characters         _c
    newline, tab, space  (backslash)   _c
        \n \t  \\     _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        \t \n       _lua_
        ·       _lisp_
        #\newline, #\tab, #\space,   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        \n \t \\      _d_
        ·       _java_
        \n \t \\ (??)  _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Unicode                     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        \u{num}   _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        \u19bf \U19bfac12    _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    extras                      _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        \77 \&euro      _d_
        1_000  1_500.5  _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Literal (etc special) Strings **   _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        """string"""  '''string'''     _py_
        ·       _php_
        ·       _js_
        [[string]]     _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        `strings`   ('wysiwyg strings')   _d_
        q".hello."  ('heredoc strings')   _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
char, string                    _c
    .
    char                        _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        #\c       _scm_
        ·       _el_
        ·       _c_
        'a'     _cpp_
        'a'     _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    string (+make/set)          _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        "string"  'string'    _lua_
        ·       _lisp_
        "Hello; World"                    _scm_
          (string #\h #\e #\l #\l #\o)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        "string" "string"d     _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    [make|define a string]      _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        (make-string 5)  _scm_
          (define a-3-char-long-string (make-string 3))  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Regex / Match
        [[ "$date" =~ ^[0-9]{8}$ ]] && echo "yes"  _sh_
        js
        java.util.regex   java
        python
        cpp
        (use-modules (ice-9 regex))  #guile scm
        d
Functions (define etc)          _c
    .
    Define                      _c
        function fname() {      _sh_
        ·       _bas_
        ·       _vb_
        fun! FName()            _vim_  #or 'function!'
          ...                   _vim_
        endfun(ction)           _vim_
        def my_function():      _py_
            print("Hello")      _py_
        ·       _php_
        function fname() {      _js_
        function fname(var)     _lua_
        defun       _lisp_
        (lambda (x) (+ x 2))                  _scm_
        (define add2 (lambda (x) (+ x 2)))    _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        fun functName() {   _kt_
        }                   _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        fun name a = 2*a;                     _sml_
        fun name(a,b) = a+b;                  _sml_
        o  ='function composition operator'   _sml_
        fun add x y = x+y : int;  =curried version of f-def.  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    anonymous
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        lambda       _py_
        ·       _php_
        ·       _js_
        function (param1, param2)    _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Call|Run function
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (fname arg1 arg2)  _scm_
          (add2 4)  => 6   _scm_
        (defun  _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    return                      _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        -implicit- (=result of a form =  the result of the last subform)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        return                                                  _d_
        (tip: use tuples, if want more than one return-value)   _d_
        ·       _java_
        return value  _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    named arguments             _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        println(birthdayGreeting(name = "Rex", age = 2))  _kt_
        (=order of the parameters does not matter)
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    default arguments           _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        fun birthdayGreeting(name: String = "Rover", age: Int): String {  _kt_
        (+use with  println(birthdayGreeting(age = 5)) )                  _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    var num of arguments        _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        :function Varg(...)     _vim_
        :  echom a:0            _vim_
        :  echom a:1            _vim_
        :  echo a:000           _vim_
        :endfunction            _vim_
        *args                   _py_
        ·       _php_
        ·       _js_
        function fname (...)        _lua_
        function fname (prm1, ...)  _lua_
        ·       _lisp_
        (x ... . z) **                                      _scm_
          =last var after dot picks up all remaining arg.s  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    --
    run funct. on/with all args of a funct. [**]   _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (apply + (1 2 3))  => 6    _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
functional (=map, for-each  filter, reduce)
    map, filter, reduce ...     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        map funcname [1,2,3,4,5,6];       _sml_
          (=apply function to all args)   _sml_
        fold(=reduce(??)) (=apply function down a list)  _sml_
        zip, filter  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    lambda expressions
        js
        java
        cpp
        d
        fn x => 2*x;                _sml_
        map (fn x=> 2*x) [2,3,4];   _sml_
    .
    int[] chosen = values.filter!(value => value > 10)  _d_
Templates | Generics            _c
    ~/Dropbox/rsc/samples/code/cpp/templates_abcode.cpp
    .
    .
Classes (+getters, setters)     _c
    .
    protection / visibility     _c
    (public, private, protected)
        c
        cpp
        java
    constructor                 _c
        js
        java
        cpp
        d
    Interfaces
    attributes, annotations     _c
        java
        python
        UDA  _d_
Macros | Mixins                 _c
    .
    .
    JS  =TODO[!!]
Reflection, Introspection       _c
    .
    the Reflect namespace object  _js_
    pragma(_)  _d_
Modules|Imports|Read|Source     _c
    Stdlib                  _c
        ·               _sh_
        ·               _bas_
        ·               _vb_
        ·               _vim_
        ·               _py_
        ·               _php_
        ·               _js_
        ·               _lua_
        ·               _lisp_
        ·               _scm_
        ·               _el_
        ·               _c_
        ·               _cpp_
        ·               _d_
        ·               _java_
        ·               _kt_
        ·               _clj_
        dotnet          _cs_
        dotnet          _fs_
        ·               _hs_
        basis           _sml_
        Base, Core      _ocaml_   
        ·               _go_
        ·               _v_
        ·               _ex_
        ·               _dart_
        ·               _ny_
        ·               _asm_
        ·               _pl_
        ·               _m_
        ·               _fth_
        ·               _ps_
        ·               _r_
    import| run|source          _c
        \include "file.ly"                  _ly_
        source / .                          _sh_
        ·                                   _bas_
        ·                                   _vb_
        source, rtp(??)                     _vim_
        import                              _py_
        include "library.php";              _php_
        include_once "library.php";         _php_
        ·                                   _js_
        require("module"), require "math"   _lua_
         load()     , -i, -l                _lua_
         dofile()                           _lua_
         loadfile()                         _lua_
        (require 'sb-bsd-sockets)           _lisp_
        (require 2htd/image)                _scm_ _racket_ __
        (use-modules (ice-9 popen))         _scm_ _guile
        (load  (load-relative  (require     _scm_ _guile
        (require (??)                       _el_
        ·                                   _c_
        #include <iostream>                 _cpp_
        import std.stdio;                   _d_
        ·                                   _java_
        ·                                   _kt_
        ·                                   _clj_
        ·                                   _cs_
        ·                                   _fs_
        ·                                   _hs_
        use (=execute file contents as sml program)  _sml_
        ·                                   _go_
        ·                                   _v_
        ·                                   _ex_
        ·                                   _dart_
        ·                                   _ny_
        ·                                   _asm_
        ·                                   _fth_
        ·                                   _ps_
        ·                                   _r_
    run|eval. in sequence       _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (begin  _scm_
        (progn  _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    namespaces                  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        name#name()   _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ::       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Create Module
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        create table with functions to export   _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    Packages                    _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        x#pack#fun()      _vim_  (??)
        ·       _py_
        ·       _php_
        ·       _js_
        x.pack.path       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        x.pack.path       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
Collections|Data Structures     _c
___zzzz
___DataStructs
        ref: Data Structures
            I'm trying to make a list for
            myself of some data-structures in
            different programming languages,
            and what I'm looking for right now
            (in order to categorize them and
            make some connections with respect
            to similarities and differences) is
            some of their characteristics.
            To my way of thinking it includes
            such properties as ordered,
            mutable/immutable, hashable etc.
            Could you give me a hand in
            constructing a list or breakdown of
            some traits in order to get an
            overview?

            Key Characteristics of Data Structures:

            Here's a breakdown of some
            essential characteristics you can
            use to categorize and compare data
            structures across different
            programming languages:

            Structure:

            Organization|Arrangement --
            - Linear vs Non-linear: Does the
              data have a predefined order
              (linear) or a more flexible,
              hierarchical structure
              (non-linear)? Examples: Array
              (linear), Tree (non-linear).
            Type-Constraint/Element Type-Restriction --
            - Homogeneous vs Heterogeneous: Can
              the data structure only store one
              type of data (homogeneous) or
              multiple types (heterogeneous)?
              Examples: Integer array
              (homogeneous), Dictionary
              (heterogeneous).

            Access: / Access-Method

            - Random access: Can you access any
              element directly using an index
              or key? Examples: Array, Hash table.
            - Sequential access: Elements must
              be accessed in a specific order.
              Examples: Linked list, queue.

            Modification:

            Mutability --
            - Mutable vs Immutable: Can the
              data structure be modified after
              creation? Examples: List
              (mutable), String (immutable).
            'Originality' -- (in the original memory-location)
            - In-place vs Out-of-place:
              Modifications change the original
              structure (in-place) or create a
              new one (out-of-place)? Examples:
              Sorting an array in-place vs
              creating a new sorted array.

            Performance:

            - Time complexity: How quickly can
              elements be accessed, inserted,
              or removed? This often depends on
              the underlying structure and
              algorithms used.
            - Space complexity: How much memory
              does the data structure use? This
              depends on the number of elements
              and the internal representation.

            Additional:

            - Concurrency: How well does the
              data structure support concurrent
              access by multiple threads or
              processes? This is important for
              multi-threaded programming.
            - Persistence: Can the data  __
              structure be stored and retrieved
              from persistent storage (e.g.,
              database)?

            Examples of data structures with
            their characteristics:

            Data Structure  Ordered Mutable Hashable    Random Access   Sequential Access
            Array           Yes     Yes     Yes         Yes             Yes
            Linked List     No      Yes     No          No              Yes
            Stack           No      Yes     No          No              Yes
            Queue           No      Yes     No          No              Yes
            Set             No      Yes     Yes         No              Yes
            Map/Dictionary  No      Yes     Yes         Yes             No
            Tree            No      Yes     No          No              Yes (partial)

            Remember, this is not an exhaustive
            list, and some data structures
            possess characteristics not listed
            here. It's essential to explore
            specific data structures in
            different languages to understand
            their nuances and how they can be
            used effectively.


            Using this breakdown:

            - Choose relevant characteristics
              based on your specific needs and
              interests.
            - Categorize data structures across
              different languages using these
              characteristics.
            - Analyze similarities and
              differences within categories and
              across languages.
            - This process can help you build a
              deeper understanding of how data
              structures work and choose the
              right one for your programming
              tasks.

            I hope this helps! Feel free to ask
            if you have any further questions
            or need more specific examples.

            - Many thanks! That's just what I
              was looking for(!). Could you add
              some to that?


            Sure, I'd be happy to add some more
            to the data structure
            characteristics! Here are a few
            more you might find useful:

            Additional Characteristics:

            - Size: Fixed size vs dynamic size
              (e.g., array with a fixed
              capacity vs list that can grow).
            - Sparsity: Does the data structure
              have many empty elements (e.g.,
              sparse matrix)?
            - Locking: Are there mechanisms to
              control concurrent access (e.g.,
              synchronized collections)?
            - Thread-safety: Is the data
              structure safe for use in
              multi-threaded environments?
            - Iterability: Can you easily
              iterate over all elements in the
              structure?
            - Serializability: Can the data
              structure be converted into a
              format suitable for storage or
              transmission?

            Examples:

            - Bitset: Fixed size, sparse, often
              used for representing flags or
              sets of bits.
            - ConcurrentHashMap: Mutable,
              hashable, thread-safe dictionary.
            - ImmutableVector: Fixed size,
              immutable, efficient for
              functional programming.
            - Graph: Non-linear, can have
              cycles, used for representing
              relationships between nodes.

            Tips:

            - Consider adding specific
              characteristics relevant to your
              programming language or domain of
              interest.
            - Research advanced data structures
              like tries, bloom filters, or
              skip lists for further
              exploration.
            - Remember that the choice of data
              structure depends on your
              specific problem and performance
              requirements.

            I hope this helps you further in
            your exploration and categorization
            of data structures!

            - That's very helpful! It
              definitely helps in getting
              going. The data-structures have
              many common characteristics, and
              also (like you say) it's of
              course helpful to add more
              questions and comments in
              follow-up questions that are more
              specifically targeted towards
              specific languages.

            I'm glad it's helpful! It's true
            that exploring specific languages
            and their data structures in more
            detail can reveal interesting
            nuances and connections. Feel free
            to ask any questions you have about
            specific data structures in
            particular languages, their
            functionalities, or how they
            compare to others.

            For example, you could ask:

            - What are the different ways to
              implement a stack in Python?
            - How is a hash table different
              from a binary search tree in
              terms of performance and use
              cases?
            - What are some unique data
              structures available in the Rust
              programming language?
            - How do functional programming
              languages like Haskell approach
              data structures differently from
              imperative languages?

            The more specific your questions,
            the more focused and relevant my
            answers can be. I'm here to help
            you deepen your understanding and
            make informed choices when working
            with data structures in your
            programming journey!

            - Exactly, and thank you for those
              tips. I'll definitely get back to
              asking more specific questions.
              What I was trying to construct
              for myself was getting an
              overview of some common
              data-structures in some languages
              (e.g. Clojure, Elixir, F#), but
              no need to add that right now -
              I'll get back to it. Getting an
              overview of some of the common
              characteristics will be very
              helpful before I get back to
              asking more specific questions.

            That's a great approach! Taking the
            time to understand the common
            characteristics of data structures
            across different languages will
            provide a solid foundation before
            diving into specific
            implementations. Here are some
            additional points to consider as
            you build your overview:

            - 1. Focus on Core Concepts: Don't
              get bogged down in
              language-specific syntax.
              Instead, focus on understanding
              the fundamental concepts behind
              each data structure, such as:

            - What kind of data does it store?
            - How are elements accessed and
              manipulated?
            - What are its strengths and
              weaknesses in terms of
              performance and memory usage?

            - 2. Use Familiar Examples: Think
              of everyday objects or situations
              that can be represented by
              different data structures. This
              can help you visualize their
              functionalities and
              relationships. For example, a
              queue is like a waiting line, a
              stack is like a pile of plates,
              and a graph is like a network of
              roads.
            - 3. Visualize Relationships: Try
              to create diagrams or tables that
              illustrate how different data
              structures are related to each
              other. This can help you identify
              patterns and similarities.
            - 4. Don't Be Afraid to Experiment:
              Once you have a basic
              understanding, try implementing
              some of these data structures in
              different languages. This will
              solidify your understanding and
              give you a hands-on feel for
              their functionalities.

            Remember, the goal is not to
            memorize names and syntax, but to
            develop a conceptual understanding
            of how data structures work and how
            to choose the right one for your
            needs.

            I am always happy to help you with
            specific questions or provide more
            detailed information on particular
            data structures as you progress.
            Just let me know!
        .
        ....                        _c
            arrays     _sh_
            ·       _bas_
            ·       _vb_
            arrays(='lists), assoc. arrays (='dicts')      _vim_
            [], {}  _vim_
            lists, dicts, tuples, sets      _py_
               [], {},  (), {}              _py_
            ·       _php_
            ·       _js_
            associative arrays (='tables'), arrays(='lists')        _lua_
               {}    #+used as simple lists(*)                      _lua_
               list =table w. numerical indexes                     _lua_
            ·       _lisp_
            lists, dotted pair, vectors [=list|seq. w. not just nums/char.s, +also other vectors]   _scm_
              '(1 2 3) (list 1 2 3)  '(1 . 2) (cons 1 2)                                            _scm_
              (vector 0 1 2 3 4)  =  #(0 1 2 3 4)                                                   _scm_
             structs, alists (=dicts), tables,  classes,  engines/flat engines                      _scm_
                coroutines (??)                                                                     _scm_
            ·       _el_
            ·       _c_
            ·       _cpp_
            Arrays, Assoc.Arrays       _d_
            Lists, Ques, Deques, Maps       _java_
            ·       _kt_
            lists, vectors, sets, maps, queues, rels, seqs, lazy seqs   _clj_
            ·       _cs_
            ·       _fs_
            ·       _hs_
            arrays: 'Tuple' =mixed types  'List' =same types    _sml_
                    (2,"Andy",3.5,(4,2))  [1,2,3] ["as","if"]   _sml_
            ·       _go_
            ·       _v_
            ·       _ex_
            ·       _dart_
            ·       _ny_
            ·       _asm_
            ·       _fth_
            ·       _ps_
            ·       _r_


        array           list
        assoc. array    hash, map, dictionary
                _p-typeconsist=_homog|_heterog[=pref]
                _p-mutab=_mut|_immut
                _p-access=seq_bypos|bykey [+random-access]

        F#
            Tuple
              (1, "hi", bool)
            List
              [1; 2; 3; 4]
            ----
            Record
              {value : "string"; x: 2}

            Discrim. Union
            Array
            seq
            map
            set
        Clojure
            Vector
              ["a", "b", "c"]
                _p-typeconsist=_homog[=pref]
                _p-mutab=_immut
                _p-access=seq_bypos(vs bykey)
            List
              '(1, "b", 5)
                _p-typeconsist=_heterog
                _p-mutab=_immut
                _p-access=seq_bypos [+random-access]
            ----
            Map
              {:name "Al", :age 30}
        Elixir
            List
              [1, "hello", true]
                _p-typeconsist=_heterog
                _p-mutab=_immut
                _p-access=seq_bypos
            tuple
            keyword list
            ----
            Map
              %{name: "Al", age: 30}  %{name: 'Al', age: 30}
        OCaml
            ----
            Hash table
            String map

        array, assoc. array, other
        prop.s/implementation(-notes) (sequence, homog/heterog, hashable, ...)
        common use-cases
Control Flow|Structures         _c
    .
    if                      _c
        if       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        if condition:       _py_
        ·       _php_
        ·       _js_
        if not ok then                 _lua_
        if (a[i] == c) or              _lua_
         ...                           _lua_
        elseif x == f then return f    _lua_
        end                            _lua_
        ·       _lisp_
        (if (> p 70)          _scm_
            'safe     ;then   _scm_
            'unsafe)  ;else   _scm_
        (when (condition)     _scm_
            'bla)             _scm_
        (unless               _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        fun past "run"  = "ran"         _sml_
        |   past "swim" = "swam"        _sml_
        |   past      x = x ^ "ed";     _sml_
          (=using 'pattern matching' vs 'if then else')  _sml_
        fun j(0)= 0                             _sml_
        |   j(n)= (n mod 10) + j(n div 10);     _sml_
                                                _sml_
        if 1 = 0 then "I am the pope." else "someone else is the pope.";  _sml_
          (=when pattern matching is not convenient)   _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    while                   _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        while i <= x do    _lua_
         ...               _lua_
        end                _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        fun factorial 0 = 1                     _sml_
        |   factorial n = n * factorial(n-1);   _sml_
          (=using recursion instead of loops)   _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    for                     _c
        for condition; do       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        for a = 1, n - 1 do        _lua_
        for k,v in pairs(t) do     _lua_
                    (='ipairs' (??))
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        (see 'while')  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    switch|case             _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (cond ((char<? c #\c) -1)   _scm_
              ((char=? c #\c) 0)    _scm_
              (else 1))             _scm_
        (case c
          ((#\a) 1)
          ((#\b) 2)
          ((#\c) 3)
          (else 4))
        => 3
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    --
    break, continue etc     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        break, goto, ::redo::, ::continue::       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    ternary test            _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ? val1 : val2;   _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
ops:relational (=logic comparisons)  _c
    .
    equals                      _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ==       _lua_
        ·       _lisp_
        (eqv?, (=  [for numbers]   _scm_
        (eqv? 'Calorie 'calorie)  (=#t)  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ==      _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    not equals (eg. =!)         _c
        ·       _sh_
        <> (??) _bas_
        ·       _vb_
        ·       _vim_
        !=      _py_
        ·       _php_
        ·       _js_
        ~= **   _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        <>      _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    lt, lte, mt, mte            _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (<, (<=, (>, (>=      _scm_
        (char>=? #\a #\b)     _scm_
        (char-ci=? #\a #\A)   _scm_
        (char-ci<? #\a #\B)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
ops:logical                     _c
    .
    not, and, or        _c
        !, &&, ||       _sh_
        ·               _bas_
        ·               _vb_
        ·               _vim_
        ??, and, or     _py_
        ·               _php_
        ·               _js_
        not, and, or   _lua_
        ·               _lisp_
        (not #f), (and, (or  _scm_
        ·               _el_
        ·               _c_
        !, &&, ||       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
ops:math                        _c
    .
    [grouping/override precedence]  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ( ) **  _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ( )     _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _pl_
        ·       _m_
        ·       _fth_
        ·       _ps_
        ·       _r_
    [basic]                     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ~  =unary minus  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    power                       _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        **      _py_
        ·       _php_
        ·       _js_
        ^       _lua_
        ·       _lisp_
        (expt 2 3)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        square  (= x²)    _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    max, min                    _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (max 1 4 3 2 5)  (min 1 4 3 2 5)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    remainder/modulus           _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        %       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        mod     _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    integ./floor division       _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        //      _py_
        ·       _php_
        ·       _js_
        //      _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        div     _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    square root                 _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (sqrt 4)   _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    absolute val.               _c
StdLib (misc)                   _c
    Methods                     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ord, chr, size, substring   _sml_
        explode, rev, hd, tl        _sml_
        lex (='turn list of chars into list of words')  _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
funct|method:num/math           _c
    .
    random
       import random  _py_
       interval = random.uniform(10, 14)  _py_
       scm
       dlang
    .
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        math.pi, math.abs, math.sin, math.deg      _lua_
        math.random(6), math.randomseed(os.time)   _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
funct|method:string             _c
    .
     string.find (=lua), index
     return substring
    length                                      _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        len("abc")  _py_
        ·       _php_
        ·       _js_
        string.len("ab")     _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        String.length("Two words")  _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    join  (=see concatenation in basic ops)     _c
    split                       _c
    find                        _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        string.find()       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    down|ucase                  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (char-downcase #\A), (char-upcase #\a)          _scm_
         (string-downcase var), (string-upcase! "str")  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    get char at pos. n          _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (string-ref greeting 0)  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    substitute char(s) at pos   _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (string-set! hello 1 #\a)  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    is_                         _c
    reverse, append             _c
    count                       _c
    repeat, duplicate           _c
    Regex|Pattern Match + Substit.       _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        import re                   _py_
        re.compile(), re.match()    _py_
        ·       _php_
        **       _js_
        string.gsub                                  _lua_
         find, match, gmatch                         _lua_
         %d (etc. patterns)  +mag.chars, char-sets   _lua_
         (), %0  ****                                _lua_
        ·       _lisp_
        (use-modules (ice-9 regex))                         _scm_
          (string-match "[0-9][0-9][0-9][0-9]" "blah2002")  _scm_
            [+regexp/icase, etc]                            _scm_
              ...                                           _scm_
            [+match:count, etc]                             _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
funct|method:collections        _c
    TODO!
    table.insert        _lua_
    table.remove        _lua_
      move          _lua_
      .sort         _lua_
      .concat       _lua_
    --
    get element at pos. n       _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·   _lua_
        ·       _lisp_
        (list-ref varname 0), (list-tail y 1),  (vector-ref hello 0)  _scm_
                              (=from index 1 (=2 3 from 1 2 3))       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    substitute element at pos.  _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        (vector-set! hello 1 #\a)  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    maps: return keys|val.s     _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        a["x"], a.x    _lua_
        ·       _lisp_
        (car var), (cdr, (cdar [etc...]   _scm_
        (cdar ((1 . 2) . 3))  => 2  _scm_
           #short for (cdr (car varname))  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    maps: return pairs          _c
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        ·       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    set value for key|val *
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        a["x"] = 10      _lua_
        a.x = 10         _lua_
        ·       _lisp_
        (set-car! x 2), (set-cdr! x #f)  _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    add elem.(s) to end
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        table.concat       _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
    sort collection
        .
        .
    sum  =add val.s of a list   _sml_
dates|times                     _c
    .
    curr|now
    os.time         _lua_
    os.date       (+%c etc)  _lua_
    os.difftime     _lua_
File Handling                   _c
    ________                    _c
        <  >  >>       _sh_
        ·       _bas_
          https://wiki.documentfoundation.org/Macros/Basic/Documents#Open_documents
          https://ask.libreoffice.org/t/how-open-a-libreoffice-writer-file-and-read-document-to-string-in-writer-macros-basic/65092/2
        ·       _vb_
        ·       _vim_
        open(       _py_
        ·       _php_
        [=indirect via browser]   _js_
        io.open (etc)       _lua_
            https://stackoverflow.com/questions/64628432/how-do-i-get-access-to-a-txt-file-read-and-write-in-lua
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        fstream(), ifstream(), ofstream()       _cpp_
            https://www.w3schools.com/cpp/cpp_files.asp
        File (=struct)   _d_
        File myObj = new File("filename.txt");   _java_
            https://www.w3schools.com/java/java_files.asp
           https://www.w3schools.com/java/java_files_create.asp
        ·       _kt_
          https://stackoverflow.com/questions/55182578/how-to-read-plain-text-file-in-kotlin
          https://www.baeldung.com/kotlin/read-file
        ·       _clj_
           https://stackoverflow.com/questions/7756909/in-clojure-1-3-how-to-read-and-write-a-file#7757674
        ·       _cs_
          https://stackoverflow.com/questions/7569904/easiest-way-to-read-from-and-write-to-files
        ·       _fs_
        ·       _hs_
        open_in, input (=stream/file handling)          _sml_
        input_line, can_input, end_of_stream, close_in  _sml_
        open_out, open_append, flush_out, close_out
            evince -p 72 ~/Empire/Doks/Comp/lang/ml/ml-gentleintrod.pdf &
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
Data Files, Serialization (csv, json, xml)  _c
    .
    .
Error Handling|Exceptions       _c
    .
    (=try except finally  etc)
    .
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        assert(), pcall(), error("mess")    _lua_
        ·       _lisp_
        assert (??)       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
Unit Testing                    _c
    .
    asserts                     _c
        racket scheme: (check-expect (f2c 212) 100)
    Frameworks                  _c
        junit  _java_
        pyunit(?)  _py_
        unittest (builtin)  _d_
        gtest (etc ***)   _cpp_
threads, paralellism, concurrency  _c
    .
    .
FFI / Native Interface          _c
    .
    .
Gui                             _c
    .
    java fx,  _java_
    java fx,  _clj
    wx        _cpp_
    tkinter, wx  _py_
    gtk, arsd (+native(?))  _d_
Media                           _c
    .
    javax.sound.midi.___, javax.sound.sampled.*;  _java_
Networking / Http               _c
    .
    Mail
        Email email = new Email();  _java_
        Message message = new MimeMessage(session);  _java_
        https://www.baeldung.com/java-send-emails-attachments
        --
        https://stackoverflow.com/questions/11273466/how-to-send-mail-with-attachment-using-js#11273506
        https://stackoverflow.com/questions/3362600/how-to-send-email-attachments#3363254
(statistics|datasci)            _c
    .
    .

Idioms  (lua, python, C# etc)
    .
        ·       _sh_
        ·       _bas_
        ·       _vb_
        ·       _vim_
        ·       _py_
        ·       _php_
        ·       _js_
        -3 + 0.0          _lua_
         2 ^ 53 | 0       _lua_
        local foo = foo   _lua_
        ·       _lisp_
        ·       _scm_
        ·       _el_
        ·       _c_
        ·       _cpp_
        ·       _d_
        ·       _java_
        ·       _kt_
        ·       _clj_
        ·       _cs_
        ·       _fs_
        ·       _hs_
        ·       _sml_
        ·       _go_
        ·       _v_
        ·       _ex_
        ·       _dart_
        ·       _ny_
        ·       _asm_
        ·       _fth_
        ·       _ps_
        ·       _r_
patterns
common algorithms(??)
common (progr.) tasks


to Add:
Kt:
  when (
  ->
SML:
  Extra from Glossary(!)
  evince -p 11 ~/Empire/Doks/Comp/lang/ml/ml-gentleintrod.pdf &
    unit
    and
    in
    while do
    :=
    fn + => (=with lambdas)
    rec
    local
    Math.sqrt, Math.pi
     type
    datatype
    of
    exception Match, Zero
    _ (=wildcard)
    map, constant, compose
     List.map, List.rev, List.foldl
    raise, handle
    'namespace', signatures, structures and functors
        .
    signature ...
      ...
    end
    'a
    q'
    :>
        .
    mlton
        .
    !state
    infix <<
    :
Mercury
  .m
Fortran:
  .ft(??)
  compile:
    sudo apt install gfortran gfortran-10
  https://fpm.fortran-lang.org/
  https://github.com/fortran-lang/stdlib
PHP[!!!!]
              echo date("l");
              phpinfo()
              strrev(" .dlrow olleH")
              str_repeat("Hip ", 2);
              strtoupper("hooray!");

              function function name([parameter [, ...]])
              {
                    // Statements
              }

              $lowered = strtolower("aNY # of Letters and Punctuation you WANT");
              ucfixed = ucfirst("any # of letters and punctuation you want");
              print(abs(5-8));
              ucfirst(strtolower("aNY # of Letters and Punctuation you WANT"));
              $n1 = ucfirst(strtolower($n1));
              return array($n1, $n2, $n3);
              $p1 = array("Copier", "Inkjet", "Laser", "Photo");
                global
              print_r (=print readable)
              $object->save_user();  =accessing an object's property[!]
            new User();
              time();

              foreach($paper as $item)
              {
                echo "$j: $item<br>";
                ++$];
              }

              while (list($item, $description) = each($paper))
                echo "$item: $description<br>";

              count
              sort
              rsort
              shuffle
              explode
              extract
              compact
              reset
              end
              printf
              mktime
              date($format, $timestamp);
              echo date("l F jS, Y - g:ia", time());
                date(DATE_RSS)
              checkdate()
              if (file_exists("testfile.txt")) echo "File exists";

              $fh = fopen("testfile.txt", 'w') or die("Failed to create file");
              $text = <<<_END
              fwrite($fh, $text) or die("Could not write to file");
              fclose($fh);
              $fh = fopen("testfile.txt", 'r')
              fgets
              copy
              rename
              if (!unlink(
              fseek
              flock
              file_get_contents
                move_uploaded_file
              switch
              file
              $name = preg_replace("/[^A-Za-z0-9.]/", "", $name);
              $name = strtolower(ereg replace("[*A-Za-z0-9.]", "", $name));
              exec(escapeshellcmd($cmd), $output, $status);
              htmlspecialchars

