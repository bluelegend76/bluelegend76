vim: fdm=indent:fdl=2:
set fdm=indent fdl=2

    ~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/SVG.txt


~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/FreecWebdev-h5c3.txt
----
~/Dropbox/rsc/data/lists/learnqna/vanki/z.WEB-JS_vanki.orig.txt
    ~/Dropbox/rsc/data/lists/learnqna/vanki/pick.legacy/z.WEB-JS_vanki.orig.txt
~/Dropbox/rsc/data/lists/learnqna/vanki/decks/comp/lang/webdev/freec01_h5c3.tags.txt
    ~/Dropbox/rsc/data/lists/learnqna/vanki/decks/comp/lang/webdev/freec01_h5c3.txt
    ~/Dropbox/rsc/samples/code/prl.words/words_css.css
----
~/Dropbox/rsc/data/lists/learnqna/vanki/tmp/alr-ontheroad/freec-01.4of4-bmk.txt


==== HTML5+  ~/Empire/Doks/Comp/lang/webdev/h5/
    ~/Empire/Doks/Comp/lang/webdev/h5/resp.pdf
    https://www.scribd.com/document/282209534/HTML5-Programming-Cookbook
--------
~/Empire/Doks/Comp/lang/webdev/h5/h5cb_2015.txt  #+copy to Dropbox
                            evince -p vii ~/Empire/Doks/Comp/lang/webdev/h5/h5cb_2015.pdf &
                              [-p 8]
                        1. New Structural Elements in HTML5
                        2. Grouping, Text-Level, and Redefined Semantics
                        3. Browser-Handling in HTML5
                        4. New Layout and Style-Techniques with CSS3
                        5. HTML5 Web-Forms
                        6. Drawing with Canvas
                        7. Embedding Video with HTML5
                        8. Embedding Audio with HTML5
                        9. Changing Browser-History
                        10. Location-Awareness with the Geolocation-API
                        11. Client-Side Storage
                        12. Communication and Threading
                        13. Browser-Experience in HTML5
                        14. Working with Local Files
                        15. Integrating Device-Data

                            evince -p ix ~/Empire/Doks/Comp/lang/webdev/h5/h5cb_2015.pdf &
                              [-p 10]
                        1. New Structural Elements in HTML5
                        Building an HTML5 Starter Document
                          doctype
                          Character Encoding
                          JavaScript and CSS Links
                          Syntax Writing Style
                        Where Do All the New Elements Come From?
                        Using the header Element to Create a Site Header
                        Using the hgroup Element to Group Headings
                        Creating Navigation with the nav Element
                        Using the New article Element
                        Grouping Content with the section Element
                          Which Should You Use: article or section?
                        Creating a Sidebar with the aside Element
                        Using the footer Element
                        Using the HTML5 Outliner to Ensure the Correct Structure
                        Using All the New Elements to Build a News Page
                        Using All the New Elements to Build a Search Results Page

                        2. Grouping, Text-Level, and Redefined Semantics
                        Marking Up Figures and Captions with the figure and figcaption Elements
                        Marking Up the Date and Time with the time Element
                        Making a Native Toggle Widget with the details Element
                        Using the address Element for Contact Information
                        Highlighting Text with the mark Element
                        Using the s Element to Show Inaccurate or Irrelevant Content
                        Changes to Existing Elements
                          The cite Element
                          The ol Element
                          The dl Element
                          The small Element
                          The b and strong Elements
                          The i and em Elements
                          The abbr Element
                          The hr Element
                          Elements That Are No More
                        Wrapping Links Around Elements
                        Adding Semantic Information with Microdata
                        Using WAI-ARIA with HTML5
                        Marking Up an Article Page with Comments

                        3. Browser Handling in HTML5
                        Dealing with Internet Explorer
                          Using JavaScript to Make HTML5 Compatible
                          Making CSS Compatible
                        Boilerplates
                        Testing for HTML5 Features
                        Leveraging jQuery to Replace a Calendar
                        Using Modernizr to Detect Features
                        Polyfilling
                        Useful HTML5 Verification Sites

                        4. New Layout and Style Techniques with CSS3
                        Creating a Responsive Design with CSS3 Media Queries
                          Sensible Usage
                          Targeting the iPhone and Android Devices
                        Using Custom Fonts with @font-face
                          File Formats and the Cross-Browser Fix
                          Type Services
                        Making Buttons with CSS Gradients and Multiple Backgrounds
                        Enhancing a Site with Transformations and Transitions
                        Creating Animations with CSS

                        5. HTML5 Web Forms
                        Validation
                        HTML 4 Input Types
                        Creating a Form to Collect Contact Information
                          input type="email"
                          input type="tel"
                          input type="url"
                        Creating a Search Form with input type="search"
                        Creating Calendar and Time Controls
                          input type="datetime"
                          input type="datetime-local"
                          input type="date"
                          input type="time"
                          input type="month"
                          input type="week"
                          Placing Restrictions on Dates and Times
                        Creating a Number Picker
                        Creating a Slider (Without the Need for JavaScript)
                        Creating a Color Picker
                        Displaying Results with the output Element
                        Using Form Placeholder Text
                        Creating an Autocomplete Feature with list and datalist
                        Tracking the Completion of a Task with the progress Element
                        Measuring with the meter Element
                        Jumping to a form Element When the
                        Page Loads
                        Allowing Multiple Entries
                        Basic Validation with the required Attribute
                        Writing Your Own Validation Rule
                        Limiting User Input
                          step
                          min, max
                          formnovalidate, novalidate
                        Customizing and Styling the Form Error Messages
                        Putting It All Together to Make a Sign-Up Form

                        6. Drawing with Canvas
                        Canvas Overview
                          Getting Started
                          X and Y Coordinates
                        Laying a Grid on the Canvas
                        Canvas Tools
                        Making Simple Shapes and Lines
                          Drawing and Styling a Rectangle or Square
                          Applying Gradients to Shapes
                          Drawing Lines and Paths
                        Drawing Polygons with a Path
                        Drawing Arcs and Circles
                          Drawing Curves
                        Adding Text
                        Drawing an Image
                        Cropping an Image
                        Animating a Sprite Map
                        Canvas Transformations
                        Animating an Image
                        Animating a Vertical Bar Chart

                        7. Embedding Video with HTML5
                        Including Video with the video Element
                          Browser and Device Support
                          HTML5 and Video Codecs
                          Why Should You Care About Codecs?
                        Enabling Video for All Browsers
                          Adding Fallback Content for Older Browsers
                          New Video Attributes
                        Creating a Video with Subtitles and Captions
                          Other Subtitle Styling Options
                        The Media API
                        Making Your Own Custom Controls

                        8. Embedding Audio with HTML5
                        Including Audio with the audio Element
                        Enabling Audio for All Browsers
                          Adding Fallback Content for Older Browsers
                        New Audio Attributes
                          The src Attribute
                          The preload Attribute
                          The loop Attribute
                          The autoplay Attribute
                          The controls Attribute
                        The Media API
                        Creating a Beat Mixer
                        Adding Streaming Radio

                        9. Changing Browser History
                        History Basics
                          Browser Compatibility
                        Adding to History with pushState
                        Creating an Image Viewer
                        Popping State in the Image Viewer
                        Changing History with replaceState
                        Changing the Page History
                        Using Advanced State Data Objects to Pass Information Across Pages
                        Testing History Security
                        Helpful Libraries

                        10. Location Awareness with the Geolocation API
                        Geolocation Overview
                          Browser Compatibility
                          Where in the World: getCurrentPosition
                        Determining Your Location with a Simple getCurrentPosition
                          Location Privacy
                        Mapping a Location with getCurrentPosition
                        Determining Distance with PositionOptions
                        Following a Moving Location with watchPosition

                        11. Client-Side Storage
                        Client-Side Storage Overview
                          Data Security
                          Keys and Values: sessionStorage and localStorage
                        Getting and Setting Session Storage
                          Chrome Developer Tools for Viewing Storage
                        Styling from Session Storage
                        Storing Forms with Local Storage
                        Catching Events in Local Storage
                        Web SQL Database API
                        Using a Web Database for a Grocery List

                        12. Communication and Threading
                        WebSocket API Overview
                        Talking Through Web Sockets
                        Threading Through Web Workers
                        Creating a Web Worker
                        Adding Two-Way Communication
                        Leveraging a Shared Web Worker

                        13. Browser Experience in HTML5
                        Drag and Drop API
                        Dragging and Dropping Across divs
                        Leveraging Events and dataTransfer
                        Application Cache and API
                          Browser Cache Security
                          Referencing a Manifest File
                        Creating a Manifest File
                          CACHE
                          FALLBACK
                          NETWORK
                          Updating the Cache via the Manifest
                        Using Web Pages Offline
                        Application Cache API
                        Notification API
                          Notification Permissions
                          Browser Compatibility
                        Displaying a Simple Notification
                        Creating a Tweet Notification Page

                        14. Working with Local Files
                        File API Overview
                          File API Security
                        Getting File Attributes
                        Processing Multiple Files with Drag and Drop
                        The FileReader Interface
                        Previewing Images Through readAsDataURL
                        Parsing a CSV File with readAsText
                        File API Extended Specifications
                        Creating a Local File

                        15. Integrating Device Data
                        Brief Device APIs History
                        Contacts API
                        Retrieving All Contacts and Mobile Numbers
                        Messaging API
                        Network Information API
                        Battery Status Events
                        HTML Media Capture
                        Capturing Pictures with File Input
                        Device Orientation and Motion Events
                        Creating a Bubble Level
https://docs.emmet.io/cheat-sheet/
~/Empire/Doks/Comp/lang/webdev/h5/cheatsh-qref/Emmet-Zencoding.cheatsh.pdf
                own|test|custom ----
                    ul>li*3>a
                ----
                    Child: >  nav>ul>li
                        <nav>
                            <ul>
                                <li></li>
                            </ul>
                        </nav>
                    Sibling: +  div+p+bq
                        <div></div>
                        <p></p>
                        <blockquote></blockquote>
                    Climb-up: ^  div+div>p>span+em^bq
                        <div></div>
                        <div>
                            <p><span></span><em></em></p>
                            <blockquote></blockquote>
                        </div>
                    div+div>p>span+em^^bq
                        <div></div>
                        <div>
                            <p><span></span><em></em></p>
                        </div>
                        <blockquote></blockquote>
                    Grouping: ()
                    div>(header>ul>li*2>a)+footer>p
                        <div>
                            <header>
                                <ul>
                                    <li><a href=""></a></li>
                                    <li><a href=""></a></li>
                                </ul>
                            </header>
                            <footer>
                                <p></p>
                            </footer>
                        </div>
                    (div>dl>(dt+dd)*3)+footer>p
                        <div>
                            <dl>
                                <dt></dt>
                                <dd></dd>
                                <dt></dt>
                                <dd></dd>
                                <dt></dt>
                                <dd></dd>
                            </dl>
                        </div>
                        <footer>
                            <p></p>
                        </footer>
                    Multiplication: *  ul>li*5
                        <ul>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                        </ul>
                    Item numbering: $  ul>li.item$*5
                        <ul>
                            <li class="item1"></li>
                            <li class="item2"></li>
                            <li class="item3"></li>
                            <li class="item4"></li>
                            <li class="item5"></li>
                        </ul>
                    h$[title=item$]{Header $}*3
                        <h1 title="item1">Header 1</h1>
                        <h2 title="item2">Header 2</h2>
                        <h3 title="item3">Header 3</h3>
                    ul>li.item$$$*5
                        <ul>
                            <li class="item001"></li>
                            <li class="item002"></li>
                            <li class="item003"></li>
                            <li class="item004"></li>
                            <li class="item005"></li>
                        </ul>
                    ul>li.item$@-*5
                        <ul>
                            <li class="item5"></li>
                            <li class="item4"></li>
                            <li class="item3"></li>
                            <li class="item2"></li>
                            <li class="item1"></li>
                        </ul>
                    ul>li.item$@3*5
                        <ul>
                            <li class="item3"></li>
                            <li class="item4"></li>
                            <li class="item5"></li>
                            <li class="item6"></li>
                            <li class="item7"></li>
                        </ul>
                    ID and CLASS attributes
#header
                        <div id="header"></div>
                .title
                        <div class="title"></div>
                form#search.wide
                        <form id="search" class="wide"></form>
                p.class1.class2.class3
                        <p class="class1 class2 class3"></p>

                    Custom attributes
                    p[title="Hello world"]
                        <p title="Hello world"></p>
                td[rowspan=2 colspan=3 title]
                        <td rowspan="2" colspan="3" title=""></td>
                    [a='value1' b="value2"]
                        <div a="value1" b="value2"></div>
                    Text: {}
                    a{Click me}
                        <a href="">Click me</a>
                    p>{Click }+a{here}+{ to continue}
                        <p>Click <a href="">here</a> to continue</p>

                Implicit tag names
                    .class
                        <div class="class"></div>
                    em>.class
                        <em><span class="class"></span></em>
                    ul>.class
                        <ul>
                            <li class="class"></li>
                        </ul>
                    table>.row>.col
                        <table>
                            <tr class="row">
                                <td class="col"></td>
                            </tr>
                        </table>


                    HTML
                    All unknown abbreviations will be transformed to tag, e.g. foo → <foo></foo>.
                !
                        Alias of html:5
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                    a
                        <a href=""></a>
                a:link
                        <a href="http://"></a>
                    a:mail
                        <a href="mailto:"></a>
                    abbr
                        <abbr title=""></abbr>
                    acronym, acr
                        <acronym title=""></acronym>
                    base
                        <base href="" />
                    basefont
                        <basefont />
                    br
                        <br />
                    frame
                        <frame />
                    hr
                        <hr />
                    bdo
                        <bdo dir=""></bdo>
                    bdo:r
                        <bdo dir="rtl"></bdo>
                    bdo:l
                        <bdo dir="ltr"></bdo>
                    col
                        <col />
                    link
                        <link rel="stylesheet" href="" />
                    link:css
                        <link rel="stylesheet" href="style.css" />
                    link:print
                        <link rel="stylesheet" href="print.css" media="print" />
                    link:favicon
                        <link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />
                    link:touch
                        <link rel="apple-touch-icon" href="favicon.png" />
                    link:rss
                        <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml" />
                    link:atom
                        <link rel="alternate" type="application/atom+xml" title="Atom" href="atom.xml" />
                    link:import, link:im
                        <link rel="import" href="component.html" />
                    meta
                        <meta />
                    meta:utf
                        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
                    meta:win
                        <meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
                    meta:vp
                        <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0" />
                    meta:compat
                        <meta http-equiv="X-UA-Compatible" content="IE=7" />
                    style
                        <style></style>
                    script
                        <script></script>
                    script:src
                        <script src=""></script>
                    img
                        <img src="" alt="" />
                    img:srcset, img:s
                        <img srcset="" src="" alt="" />
                    img:sizes, img:z
                        <img sizes="" srcset="" src="" alt="" />
                    picture
                        <picture></picture>
                    source, src
                        <source />
                    source:src, src:sc
                        <source src="" type="" />
                    source:srcset, src:s
                        <source srcset="" />
                    source:media, src:m
                        <source media="(min-width: )" srcset="" />
                    source:type, src:t
                        <source srcset="" type="image/" />
                    source:sizes, src:z
                        <source sizes="" srcset="" />
                    source:media:type, src:mt
                        <source media="(min-width: )" srcset="" type="image/" />
                    source:media:sizes, src:mz
                        <source media="(min-width: )" sizes="" srcset="" />
                    source:sizes:type, src:zt
                        <source sizes="" srcset="" type="image/" />
                    iframe
                        <iframe src="" frameborder="0"></iframe>
                    embed
                        <embed src="" type="" />
                    object
                        <object data="" type=""></object>
                    param
                        <param name="" value="" />
                    map
                        <map name=""></map>
                    area
                        <area shape="" coords="" href="" alt="" />
                    area:d
                        <area shape="default" href="" alt="" />
                    area:c
                        <area shape="circle" coords="" href="" alt="" />
                    area:r
                        <area shape="rect" coords="" href="" alt="" />
                    area:p
                        <area shape="poly" coords="" href="" alt="" />
                    form
                        <form action=""></form>
                    form:get
                        <form action="" method="get"></form>
                    form:post
                        <form action="" method="post"></form>
                    label
                        <label for=""></label>
                    input
                        <input type="text" />
                    inp
                        <input type="text" name="" id="" />
                    input:hidden, input:h
                        Alias of input[type=hidden name]
                        <input type="hidden" name="" />
                    input:text, input:t
                        Alias of inp
                        <input type="text" name="" id="" />
                    input:search
                        Alias of inp[type=search]
                        <input type="search" name="" id="" />
                    input:email
                        Alias of inp[type=email]
                        <input type="email" name="" id="" />
                    input:url
                        Alias of inp[type=url]
                        <input type="url" name="" id="" />
                    input:password, input:p
                        Alias of inp[type=password]
                        <input type="password" name="" id="" />
                    input:datetime
                        Alias of inp[type=datetime]
                        <input type="datetime" name="" id="" />
                    input:date
                        Alias of inp[type=date]
                        <input type="date" name="" id="" />
                    input:datetime-local
                        Alias of inp[type=datetime-local]
                        <input type="datetime-local" name="" id="" />
                    input:month
                        Alias of inp[type=month]
                        <input type="month" name="" id="" />
                    input:week
                        Alias of inp[type=week]
                        <input type="week" name="" id="" />
                    input:time
                        Alias of inp[type=time]
                        <input type="time" name="" id="" />
                    input:tel
                        Alias of inp[type=tel]
                        <input type="tel" name="" id="" />
                    input:number
                        Alias of inp[type=number]
                        <input type="number" name="" id="" />
                    input:color
                        Alias of inp[type=color]
                        <input type="color" name="" id="" />
                input:checkbox, input:c
                        Alias of inp[type=checkbox]
                        <input type="checkbox" name="" id="" />
                    input:radio, input:r
                        Alias of inp[type=radio]
                        <input type="radio" name="" id="" />
                    input:range
                        Alias of inp[type=range]
                        <input type="range" name="" id="" />
                    input:file, input:f
                        Alias of inp[type=file]
                        <input type="file" name="" id="" />
                    input:submit, input:s
                        <input type="submit" value="" />
                    input:image, input:i
                        <input type="image" src="" alt="" />
                input:button, input:b
                        <input type="button" value="" />
                    isindex
                        <isindex />
                    input:reset
                        Alias of input:button[type=reset]
                        <input type="reset" value="" />
                    select
                        <select name="" id=""></select>
                    select:disabled, select:d
                        Alias of select[disabled.]
                        <select name="" id="" disabled="disabled"></select>
                    option, opt
                        <option value=""></option>
                    textarea
                        <textarea name="" id="" cols="30" rows="10"></textarea>
                    marquee
                        <marquee behavior="" direction=""></marquee>
                menu:context, menu:c
                        Alias of menu[type=context]>
                        <menu type="context"></menu>
                    menu:toolbar, menu:t
                        Alias of menu[type=toolbar]>
                        <menu type="toolbar"></menu>
                    video
                        <video src=""></video>
                    audio
                        <audio src=""></audio>
                    html:xml
                        <html xmlns="http://www.w3.org/1999/xhtml"></html>
                    keygen
                        <keygen />
                    command
                        <command />
                button:submit, button:s, btn:s
                        Alias of button[type=submit]
                        <button type="submit"></button>
                    button:reset, button:r, btn:r
                        Alias of button[type=reset]
                        <button type="reset"></button>
                    button:disabled, button:d, btn:d
                        Alias of button[disabled.]
                        <button disabled="disabled"></button>
                    fieldset:disabled, fieldset:d, fset:d, fst:d
                        Alias of fieldset[disabled.]
                        <fieldset disabled="disabled"></fieldset>
                    bq
                        Alias of blockquote
                        <blockquote></blockquote>
                    fig
                        Alias of figure
                        <figure></figure>
                    figc
                        Alias of figcaption
                        <figcaption></figcaption>
                    pic
                        Alias of picture
                        <picture></picture>
                    ifr
                        Alias of iframe
                        <iframe src="" frameborder="0"></iframe>
                    emb
                        Alias of embed
                        <embed src="" type="" />
                    obj
                        Alias of object
                        <object data="" type=""></object>
                    cap
                        Alias of caption
                        <caption></caption>
                    colg
                        Alias of colgroup
                        <colgroup></colgroup>
                    fst, fset
                        Alias of fieldset
                        <fieldset></fieldset>
                btn
                        Alias of button
                        <button></button>
                optg
                        Alias of optgroup
                        <optgroup></optgroup>
                    tarea
                        Alias of textarea
                        <textarea name="" id="" cols="30" rows="10"></textarea>
                    leg
                        Alias of legend
                        <legend></legend>
                    sect
                        Alias of section
                        <section></section>
                    art
                        Alias of article
                        <article></article>
                    hdr
                        Alias of header
                        <header></header>
                    ftr
                        Alias of footer
                        <footer></footer>
                    adr
                        Alias of address
                        <address></address>
                    dlg
                        Alias of dialog
                        <dialog></dialog>
                    str
                        Alias of strong
                        <strong></strong>
                    prog
                        Alias of progress
                        <progress></progress>
                    mn
                        Alias of main
                        <main></main>
                    tem
                        Alias of template
                        <template></template>
                    datag
                        Alias of datagrid
                        <datagrid></datagrid>
                    datal
                        Alias of datalist
                        <datalist></datalist>
                    kg
                        Alias of keygen
                        <keygen />
                    out
                        Alias of output
                        <output></output>
                    det
                        Alias of details
                        <details></details>
                    cmd
                        Alias of command
                        <command />
                    doc
                        Alias of html>(head>meta[charset=${charset}]+title{${1:Document}})+body
                        <html>
                        <head>
                            <meta charset="UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                    doc4
                        Alias of html>(head>meta[http-equiv="Content-Type" content="text/html;charset=${charset}"]+title{${1:Document}})+body
                        <html>
                        <head>
                            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                ri:dpr, ri:d
                        Alias of img:s
                        <img srcset="" src="" alt="" />
                    ri:viewport, ri:v
                        Alias of img:z
                        <img sizes="" srcset="" src="" alt="" />
                    ri:art, ri:a
                        Alias of pic>src:m+img
                        <picture>
                            <source media="(min-width: )" srcset="" />
                            <img src="" alt="" />
                        </picture>
                    ri:type, ri:t
                        Alias of pic>src:t+img
                        <picture>
                            <source srcset="" type="image/" />
                            <img src="" alt="" />
                        </picture>
                    html:4t
                        Alias of !!!4t+doc4[lang=${lang}]
                        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
                        <html lang="en">
                        <head>
                            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                    html:4s
                        Alias of !!!4s+doc4[lang=${lang}]
                        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
                        <html lang="en">
                        <head>
                            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                    html:xt
                        Alias of !!!xt+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]
                        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
                        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                        <head>
                            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                    html:xs
                        Alias of !!!xs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]
                        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
                        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                        <head>
                            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                    html:xxs
                        Alias of !!!xxs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]
                        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
                        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                        <head>
                            <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                    html:5
                        Alias of !!!+doc[lang=${lang}]
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="UTF-8" />
                            <title>Document</title>
                        </head>
                        <body>
                            
                        </body>
                        </html>
                ol+
                        Alias of ol>li
                        <ol>
                            <li></li>
                        </ol>
                    ul+
                        Alias of ul>li
                        <ul>
                            <li></li>
                        </ul>
                    dl+
                        Alias of dl>dt+dd
                        <dl>
                            <dt></dt>
                            <dd></dd>
                        </dl>
                    map+
                        Alias of map>area
                        <map name="">
                            <area shape="" coords="" href="" alt="" />
                        </map>
                    table+
                        Alias of table>tr>td
                        <table>
                            <tr>
                                <td></td>
                            </tr>
                        </table>
                    colgroup+, colg+
                        Alias of colgroup>col
                        <colgroup>
                            <col />
                        </colgroup>
                    tr+
                        Alias of tr>td
                        <tr>
                            <td></td>
                        </tr>
                    select+
                        Alias of select>option
                        <select name="" id="">
                            <option value=""></option>
                        </select>
                    optgroup+, optg+
                        Alias of optgroup>option
                        <optgroup>
                            <option value=""></option>
                        </optgroup>
                pic+
                        Alias of picture>source:srcset+img
                        <picture>
                            <source srcset="" />
                            <img src="" alt="" />
                        </picture>
                    !!!
                        <!DOCTYPE html>
                    !!!4t
                        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
                    !!!4s
                        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
                    !!!xt
                        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
                    !!!xs
                        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
                    !!!xxs
                        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
                c
                        <!-- ${child} -->
                    cc:ie6
                        <!--[if lte IE 6]>
                            ${child}
                        <![endif]-->
                    cc:ie
                        <!--[if IE]>
                            ${child}
                        <![endif]-->
                    cc:noie
                        <!--[if !IE]><!-->
                            ${child}
                        <!--<![endif]-->

                    CSS
                    CSS module uses fuzzy search to find unknown abbreviations, e.g. ov:h == ov-h == ovh == oh.
                    If abbreviation wasn’t found, it is transformed into property name: foo-bar → foo-bar: |;
                    You can prefix abbreviations with hyphen to produce vendor-prefixed properties: -foo
                    Visual Formatting
                    pos
                        position:relative;
                    pos:s
                        position:static;
                    pos:a
                        position:absolute;
                    pos:r
                        position:relative;
                    pos:f
                        position:fixed;
                    t
                        top:;
                    t:a
                        top:auto;
                    r
                        right:;
                    r:a
                        right:auto;
                    b
                        bottom:;
                    b:a
                        bottom:auto;
                    l
                        left:;
                    l:a
                        left:auto;
                z
                        z-index:;
                    z:a
                        z-index:auto;
                    fl
                        float:left;
                    fl:n
                        float:none;
                    fl:l
                        float:left;
                    fl:r
                        float:right;
                    cl
                        clear:both;
                    cl:n
                        clear:none;
                    cl:l
                        clear:left;
                    cl:r
                        clear:right;
                    cl:b
                        clear:both;
                d
                        display:block;
                    d:n
                        display:none;
                    d:b
                        display:block;
                    d:f
                        display:flex;
                    d:if
                        display:inline-flex;
                    d:i
                        display:inline;
                    d:ib
                        display:inline-block;
                    d:li
                        display:list-item;
                    d:ri
                        display:run-in;
                    d:cp
                        display:compact;
                    d:tb
                        display:table;
                    d:itb
                        display:inline-table;
                    d:tbcp
                        display:table-caption;
                    d:tbcl
                        display:table-column;
                    d:tbclg
                        display:table-column-group;
                    d:tbhg
                        display:table-header-group;
                    d:tbfg
                        display:table-footer-group;
                    d:tbr
                        display:table-row;
                    d:tbrg
                        display:table-row-group;
                    d:tbc
                        display:table-cell;
                    d:rb
                        display:ruby;
                    d:rbb
                        display:ruby-base;
                    d:rbbg
                        display:ruby-base-group;
                    d:rbt
                        display:ruby-text;
                    d:rbtg
                        display:ruby-text-group;
                v
                        visibility:hidden;
                    v:v
                        visibility:visible;
                    v:h
                        visibility:hidden;
                    v:c
                        visibility:collapse;
                    ov
                        overflow:hidden;
                    ov:v
                        overflow:visible;
                    ov:h
                        overflow:hidden;
                    ov:s
                        overflow:scroll;
                    ov:a
                        overflow:auto;
                    ovx
                        overflow-x:hidden;
                    ovx:v
                        overflow-x:visible;
                    ovx:h
                        overflow-x:hidden;
                    ovx:s
                        overflow-x:scroll;
                    ovx:a
                        overflow-x:auto;
                    ovy
                        overflow-y:hidden;
                    ovy:v
                        overflow-y:visible;
                    ovy:h
                        overflow-y:hidden;
                    ovy:s
                        overflow-y:scroll;
                    ovy:a
                        overflow-y:auto;
                    ovs
                        overflow-style:scrollbar;
                    ovs:a
                        overflow-style:auto;
                    ovs:s
                        overflow-style:scrollbar;
                    ovs:p
                        overflow-style:panner;
                    ovs:m
                        overflow-style:move;
                    ovs:mq
                        overflow-style:marquee;
                    zoo, zm
                        zoom:1;
                    cp
                        clip:;
                    cp:a
                        clip:auto;
                    cp:r
                        clip:rect(top right bottom left);
                    rsz
                        resize:;
                    rsz:n
                        resize:none;
                    rsz:b
                        resize:both;
                    rsz:h
                        resize:horizontal;
                    rsz:v
                        resize:vertical;
                cur
                        cursor:${pointer};
                    cur:a
                        cursor:auto;
                    cur:d
                        cursor:default;
                    cur:c
                        cursor:crosshair;
                    cur:ha
                        cursor:hand;
                    cur:he
                        cursor:help;
                    cur:m
                        cursor:move;
                    cur:p
                        cursor:pointer;
                    cur:t
                        cursor:text;

                    Margin & Padding
                m
                        margin:;
                    m:a
                        margin:auto;
                    mt
                        margin-top:;
                    mt:a
                        margin-top:auto;
                    mr
                        margin-right:;
                    mr:a
                        margin-right:auto;
                    mb
                        margin-bottom:;
                    mb:a
                        margin-bottom:auto;
                    ml
                        margin-left:;
                    ml:a
                        margin-left:auto;
                    p
                        padding:;
                    pt
                        padding-top:;
                    pr
                        padding-right:;
                    pb
                        padding-bottom:;
                    pl
                        padding-left:;

                    Box Sizing
                    bxz
                        box-sizing:border-box;
                    bxz:cb
                        box-sizing:content-box;
                    bxz:bb
                        box-sizing:border-box;
                    bxsh
                        box-shadow:inset hoff voff blur color;
                    bxsh:r
                        box-shadow:inset hoff voff blur spread rgb(0, 0, 0);
                    bxsh:ra
                        box-shadow:inset h v blur spread rgba(0, 0, 0, .5);
                    bxsh:n
                        box-shadow:none;
                w
                        width:;
                    w:a
                        width:auto;
                    h
                        height:;
                    h:a
                        height:auto;
                    maw
                        max-width:;
                    maw:n
                        max-width:none;
                    mah
                        max-height:;
                    mah:n
                        max-height:none;
                    miw
                        min-width:;
                    mih
                        min-height:;

                    Font
                    f
                        font:;
                f+
                        font:1em Arial,sans-serif;
                    fw
                        font-weight:;
                fw:n
                        font-weight:normal;
                    fw:b
                        font-weight:bold;
                    fw:br
                        font-weight:bolder;
                    fw:lr
                        font-weight:lighter;
                    fs
                        font-style:${italic};
                    fs:n
                        font-style:normal;
                    fs:i
                        font-style:italic;
                    fs:o
                        font-style:oblique;
                    fv
                        font-variant:;
                    fv:n
                        font-variant:normal;
                    fv:sc
                        font-variant:small-caps;
                fz
                        font-size:;
                    fza
                        font-size-adjust:;
                    fza:n
                        font-size-adjust:none;
                ff
                        font-family:;
                    ff:s
                        font-family:serif;
                    ff:ss
                        font-family:sans-serif;
                    ff:c
                        font-family:cursive;
                    ff:f
                        font-family:fantasy;
                    ff:m
                        font-family:monospace;
                ff:a
                        font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
                    ff:t
                        font-family: "Times New Roman", Times, Baskerville, Georgia, serif;
                    ff:v
                        font-family: Verdana, Geneva, sans-serif;
                    fef
                        font-effect:;
                    fef:n
                        font-effect:none;
                    fef:eg
                        font-effect:engrave;
                    fef:eb
                        font-effect:emboss;
                    fef:o
                        font-effect:outline;
                    fem
                        font-emphasize:;
                    femp
                        font-emphasize-position:;
                    femp:b
                        font-emphasize-position:before;
                    femp:a
                        font-emphasize-position:after;
                    fems
                        font-emphasize-style:;
                    fems:n
                        font-emphasize-style:none;
                    fems:ac
                        font-emphasize-style:accent;
                    fems:dt
                        font-emphasize-style:dot;
                    fems:c
                        font-emphasize-style:circle;
                    fems:ds
                        font-emphasize-style:disc;
                    fsm
                        font-smooth:;
                    fsm:a
                        font-smooth:auto;
                    fsm:n
                        font-smooth:never;
                    fsm:aw
                        font-smooth:always;
                fst
                        font-stretch:;
                    fst:n
                        font-stretch:normal;
                    fst:uc
                        font-stretch:ultra-condensed;
                    fst:ec
                        font-stretch:extra-condensed;
                    fst:c
                        font-stretch:condensed;
                    fst:sc
                        font-stretch:semi-condensed;
                    fst:se
                        font-stretch:semi-expanded;
                    fst:e
                        font-stretch:expanded;
                    fst:ee
                        font-stretch:extra-expanded;
                    fst:ue
                        font-stretch:ultra-expanded;

                    Text
                    va
                        vertical-align:top;
                    va:sup
                        vertical-align:super;
                    va:t
                        vertical-align:top;
                    va:tt
                        vertical-align:text-top;
                    va:m
                        vertical-align:middle;
                    va:bl
                        vertical-align:baseline;
                    va:b
                        vertical-align:bottom;
                    va:tb
                        vertical-align:text-bottom;
                    va:sub
                        vertical-align:sub;
                    ta
                        text-align:left;
                    ta:l
                        text-align:left;
                ta:c
                        text-align:center;
                    ta:r
                        text-align:right;
                    ta:j
                        text-align:justify;
                    ta-lst
                        text-align-last:;
                    tal:a
                        text-align-last:auto;
                    tal:l
                        text-align-last:left;
                    tal:c
                        text-align-last:center;
                    tal:r
                        text-align-last:right;
                    td
                        text-decoration:none;
                    td:n
                        text-decoration:none;
                    td:u
                        text-decoration:underline;
                    td:o
                        text-decoration:overline;
                    td:l
                        text-decoration:line-through;
                    te
                        text-emphasis:;
                    te:n
                        text-emphasis:none;
                    te:ac
                        text-emphasis:accent;
                    te:dt
                        text-emphasis:dot;
                    te:c
                        text-emphasis:circle;
                    te:ds
                        text-emphasis:disc;
                    te:b
                        text-emphasis:before;
                    te:a
                        text-emphasis:after;
                    th
                        text-height:;
                    th:a
                        text-height:auto;
                    th:f
                        text-height:font-size;
                    th:t
                        text-height:text-size;
                    th:m
                        text-height:max-size;
                    ti
                        text-indent:;
                    ti:-
                        text-indent:-9999px;
                    tj
                        text-justify:;
                    tj:a
                        text-justify:auto;
                    tj:iw
                        text-justify:inter-word;
                    tj:ii
                        text-justify:inter-ideograph;
                    tj:ic
                        text-justify:inter-cluster;
                    tj:d
                        text-justify:distribute;
                    tj:k
                        text-justify:kashida;
                    tj:t
                        text-justify:tibetan;
                    to
                        text-outline:;
                    to+
                        text-outline:0 0 #000;
                    to:n
                        text-outline:none;
                    tr
                        text-replace:;
                    tr:n
                        text-replace:none;
                    tt
                        text-transform:uppercase;
                    tt:n
                        text-transform:none;
                    tt:c
                        text-transform:capitalize;
                    tt:u
                        text-transform:uppercase;
                    tt:l
                        text-transform:lowercase;
                    tw
                        text-wrap:;
                    tw:n
                        text-wrap:normal;
                    tw:no
                        text-wrap:none;
                    tw:u
                        text-wrap:unrestricted;
                    tw:s
                        text-wrap:suppress;
                tsh
                        text-shadow:hoff voff blur #000;
                    tsh:r
                        text-shadow:h v blur rgb(0, 0, 0);
                    tsh:ra
                        text-shadow:h v blur rgba(0, 0, 0, .5);
                    tsh+
                        text-shadow:0 0 0 #000;
                    tsh:n
                        text-shadow:none;
                    lh
                        line-height:;
                    lts
                        letter-spacing:;
                    lts-n
                        letter-spacing:normal;
                    whs
                        white-space:;
                    whs:n
                        white-space:normal;
                    whs:p
                        white-space:pre;
                    whs:nw
                        white-space:nowrap;
                    whs:pw
                        white-space:pre-wrap;
                    whs:pl
                        white-space:pre-line;
                    whsc
                        white-space-collapse:;
                    whsc:n
                        white-space-collapse:normal;
                    whsc:k
                        white-space-collapse:keep-all;
                    whsc:l
                        white-space-collapse:loose;
                    whsc:bs
                        white-space-collapse:break-strict;
                    whsc:ba
                        white-space-collapse:break-all;
                    wob
                        word-break:;
                    wob:n
                        word-break:normal;
                    wob:k
                        word-break:keep-all;
                    wob:ba
                        word-break:break-all;
                    wos
                        word-spacing:;
                    wow
                        word-wrap:;
                    wow:nm
                        word-wrap:normal;
                    wow:n
                        word-wrap:none;
                    wow:u
                        word-wrap:unrestricted;
                    wow:s
                        word-wrap:suppress;
                    wow:b
                        word-wrap:break-word;

                    Background
                bg
                        background:#000;
                    bg+
                        background:#fff url() 0 0 no-repeat;
                    bg:n
                        background:none;
                    bgc
                        background-color:#fff;
                    bgc:t
                        background-color:transparent;
                    bgi
                        background-image:url();
                    bgi:n
                        background-image:none;
                    bgr
                        background-repeat:;
                    bgr:n
                        background-repeat:no-repeat;
                    bgr:x
                        background-repeat:repeat-x;
                    bgr:y
                        background-repeat:repeat-y;
                    bgr:sp
                        background-repeat:space;
                    bgr:rd
                        background-repeat:round;
                    bga
                        background-attachment:;
                    bga:f
                        background-attachment:fixed;
                    bga:s
                        background-attachment:scroll;
                    bgp
                        background-position:0 0;
                    bgpx
                        background-position-x:;
                    bgpy
                        background-position-y:;
                    bgbk
                        background-break:;
                    bgbk:bb
                        background-break:bounding-box;
                    bgbk:eb
                        background-break:each-box;
                    bgbk:c
                        background-break:continuous;
                    bgcp
                        background-clip:padding-box;
                    bgcp:bb
                        background-clip:border-box;
                    bgcp:pb
                        background-clip:padding-box;
                    bgcp:cb
                        background-clip:content-box;
                    bgcp:nc
                        background-clip:no-clip;
                    bgo
                        background-origin:;
                    bgo:pb
                        background-origin:padding-box;
                    bgo:bb
                        background-origin:border-box;
                    bgo:cb
                        background-origin:content-box;
                    bgsz
                        background-size:;
                    bgsz:a
                        background-size:auto;
                    bgsz:ct
                        background-size:contain;
                    bgsz:cv
                        background-size:cover;

                    Color
                    c
                        color:#000;
                    c:r
                        color:rgb(0, 0, 0);
                c:ra
                        color:rgba(0, 0, 0, .5);
                    op
                        opacity:;
                    Generated content
                    cnt
                        content:'';
                    cnt:n, ct:n
                        content:normal;
                    cnt:oq, ct:oq
                        content:open-quote;
                    cnt:noq, ct:noq
                        content:no-open-quote;
                    cnt:cq, ct:cq
                        content:close-quote;
                    cnt:ncq, ct:ncq
                        content:no-close-quote;
                    cnt:a, ct:a
                        content:attr();
                    cnt:c, ct:c
                        content:counter();
                    cnt:cs, ct:cs
                        content:counters();
                    ct
                        content:;
                    q
                        quotes:;
                    q:n
                        quotes:none;
                    q:ru
                        quotes:'\00AB' '\00BB' '\201E' '\201C';
                    q:en
                        quotes:'\201C' '\201D' '\2018' '\2019';
                    coi
                        counter-increment:;
                    cor
                        counter-reset:;

                    Outline
                    ol
                        outline:;
                    ol:n
                        outline:none;
                    olo
                        outline-offset:;
                    olw
                        outline-width:;
                    olw:tn
                        outline-width:thin;
                    olw:m
                        outline-width:medium;
                    olw:tc
                        outline-width:thick;
                    ols
                        outline-style:;
                    ols:n
                        outline-style:none;
                    ols:dt
                        outline-style:dotted;
                    ols:ds
                        outline-style:dashed;
                    ols:s
                        outline-style:solid;
                    ols:db
                        outline-style:double;
                    ols:g
                        outline-style:groove;
                    ols:r
                        outline-style:ridge;
                    ols:i
                        outline-style:inset;
                    ols:o
                        outline-style:outset;
                    olc
                        outline-color:#000;
                    olc:i
                        outline-color:invert;

                    Tables
                    tbl
                        table-layout:;
                    tbl:a
                        table-layout:auto;
                    tbl:f
                        table-layout:fixed;
                    cps
                        caption-side:;
                    cps:t
                        caption-side:top;
                    cps:b
                        caption-side:bottom;
                    ec
                        empty-cells:;
                    ec:s
                        empty-cells:show;
                    ec:h
                        empty-cells:hide;

                    Border
                    bd
                        border:;
                bd+
                        border:1px solid #000;
                bd:n
                        border:none;
                    bdbk
                        border-break:close;
                    bdbk:c
                        border-break:close;
                    bdcl
                        border-collapse:;
                    bdcl:c
                        border-collapse:collapse;
                    bdcl:s
                        border-collapse:separate;
                    bdc
                        border-color:#000;
                    bdc:t
                        border-color:transparent;
                    bdi
                        border-image:url();
                    bdi:n
                        border-image:none;
                    bdti
                        border-top-image:url();
                    bdti:n
                        border-top-image:none;
                    bdri
                        border-right-image:url();
                    bdri:n
                        border-right-image:none;
                    bdbi
                        border-bottom-image:url();
                    bdbi:n
                        border-bottom-image:none;
                    bdli
                        border-left-image:url();
                    bdli:n
                        border-left-image:none;
                    bdci
                        border-corner-image:url();
                    bdci:n
                        border-corner-image:none;
                    bdci:c
                        border-corner-image:continue;
                    bdtli
                        border-top-left-image:url();
                    bdtli:n
                        border-top-left-image:none;
                    bdtli:c
                        border-top-left-image:continue;
                    bdtri
                        border-top-right-image:url();
                    bdtri:n
                        border-top-right-image:none;
                    bdtri:c
                        border-top-right-image:continue;
                    bdbri
                        border-bottom-right-image:url();
                    bdbri:n
                        border-bottom-right-image:none;
                    bdbri:c
                        border-bottom-right-image:continue;
                    bdbli
                        border-bottom-left-image:url();
                    bdbli:n
                        border-bottom-left-image:none;
                    bdbli:c
                        border-bottom-left-image:continue;
                    bdf
                        border-fit:repeat;
                    bdf:c
                        border-fit:clip;
                    bdf:r
                        border-fit:repeat;
                    bdf:sc
                        border-fit:scale;
                    bdf:st
                        border-fit:stretch;
                    bdf:ow
                        border-fit:overwrite;
                    bdf:of
                        border-fit:overflow;
                    bdf:sp
                        border-fit:space;
                    bdlen
                        border-length:;
                    bdlen:a
                        border-length:auto;
                    bdsp
                        border-spacing:;
                    bds
                        border-style:;
                    bds:n
                        border-style:none;
                    bds:h
                        border-style:hidden;
                    bds:dt
                        border-style:dotted;
                    bds:ds
                        border-style:dashed;
                    bds:s
                        border-style:solid;
                    bds:db
                        border-style:double;
                    bds:dtds
                        border-style:dot-dash;
                    bds:dtdtds
                        border-style:dot-dot-dash;
                    bds:w
                        border-style:wave;
                    bds:g
                        border-style:groove;
                    bds:r
                        border-style:ridge;
                    bds:i
                        border-style:inset;
                    bds:o
                        border-style:outset;
                    bdw
                        border-width:;
                    bdt, bt
                        border-top:;
                    bdt+
                        border-top:1px solid #000;
                    bdt:n
                        border-top:none;
                    bdtw
                        border-top-width:;
                    bdts
                        border-top-style:;
                    bdts:n
                        border-top-style:none;
                    bdtc
                        border-top-color:#000;
                    bdtc:t
                        border-top-color:transparent;
                    bdr, br
                        border-right:;
                    bdr+
                        border-right:1px solid #000;
                    bdr:n
                        border-right:none;
                    bdrw
                        border-right-width:;
                    bdrst
                        border-right-style:;
                    bdrst:n
                        border-right-style:none;
                    bdrc
                        border-right-color:#000;
                    bdrc:t
                        border-right-color:transparent;
                    bdb, bb
                        border-bottom:;
                    bdb+
                        border-bottom:1px solid #000;
                    bdb:n
                        border-bottom:none;
                    bdbw
                        border-bottom-width:;
                    bdbs
                        border-bottom-style:;
                    bdbs:n
                        border-bottom-style:none;
                    bdbc
                        border-bottom-color:#000;
                    bdbc:t
                        border-bottom-color:transparent;
                    bdl, bl
                        border-left:;
                    bdl+
                        border-left:1px solid #000;
                    bdl:n
                        border-left:none;
                    bdlw
                        border-left-width:;
                    bdls
                        border-left-style:;
                    bdls:n
                        border-left-style:none;
                    bdlc
                        border-left-color:#000;
                    bdlc:t
                        border-left-color:transparent;
                    bdrs
                        border-radius:;
                    bdtrrs
                        border-top-right-radius:;
                    bdtlrs
                        border-top-left-radius:;
                    bdbrrs
                        border-bottom-right-radius:;
                    bdblrs
                        border-bottom-left-radius:;

                    Lists
                    lis
                        list-style:;
                    lis:n
                        list-style:none;
                    lisp
                        list-style-position:;
                    lisp:i
                        list-style-position:inside;
                    lisp:o
                        list-style-position:outside;
                    list
                        list-style-type:;
                    list:n
                        list-style-type:none;
                    list:d
                        list-style-type:disc;
                    list:c
                        list-style-type:circle;
                    list:s
                        list-style-type:square;
                    list:dc
                        list-style-type:decimal;
                    list:dclz
                        list-style-type:decimal-leading-zero;
                    list:lr
                        list-style-type:lower-roman;
                    list:ur
                        list-style-type:upper-roman;
                    lisi
                        list-style-image:;
                    lisi:n
                        list-style-image:none;

                    Print
                    pgbb
                        page-break-before:;
                    pgbb:au
                        page-break-before:auto;
                    pgbb:al
                        page-break-before:always;
                    pgbb:l
                        page-break-before:left;
                    pgbb:r
                        page-break-before:right;
                    pgbi
                        page-break-inside:;
                    pgbi:au
                        page-break-inside:auto;
                    pgbi:av
                        page-break-inside:avoid;
                    pgba
                        page-break-after:;
                    pgba:au
                        page-break-after:auto;
                    pgba:al
                        page-break-after:always;
                    pgba:l
                        page-break-after:left;
                    pgba:r
                        page-break-after:right;
                    orp
                        orphans:;
                    wid
                        widows:;
                    Others

                    !
                        !important
                    @f
                        @font-face {
                            font-family:;
                            src:url(|);
                        }
                    @f+
                        @font-face {
                            font-family: 'FontName';
                            src: url('FileName.eot');
                            src: url('FileName.eot?#iefix') format('embedded-opentype'),
                                 url('FileName.woff') format('woff'),
                                 url('FileName.ttf') format('truetype'),
                                 url('FileName.svg#FontName') format('svg');
                            font-style: normal;
                            font-weight: normal;
                        }
                    @i, @import
                        @import url();
                    @kf
                        @-webkit-keyframes identifier {
                            from {  }
                            to {  }
                        }
                        @-o-keyframes identifier {
                            from {  }
                            to {  }
                        }
                        @-moz-keyframes identifier {
                            from {  }
                            to {  }
                        }
                        @keyframes identifier {
                            from {  }
                            to {  }
                        }
                    @m, @media
                        @media screen {
                            
                        }
                    ac
                        align-content:;
                    ac:c
                        align-content:center;
                    ac:fe
                        align-content:flex-end;
                    ac:fs
                        align-content:flex-start;
                    ac:s
                        align-content:stretch;
                    ac:sa
                        align-content:space-around;
                    ac:sb
                        align-content:space-between;
                    ai
                        align-items:;
                    ai:b
                        align-items:baseline;
                    ai:c
                        align-items:center;
                    ai:fe
                        align-items:flex-end;
                    ai:fs
                        align-items:flex-start;
                    ai:s
                        align-items:stretch;
                    anim
                        animation:;
                anim-
                        animation:name duration timing-function delay iteration-count direction fill-mode;
                    animdel
                        animation-delay:time;
                    animdir
                        animation-direction:normal;
                    animdir:a
                        animation-direction:alternate;
                    animdir:ar
                        animation-direction:alternate-reverse;
                    animdir:n
                        animation-direction:normal;
                    animdir:r
                        animation-direction:reverse;
                    animdur
                        animation-duration:0s;
                    animfm
                        animation-fill-mode:both;
                    animfm:b
                        animation-fill-mode:backwards;
                    animfm:bt, animfm:bh
                        animation-fill-mode:both;
                    animfm:f
                        animation-fill-mode:forwards;
                    animic
                        animation-iteration-count:1;
                    animic:i
                        animation-iteration-count:infinite;
                    animn
                        animation-name:none;
                    animps
                        animation-play-state:running;
                    animps:p
                        animation-play-state:paused;
                    animps:r
                        animation-play-state:running;
                    animtf
                        animation-timing-function:linear;
                    animtf:cb
                        animation-timing-function:cubic-bezier(0.1, 0.7, 1.0, 0.1);
                    animtf:e
                        animation-timing-function:ease;
                    animtf:ei
                        animation-timing-function:ease-in;
                    animtf:eio
                        animation-timing-function:ease-in-out;
                    animtf:eo
                        animation-timing-function:ease-out;
                    animtf:l
                        animation-timing-function:linear;
                    ap
                        appearance:${none};
                as
                        align-self:;
                    as:a
                        align-self:auto;
                    as:b
                        align-self:baseline;
                    as:c
                        align-self:center;
                    as:fe
                        align-self:flex-end;
                    as:fs
                        align-self:flex-start;
                    as:s
                        align-self:stretch;
                    bfv
                        backface-visibility:;
                    bfv:h
                        backface-visibility:hidden;
                    bfv:v
                        backface-visibility:visible;
                    bg:ie
                        filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='x.png',sizingMethod='crop');
                    cm
                        /* ${child} */
                    colm
                        columns:;
                    colmc
                        column-count:;
                    colmf
                        column-fill:;
                    colmg
                        column-gap:;
                    colmr
                        column-rule:;
                    colmrc
                        column-rule-color:;
                    colmrs
                        column-rule-style:;
                    colmrw
                        column-rule-width:;
                    colms
                        column-span:;
                    colmw
                        column-width:;
                    d:ib+
                        display: inline-block;
                        *display: inline;
                        *zoom: 1;
                    fx
                        flex:;
                    fxb
                        flex-basis:;
                    fxd
                        flex-direction:;
                fxd:c
                        flex-direction:column;
                    fxd:cr
                        flex-direction:column-reverse;
                    fxd:r
                        flex-direction:row;
                    fxd:rr
                        flex-direction:row-reverse;
                    fxf
                        flex-flow:;
                    fxg
                        flex-grow:;
                    fxsh
                        flex-shrink:;
                    fxw
                        flex-wrap: ;
                    fxw:n
                        flex-wrap:nowrap;
                    fxw:w
                        flex-wrap:wrap;
                    fxw:wr
                        flex-wrap:wrap-reverse;
                jc
                        justify-content:;
                    jc:c
                        justify-content:center;
                    jc:fe
                        justify-content:flex-end;
                    jc:fs
                        justify-content:flex-start;
                    jc:sa
                        justify-content:space-around;
                    jc:sb
                        justify-content:space-between;
                    mar
                        max-resolution:res;
                    mir
                        min-resolution:res;
                    op+
                        opacity: ;
                        filter: alpha(opacity=);
                    op:ie
                        filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
                    op:ms
                        -ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';
                    ord
                        order:;
                    ori
                        orientation:;
                    ori:l
                        orientation:landscape;
                    ori:p
                        orientation:portrait;
                    tov
                        text-overflow:${ellipsis};
                    tov:c
                        text-overflow:clip;
                    tov:e
                        text-overflow:ellipsis;
                trf
                        transform:;
                trf:r
                        transform: rotate(angle);
                    trf:rx
                        transform: rotateX(angle);
                    trf:ry
                        transform: rotateY(angle);
                    trf:rz
                        transform: rotateZ(angle);
                    trf:sc
                        transform: scale(x, y);
                    trf:sc3
                        transform: scale3d(x, y, z);
                    trf:scx
                        transform: scaleX(x);
                    trf:scy
                        transform: scaleY(y);
                    trf:scz
                        transform: scaleZ(z);
                    trf:skx
                        transform: skewX(angle);
                    trf:sky
                        transform: skewY(angle);
                    trf:t
                        transform: translate(x, y);
                    trf:t3
                        transform: translate3d(tx, ty, tz);
                    trf:tx
                        transform: translateX(x);
                    trf:ty
                        transform: translateY(y);
                    trf:tz
                        transform: translateZ(z);
                    trfo
                        transform-origin:;
                    trfs
                        transform-style:preserve-3d;
                trs
                        transition:prop time;
                    trsde
                        transition-delay:time;
                    trsdu
                        transition-duration:time;
                    trsp
                        transition-property:prop;
                    trstf
                        transition-timing-function:tfunc;
                    us
                        user-select:${none};
                    wfsm
                        -webkit-font-smoothing:${antialiased};
                    wfsm:a
                        -webkit-font-smoothing:antialiased;
                    wfsm:n
                        -webkit-font-smoothing:none;
                    wfsm:s, wfsm:sa
                        -webkit-font-smoothing:subpixel-antialiased;
                    wm
                        writing-mode:lr-tb;
                    wm:btl
                        writing-mode:bt-lr;
                    wm:btr
                        writing-mode:bt-rl;
                    wm:lrb
                        writing-mode:lr-bt;
                    wm:lrt
                        writing-mode:lr-tb;
                    wm:rlb
                        writing-mode:rl-bt;
                    wm:rlt
                        writing-mode:rl-tb;
                    wm:tbl
                        writing-mode:tb-lr;
                    wm:tbr
                        writing-mode:tb-rl;

                XSL
                    tmatch, tm
                        <xsl:template match="" mode=""></xsl:template>
                    tname, tn
                        <xsl:template name=""></xsl:template>
                    call
                        <xsl:call-template name="" />
                    ap
                        <xsl:apply-templates select="" mode="" />
                    api
                        <xsl:apply-imports />
                    imp
                        <xsl:import href="" />
                    inc
                        <xsl:include href="" />
                    ch
                        <xsl:choose></xsl:choose>
                    xsl:when, wh
                        <xsl:when test=""></xsl:when>
                    ot
                        <xsl:otherwise></xsl:otherwise>
                    if
                        <xsl:if test=""></xsl:if>
                    par
                        <xsl:param name=""></xsl:param>
                    pare
                        <xsl:param name="" select="" />
                    var
                        <xsl:variable name=""></xsl:variable>
                    vare
                        <xsl:variable name="" select="" />
                    wp
                        <xsl:with-param name="" select="" />
                    key
                        <xsl:key name="" match="" use="" />
                    elem
                        <xsl:element name=""></xsl:element>
                    attr
                        <xsl:attribute name=""></xsl:attribute>
                    attrs
                        <xsl:attribute-set name=""></xsl:attribute-set>
                    cp
                        <xsl:copy select="" />
                    co
                        <xsl:copy-of select="" />
                    val
                        <xsl:value-of select="" />
                    each, for
                        <xsl:for-each select=""></xsl:for-each>
                    tex
                        <xsl:text></xsl:text>
                    com
                        <xsl:comment></xsl:comment>
                    msg
                        <xsl:message terminate="no"></xsl:message>
                    fall
                        <xsl:fallback></xsl:fallback>
                    num
                        <xsl:number value="" />
                    nam
                        <namespace-alias stylesheet-prefix="" result-prefix="" />
                    pres
                        <xsl:preserve-space elements="" />
                    strip
                        <xsl:strip-space elements="" />
                    proc
                        <xsl:processing-instruction name=""></xsl:processing-instruction>
                    sort
                        <xsl:sort select="" order="" />
                    choose+
                        Alias of xsl:choose>xsl:when+xsl:otherwise
                        <xsl:choose>
                            <xsl:when test=""></xsl:when>
                            <xsl:otherwise></xsl:otherwise>
                        </xsl:choose>
                    xsl
                        Alias of !!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{
                        |}
                        <?xml version="1.0" encoding="UTF-8"?>
                        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"></xsl:stylesheet>
                !!!
                        <?xml version="1.0" encoding="UTF-8"?>
----
~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/emmet-vim.test1.txt
~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/emmetvim.txt

html keywords
        <nav>
html semantic elements
            <header>
            <nav>
                .
                <article>
                <aside>
                <details>
                <figcaption>
                <figure>
            <main>
                .
                <mark>
            <section>
                .
                <summary>
                <time>
            <footer>

    https://way2tutorial.com/html/tag/index.php
https://www.w3schools.com/TAGs/
    https://techspirited.com/all-html-tags-list-of-all-html-tags
    https://www.bitdegree.org/learn/html-tags

Tag     Description
                <!--...-->  Defines a comment
                <!DOCTYPE>      Defines the document type
            <a>     Defines a hyperlink
            <img>   Defines an image
                <abbr>  Defines an abbreviation or an acronym
                <body>  Defines the document's body
                <button>    Defines a clickable button
                <canvas>    Used to draw graphics, on the fly, via scripting (usually JavaScript)
                <caption>   Defines a table caption
                <hr>    Defines a thematic change in the content
                <h1> to <h6>    Defines HTML headings
                <form>  Defines an HTML form for user input
                <head>  Contains metadata/information for the document
                <input>     Defines an input control
                <html>  Defines the root of an HTML document
                <ul>    Defines an unordered list
                <p>     Defines a paragraph
                <br>    Defines a single line break
                <script>    Defines a client-side script
                <tbody>     Groups the body content in a table
                <td>    Defines a cell in a table
                <textarea>  Defines a multiline input control (text area)
                <header>    Defines a header for a document or section
                <tfoot>     Groups the footer content in a table
                <th>    Defines a header cell in a table
                <tr>    Defines a row in a table
                <thead>     Groups the header content in a table
                <nav>   Defines navigation links
                <main>  Specifies the main content of a document
                <li>    Defines a list item
                <meta>  Defines metadata about an HTML document
                <acronym>   Not supported in HTML5. Use <abbr> instead.
                Defines an acronym
                <address>   Defines contact information for the author/owner of a document
                <applet>    Not supported in HTML5. Use <embed> or <object> instead.
                Defines an embedded applet
                <area>  Defines an area inside an image map
                <article>   Defines an article
                <aside>     Defines content aside from the page content
                <audio>     Defines embedded sound content
                <b>     Defines bold text
                <base>  Specifies the base URL/target for all relative URLs in a document
                <basefont>  Not supported in HTML5. Use CSS instead.
                Specifies a default color, size, and font for all text in a document
                <bdi>   Isolates a part of text that might be formatted in a different direction from other text outside it
                <bdo>   Overrides the current text direction
                <big>   Not supported in HTML5. Use CSS instead.
                Defines big text
                <blockquote>    Defines a section that is quoted from another source
                <center>    Not supported in HTML5. Use CSS instead.
                Defines centered text
                <cite>  Defines the title of a work
                <code>  Defines a piece of computer code
                <col>   Specifies column properties for each column within a <colgroup> element 
                <colgroup>  Specifies a group of one or more columns in a table for formatting
                <data>  Adds a machine-readable translation of a given content
                <datalist>  Specifies a list of pre-defined options for input controls
                <dd>    Defines a description/value of a term in a description list
                <del>   Defines text that has been deleted from a document
                <details>   Defines additional details that the user can view or hide
                <dfn>   Specifies a term that is going to be defined within the content
                <dialog>    Defines a dialog box or window
                <dir>   Not supported in HTML5. Use <ul> instead.
                Defines a directory list
                <div>   Defines a section in a document
                <dl>    Defines a description list
                <dt>    Defines a term/name in a description list
                <em>    Defines emphasized text 
                <embed>     Defines a container for an external application
                <fieldset>  Groups related elements in a form
                <figcaption>    Defines a caption for a <figure> element
                <figure>    Specifies self-contained content
                <font>  Not supported in HTML5. Use CSS instead.
                Defines font, color, and size for text
                <footer>    Defines a footer for a document or section
                <frame>     Not supported in HTML5.
                Defines a window (a frame) in a frameset
                <frameset>  Not supported in HTML5.
                Defines a set of frames
                <i>     Defines a part of text in an alternate voice or mood
                <iframe>    Defines an inline frame
                <ins>   Defines a text that has been inserted into a document
                <kbd>   Defines keyboard input
                <label>     Defines a label for an <input> element
                <legend>    Defines a caption for a <fieldset> element
                <link>  Defines the relationship between a document and an external resource (most used to link to style sheets)
                <map>   Defines an image map
                <mark>  Defines marked/highlighted text
                <meter>     Defines a scalar measurement within a known range (a gauge)
                <noframes>  Not supported in HTML5.
                Defines an alternate content for users that do not support frames
                <noscript>  Defines an alternate content for users that do not support client-side scripts
                <object>    Defines a container for an external application
                <optgroup>  Defines a group of related options in a drop-down list
                <option>    Defines an option in a drop-down list
                <output>    Defines the result of a calculation
                <param>     Defines a parameter for an object
                <picture>   Defines a container for multiple image resources
                <pre>   Defines preformatted text
                <progress>  Represents the progress of a task
                <q>     Defines a short quotation
                <rp>    Defines what to show in browsers that do not support ruby annotations
                <rt>    Defines an explanation/pronunciation of characters (for East Asian typography)
                <ruby>  Defines a ruby annotation (for East Asian typography)
                <s>     Defines text that is no longer correct
                <samp>  Defines sample output from a computer program
                <section>   Defines a section in a document
                <select>    Defines a drop-down list
                <small>     Defines smaller text
                <source>    Defines multiple media resources for media elements (<video> and <audio>)
                <span>  Defines a section in a document
                <strike>    Not supported in HTML5. Use <del> or <s> instead.
                Defines strikethrough text
                <strong>    Defines important text
                <style>     Defines style information for a document
                <sub>   Defines subscripted text
                <summary>   Defines a visible heading for a <details> element
                <sup>   Defines superscripted text
                <svg>   Defines a container for SVG graphics
                <table>     Defines a table
                <ol>    Defines an ordered list
                <template>  Defines a container for content that should be hidden when the page loads
                <time>  Defines a specific time (or datetime)
                <title>     Defines a title for the document
                <track>     Defines text tracks for media elements (<video> and <audio>)
                <tt>    Not supported in HTML5. Use CSS instead.
                Defines teletype text
                <u>     Defines some text that is unarticulated and styled differently from normal text
                <var>   Defines a variable
                <video>     Defines embedded video content
                <wbr>   Defines a possible line-break


==== CSS3+  ~/Empire/Doks/Comp/lang/webdev/c3/

~/Empire/Doks/Comp/lang/webdev/c3/c3cb.pdf
~/Empire/Doks/Comp/lang/webdev/c3/cssrefact.pdf

buv23 css keywords-list [** __]
                :root
                body
                main
                aside
                article
                article.reverse
                article.card
                article section
                nav
                nav a
                nav a:hover
                nav img
                nav a.login
                nav a.login:hover
                .card h1
                .card footer
                .card footer a
                .card footer a.active
                .card img.close
                .card img.profile
                .card h1
                .card p
                .card a
                .card a:hover
                .card aside
                .card aside span
                .card aside.top
                .card aside.bottom
                ----
                .dice aside:nth-child(1) { grid-area: side-1; }
                .dice aside:nth-child(2) { grid-area: side-2; }
                article.big
                article.card
                article.product
                aside
                aside article
                button
                button:hover
                .card aside
                .card aside.bottom
                .card aside span
                .card aside.top
                .dice
                .dice aside
                .dice.dots-1
                    .dice.dots-2
                    .dice.dots-3
                    .dice.dots-4
                    .dice.dots-5
                    .dice.dots-6
                .dice.faded
                footer
                .gallery
                .gallery .img
                header
                main
                main article
                nav
                p
                .price
                .product aside
                .product aside h1
                .product aside h2
                .product figure
                .product figure figcaption
                .product figure img
                .product section
                .product section h1
                .product section h2
                section.col-3
                section.col-4
                .wrapper
                .wrapper > *
                .dice.dots-1 aside:nth-child(1)
                    .dice.dots-2 aside:nth-child(1)
                    .dice.dots-2 aside:nth-child(2)
                    .dice.dots-3 aside:nth-child(1)
                    .dice.dots-3 aside:nth-child(2)
                    .dice.dots-3 aside:nth-child(3)
                    .dice.dots-4 aside:nth-child(1)
                    .dice.dots-4 aside:nth-child(2)
                    .dice.dots-4 aside:nth-child(3)
                    .dice.dots-4 aside:nth-child(4)
                    .dice.dots-5 aside:nth-child(1)
                    .dice.dots-5 aside:nth-child(2)
                    .dice.dots-5 aside:nth-child(3)
                    .dice.dots-5 aside:nth-child(4)
                    .dice.dots-5 aside:nth-child(5)
                    .dice.dots-6 aside:nth-child(1)
                    .dice.dots-6 aside:nth-child(2)
                    .dice.dots-6 aside:nth-child(3)
                    .dice.dots-6 aside:nth-child(4)
                    .dice.dots-6 aside:nth-child(5)
                    .dice.dots-6 aside:nth-child(6)
                .sect-a { grid-area: sect-a; }
                    .sect-b { grid-area: sect-b; }
                    .sect-c { grid-area: sect-c; }
                    .sect-d { grid-area: sect-d; }
                    .sect-e { grid-area: sect-e; }
                    .sect-f { grid-area: sect-f; }
                    .sect-g { grid-area: sect-g; }
                    .sect-a { grid-area: sect-a; }
                    .sect-b { grid-area: sect-b; }
                    .sect-c { grid-area: sect-c; }
                    .sect-d { grid-area: sect-d; }
                    .sect-e { grid-area: sect-e; }
                    .sect-f { grid-area: sect-f; }
                    .sect-g { grid-area: sect-g; }
                article.big-a { grid-area: big-a; }
                    article.big-b { grid-area: big-b; }
                    article.big-c { grid-area: big-c; }
                    article.big-d { grid-area: big-d; }
                    article.big-a { grid-area: big-a; }
                    article.big-b { grid-area: big-b; }
                    article.big-c { grid-area: big-c; }
                    article.big-d { grid-area: big-d; }
            ----
                cursor: pointer;
                ----
                appearance: none;
                background: #EEE;
                background: rgb(190, 24, 24);
                background: rgba(0,0,0,.4);
                background: none;
                background: rgba(255, 234, 40, 0.6) !important;
                height: 100vh;
                height: 3rem;
                height: 50%;
                width: 800px;
                width: 18rem;
                width: calc(100% - 3rem);
                max-width: 1000px;
                margin: 0;
                margin: 1rem;
                margin: auto;
                margin: auto auto auto 1rem; 
                 margin: 1rem 1rem auto auto;
                 margin: .75rem 0 .5rem 0;
                 margin: auto .5rem 1.5rem .5rem;
                margin-top: auto;
                margin-left: auto;
                display: flex;
                display: grid;
                display: none;
                flex: 1;
                gap: .5rem;
                grid-template-columns: repeat(3, 1rem);
                grid-template-rows: 1rem 1rem 1rem;
                line-height: 1.4;
                flex-direction: column;
                flex-direction: row-reverse;
                box-shadow: 0 0 3rem rgba(0,0,0,.1);
                box-sizing: border-box;
                 border-radius: 999rem;
                 border-radius: .25rem;
                border: .5rem solid white;
                 border: 1px solid #222;
                 border: none;
                padding: .25rem 1rem;
                    padding: .5rem;
                    padding: 0 1.6rem;
                    padding: 0;
                text-decoration: none;
                font-size: .85rem;
                font-style: italic;
                font-weight: 400;
                color: #666;
                    color: rgba(255, 255, 255, .6);
                    color: rgba(0,0,0,.8);
                    color: rgba(59, 28, 28, 0.4);
                opacity: .4;
                justify-content: center;
                    justify-content: flex-end;
                    justify-content: space-between;
                justify-content: flex-start !important;  __
                text-align: center;
                align-items: center;
                align-self: flex-start;
                align-self: flex-end;
                transform: rotate(180deg);
                ----
                font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
                grid-area: footer;
                    grid-area: gallery;
                    grid-area: header;
                    grid-area: main;
                    grid-area: nav;
                    grid-area: sidebar;
                grid-auto-rows: 10rem;
                grid-auto-rows: 4rem;
                grid-column: auto / span 3;
                grid-column: auto / span 6;
                grid-template-columns: repeat(3, 1fr);
                margin: .25rem 0;
                    margin: 2rem 0 0 0;
                    margin: 2rem 0 0 auto;
                    margin: 2rem auto;
                    margin: auto 0 0 auto;
                    margin: auto .5rem .5rem auto;
                    margin: .25rem 0;
                    margin: 2rem auto;

                display: block;
                grid-column: 2 / 3;
                grid-row: 2 / 3;
                -------      
                | | | |
                -------      
                | | | |
                -------      
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 3 / 3;
                    grid-row: 3 / 3;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 2 / 3;
                    grid-row: 2 / 3;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 3 / 4;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 3 / 4;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 3 / 4;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 2 / 3;
                    grid-row: 2 / 3;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 3 / 4;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 3 / 4;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 1 / 2;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 2 / 3;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 2 / 3;
                    display: block;
                    grid-column: 1 / 2;
                    grid-row: 3 / 4;
                    display: block;
                    grid-column: 3 / 4;
                    grid-row: 3 / 4;
                grid-template-areas:
                ". . ."
                ". side-1 ."
                ". . .";
                    grid-template-areas:
                    "side-1 . ."
                    ". . ."
                    ". . side-2";
                    grid-template-areas:
                    "side-1 . ."
                    ". side-2 ."
                    ". . side-3";
                    grid-template-areas:
                    "side-1 . side-2"
                    ". . ."
                    "side-3 . side-4";
                    grid-template-areas:
                    "side-1 . side-2"
                    ". side-3 ."
                    "side-4 . side-5";
                    grid-template-areas:
                    "side-1 . side-2"
                    "side-3 . side-4"
                    "side-5 . side-6";
                align-items: center;
                grid-column: 1 / 4;
                    grid-row: 1 / 4;
                    grid-column: 1 / 4;
                    grid-row: 4 / 5;
                    grid-column: 1 / 3;
                    grid-row: 5 / 12;
                    grid-column: 3 / 3;
                    grid-row: 5 / 12;
                    grid-column: 1 / 4;
                    grid-row: 12 / 14;
                align-items: center;
                grid-column: auto / span 3;
                    grid-row: auto / span 3;
                    grid-column: auto / span 3;
                    grid-column: auto / span 2;
                    grid-row: auto / span 6;
                    grid-column: auto / span 1;
                    grid-row: auto / span 6;
                    grid-column: auto / span 3;
                    grid-row: auto / span 2;
                grid-template-columns: repeat(3, 1fr);
                grid-template-rows: 12rem 4rem 24rem 8rem;
                grid-template-areas: 
                "header header header"
                "nav nav nav"
                "main main sidebar"
                "footer footer footer";
                grid-template-columns: repeat(3, 1fr);
                grid-template-rows: 12rem 4rem 24rem 8rem;
                grid-template-areas: 
                "header header header"
                "nav nav nav"
                "main main sidebar"
                "footer footer footer";
                grid-column: auto / span 12;
                grid-column: auto / span 3;
                grid-column: auto / span 4;
                grid-column: auto / span 8;
                grid-template-columns: repeat(12, 1fr);
                grid-template-columns: repeat(12, 1fr);
                grid-template-rows: 3rem 16rem auto 12rem 12rem 12rem;
                grid-template-areas: 
                "nav nav nav nav nav nav nav nav nav nav nav nav"
                "header header header header header header header header header header header header"
                "main main main main main main main main sidebar sidebar sidebar sidebar"
                "sect-a sect-a sect-a sect-a sect-b sect-b sect-b sect-b sect-c sect-c sect-c sect-c"
                "sect-d sect-d sect-d sect-e sect-e sect-e sect-f sect-f sect-f sect-g sect-g sect-g"
                "footer footer footer footer footer footer footer footer footer footer footer footer";
                grid-template-columns: repeat(12, 1fr);
                grid-template-rows: 3rem 16rem auto 12rem 12rem 12rem;
                grid-template-areas: 
                "nav nav nav nav nav nav nav nav nav nav nav nav"
                "header header header header header header header header header header header header"
                    "main main main main main main main main sidebar sidebar sidebar sidebar"
                    "sect-a sect-a sect-a sect-a sect-b sect-b sect-b sect-b sect-c sect-c sect-c sect-c"
                    "sect-d sect-d sect-d sect-e sect-e sect-e sect-f sect-f sect-f sect-g sect-g sect-g"
                    "footer footer footer footer footer footer footer footer footer footer footer footer";
                    grid-template-columns: repeat(6, 1fr);
                    grid-template-rows: 3rem 16rem auto 12rem 12rem auto 12rem;
                    grid-template-areas: 
                    "nav nav nav nav nav nav"
                    "header header header header header header"
                    "main main main main sidebar sidebar"
                    "big-a big-a big-a big-b big-b big-b"
                    "big-c big-c big-c big-d big-d big-d"
                    "gallery gallery gallery gallery gallery gallery"
                    "footer footer footer footer footer footer";
                    grid-template-columns: repeat(6, 1fr);
                    grid-template-rows: 3rem 16rem auto 12rem 12rem auto 12rem;
                    grid-template-areas: 
                    "nav nav nav nav nav nav"
                    "header header header header header header"
                    "main main main main sidebar sidebar"
                    "big-a big-a big-a big-b big-b big-b"
                    "big-c big-c big-c big-d big-d big-d"
                "gallery gallery gallery gallery gallery gallery"
                "footer footer footer footer footer footer";

            @media screen and (max-width: 480px) {
                .wrapper {
                    display: grid;
                    margin: 0 auto auto auto;
                    padding: .5rem;
                    gap: .5rem;
                    grid-template-columns: repeat(1, 1fr);
                    grid-template-rows: 4rem 12rem 24rem 16rem 8rem;
                    grid-template-areas: 
                    "nav"
                    "header"
                    "main"
                    "sidebar"
                    "footer";
                }
            }

            @media screen and (max-width: 480px) {
     
                body {
                    margin: .5rem;
                }

                aside {
                    display: none !important;
                }

                .wrapper {
                    margin: 0;
                    grid-template-columns: repeat(2, 1fr);
                    grid-template-rows: 3rem 30rem auto 0 12rem 12rem 12rem 12rem 12rem 16rem;
                    grid-template-areas: 
                    "nav nav"
                    "header header"
                    "main main"
                    "sidebar sidebar"
                    "sect-a sect-a"
                    "sect-b sect-b"
                    "sect-c sect-c"
                    "sect-d sect-e"
                    "sect-f sect-g"
                    "footer footer";
                    gap: .5rem;
                }
            }

            @media screen and (max-width: 480px) {

                .wrapper {
                    margin: 0;
                    padding: .5rem;
                    box-sizing: border-box;
                    grid-template-columns: repeat(2, 1fr);
                    grid-template-rows: 3rem 24rem auto auto 12rem 12rem auto 12rem;
                    grid-template-areas: 
                    "nav nav"
                    "header header"
                    "main main"
                    "sidebar sidebar"
                    "big-a big-b"
                    "big-c big-d"
                    "gallery gallery"
                    "footer footer";
                    gap: .5rem;
                }

                .gallery {
                    grid-template-columns: repeat(2, 1fr);
                    grid-auto-rows: 8rem;
                }

            }
                ----
                article .box-1 { background:rgba(100,0,0,1); flex: 0; }
                    article .box-2 { background:rgba(100,20,0,1); flex: 1; }
                    article .box-3 { background:rgba(100,40,0,1); flex: 1; }
                    article .box-4 { background:rgba(100,60,0,1); flex: 2; }
                    article .box-5 { background:rgba(100,80,0,1); flex: 3; }
                    article .box-6 { background:rgba(100,100,0,1); flex: 5; }
                    article .box-7 { background:rgba(100,120,0,1); flex: 8; }
                    article .box-8 { background:rgba(100,140,0,1); flex: 13; }
                    article .box-9 { background:rgba(100,160,0,1); flex: 21; }
                    article .box-10 { background:rgba(100,180,0,1); flex: 34; }
css3 reference/keywords
https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
                    -
                    --*
                    -webkit-line-clamp
                    abs()
                    accent-color
                    acos()
                    :active
                    additive-symbols (@counter-style)
                    ::after (:after)
                    align-content
                    align-items
                    align-self
                    align-tracks
                    all
                    <an-plus-b>
                    <angle>
                    <angle-percentage>
                    animation
                    animation-composition
                    animation-delay
                    animation-direction
                    animation-duration
                    animation-fill-mode
                    animation-iteration-count
                    animation-name
                    animation-play-state
                    animation-range
                    animation-range-end
                    animation-range-start
                    animation-timeline
                    animation-timing-function
                    @annotation
                    annotation()
                    :any-link
                    appearance
                    ascent-override (@font-face)
                    asin()
                    aspect-ratio
                    atan()
                    atan2()
                    attr()
                    ::backdrop
                    backdrop-filter
                    backface-visibility
                background
                background-color
                    background-attachment
                    background-blend-mode
                    background-clip
                    background-image
                    background-origin
                    background-position
                    background-position-x
                    background-position-y
                    background-repeat
                    background-size
                box-shadow          box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
                    box-sizing
                    .
                padding             padding: 0.5em;
                    padding-block
                    padding-block-end
                    padding-block-start
                    padding-bottom
                    padding-inline
                    padding-inline-end
                    padding-inline-start
                    padding-left
                    padding-right
                    padding-top
                margin
                    margin-block
                    margin-block-end
                    margin-block-start
                    margin-bottom
                    margin-inline
                    margin-inline-end
                    margin-inline-start
                    margin-left
                    margin-right
                    margin-top
                    margin-trim
                border
                    border-block
                    border-block-color
                    border-block-end
                    border-block-end-color
                    border-block-end-style
                    border-block-end-width
                    border-block-start
                    border-block-start-color
                    border-block-start-style
                    border-block-start-width
                    border-block-style
                    border-block-width
                    border-bottom
                    border-bottom-color
                    border-bottom-left-radius
                    border-bottom-right-radius
                    border-bottom-style
                    border-bottom-width
                    border-collapse
                    border-color
                    border-end-end-radius
                    border-end-start-radius
                    border-image
                    border-image-outset
                    border-image-repeat
                    border-image-slice
                    border-image-source
                    border-image-width
                    border-inline
                    border-inline-color
                    border-inline-end
                    border-inline-end-color
                    border-inline-end-style
                    border-inline-end-width
                    border-inline-start
                    border-inline-start-color
                    border-inline-start-style
                    border-inline-start-width
                    border-inline-style
                    border-inline-width
                    border-left
                    border-left-color
                    border-left-style
                    border-left-width
                border-radius       border-radius: 5px;
                    border-right
                    border-right-color
                    border-right-style
                    border-right-width
                    border-spacing
                    border-start-end-radius
                    border-start-start-radius
                    border-style
                    border-top
                    border-top-color
                    border-top-left-radius
                    border-top-right-radius
                    border-top-style
                    border-top-width
                    border-width
                    base-palette (@font-palette-values)
                    <basic-shape>
                    ::before (:before)
                    :blank
                    bleed (@page)
                    <blend-mode>
                    block-overflow
                    block-size
                    blur()
                    bottom
                    @bottom-center
                    box-decoration-break
                    break-after
                    break-before
                    break-inside
                    brightness()
                    calc()
                    caption-side
                    caret
                    caret-color
                    caret-shape
                    @character-variant
                    character-variant()
                    @charset
                    :checked
                    circle()
                    clamp()
                    clear
                    clip
                    clip-path
                    <color>
                    color
                    color-scheme
                    column-count
                    column-fill
                    column-gap
                    column-rule
                    column-rule-color
                    column-rule-style
                    column-rule-width
                    column-span
                    column-width
                    columns
                    conic-gradient()
                    contain
                    contain-intrinsic-block-size
                    contain-intrinsic-height
                    contain-intrinsic-inline-size
                    contain-intrinsic-size
                    contain-intrinsic-width
                    container
                    container-name
                    container-type
                    content
                    content-visibility
                    contrast()
                    cos()
                    <counter>
                    counter-increment
                    counter-reset
                    counter-set
                    @counter-style
                    counters()
                    cross-fade()
                    cubic-bezier()
                    ::cue
                    ::cue-region
                    :current
                    cursor
                    <custom-ident>
                    length#cap
                    length#ch
                    length#cm
                    angle#deg
                    <dashed-ident>
                    :default
                    :defined
                    descent-override (@font-face)
                    <dimension>
                    :dir
                    direction
                    :disabled
                    display
                    <display-box>
                    <display-inside>
                    <display-internal>
                    <display-legacy>
                    <display-listitem>
                    <display-outside>
                    drop-shadow()
                    resolution#dpcm
                    resolution#dpi
                    resolution#dppx
                    element()
                    ellipse()
                    :empty
                    empty-cells
                    :enabled
                    env()
                    exp()
                    length#em
                    length#ex
                    fallback (@counter-style)
                    filter
                    <filter-function>
                    :first
                    :first-child
                    ::first-letter (:first-letter)
                    ::first-line (:first-line)
                    :first-of-type
                    fit-content()
                    <flex>
                    flex
                    flex-basis
                    flex-direction
                    flex-flow
                    flex-grow
                    flex-shrink
                    flex-wrap
                    flex_value#fr
                    float
                    :focus
                    :focus-visible
                    :focus-within
                    font
                    font-display (@font-face)
                    @font-face
                    font-family
                    font-family (@font-face)
                    font-family (@font-palette-values)
                    font-feature-settings
                    font-feature-settings (@font-face)
                    @font-feature-values
                    font-kerning
                    font-language-override
                    font-optical-sizing
                    font-palette
                    @font-palette-values
                    font-size
                    font-size-adjust
                    font-stretch
                    font-stretch (@font-face)
                    font-style
                    font-style (@font-face)
                    font-synthesis
                    font-synthesis-position
                    font-synthesis-small-caps
                    font-synthesis-style
                    font-synthesis-weight
                    font-variant
                    font-variant (@font-face)
                    font-variant-alternates
                    font-variant-caps
                    font-variant-east-asian
                    font-variant-emoji
                    font-variant-ligatures
                    font-variant-numeric
                    font-variant-position
                    font-variation-settings
                    font-variation-settings (@font-face)
                    font-weight
                    font-weight (@font-face)
                    forced-color-adjust
                    format()
                    <frequency>
                    <frequency-percentage>
                    :fullscreen
                    :future
                    angle#grad
                    gap
                    <gradient>
                    ::grammar-error
                    grayscale()
                    grid
                    grid-area
                    grid-auto-columns
                    grid-auto-flow
                    grid-auto-rows
                    grid-column
                    grid-column-end
                    grid-column-start
                    grid-row
                    grid-row-end
                    grid-row-start
                    grid-template
                    grid-template-areas
                    grid-template-columns
                    grid-template-rows
                    frequency#Hz
                    hanging-punctuation
                    :has
                    height
                    height (@viewport)
                    @historical-forms
                    :host()
                    :host-context()
                    :hover
                    hsl()
                    hsla()
                    hue-rotate()
                    hwb()
                    hyphenate-character
                    hyphenate-limit-chars
                    hyphens
                    hypot()
                    <ident>
                    <image>
                    image()
                    image-orientation
                    image-rendering
                    image-resolution
                    image-set()
                    @import
                    :in-range
                    :indeterminate
                    inherit
                    inherits (@property)
                    initial
                    initial-letter
                    initial-letter-align
                    initial-value (@property)
                    inline-size
                    input-security
                    inset
                    inset()
                    inset-block
                    inset-block-end
                    inset-block-start
                    inset-inline
                    inset-inline-end
                    inset-inline-start
                    <integer>
                    :invalid
                    invert()
                    :is
                    isolation
                    length#ic
                    length#in
                  justify-content
                  justify-items
                  justify-self
                    justify-tracks
                    frequency#kHz
                    @keyframes
                    lab()
                    :lang
                    :last-child
                    :last-of-type
                    @layer
                    layer()
                    layer() (@import)
                    lch()
                    leader()
                    :left
                    left
                    @left-bottom
                    <length>
                    <length-percentage>
                    letter-spacing
                    line-break
                    line-clamp
                    line-gap-override (@font-face)
                    line-height
                    line-height-step
                    <line-style>
                    linear-gradient()
                    :link
                    list-style
                    list-style-image
                    list-style-position
                    list-style-type
                    local()
                    :local-link
                    log()
                    length#mm
                    ::marker
                    marks (@page)
                    mask
                    mask-border
                    mask-border-mode
                    mask-border-outset
                    mask-border-repeat
                    mask-border-slice
                    mask-border-source
                    mask-border-width
                    mask-clip
                    mask-composite
                    mask-image
                    mask-mode
                    mask-origin
                    mask-position
                    mask-repeat
                    mask-size
                    mask-type
                    masonry-auto-flow
                    math-depth
                    math-shift
                    math-style
                    matrix()
                    matrix3d()
                    max()
                    max-block-size
                    max-height
                    max-height (@viewport)
                    max-inline-size
                    max-lines
                    max-width
                    max-width (@viewport)
                    max-zoom (@viewport)
                    @media
                    min()
                    min-block-size
                    min-height
                    min-height (@viewport)
                    min-inline-size
                    min-width
                    min-width (@viewport)
                    min-zoom (@viewport)
                    minmax()
                    mix-blend-mode
                    mod()
                    time#ms
                    @namespace
                    negative (@counter-style)
                    :not
                    :nth-child
                    :nth-col
                    :nth-last-child
                    :nth-last-col
                    :nth-last-of-type
                    :nth-of-type
                    <number>
                    object-fit
                    object-position
                    offset
                    offset-anchor
                    offset-distance
                    offset-path
                    offset-position
                    offset-rotate
                    :only-child
                    :only-of-type
                    opacity
                    opacity()
                    :optional
                    order
                    orientation (@viewport)
                    @ornaments
                    ornaments()
                    orphans
                    :out-of-range
                    outline
                    outline-color
                    outline-offset
                    outline-style
                    outline-width
                    <overflow>
                    overflow-anchor
                    overflow-block
                    overflow-clip-margin
                    overflow-inline
                    overflow-wrap
                    overflow-x
                    overflow-y
                    overlay
                    override-colors (@font-palette-values)
                    overscroll-behavior
                    overscroll-behavior-block
                    overscroll-behavior-inline
                    overscroll-behavior-x
                    overscroll-behavior-y
                    Pseudo-classes
                    Pseudo-elements
                    length#pc
                    length#pt
                    length#px
                    pad (@counter-style)
                    @page
                    page
                    page-break-after
                    page-break-before
                    page-break-inside
                    page-orientation (@page)
                    paint()
                    paint-order
                    ::part
                    :past
                    path()
                    :paused
                    <percentage>
                    perspective
                    perspective()
                    perspective-origin
                    :picture-in-picture
                    place-content
                    place-items
                    place-self
                    ::placeholder
                    :placeholder-shown
                    :playing
                    pointer-events
                    polygon()
                    <position>
                    position
                    pow()
                    prefix (@counter-style)
                    print-color-adjust
                    @property
                    length#Q
                    quotes
                    angle#rad
                    length#rem
                    radial-gradient()
                    range (@counter-style)
                    <ratio>
                    ray()
                    :read-only
                    :read-write
                    rect()
                    rem()
                    repeat()
                    repeating-conic-gradient()
                    repeating-linear-gradient()
                    repeating-radial-gradient()
                    :required
                    resize
                    <resolution>
                    reversed()
                    revert
                    rgb()
                    rgba()
                    :right
                    right
                    @right-bottom
                    :root
                    rotate
                    rotate()
                    rotate3d()
                    rotateX()
                    rotateY()
                    rotateZ()
                    round()
                    row-gap
                    ruby-align
                    ruby-merge
                    ruby-position
                    saturate()
                    scale
                    scale()
                    scale3d()
                    scaleX()
                    scaleY()
                    scaleZ()
                    :scope
                    @scope
                    scroll()
                    scroll-behavior
                    scroll-margin
                    scroll-margin-block
                    scroll-margin-block-end
                    scroll-margin-block-start
                    scroll-margin-bottom
                    scroll-margin-inline
                    scroll-margin-inline-end
                    scroll-margin-inline-start
                    scroll-margin-left
                    scroll-margin-right
                    scroll-margin-top
                    scroll-padding
                    scroll-padding-block
                    scroll-padding-block-end
                    scroll-padding-block-start
                    scroll-padding-bottom
                    scroll-padding-inline
                    scroll-padding-inline-end
                    scroll-padding-inline-start
                    scroll-padding-left
                    scroll-padding-right
                    scroll-padding-top
                    scroll-snap-align
                    scroll-snap-stop
                    scroll-snap-type
                    @scroll-timeline
                    scroll-timeline
                    scroll-timeline-axis
                    scroll-timeline-name
                    scrollbar-color
                    scrollbar-gutter
                    scrollbar-width
                    ::selection
                    selector()
                    sepia()
                    <shape>
                    shape-image-threshold
                    shape-margin
                    shape-outside
                    sign()
                    sin()
                    size (@page)
                    size-adjust (@font-face)
                    skew()
                    skewX()
                    skewY()
                    ::slotted
                    speak-as (@counter-style)
                    ::spelling-error
                    sqrt()
                    src (@font-face)
                    @starting-style
                    steps()
                    <string>
                    @styleset
                    styleset()
                    @stylistic
                    stylistic()
                    suffix (@counter-style)
                    @supports
                    supports() (@import)
                    @swash
                    swash()
                    symbols (@counter-style)
                    symbols()
                    syntax (@property)
                    system (@counter-style)
                    time#s
                    angle#turn
                    tab-size
                    table-layout
                    tan()
                    :target
                    target-counter()
                    target-counters()
                    ::target-text
                    target-text()
                    :target-within
                    text-align
                    text-align-last
                    text-combine-upright
                    text-decoration
                    text-decoration-color
                    text-decoration-line
                    text-decoration-skip
                    text-decoration-skip-ink
                    text-decoration-style
                    text-decoration-thickness
                    text-emphasis
                    text-emphasis-color
                    text-emphasis-position
                    text-emphasis-style
                    text-indent
                    text-justify
                    text-orientation
                    text-overflow
                    text-rendering
                    text-shadow
                    text-size-adjust
                    text-transform
                    text-underline-offset
                    text-underline-position
                    text-wrap
                    <time>
                    <time-percentage>
                    timeline-scope
                    <timing-function>
                    top
                    @top-center
                    touch-action
                    transform
                    transform-box
                    <transform-function>
                    transform-origin
                    transform-style
                    transition
                    transition-behavior
                    transition-delay
                    transition-duration
                    transition-property
                    transition-timing-function
                    translate
                    translate()
                    translate3d()
                    translateX()
                    translateY()
                    translateZ()
                    type()
                    unicode-bidi
                    unicode-range (@font-face)
                    unset
                    <url>
                    url()
                    :user-invalid
                    user-select
                    :user-valid
                    user-zoom (@viewport)
                    length#vh
                    length#vmax
                    length#vmin
                    length#vw
                    :valid
                    var()
                    vertical-align
                    view()
                    view-timeline
                    view-timeline-axis
                    view-timeline-inset
                    view-timeline-name
                    ::view-transition
                    ::view-transition-group
                    ::view-transition-image-pair
                    view-transition-name
                    ::view-transition-new
                    ::view-transition-old
                    @viewport
                    viewport-fit (@viewport)
                    visibility
                    :visited
                    :where
                    white-space
                    white-space-collapse
                    white-space-trim
                    widows
                    width
                    width (@viewport)
                    will-change
                    word-break
                    word-spacing
                    word-wrap
                    writing-mode
                    resolution#x
                    z-index
                    zoom (@viewport)
(( [+Upcoming: Sass functions = string, numeric, list, map, selector, introspector, color]
      https://www.w3schools.com/sass/sass_functions_string.php  ))
https://www.w3schools.com/cssref/default.asp
                (+urls to some more pages in the html-file)
                font-size ; Specifies the font size of text
                color ; Sets the color of text
                font ; A shorthand property for the font-style, font-variant, font-weight, font-size/line-height, and the font-family properties
                sans-serif
                monospace
                align-content ; Specifies the alignment between the lines inside a flexible container when the items do not use all available space
                align-items ; Specifies the alignment for items inside a flexible container
                align-self ; Specifies the alignment for selected items inside a flexible container
                all ; Resets all properties (except unicode-bidi and direction)
                animation ; A shorthand property for all the animation-* properties
                animation-delay ; Specifies a delay for the start of an animation
                animation-direction ; Specifies whether an animation should be played forwards, backwards or in alternate cycles
                animation-duration ; Specifies how long an animation should take to complete one cycle
                animation-fill-mode ; Specifies a style for the element when the animation is not playing (before it starts, after it ends, or both)
                animation-iteration-count ; Specifies the number of times an animation should be played
                animation-name ; Specifies a name for the @keyframes animation
                animation-play-state ; Specifies whether the animation is running or paused
                animation-timing-function ; Specifies the speed curve of an animation
                B
                backface-visibility ; Defines whether or not the back face of an element should be visible when facing the user
                background ; A shorthand property for all the background-* properties
                background-attachment ; Sets whether a background image scrolls with the rest of the page, or is fixed
                background-blend-mode ; Specifies the blending mode of each background layer (color/image)
                background-clip ; Defines how far the background (color or image) should extend within an element
                background-color ; Specifies the background color of an element
                background-image ; Specifies one or more background images for an element
                background-origin ; Specifies the origin position of a background image
                background-position ; Specifies the position of a background image
                background-repeat ; Sets if/how a background image will be repeated
                background-size ; Specifies the size of the background images
                border ; A shorthand property for border-width, border-style and border-color
                border-bottom ; A shorthand property for border-bottom-width, border-bottom-style and border-bottom-color
                border-bottom-color ; Sets the color of the bottom border
                border-bottom-left-radius ; Defines the radius of the border of the bottom-left corner
                border-bottom-right-radius ; Defines the radius of the border of the bottom-right corner
                border-bottom-style ; Sets the style of the bottom border
                border-bottom-width ; Sets the width of the bottom border
                border-collapse ; Sets whether table borders should collapse into a single border or be separated
                border-color ; Sets the color of the four borders
                border-image ; A shorthand property for all the border-image-* properties
                border-image-outset ; Specifies the amount by which the border image area extends beyond the border box
                border-image-repeat ; Specifies whether the border image should be repeated, rounded or stretched
                border-image-slice ; Specifies how to slice the border image
                border-image-source ; Specifies the path to the image to be used as a border
                border-image-width ; Specifies the width of the border image
                border-left ; A shorthand property for all the border-left-* properties
                border-left-color ; Sets the color of the left border
                border-left-style ; Sets the style of the left border
                border-left-width ; Sets the width of the left border
                border-radius ; A shorthand property for the four border-*-radius properties
                border-right ; A shorthand property for all the border-right-* properties
                border-right-color ; Sets the color of the right border
                border-right-style ; Sets the style of the right border
                border-right-width ; Sets the width of the right border
                border-spacing ; Sets the distance between the borders of adjacent cells
                border-style ; Sets the style of the four borders
                border-top ; A shorthand property for border-top-width, border-top-style and border-top-color
                border-top-color ; Sets the color of the top border
                border-top-left-radius ; Defines the radius of the border of the top-left corner
                border-top-right-radius ; Defines the radius of the border of the top-right corner
                border-top-style ; Sets the style of the top border
                border-top-width ; Sets the width of the top border
                border-width ; Sets the width of the four borders
                bottom ; Sets the elements position, from the bottom of its parent element
                box-decoration-break ; Sets the behavior of the background and border of an element at page-break, or, for in-line elements, at line-break.
                box-shadow ; Attaches one or more shadows to an element
                box-sizing ; Defines how the width and height of an element are calculated: should they include padding and borders, or not
                break-after ; Specifies whether or not a page-, column-, or region-break should occur after the specified element
                break-before ; Specifies whether or not a page-, column-, or region-break should occur before the specified element
                break-inside ; Specifies whether or not a page-, column-, or region-break should occur inside the specified element
                C
                caption-side ; Specifies the placement of a table caption
                caret-color ; Specifies the color of the cursor (caret) in inputs, textareas, or any element that is editable
                @charset ; Specifies the character encoding used in the style sheet
                clear ; Specifies what should happen with the element that is next to a floating element
                clip ; Clips an absolutely positioned element
                column-count ; Specifies the number of columns an element should be divided into
                column-fill ; Specifies how to fill columns, balanced or not
                column-gap ; Specifies the gap between the columns
                column-rule ; A shorthand property for all the column-rule-* properties
                column-rule-color ; Specifies the color of the rule between columns
                column-rule-style ; Specifies the style of the rule between columns
                column-rule-width ; Specifies the width of the rule between columns
                column-span ; Specifies how many columns an element should span across
                column-width ; Specifies the column width
                columns ; A shorthand property for column-width and column-count
                content ; Used with the :before and :after pseudo-elements, to insert generated content
                counter-increment ; Increases or decreases the value of one or more CSS counters
                counter-reset ; Creates or resets one or more CSS counters
                cursor ; Specifies the mouse cursor to be displayed when pointing over an element
                D
                direction ; Specifies the text direction/writing direction
                display ; Specifies how a certain HTML element should be displayed
                E
                empty-cells ; Specifies whether or not to display borders and background on empty cells in a table
                F
                filter ; Defines effects (e.g. blurring or color shifting) on an element before the element is displayed
                flex ; A shorthand property for the flex-grow, flex-shrink, and the flex-basis properties
                flex-basis ; Specifies the initial length of a flexible item
                flex-direction ; Specifies the direction of the flexible items
                flex-flow ; A shorthand property for the flex-direction and the flex-wrap properties
                flex-grow ; Specifies how much the item will grow relative to the rest
                flex-shrink ; Specifies how the item will shrink relative to the rest
                flex-wrap ; Specifies whether the flexible items should wrap or not
                float ; Specifies whether an element should float to the left, right, or not at all
                @font-face ; A rule that allows websites to download and use fonts other than the "web-safe" fonts
                font-family ; Specifies the font family for text
                font-feature-settings ; Allows control over advanced typographic features in OpenType fonts
                @font-feature-values ; Allows authors to use a common name in font-variant-alternate for feature activated differently in OpenType
                font-kerning ; Controls the usage of the kerning information (how letters are spaced)
                font-language-override ; Controls the usage of language-specific glyphs in a typeface
                font-size-adjust ; Preserves the readability of text when font fallback occurs
                font-stretch ; Selects a normal, condensed, or expanded face from a font family
                font-style ; Specifies the font style for text
                font-synthesis ; Controls which missing typefaces (bold or italic) may be synthesized by the browser
                font-variant ; Specifies whether or not a text should be displayed in a small-caps font
                font-variant-alternates ; Controls the usage of alternate glyphs associated to alternative names defined in @font-feature-values
                font-variant-caps ; Controls the usage of alternate glyphs for capital letters
                font-variant-east-asian ; Controls the usage of alternate glyphs for East Asian scripts (e.g Japanese and Chinese)
                font-variant-ligatures ; Controls which ligatures and contextual forms are used in textual content of the elements it applies to
                font-variant-numeric ; Controls the usage of alternate glyphs for numbers, fractions, and ordinal markers
                font-variant-position ; Controls the usage of alternate glyphs of smaller size positioned as superscript or subscript regarding the baseline of the font
                font-weight ; Specifies the weight of a font
                G
                gap ; A shorthand property for the row-gap and the column-gap properties
                grid ; A shorthand property for the grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and the grid-auto-flow properties
                grid-area ; Either specifies a name for the grid item, or this property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end, and grid-column-end properties
                grid-auto-columns ; Specifies a default column size
                grid-auto-flow ; Specifies how auto-placed items are inserted in the grid
                grid-auto-rows ; Specifies a default row size
                grid-column ; A shorthand property for the grid-column-start and the grid-column-end properties
                grid-column-end ; Specifies where to end the grid item
                grid-column-gap ; Specifies the size of the gap between columns
                grid-column-start ; Specifies where to start the grid item
                grid-gap ; A shorthand property for the grid-row-gap and grid-column-gap properties
                grid-row ; A shorthand property for the grid-row-start and the grid-row-end properties
                grid-row-end ; Specifies where to end the grid item
                grid-row-gap ; Specifies the size of the gap between rows
                grid-row-start ; Specifies where to start the grid item
                grid-template ; A shorthand property for the grid-template-rows, grid-template-columns and grid-areas properties
                grid-template-areas ; Specifies how to display columns and rows, using named grid items
                grid-template-columns ; Specifies the size of the columns, and how many columns in a grid layout
                grid-template-rows ; Specifies the size of the rows in a grid layout
                H
                hanging-punctuation ; Specifies whether a punctuation character may be placed outside the line box
                height ; Sets the height of an element
                hyphens ; Sets how to split words to improve the layout of paragraphs
                I
                image-rendering ; Specifies the type of algorithm to use for image scaling
                @import ; Allows you to import a style sheet into another style sheet
                isolation ; Defines whether an element must create a new stacking content
                J
                justify-content ; Specifies the alignment between the items inside a flexible container when the items do not use all available space
                K
                @keyframes ; Specifies the animation code
                L
                left ; Specifies the left position of a positioned element
                letter-spacing ; Increases or decreases the space between characters in a text
                line-break ; Specifies how/if to break lines
                line-height ; Sets the line height
                list-style ; Sets all the properties for a list in one declaration
                list-style-image ; Specifies an image as the list-item marker
                list-style-position ; Specifies the position of the list-item markers (bullet points)
                list-style-type ; Specifies the type of list-item marker
                M
                margin ; Sets all the margin properties in one declaration
                margin-bottom ; Sets the bottom margin of an element
                margin-left ; Sets the left margin of an element
                margin-right ; Sets the right margin of an element
                margin-top ; Sets the top margin of an element
                mask ; Hides parts of an element by masking or clipping an image at specific places
                mask-clip ; Specifies the mask area
                mask-composite ; Represents a compositing operation used on the current mask layer with the mask layers below it
                mask-image ; Specifies an image to be used as a mask layer for an element
                mask-mode ; Specifies whether the mask layer image is treated as a luminance mask or as an alpha mask
                mask-origin ; Specifies the origin position (the mask position area) of a mask layer image
                mask-position ; Sets the starting position of a mask layer image (relative to the mask position area)
                mask-repeat ; Specifies how the mask layer image is repeated
                mask-size ; Specifies the size of a mask layer image
                mask-type ; Specifies whether an SVG <mask> element is treated as a luminance mask or as an alpha mask
                max-height ; Sets the maximum height of an element
                max-width ; Sets the maximum width of an element
                @media ; Sets the style rules for different media types/devices/sizes
                min-height ; Sets the minimum height of an element
                min-width ; Sets the minimum width of an element
                mix-blend-mode ; Specifies how an element's content should blend with its direct parent background
                O
                object-fit ; Specifies how the contents of a replaced element should be fitted to the box established by its used height and width
                object-position ; Specifies the alignment of the replaced element inside its box
                opacity ; Sets the opacity level for an element
                order ; Sets the order of the flexible item, relative to the rest
                orphans ; Sets the minimum number of lines that must be left at the bottom of a page or column
                outline ; A shorthand property for the outline-width, outline-style, and the outline-color properties
                outline-color ; Sets the color of an outline
                outline-offset ; Offsets an outline, and draws it beyond the border edge
                outline-style ; Sets the style of an outline
                outline-width ; Sets the width of an outline
                overflow
                    Specifies what happens if content overflows an element's box
                overflow-wrap ; Specifies whether or not the browser can break lines with long words, if they overflow the container
                overflow-x ; Specifies whether or not to clip the left/right edges of the content, if it overflows the element's content area
                overflow-y ; Specifies whether or not to clip the top/bottom edges of the content, if it overflows the element's content area
                P
                padding ; A shorthand property for all the padding-* properties
                padding-bottom ; Sets the bottom padding of an element
                padding-left ; Sets the left padding of an element
                padding-right ; Sets the right padding of an element
                padding-top ; Sets the top padding of an element
                page-break-after ; Sets the page-break behavior after an element
                page-break-before ; Sets the page-break behavior before an element
                page-break-inside ; Sets the page-break behavior inside an element
                perspective ; Gives a 3D-positioned element some perspective
                perspective-origin ; Defines at which position the user is looking at the 3D-positioned element
                pointer-events ; Defines whether or not an element reacts to pointer events
                position ; Specifies the type of positioning method used for an element (static, relative, absolute or fixed)
                Q
                quotes ; Sets the type of quotation marks for embedded quotations
                R
                resize ; Defines if (and how) an element is resizable by the user
                right ; Specifies the right position of a positioned element
                row-gap ; Specifies the gap between the grid rows
                S
                scroll-behavior ; Specifies whether to smoothly animate the scroll position in a scrollable box, instead of a straight jump
                T
                tab-size ; Specifies the width of a tab character
                table-layout ; Defines the algorithm used to lay out table cells, rows, and columns
                text-align ; Specifies the horizontal alignment of text
                text-align-last ; Describes how the last line of a block or a line right before a forced line break is aligned when text-align is "justify"
                text-combine-upright ; Specifies the combination of multiple characters into the space of a single character
                text-decoration ; Specifies the decoration added to text
                text-decoration-color ; Specifies the color of the text-decoration
                text-decoration-line ; Specifies the type of line in a text-decoration
                text-decoration-style ; Specifies the style of the line in a text decoration
                text-indent ; Specifies the indentation of the first line in a text-block
                text-justify ; Specifies the justification method used when text-align is "justify"
                text-orientation ; Defines the orientation of the text in a line
                text-overflow ; Specifies what should happen when text overflows the containing element
                text-shadow ; Adds shadow to text
                text-transform ; Controls the capitalization of text
                text-underline-position ; Specifies the position of the underline which is set using the text-decoration property
                top ; Specifies the top position of a positioned element
                transform ; Applies a 2D or 3D transformation to an element
                transform-origin ; Allows you to change the position on transformed elements
                transform-style ; Specifies how nested elements are rendered in 3D space
                transition ; A shorthand property for all the transition-* properties
                transition-delay ; Specifies when the transition effect will start
                transition-duration ; Specifies how many seconds or milliseconds a transition effect takes to complete
                transition-property ; Specifies the name of the CSS property the transition effect is for
                transition-timing-function ; Specifies the speed curve of the transition effect
                U
                unicode-bidi ; Used together with the direction property to set or return whether the text should be overridden to support multiple languages in the same document
                user-select ; Specifies whether the text of an element can be selected
                V
                vertical-align ; Sets the vertical alignment of an element
                visibility ; Specifies whether or not an element is visible
                W
                white-space ; Specifies how white-space inside an element is handled
                widows ; Sets the minimum number of lines that must be left at the top of a page or column
                width ; Sets the width of an element
                word-break ; Specifies how words should break when reaching the end of a line
                word-spacing ; Increases or decreases the space between words in a text
                word-wrap ; Allows long, unbreakable words to be broken and wrap to the next line
                writing-mode ; Specifies whether lines of text are laid out horizontally or vertically
                Z
                z-index ; Sets the stack order of a positioned element

c3cb
            1. Using HTML Basics  1
                1.1 Picking a Text Editor  3
                1.2 Coding a Basic HTML Page  4
                1.3 Understanding DOCTYPEs and Effects on Browser Layout  6
                1.4 Marking Up Headers  10
                1.5 Making Appropriate Quotations  12
                1.6 Adding an Image  14
                1.7 Adding Audio with HTML5  16
                1.8 Incorporating Video with HTML5  17
                1.9 Using strong and em Effectively  19
                1.10 Creating Lists  20
                1.11 Making a Link to a Web Page  22
                1.12 Coding Tables  25
                1.13 Creating an HTML vCard (hCard)  27
                1.14 Marking Up an Event (hCalendar)  28
                1.15 Validating HTML  29
            2. CSS Basics  33
                2.1 Applying CSS Rules to a Web Page  35
                2.2 Using Basic Selectors to Apply Styles  38
                2.3 Applying Child Selectors  47
                2.4 Applying Adjacent Selectors  49
                2.5 Applying Attribute Selectors  51
                2.6 Using Pseudo-Classes  53
                2.7 Using Pseudo-Elements  54
                2.8 Determining When to Use Class and ID Selectors  56
                2.9 Understanding CSS Properties  61
                2.10 Understanding the Box Model  62
                2.11 Associating Styles to a Web Page  70
                2.12 Understanding the Origin  73
                2.13 Understanding the Sort Order Within CSS  73
                2.14 Using !important to Override Certain CSS Rules  76
                2.15 Clarifying Specificity  77
                2.16 Setting Up Different Types of Stylesheets  79
                2.17 Adding Comments Within Stylesheets  83
                2.18 Organizing the Contents of a Stylesheet  84
                2.19 Working with Shorthand Properties  86
                2.20 Setting Up an Alternate Stylesheet  88
                2.21 Using Floats  89
                2.22 Using Self-Clearing Floated Elements  92
                2.23 Using Absolute Positioning  95
                2.24 Using Relative Positioning  98
                2.25 Using Shackling Positioning  99
                2.26 Stacking Elements with z-index  101
                2.27 Validating CSS Rules  102
            3. Web Typography  105
                3.1 Specifying Fonts  106
                3.2 Using Web-Safe Fonts  109
                3.3 Setting an Ampersand Flourish  112
                3.4 Embedding Font Files  114
                3.5 Forcing a Break on Really Long Words  118
                3.6 Specifying Font Measurements and Sizes  119
                3.7 Gaining More Cross-Browser Consistency with Font Sizes  121
                3.8 Setting Hyphens, Em Dashes, and En Dashes  125
                3.9 Centering Text  126
                3.10 Setting Text to Be Justified  126
                3.11 Indicating an Overflow of Text with an Ellipsis  128
                3.12 Removing Space Between Headings and Paragraphs  129
                3.13 Setting a Simple Initial Cap  130
                3.14 Setting a Larger, Centered Initial Cap  131
                3.15 Setting an Initial Cap with Decoration (Imagery)  133
                3.16 Creating a Heading with Stylized Text  135
                3.17 Creating a Heading with Stylized Text and Borders  137
                3.18 Stylizing a Heading with Text and an Image  139
                3.19 Creating a Pull Quote with HTML Text  141
                3.20 Placing a Pull Quote to the Side of a Column  143
                3.21 Creating a Pull Quote with Borders  145
                3.22 Creating a Pull Quote with Images  146
                3.23 Setting the Indent in the First Line of a Paragraph  149
                3.24 Setting the Indent of Entire Paragraphs  150
                3.25 Creating a Hanging Indent  153
                3.26 Styling the First Line of a Paragraph  156
                3.27 Styling the First Line of a Paragraph with an Image  158
                3.28 Creating a Highlighted Text Effect  159
                3.29 Changing the Text Selection Color  160
                3.30 Changing Line Spacing  161
                3.31 Adding a Graphic Treatment to HTML Text  163
                3.32 Placing a Shadow Behind Text  165
                3.33 Adjusting the Space Between Letters and Words  168
                3.34 Applying Baseline Rhythm on Web Typography  171
                3.35 Styling Superscripts and Subscripts Without Messing the Text Baseline  173
                3.36 Setting Up Multiple Columns of Text  175
            4. Images  179
                4.1 Transforming Color Images to Black and White in IE with CSS  179
                4.2 Setting a Border Around an Image  180
                4.3 Setting a Rounded Border Around an Image  182
                4.4 Removing Borders Set on Images by Default in Some Browsers  184
                4.5 Setting a Background Image  186
                4.6 Creating a Line of Background Images  187
                4.7 Positioning a Background Image  188
                4.8 Using Multiple Background Images on One HTML Element  191
                4.9 Setting Images on a Border  194
                4.10 Creating a Stationary Background Image  197
                4.11 Stretching Images As the Browser Resizes  199
                4.12 Stretching an Image Across the Entire Browser Window  202
                4.13 Making Images Scalable  203
                4.14 Setting How a Browser Renders an Image  205
                4.15 Rotating Images with CSS  206
                4.16 Setting Gradients with CSS  208
                4.17 Creating Transparent PNG Images for IE6 and Later  211
                4.18 Using Transparent PNG Images with JavaScript  212
                4.19 Overlaying HTML Text on an Image  215
                4.20 Replacing HTML Text with an Image  217
                4.21 Building a Panoramic Image Presentation  220
                4.22 Combining Different Image Formats  222
                4.23 Rounding Corners with Fixed-Width Columns  227
                4.24 Rounding Corners (Sliding Doors Technique)  230
                4.25 Rounding Corners (Mountaintop Technique)  235
                4.26 Rounding Corners with JavaScript  239
                4.27 Setting a Shadow on an Element with CSS  242
                4.28 Placing a Drop Shadow Behind an Image  244
                4.29 Placing a Smooth Drop Shadow Behind an Image  247
                4.30 Making Word Balloons  251
                4.31 Hindering People from Stealing Your Images  254
                4.32 Inserting Reflections on Images Automatically  256
                4.33 Using Image Sprites  258
                4.34 Clipping Background Images  260
                4.35 Applying Masks to Images and Borders  262
            5. Page Elements  265
                5.1 Eliminating Page Margins  265
                5.2 Resetting Browser-Style Defaults for Elements  268
                5.3 Coloring the Scroll Bar in IE  272
                5.4 Techniques for Centering Elements on a Web Page  275
                5.5 Placing a Page Border  280
                5.6 Placing a Border Around the Browser’s Viewport  283
                5.7 Customizing a Horizontal Rule  285
                5.8 Adding a Lightbox  287
                5.9 Changing the Opacity on Elements  292
                5.10 Adjusting the Opacity of Background Colors  294
            6. Lists  299
                6.1 Changing the Format of a List  299
                6.2 Changing the Color of a List Bullet  302
                6.3 Writing Cross-Browser Indentation in Lists  303
                6.4 Placing Dividers Between List Items  304
                6.5 Creating Custom Text Markers for Lists  306
                6.6 Creating Custom Image Markers for Lists  308
                6.7 Inserting Larger Custom Image Markers for Lists  311
                6.8 Making a List Presentation Rich with Imagery  313
                6.9 Creating Inline Lists  318
                6.10 Making Hanging Indents in a List  319
                6.11 Moving the Marker Inside the List  321
                6.12 Styling a Definition List  323
                6.13 Styling a Screenplay with the HTML5 dialog Element  329
                6.14 Turning a List into a Directory Tree  331
                6.15 Creating a Star Ranking System  335
            7. Links and Navigation  341
                7.1 Easily Generating Text-Based Menus and Submenus  341
                7.2 Removing Underlines from Links (and Adding Other Styles)  343
                7.3 Changing Link Colors  346
                7.4 Removing Dotted Lines When Clicking on a Link in Internet Explorer  347
                7.5 Changing Link Colors in Different Sections of a Page  348
                7.6 Placing Icons at the End of Different Kinds of Links  349
                7.7 Changing Cursors  351
                7.8 Creating Rollovers Without JavaScript  353
                7.9 Animating Rollovers on Links with CSS3 Transitions  354
                7.10 Creating Text Navigation Menus and Rollovers  358
                7.11 Adding Submenus to Vertical Menus  363
                7.12 Building Horizontal Navigation Menus  365
                7.13 Building Horizontal Navigation Menus with Drop-Down Menus  372
                7.14 Building a Navigation Menu with Access Keys  374
                7.15 Creating Breadcrumb Navigation  375
                7.16 Creating Image-Based Rollovers  379
                7.17 Creating Collapsible Menus  383
                7.18 Creating Contextual Menus  386
                7.19 Making Tool Tips with the title Attribute  389
                7.20 Designing a Dynamic Tabbed Menu  389
                7.21 Changing Styles on Anchored Links  392
            8. Forms  397
                8.1 Modifying the Spacing Around a Form  398
                8.2 Removing the Space Around a Form  399
                8.3 Setting Styles for Input Elements  399
                8.4 Changing Styles on Form Elements When a User Clicks on Them  402
                8.5 Applying Different Styles to Different Input Elements in the Same Form  403
                8.6 Setting Styles for textarea Elements  404
                8.7 Setting Styles for select and option Elements  406
                8.8 Creating a Macintosh-Styled Search Field  408
                8.9 Styling Form Buttons  411
                8.10 Creating an Image Submit Button  415
                8.11 Setting Up a Submit-Once-Only Button  416
                8.12 Creating a Submit Button That Looks Like HTML Text  417
                8.13 Making an HTML Text Link Operate Like a Submit Button  419
                8.14 Designing a Web Form Without Tables  419
                8.15 Designing a Two-Column Form Without Tables  422
                8.16 Integrating Form Feedback with a Form  425
                8.17 Styling Access Keys in Web Forms  428
                8.18 Grouping Common Form Elements  429
                8.19 Entering Data into a Form That Is Similar to a Spreadsheet  431
                8.20 Sample Design: A Login Form  434
                8.21 Sample Design: A Registration Form  441
            9. Tables  453
                9.1 Setting the Borders and Cell Padding for Tables  453
                9.2 Setting the Cell Spacing  456
                9.3 Setting the Style for Captions  457
                9.4 Setting the Styles Within Table Cells  458
                9.5 Setting the Styles for Table Header Elements  460
                9.6 Removing Gaps from Images Placed in Table Cells  462
                9.7 Eliminating Gaps Between Table Cells  464
                9.8 Creating Alternating Background Colors in Table Rows  465
                9.9 Adding a Highlighting Effect on a Table Row  468
                9.10 Sample Design: An Elegant Calendar  470
            10. Designing Web Pages for Printing  481
                10.1 Applying a Stylesheet for Printing to a Web Page  481
                10.2 Replacing a Color Logo for a Black-and-White Logo When Printing Web Pages  484
                10.3 Making a Web Form Print-Ready  486
                10.4 Displaying URIs After Links  490
                10.5 Inserting Special Characters Before Links  492
                10.6 Setting Page Breaks for a Printed Document  493
                10.7 Sample Design: A Printer-Friendly Page with CSS  495
            11. Page Layouts  505
                11.1 Building a One-Column Layout  505
                11.2 Building a Two-Column Layout  507
                11.3 Building a Two-Column Layout with Fixed-Width Columns  511
                11.4 Creating a Flexible Multicolumn Layout with Floats  514
                11.5 Creating a Fixed-Width Multicolumn Layout with Floats  517
                11.6 Creating a Flexible Multicolumn Layout with Positioning  520
                11.7 Creating a Fixed-Width Multicolumn Layout with Positioning  523
                11.8 Using Floats to Display Columns in Any Order  524
                11.9 Designing an Asymmetric Layout  544
                11.10 Designing Resolution-Independent Layouts  547
            12. Hacks, Workarounds, and Troubleshooting  551
                12.1 Overriding Inline Styles  552
                12.2 Diagnosing CSS Bugs and Browser Issues  552
                12.3 Using Bookmarklets to Troubleshoot CSS  554
                12.4 Using Browser Extensions to Troubleshoot CSS  555
                12.5 Patching Up Internet Explorer 6  557
                12.6 Patching Up Internet Explorer 6 with JavaScript  558
                12.7 Using Conditional Comments to Deliver Styles to Different Versions of Internet Explorer  559
                12.8 Using CSS Filters to Deliver CSS Rules to Almost Any Browser  561
                12.9 Setting Up an Intelligent CSS Delivery System for Modern Browsers  562
                12.10 Testing a Site Design on More Than One Platform with Only One Computer  564
                12.11 Testing a Website with a Text Browser  565
            13. Designing with CSS  569
                13.1 Enlarging Text Excessively  570
                13.2 Creating Unexpected Incongruity  571
                13.3 Combining Unlike Elements to Create Contrast  574
                13.4 Leading the Eye with Contrast  576
                13.5 Checking for Enough Color Contrast  578
                13.6 Emphasizing a Quotation with Smart Quotes  579
                13.7 Setting a Moving Background Scene When a User Resizes the Window  582
                13.8 Adding Animation to Elements on a Page  584
                13.9 Creating a Fireworks Display As a User Scrolls  588
                13.10 Customizing the View Source Stylesheet for Firefox  590
                13.11 Designing with Grids (CSS Frameworks)  591
                13.12 Sample Design: A Cohesive Web Design  593
                13.13 Sample Design: The U.S. Flag  609
            14. Interacting with JavaScript  623
                14.1 Determining Whether JavaScript Is Available Within a Browser  623
                14.2 Applying a Different Stylesheet Based on the Time of Day  625
                14.3 Redirecting to a Mobile Site Based on the Browser’s Screen Width  626
                14.4 Adding a JavaScript Framework to a Web Page  627
                14.5 Using CSS3 Selectors in IE6 and IE7  628
                14.6 Zebra-Striping an HTML Table with JavaScript  630
                14.7 Highlighting a Table Row with Mouseovers  632
                14.8 Adding Effects to Simple Image Rollovers  634
                14.9 Making a Row of Elements with a Variable Amount of Content the Same Height  635
                14.10 Setting a Link to Open a New Window  638
                14.11 Making an Entire div Element Clickable  639
                14.12 Supporting Transparent PNGs in IE6 with JavaScript  640
                14.13 Delivering HTML5 and CSS3 to Browsers That Can Handle Them  642
            A. Resources  645
            B. CSS 2.1 Properties and Proprietary Extensions  651
            C. CSS 2.1 Selectors, Pseudo-Classes, and Pseudo-Elements  669
            D. CSS3 Selectors and Pseudo-Classes  673
            E. Styling of Form Elements  677
c3 refactor
            1. Refactoring and Architecture  1
                What Is Refactoring?   1
                What Is Software Architecture?   1
                 Good Architectures Are Predictable  2
                 Good Architectures Promote Code Reuse  2
                 Good Architectures Are Extensible  2
                 Good Architectures Are Maintainable  2
                 Software Architecture and Refactoring  2
                Shortcomings that Lead to Refactoring  3
                 Changing Requirements  3
                 Poorly Designed Architecture  3
                 Underestimating Difficulty  3
                 Ignoring Best Practices  3
                When Should Code Be Refactored?   4
                When Should Code NOT Be Refactored?   4
                Am I Allowed to Refactor My Code?   5
                Refactoring Examples  5
                 Refactoring Example 1: Calculating the Total Price of an Ecommerce Order  6
                 Refactoring Example 2: A Simple Example of Refactoring CSS  17
                Chapter Summary  20
            2. Understanding the Cascade  21
                What Is the Cascade?   21
                Selector Specificity  21
                Ruleset Order  23
                Inline CSS and Specificity  23
                Overriding the Cascade with the !important Declaration  24
                Chapter Summary  25
            3. Writing Better CSS  27
                Use Comments  27
                Consistently Structure Rulesets  28
                 Organize Properties with Vendor Prefixes  29
                Keep Selectors Simple  30
                 Performant Selectors  32
                Decouple CSS and JavaScript  34
                 Prefix Classes and IDs that Are Used in JavaScript  35
                 Modify Element Styles with Classes  35
                Use Classes  35
                Assign Classes Meaningful Names  36
                 Avoid Over-Modularized Classes  37
                Build a Better Box  38
                 box-sizing: content-box  39
                 box-sizing: border-box  39
                 content-box or border-box?   40
                Chapter Summary  40
            4. Classifying Different Types of Styles  41
                The Importance of Classifying Styles  41
                Normalizing Styles  41
                Base Styles  42
                 Defining Base Styles  43
                 Document Metadata  44
                 Sectioning Elements  44
                 Heading and Text Elements  45
                 Anchor Tags  47
                 Text Semantics  48
                 Lists  49
                 Grouping Elements  50
                 Tables  50
                 Forms  52
                 Images  53
                Component Styles  54
                 Define the Behavior that Needs to Be Built  55
                 Keep Component Styles Granular  56
                 Let the Component’s Container Override Visual Styles as Needed  59
                 Delegate the Assignment of Dimensions to Structural Containers  64
                Structural Styles 68
                Utility Styles  71
                Browser-Specific Styles  72
                Chapter Summary  73
            5. Testing  75
                Why Is Testing Difficult?  75
                Which Browsers Are Important to Test?  75
                Browser Market Share  76
                 Accessing Browser Statistics and Screen Resolutions in Google Analytics  76
                Testing with Multiple Browsers  79
                 Safari for iOS  79
                 Android  81
                Testing with Old Versions of Browsers  84
                 Internet Explorer and Microsoft Edge  84
                 Firefox  84
                 Safari and Safari for iOS  84
                 Chrome  85
                Testing the Bleeding Edge  85
                Third-Party Testing Services  86
                Testing with Developer Tools  86
                 Emulating Device Sizes  87
                 The Document Object Model (DOM) and CSS Styles  91
                Visual Regression Testing  93
                 Tips for Visual Regression Testing  93
                 Visual Regression Testing with Gemini  94
                Maintaining Your Code  99
                 Coding Standards  99
                 Pattern Libraries  104
                Chapter Summary  106
            6. Code Placement and Refactoring Strategies  107
                Organize CSS from Least Specific to Most Specific Styles  107
                 Normalizing Styles  108
                 Base Styles  108
                 Styles for Components and Their Containers  108
                 Structural Styles  108
                 Utility Styles  108
                 Browser-Specific Styles  108
                Multiple Files or One Big File?   109
                 Serving CSS  109
                 Developing with a Single File  111
                 Developing with Multiple Files  112
                Auditing Your CSS Before Refactoring  113
                Refactoring Strategies  115
                 Consistently Structure Rulesets  115
                 Delete Dead Code  115
                 Decouple CSS and JavaScript  116
                 Separate Base Styles  117
                 Remove Redundant IDs  120
                 Convert IDs to Classes  120
                 Separate Utility Styles  121
                 Define Reusable Components  121
                 Remove Inline CSS and Over-Modularized Classes  121
                 Segregate Browser-Specific CSS Hacks  122
                Measuring Success  122
                 Is Your Website Broken?   123
                 Number of UI Bugs  123
                 Reduced Development and Testing Time  124
                Chapter Summary  124
            A. normalize.css  125


==== SASS/SCSS

https://dev.to/finallynero/scss-cheatsheet-7g6
            SCSS Cheatsheet

            What is SCSS

            SCSS simply means Sassy CSS. Sassy CSS is a CSS preprocessor that gives you access to use features that are not available in Vanilla(normal) CSS.
            In this article I will list, explain and give Examples of some of those features.
            Variables

            In SCSS you can declare variables easily. To create a variable just add a $sign to the variable name and set them like a normal CSS property.

            // Font-weight for a project

            $font-light : 400
            $font-thick: 500
            $font-heavy: 600

            .element{
                Font-weight: $font-light;
            }

            //color palette for a project to maintain consistency

            $product-dark-blue: #324e85
            $product-light-blue:#4c7396
            $product-lighter-blue:#9bb7cf

            .element{
                color: $product-dark-blue;
            }


            Nesting

            SCSS allows you to nest CSS rules

            // vanilla CSS

            .container {
              Width: 100%;
              Color: grey;
              Background-color: green;
            }
            .container div {
              Border: 1px solid black;
            }
            .container div a {
              text-decoration: none;
              color: #f2f2f2;
            }
            .container div a::hover {
              color: #b2b2b2;
            }

            // SCSS

            .container {
              width: 100%;
              color: grey;
              background-color: green;

              div {
                border: 1px solid black;

                a {
                  text-decoration: none;
                  color: #f2f2f2;
                  &::hover {
                    color: #b2b2b2;
                  }
                }
              }
            }


            Sassy isn't It? SCSS helps you write cleaner and concise CSS.
            Inheritance(Using @extend or @mixin)
            @extend

            @extends helps you inherit the properties of another class.


            // SCSS
            .header {
              color: grey;
            }

            .sub-header {
              @extend .header;
              font-size: 40px;
            }

            Below is what the SCSS compiles to


            // Compiled CSS

            .header, .sub-header {
              color: grey;
            }

            .sub-header {
              font-size: 40px;
            }


            Mixin

            Mixin is another way SCSS implement inheritance using @mixin. You can achieve the same effects of @extend using mixin. You first create the mixin using @mixin then add it to any class that needs that property using @include

            // SCSS

            //create mixin
            @mixin red-color{
              color: grey;
            }

            .header{
              @include red-color;  /* add mixin */
            }

            .sub-header{
              @include red-color;
              font-size: 40px;
            }

            .header {
              color: grey;
            }

            .sub-header {
              color: grey;
              font-size: 40px;
            }

            Can you see the different between the compiled css of @extend and @mixin, @mixin puts the style in both selectors(header and sub-header) while @extend seperates both seletors with a comma and then apply this style to them.

            There is one thing though @mixin can do that @extend cannot, That is pass parameters and use it. @mixin can also take default values for the parameter.

            // SCSS

            @mixin fontSize ($params: 10px){
              font-size: $params;
            }

            .header{
              @include fontSize(20px);
            }

            .sub-header{
              @include fontSize(20px);
            }

            // Compiled CSS
            .header {
              font-size: 20px;
            }

            .sub-header {
              font-size: 20px;
            }

            You can use any of them if you need to inherit a class but the best practice according to CSS tricks is to use @extend when you are not passing parameters.
            Import

            SCSS allow you to import other SCSS stylesheet into a SCSS file using @import

            @import “button.scss” or @import “button”

            Partials

            Partials are SCSS files you don’t what to be compiled to CSS but you want to import them(using @import) into another file. To create a partial you just need to add an underscore to the beginning of the file name _font.scss, then you can import them with or without the underscore.
            Partials helps to modularize your code and separate concerns.
            For example in my projects I partials for colors, fonts, buttons e.t.c then I import them into a main.scss file.

            /* _colors.scss(partial) */

            $light-gray: #F2F2F2
            $dark-gray: #737373
            /*EOF colors.scss*/

            /* _buttons.scss(partial) */

            .button-primary{
              color: #4c7396;
              background-color: #ffffff;
            }
            .button-secondary{
              background: #4c7396;
              color: #FFFFFF;
            }
            /*EOF buttons.scss*/

            /* main.scss */
            @import "_buttons.scss"
            @import "_colors.scss"

            Operators

            Scss offers you different kind of operators that you can use in your CSS. Arithmetic operators like :

                Addition(+)
                Subtraction(-)
                Division(/)
                Multiplication(*) e.t.c


            // SCSS
            @mixin top-margin ($margin){
              margin-top: 30px + $margin;
            }

            .container{
              width: 800px - 80px;
              @include top-margin(10px);
            }

            //Compiled CSS

            .container {
              width: 720px;
              margin-top: 40px;
            }


            Note that arithmetic operators only work when both values use the same unit i.e rem, em, px

            They also support comparison operators like ==, !=, <, >, >=, <= and logical operators and, or, not.

            You can check out this article for more on Operators
            sarah_chima
            SASS Operators
            Sarah Chima ・ Nov 24 '17 ・ 5 min read
            :sass #css #beginners
            Color Functions

            Scss provides some function that can be used to manipulate colors. Some of them include:

                mix($colorX, $colorY, weight) : This function is used to mix two color together. First argument is the first color, second is the second color and the third argument is the percentage of first color you want to mix.

            mix(blue, grey, 30%) /*results 30% blue and 70% grey*/

                lighten($color, $amount): this function is used to return a lighter color. The first argument is the color and the second is the percentage of how much you want to lighten it.

            lighten(#ff0000, 30 ) /*results #ff9999/*

                darken($color, $amount): Takes similar arguments as lighten function but this returns a darker color specified.

            darken(#ff0000, 30 ) /*results #660000*/

                opacify($color, $amount): This function returns a color with the opacity increase. The first argument is the color and the second is value between 0 and 1.

                transparentize($color, $amount): This function makes a color more transparent, it takes similar arguments to opacify. It returns a color with the opacity reduced. You can say it is the opposite of opacify.

            These are just some of the color functions available in Scss, you can check the docs for more.
            Other functions

            Scss still offers other functions that might be useful to you

                str-length($string): This function returns the number of characters in a string.
                percentage($number): This function converts number without unit to a percentage.
                round($number): This function rounds a number to the nearest whole number.
                min($number1, $number2, $number3, …..): this function returns the minimum value from a set of numbers.
                random(): This returns a random number and takes no arguments.
                quote($string): This function adds quotes to a string.
                unquote($string): This function removes quotes from a string.
                to-lower-case($string): This function converts a string to lowercase.
                to-upper-case($string): This function converts a string to uppercase.

            Loops

            We can use for loops in our css thanks again to Scss. This can be really useful in creating utility class. You can create classes for your color, font-size , margin , padding and a lot of other properties.

            Below are some examples of loops I used to create utility classes in my projects

            /* Generate utility classes for font-size */

            @for $x from 1 through 70 {
              .font-size-#{$x} {
                font-size: 0px + $x;
              }
            }


            So I can easily have a class of font-size-20 if I need that on an element.

            /* Generate utility classes for margin */

            @for $i from 0 through 500 {
              .m#{$i} {
                margin: 0px + $i;
              }
              .mt#{$i} {
                margin-top: 0px + $i;
              }
              .mb#{$i} {
                margin-bottom: 0px + $i;
              }
              .ml#{$i} {
                margin-left: 0px + $i;
              }
              .mr#{$i} {
                margin-right: 0px + $i;
              }
            }


            If you have used loops to create utility classes in your projects please share in the comments so others can adopt them. Loops are like my favorite scss feature
            Conditionals

            Another awesome feature of scss is the ability to use If/else statements in css. I have not really used this feature in any of my projects but I think they are awesome.

            $bg: pink;
            $bg-mobile: red;

            p {
              @if $bg == pink {
                color: blue;
              } @else if $bg-mobile == red {
                color: green;
              } @else {
                color: grey;
              }
            }

            This is just a simple use case for if else statements, if you have used it in a project please share a code snippet in the comment.

            Scss has a lot more features than what is covered in this article but these are the commonly used ones. You can check out their docs.
https://quickref.me/sass
            :Sass Basics
            Introduction

                Documentation (sass-lang.com)
                Learn X in Y minutes (learnxinyminutes.com)

            Variables

             

            $defaultLinkColor: #46EAC2;

            a {
              color: $defaultLinkColor;
            }

            String interpolation

             

            $wk: -webkit-;

            .rounded-box {
              #{$wk}border-radius: 4px;
            }

            Comments

             

            /*
             Block comments
             Block comments
             Block comments
            */

            // Line comments

            Mixins

             

            @mixin heading-font {
                font-family: sans-serif;
                font-weight: bold;
            }
            h1 {
                @include heading-font;
            }

            See: Mixins
            Nesting

             

            .markdown-body {
                a {
                  color: blue;
                  &:hover {
                    color: red;
                  }
                }
            }

            to properties

             

            text: {
                // like text-align: center
                align: center;          
                // like text-transform: uppercase
                transform: uppercase; 
            }

            Extend

             

            .button {
                ···
            }

             

            .push-button {
                @extend .button;
            }

            @import

             

            @import './other_sass_file';
            @import '/code', 'lists';

            // Plain CSS @imports
            @import "theme.css";
            @import url(theme);

            The .sass or .sass extension is optional.

            :Sass Mixins
            Parameters

             

            @mixin font-size($n) {
                font-size: $n * 1.2em;
            }

             

            body {
                @include font-size(2);
            }

            Default values

             

            @mixin pad($n: 10px) {
                padding: $n;
            }

             

            body {
                @include pad(15px);
            }

            Default variable

             

            $default-padding: 10px;

            @mixin pad($n: $default-padding) {
                padding: $n;
            }

            body {
                @include pad(15px);
            }

            :Sass Color functions
            rgba

             

            rgb(100, 120, 140)
            rgba(100, 120, 140, .5)
            rgba($color, .5)

            Mixing

             

            mix($a, $b, 10%)   // 10% a, 90% b

            Modifying HSLA

             

            darken($color, 5%)
            lighten($color, 5%)

             

            saturate($color, 5%)
            desaturate($color, 5%)
            grayscale($color)

             

            adjust-hue($color, 15deg)
            complement($color)    // like adjust-hue(_, 180deg)
            invert($color)

             

            fade-in($color, .5)   // aka opacify()
            fade-out($color, .5)  // aka transparentize()
            rgba($color, .5)      // sets alpha to .5

            Getting individual values
            HSLA

             

            hue($color)         // 0deg..360deg
            saturation($color)  // 0%..100%
            lightness($color)   // 0%..100%
            alpha($color)       // 0..1 (aka opacity())

            RGB

             

            red($color)         // 0..255
            green($color)
            blue($color)

            See: hue(), red()
            Adjustments

             

            // Changes by fixed amounts
            adjust-color($color, $blue: 5)
            adjust-color($color, $lightness: -30%) // darken(_, 30%)
            adjust-color($color, $alpha: -0.4)     // fade-out(_, .4)
            adjust-color($color, $hue: 30deg)      // adjust-hue(_, 15deg)

             

            // Changes via percentage
            scale-color($color, $lightness: 50%)

             

            // Changes one property completely
            change-color($color, $hue: 180deg)
            change-color($color, $blue: 250)

            Supported: $red, $green, $blue, $hue, $saturation, $lightness, $alpha
            :Sass Other functions
            Strings

             

            unquote('hello')
            quote(hello)

             

            to-upper-case(hello)
            to-lower-case(hello)

             

            str-length(hello world)
            str-slice(hello, 2, 5)     // "ello" - it's 1-based, not 0-based
            str-insert("abcd", "X", 1) // "Xabcd"

            Units

             

            unit(3em)        // 'em'
            unitless(100px)  // false

            Numbers

             

            floor(3.5)
            ceil(3.5)
            round(3.5)
            abs(3.5)

             

            min(1, 2, 3)
            max(1, 2, 3)

             

            percentage(.5)   // 50%
            random(3)        // 0..3

            Misc

             

            variable-exists(red)    // checks for $red
            mixin-exists(red-text)  // checks for @mixin red-text
            function-exists(redify)

             

            global-variable-exists(red)

             

            selector-append('.menu', 'li', 'a')   // .menu li a
            selector-nest('.menu', '&:hover li')  // .menu:hover li
            selector-extend(...)
            selector-parse(...)
            selector-replace(...)
            selector-unify(...)

            :Sass Feature checks
            Feature check

             

            feature-exists(global-variable-shadowing)

            Features

                global-variable-shadowing
                extend-selector-pseudoclass
                units-level-3
                at-error

            :Sass Loops
            For loops

             

            @for $i from 1 through 4 {
                .item-#{$i} { left: 20px * $i; }
            }

            Each loops (simple)

             

            $menu-items: home about contact;

            @each $item in $menu-items {
                .photo-#{$item} {
                  background: url('#{$item}.jpg');
                }
            }

            Each loops (nested)

             

            $backgrounds: (home, 'home.jpg'),
                          (about, 'about.jpg');

            @each $id, $image in $backgrounds {
                .photo-#{$id} {
                  background: url($image);
                }
            }

            While loops

             

            $i: 6;
            @while $i > 0 {
                .item-#{$i} { width: 2em * $i; }
                $i: $i - 2;
            }

            :Sass Other features
            Conditionals

             

            @if $position == 'left' {
                 position: absolute;
                 left: 0;
            }
            @else if $position == 'right' {
                 position: absolute;
                 right: 0;
            }
            @else {
                 position: static;
            }

            Interpolation

             

            .#{$klass} { ... }      // Class
            call($function-name)    // Functions

            @media #{$tablet}
            font: #{$size}/#{$line-height}
            url("#{$background}.jpg")

            Lists

             

            $list: (a b c);

            nth($list, 1)  // starts with 1
            length($list)

            @each $item in $list { ... }

            Maps

             

            $map: (key1: value1, key2: value2, key3: value3);

            map-get($map, key1)
https://www.freecodecamp.org/news/the-beginners-guide-to-sass/
            What exactly is Sass?

            Sass (Syntactically Awesome Style Sheets) is a CSS preprocessor that gives your CSS superpowers.

            Let's face it: writing CSS can be difficult at times, especially in today's world of increasingly complex user interfaces.

            And many times, you'll find that you're repeating yourself often.

            Sass comes to the rescue in this situation. It helps you stick to the DRY (Do Not Repeat Yourself) philosophy when writing CSS.

            Sass provides a compiler that allows us to write stylesheets in two different syntaxes, indented and SCSS. Let's look at each now.
            Indented syntax

            This is the older syntax that is indented, and gets rid of the curly braces and semi-colons. It has a file extension of .sass.

            nav
              ul
                margin: 0
                padding: 0
                list-style: none

              li
                display: inline-block

              a
                display: block
                text-decoration: none

            SCSS syntax

            This is the newer and more popular syntax. It is essentially a subset of the CSS3 syntax. This means that you can write regular CSS with some additional functionalities.

            Due to its advanced features it is often termed as Sassy CSS. It has a file extension of .scss.

            nav {
              ul {
                margin: 0;
                padding: 0;
                list-style: none;
              }
              li {
                display: inline-block;
              }

              a {
                display: block;
                text-decoration: none;
              }
            }

                Quick Disclaimer: This article uses the SCSS syntax because it's more widely used.

            How Does Sass Work?

            Sass works in such a way that when you write your styles in a .scss file, it gets compiled into a regular CSS file. The CSS code is then loaded into the browser.

            That is why it's called a Preprocessor.
            Why should you use Sass?

                Easy to learn: If you are familiar with CSS already, then you'll be glad to know that Sass actually has a similar syntax, and so you can start using it, even after this tutorial ;)
                Compatibility: It is compatible with all versions of CSS. So, you can use any available CSS libraries.
                Saves time: It helps reduce the repetition of CSS, because of its powerful features.
                Reusable code: Sass allows for variables and chunks of code (mixins) that can be reused over and over again. This helps you save time and makes you able to code faster.
                Organized Code: Sass helps keep your code organized by using partials.
                Cross Browser Compatibility: Sass gets compiled into CSS and adds all the necessary vendor prefixes so you don't have to worry about manually writing them out.

            Features of Sass

            Here are some of the features that make Sass truly CSS with Superpowers:
            Variables in Sass

            You can declare variables in Sass. This is one of Sass's strengths since we can define variables for various properties and use them in any file.

            The benefit here is that if that value changes, you simply need to update a single line of code.

            This is done by naming a variable with a dollar symbol $ and then referencing it elsewhere in your code.

            $primary-color: #24a0ed;

            .text {
              color: $primary-color;
            }
            button {
              color: $primary-color;
              border: 2px solid $primary-color;
            }

            Nesting in Sass

            Most of the time, while writing CSS, classes are often duplicated. We can avoid this duplication by nesting styles inside the parent element.

            In CSS,

            nav {
              height: 10vh;
              width: 100%;
              display: flex;
            }

            nav ul {
              list-style: none;
              display: flex;
            }

            nav li {
              margin-right: 2.5rem;
            }

            nav li a {
              text-decoration: none;
              color: #707070;
            }

            nav li a:hover {
              color: #069c54;
            }

            With Sass, the above code can be written like this:

            nav {
              height: 10vh;
              width: 100%;
              display: flex;

              ul {
                list-style: none;
                display: flex;
              }

              li {
                margin-right: 2.5rem;

                a {
                  text-decoration: none;
                  color: #707070;

                  &:hover {
                    color: #069c54;
                  }
                }
              }
            }

            Parent Selector

            In the Sass code above, you might notice the ampersand symbol & used with the hover pseudo-class. This is called a Parent Selector.

                The parent selector, &, is a special selector invented by Sass that's used in nested selectors to refer to the outer selector. Source – Sass Documentation

            So, in the case of the code above, & will refer to the parent which is the anchor tag a.

                You can check out my article on how to implement Sass using BEM methodology.

            Partials in Sass

            This is one of the many awesome features of Sass that gives you an advantage.

            As stylesheets grow large over time, it gets difficult to maintain them. Because of this, it just makes sense to break your stylesheets into smaller chunks. In other words, Partials help you organize and structure your code.

            To declare a partial, we will start the file name with an underscore _, and add it in another Sass file using the @import directive.

            For example, if we have a _globals.scss, _variables.scss, and _buttons.scss, we could import them into the main SCSS file main.scss.

            @import "globals";
            @import "variables";
            @import "buttons";

            You'll notice that the underscore and the .scss are not added. That is because Sass automatically assumes that you are referring to the .sass or .scss file.
            Mixins in Sass

            Another major issue with CSS is that you'll often use a similar group of styles. Mixins allow you to encapsulate a group of styles, and apply those styles anywhere in your code using the @include keyword.

            An example of when you'd use mixins is when using Flexbox.

            @mixin flex-container {
              display: flex;
              justify-content: space-around;
              align-items: center;
              flex-direction: column;
              background: #ccc;
            }

            .card {
              @include flex-container;
            }

            .aside {
              @include flex-container;
            }

            Sass Functions and Operators

            Sass provides a suite of tools to help write more programmatic code.

            Sass offers built-in functions that enable us to do calculations and operations that return a specific value.

            They range from color calculations to math operations like getting random numbers and calculation of sizes, and even conditionals.

            It also provides support for mathematical operators like +, -, \, *, /, and %, which we can use with the calc function.

            Here is an example using a pixel to rem conversion function:

            @function pxToRem($pxValue) {
              $remValue: ($pxValue / 16) + rem;
              @return $remValue;
            }

            div {
              width: pxToRem(480);
            }

                However, it's important to note that the / operator for division is deprecated, and will be removed in Dart Sass 2.0.0. You can read about it in the Docs.

            So, this is how it should be written:

            @use "sass:math";

            @function pxToRem($pxValue) {
              @return math.div($pxValue, 16px) * 1rem;
            }

            div {
              width: pxToRem(480px); // gives 30rem
            }

            Here is an example of conditional logic in a mixin:

            @mixin body-theme($theme) {
              @if $theme == "light" {
                background-color: $light-bg;
              } @else {
                background-color: $dark-bg;
              }
            }

            Sass also provides the lighten and darken functions to adjust a color by a certain percentage.

            For example:

            $red: #ff0000;

            a:visited {
              color: darken($red, 25%);
            }

            How to Set Up Sass for Local Development

            Great! Now that we have learned about the "theoretical" aspects of Sass, let's get into the code to better understand how it works.

            In this section, you will learn how to set up a local development environment, and also go through a simple landing page I have prepared.

            Check out the demo on Codesandbox and code repository on GitHub.
            Ways to compile Sass

            There are different ways of compiling Sass files which are:

                VS Code Extension
                Install using NPM globally
                Install using open source apps such as Compass.app, Live Reload, and Koala.
                Install using Homebrew (for MacOS)

            In this tutorial, we will be using the VS code Extension option because it is the easiest to get started with.
            How to Set Up Sass for VS Code
            Step 1: Install Live Sass Compiler

            First, launch Visual Studio Code. Once it's loaded, go to the side panel on the left and select the extensions tab.
            1
            Extensions tab in VS Code

            In the search bar, search for "Live Sass Compiler" and install it. This extension helps us to compile the Sass files — .scss (or .sass) – into .css files.
            Step 2: Set the Save Location

            Now change the file path so that Sass gets compiled into the styles folder.

            To do this, you will make changes to the settings.json file.

            In VS Code, go to File > Preferences > Settings. Now search for live sass compile to change the global settings.

            Click on Edit settings.json.

            Now, on the first few lines, where you see this code:

            {
              "liveSassCompile.settings.formats": [
                {
                  "format": "expanded",
                  "extensionName": ".css",
                  "savePath": "/"
                }
              ],

            Change "savePath": "/" to "savePath": "/styles", so it now looks like this:

            {
              "liveSassCompile.settings.formats":[
                {
                  "format": "expanded",
                  "extensionName":".css",
                  "savePath":"/styles",
                },

                // You can also use this minified extension for production, as it reduces the file size

                {
                  "format": "compressed",
                  "extensionName":".min.css",
                  "savePath":"/styles",
                }
              ],

            Step 3: Compile Sass

            Now, after saving the settings, go back to the Sass file, and click on the button that says "Watch Sass" at the very bottom of the window.
            2
            Click on "Watch Sass"

            After you click the button, two files get created: .css and a .css.map in the styles folder.

            You should not, however, change any of them. Because it already helps you compile the Sass into CSS every time you save new stylings.
            Step 4: Link the CSS file

            Then, link the CSS file in your index.html. In our case:

                <link rel="stylesheet" href="/styles/main.css" />

            Now run the file in your browser. This should be the resulting layout in CodeSandbox below:
            Walking through the code

            Here's an explanation of the code from the previous section:

                We have a basic markup in the index.html file which contains a header and home/hero section.
                    It contains a link to the CSS file which the extension compiled for us.
                    And some JavaScript for the responsive menu toggle.

                The main.scss gets compiled, and the resulting CSS file main.css is what is imported in the index.html:

                <link rel="stylesheet" href="/styles/main.css" />

                The Main Scss file main.scss imports all of the partials: _base.scss, _components.scss, _home.scss, _layout.scss _responsive.scss, _variables.scss.

                @import "variables";
                @import "base";
                @import "layout";
                @import "components";
                @import "home";
                @import "responsive";

                The base partial contains the mixins of flex and grid which are included in the places where we need them.

            Conclusion

            Congrats! If you made it to the end, that means you have learned about how Sass works, its cool features, and hopefully you start using it soon.
https://cheatography.com/justducky/cheat-sheets/sass/
            Variables
            $varia­ble­Name: value
             
             
            Data Types
            Text "­Tex­t" 'text' or text (no quotes)
            Numbers 10 1.0 1px 1em 1rem
            Colors red #ff0000, rgba(255, 0, 0, 0.8)
            Boolean true false
            Null null
            Lists 12px 5px 8px OR 12px, 5px, 8px
            Functions
            Colors
            rgb($red, $green, $blue) = $color
            rgba($red, $green, $blue, $alpha) = $color
            hsl( $hue, $satur­ation, $light­ness) = $color
            darken( #original, %) = $color
            adjust-hue


Resp. Webdev ----
            Chapter 1: The Essentials of Responsive Web Design  1
                Beginning our quest
                Defining responsive web design
                 Responsive web design in a nutshell
                Setting browser support levels
                 A brief note on tooling and text editors
                Our first responsive example
                 Our basic HTML file
                 Taming images
                 Enter media queries
                  Amending the example for a larger screen
                The shortcomings of our example
            Chapter 2: Media Queries - Supporting Differing Viewports
                Why media queries are needed for a responsive web design
                 Basic conditional logic in CSS
                Media query syntax
                 Media queries in link tags
                Combining media queries
                 Media queries with @import
                 Media queries in CSS
                 What can media queries test for?
                Using media queries to alter a design
                 Any CSS can be wrapped in a media query
                 Media queries for HiDPI devices
                Considerations for organizing and authoring media queries
                 Linking to different CSS files with media queries
                 The practicalities of separating media queries
                 Nesting media queries 'inline'
                Combine media queries or write them where it suits?
                The viewport meta tag
                Media Queries Level 4
                 Scripting media feature
                 Interaction media features
                 The hover media feature
                 Environment media features
            Chapter 3: Fluid Layouts and Responsive Images
                Converting a fixed pixel design to a fluid proportional layout
                 Why do we need Flexbox?
                 Inline block and whitespace
                 Floats
                 Table and table-cell
                Introducing Flexbox
                 The bumpy path to Flexbox
                 Browser support for Flexbox
                  Leave prefixing to someone else
                Getting Flexy
                 Perfect vertically centered text
                 Offset items
                 Reverse the order of items
                  How about if we want them laid out vertically instead?
                  Column reverse
                 Different Flexbox layouts inside different media queries
                 Inline-flex
                 Flexbox alignment properties
                  The align-items property
                  The align-self property
                  Possible alignment values
                  The justify-content property
                 The flex property
                 Simple sticky footer
                 Changing source order
                 Wrapping up Flexbox
                Responsive images
                 The intrinsic problem of responsive images
                 Simple resolution switching with srcset
                 Advanced switching with srcset and sizes
                  Did you say the browser 'might' pick one image over another?
                 Art direction with the picture element
                  Facilitate new-fangled image formats
            Chapter 4: HTML5 for Responsive Web Designs
                HTML5 markup - understood by all modern browsers
                Starting an HTML5 page the right way
                 The doctype
                 The HTML tag and lang attribute
                 Specifying alternate languages
                 Character encoding
                Easy-going HTML5
                 A sensible approach to HTML5 markup
                 All hail the mighty <a> tag
                New semantic elements in HTML5
                 The <main> element
                 The <section> element
                 The <nav> element
                 The <article> element
                 The <aside> element
                 The <figure> and <figcaption> elements
                 The <details> and <summary> elements
                 The <header> element
                 The <footer> element
                 The <address> element
                 A note on h1-h6 elements
                HTML5 text-level semantics
                 The <b> element
                 The <em> element
                 The <i> element
                Obsolete HTML features
                Putting HTML5 elements to use
                 Applying common sense to your element selection
                WCAG and WAI-ARIA for more accessible web applications
                 WCAG
                 WAI-ARIA
                  Don't use roles for semantic elements
                 If you only remember one thing
                 Taking ARIA further
                Embedding media in HTML5
                 Adding video and audio the HTML5 way
                  Fallback capability for older browsers
                 Audio and video tags work almost identically
                 Responsive HTML5 video and iFrames
                 A note about 'offline first'
            Chapter 5: CSS3 - Selectors, Typography, Color Modes, and New Features
                No one knows it all
                Anatomy of a CSS rule
                Quick and useful CSS tricks
                 CSS multi-column layouts for responsive designs
                  Fixed columns, variable width
                  Adding a gap and column divider
                Word wrapping
                 Text ellipsis
                 Creating horizontal scrolling panels
                Facilitating feature forks in CSS
                 Feature queries
                 Combining conditionals
                 Modernizr 108
                  Feature detection with Modernizr
                New CSS3 selectors and how to use them
                 CSS3 attribute selectors
                 CSS3 substring matching attribute selectors
                  The 'beginning with' substring matching attribute selector
                  The 'contains an instance of' substring matching attribute selector
                  The 'ends with' substring matching attribute selector
                 Gotchas with attribute selection
                 Attribute selectors allow you to select IDs and classes that start with numbers
                CSS3 structural pseudo-classes
                 The :last-child selector
                 The nth-child selectors
                 Understanding what nth rules do
                  Breaking down the math
                 nth-based selection in responsive web designs
                 The negation (:not) selector
                 The empty (:empty) selector
                 Do something with the :first-line regardless of viewport
                CSS custom properties and variables
                CSS calc
                CSS Level 4 selectors
                 The :has pseudo class
                 Responsive viewport-percentage lengths (vmax, vmin, vh, vw)
                Web typography
                 The @font-face CSS rule
                 Implementing web fonts with @font-face
                 A note about custom @font-face typography and responsive designs
                New CSS3 color formats and alpha transparency
                 RGB color
                 HSL color
                 Alpha channels
                 Color manipulation with CSS Color Module Level 4
            Chapter 6: Stunning Aesthetics with CSS3
                Text shadows with CSS3
                 Omitting the blur value when not needed
                 Multiple text shadows
                Box shadows
                 An inset shadow
                 Multiple shadows
                 Understanding spread
                Background gradients
                 The linear-gradient notation
                  Specifying gradient direction
                  Color stops
                  Adding fallback for older browsers
                 Radial background gradients
                  Breakdown of the radial-gradient syntax
                 Handy 'extent' keywords for responsive sizing
                Repeating gradients
                Background gradient patterns
                Multiple background images
                 Background size
                 Background position
                 Background shorthand
                High-resolution background images
                CSS filters
                 Available CSS filters
                 Combining CSS filters
                A warning on CSS performance
                 A note on CSS masks and clipping
            Chapter 7: Using SVGs for Resolution Independence
                A brief history of SVG
                The graphic that is a document
                 The root SVG element
                 Namespace
                 The title and desc tags
                 The defs tag
                 The g element
                 SVG shapes
                 SVG paths
                Creating SVGs with popular image editing packages and services
                 Save time with SVG icon services
                Inserting SVGs into your web pages
                 Using an img tag
                 Using an object tag
                 Insert an SVG as a background image
                 A brief aside on data URIs
                 Generating image sprites
                Inserting an SVG inline
                 Re-using graphical objects from symbols
                 Inline SVGs allow different colors in different contexts
                  Make dual-tone icons that inherit the color of their parent
                 Re-using graphical objects from external sources
                What you can do with each SVG insertion method (inline, object, background-image, and img)
                 Browser schisms
                Extra SVG capabilities and oddities
                 SMIL animation  @
                  The end of SMIL
                 Styling an SVG with an external style sheet
                 Styling an SVG with internal styles
                  SVG properties and values within CSS
                 Animate an SVG with CSS
                Animating SVG with JavaScript  @@(!!)
                 A simple example of animating an SVG with GreenSock
                Optimising SVGs
                Using SVGs as filters
                A note on media queries inside SVGs
                 Implementation tips
                 Further resources
            Chapter 8: Transitions, Transformations, and Animations
                What CSS3 transitions are and how we can use them
                 The properties of a transition
                 The transition shorthand property
                 Transition different properties over different periods of time
                 Understanding timing functions
                 Fun transitions for responsive websites
                CSS3 2D transforms
                 Scale
                 Translate
                  Using translate to center absolutely positioned elements
                 Rotate
                 Skew
                 Matrix
                  Matrix transformations for cheats and dunces
                 The transform-origin property
                CSS3 3D transformations
                 The transform3d property
                  Use transforms with progressive enhancement
                Animating with CSS3
                 The animation-fill-mode property
            Chapter 9: Conquer Forms with HTML5 and CSS3
                HTML5 forms
                Understanding the component parts of HTML5 forms
                 placeholder
                  Styling the placeholder text
                 required
                 autofocus
                 autocomplete
                 List and the associated datalist element
                HTML5 input types
                 email
                 number
                  min and max ranges
                  Changing the step increments
                 url
                 tel
                 search
                 pattern
                 color
                 Date and time inputs
                  date
                  month
                  week
                  time
                 range
                How to polyfill non-supporting browsers
                Styling HTML5 forms with CSS3
                 Indicating required fields
                 Creating a background fill effect
            Chapter 10: Approaching a Responsive Web Design
                Get designs in the browser as soon as possible
                 Let the design dictate the breakpoints
                View and use the design on real devices
                Embracing progressive enhancement
                Defining a browser support matrix
                 Functional parity, not aesthetic parity
                 Choosing the browsers to support
                Tiering the user experience
                 Practically delivering experience tiers
                Linking CSS breakpoints to JavaScript
                Avoid CSS frameworks in production
                Coding pragmatic solutions
                 When a link becomes a button
                Use the simplest code possible
                Hiding, showing, and loading content across viewports
                 Let CSS do the (visual) heavy lifting
                Validators and linting tools
                Performance
                The next big things

~/Empire/Doks/Comp/lang/webdev/h5/h5c3respwebdescb.pdf
~/Empire/Doks/Comp/lang/webdev/h5/h5c3respwebdescb.txt
h5c3 respwebdes cb  TODO: CLEAN + SET
            1. Responsive Elements and Media
                Introduction
                Resizing an image using percent width
                ete Stet Ley
                See also
                Responsive images using the cookie and JavaScript
                feta tlat marley
                ome (on ee
                Making your video respond to your screen width
                fetes Accel)
                Resizing an image using media queries
                potest a cele yy
                Changing your navigation with media queries
                Getting ready
                Making a responsive padding based on size
                etsy -Maetlohy
                momen (on oe
                eT iatlat-maaelehs
            2. Responsive Typography
                Introduction
                fetes Accel
                See also
                Making a text shadow with canvas
                ete Stet Ley
                See also
                Making an inner and outer shadow with canvas
                fetes Meee le
                ome (on ee
                Rotating your text with canvas
                fetes Accel)
                See also
                Rotating your text with CSS3
                fete acctey
                See also
                Making 3D text with CSS3
                Getting ready
                Adding texture to your text with text masking
                Getting ready
                Styling alternating rows with the nth positional pseudo class
                etsy acctey
                emcee (on | oe
                Adding characters before and after pseudo elements
                fetes Accel
                LFV dd at =a LP hacola MAL sme MLN cele dda)
                fetes Mace ley
                emcee (on | oe
                Adding a shadow to your font
                pete Tey
                alleen oe
                Curving a corner with border radius
                potest Meee te
            3. Responsive Layout
                Introduction
                Getting ready
                Getting ready
                emcee (oe oe
                Adding a media query to your CSS
                fetes t ae Le))
                momen (on oe
                fete acctey
                Changing image sizes with media queries
                Getting ready
                | mle Thay =ae- Valletta mise cat =ce Lee [Okay
                Getting ready
                lomo (on oe
                Making a smoothly transitioning responsive layout
                Getting ready
            4. Using Responsive Frameworks
                Introduction
                Getting ready
                Using the Blueprint grid layout
                etisalat leh
                Fluid layout using the rule of thirds
                Getting ready
                Trying Gumby, a responsive 960 grid
                fetes t ae Le))
                The Bootstrap framework makes responsive layouts easy
                fete acctey
                mle) AL 10) doe
            5. Making Mobile-first Web Applications
                Introduction
                Using the Safari Developer Tools' User Agent switcher
                fetes Accel
                ome (on oe
                Masking your user agent in Chrome with a plugin
                fetes Mace ley
                Using browser resizing plugins
                fetes Accel
                tom cee (on oe
                Learning the viewport and its options
                Getting ready
                emcee (on oe
                em ne) eee
                Adding tags for jQuery Mobile
                pete eet eT)
                Adding _a second page in jQuery Mobile
                Getting ready
                Making a list element in jQuery Mobile
                Getting ready
                Adding a mobile, native-looking button with jQuery Mobile
                etsy acete yy
                cL EI 9
                Getting ready
                Adding JavaScript for mobile browsers only
                fetes Accel
            6. Optimizing Responsive Content
                Introduction
                Responsive testing using IE's Developer Tools
                pete Tey
                emcee (on oem
                Browser testing — using plugins
                Getting ready
                emcee (on oem
                Development environments — getting a free IDE
                Getting ready
                Virtualization — downloading VirtualBox
                fete accte ys
                Getting a browser resizer for Chrome
                Getting ready
            7. Unobtrusive JavaScript
                Introduction
                Writing "Hello World" unobtrusively
                fete acctey
                fete NALA ae WANNA MeL Led cg OL ee RA CO te
                Getting ready
                Making a button stand out when you hover over it
                Getting ready
                Resizing an element with unobtrusive jQuery
                Getting ready
                emcee (on oe
                eka aCe).
                Masking a password with unobtrusive JavaScript
                fetes Meee le
                mo) ceke (on oem
                Using _an event listener to animate an image shadow  @@
                fetes Accel)
h5cb (+including Canvas)
            1. New Structural Elements in HTML5  1
                Building an HTML5 Starter Document  2
                 doctype  2
                 Character Encoding  2
                 JavaScript and CSS Links  3
                 Syntax Writing Style  3
                Where Do All the New Elements Come From?  4
                Using the header Element to Create a Site Header  5
                Using the hgroup Element to Group Headings  7
                Creating Navigation with the nav Element  8
                Using the New article Element  11
                Grouping Content with the section Element  12
                 Which Should You Use: article or section?   14
                Creating a Sidebar with the aside Element  15
                Using the footer Element  17
                Using the HTML5 Outliner to Ensure the Correct Structure  19
                Using All the New Elements to Build a News Page  21
                Using All the New Elements to Build a Search Results Page  25
            2. Grouping, Text-Level, and Redefined Semantics  31
                Marking Up Figures and Captions with the figure and figcaption Elements  31
                Marking Up the Date and Time with the time Element  34
                Making a Native Toggle Widget with the details Element  35
                Using the address Element for Contact Information  37
                Highlighting Text with the mark Element  38
                Using the s Element to Show Inaccurate or Irrelevant Content  39
                Changes to Existing Elements  39
                 The cite Element  39
                 The ol Element  40
                 The dl Element  42
                 The small Element  44
                 The b and strong Elements  44
                 The i and em Elements  45
                 The abbr Element  46
                 The hr Element  46
                 Elements That Are No More  46
                Wrapping Links Around Elements  47
                Adding Semantic Information with Microdata  47
                Using WAI-ARIA with HTML5  49
                Marking Up an Article Page with Comments  51
            3. Browser Handling in HTML5  55
                Dealing with Internet Explorer  55
                 Using JavaScript to Make HTML5 Compatible  55
                 Making CSS Compatible  56
                Boilerplates  57
                Testing for HTML5 Features  57
                Leveraging jQuery to Replace a Calendar  59
                Using Modernizr to Detect Features  62
                Polyfilling  66
                Useful HTML5 Verification Sites  67
            4. New Layout and Style Techniques with CSS3  69
                Creating a Responsive Design with CSS3 Media Queries  69
                 Sensible Usage  76
                 Targeting the iPhone and Android Devices  76
                Using Custom Fonts with @font-face  77
                 File Formats and the Cross-Browser Fix  78
                 Type Services  79
                Making Buttons with CSS Gradients and Multiple Backgrounds  80
                Enhancing a Site with Transformations and Transitions  84
                Creating Animations with CSS  89
            5. HTML5 Web Forms
                Validation  95
                HTML 4 Input Types  95
                Creating a Form to Collect Contact Information  97
                 input type="email"  98
                 input type="tel"  99
                 input type="url"  100
                Creating a Search Form with input type="search"  101
                Creating Calendar and Time Controls  102
                 input type="datetime"  102
                 input type="datetime-local"  103
                 input type="date"  103
                 input type="time"  104
                 input type="month"  104
                 input type="week"  104
                 Placing Restrictions on Dates and Times  104
                Creating a Number Picker  105
                Creating a Slider (Without the Need for JavaScript)  106
                Creating a Color Picker  107
                Displaying Results with the output Element  108
                Using Form Placeholder Text  109
                Creating an Autocomplete Feature with list and datalist  110
                Tracking the Completion of a Task with the progress Element  111
                Measuring with the meter Element  112
                Jumping to a form Element When the Page Loads  114
                Allowing Multiple Entries  115
                Basic Validation with the required Attribute  116
                Writing Your Own Validation Rule  117
                Limiting User Input  118
                 step  118
                 min, max  118
                 formnovalidate, novalidate  119
                Customizing and Styling the Form  119
                Error Messages  121
                Putting It All Together to Make a Sign-Up Form  121
            6. Drawing with Canvas  127  @(!)
                Canvas Overview  127
                 Getting Started  128
                 X and Y Coordinates  129
                Laying a Grid on the Canvas  130
                Canvas Tools  134
                Making Simple Shapes and Lines  134
                 Drawing and Styling a Rectangle or Square  135
                 Applying Gradients to Shapes  137
                 Drawing Lines and Paths  138
                Drawing Polygons with a Path  139
                Drawing Arcs and Circles  143
                 Drawing Curves  143
                Adding Text  144
                Drawing an Image  145
                Cropping an Image  146
                Animating a Sprite Map  147
                Canvas Transformations  150
                Animating an Image  151
                Animating a Vertical Bar Chart  155
            7. Embedding Video with HTML5  163
                Including Video with the video Element  163
                 Browser and Device Support  164
                 HTML5 and Video Codecs 165
                 Why Should You Care About Codecs?   165
                Enabling Video for All Browsers  166
                 Adding Fallback Content for Older Browsers  167
                 New Video Attributes  170
                Creating a Video with Subtitles and Captions  173
                 Other Subtitle Styling Options  176
                The Media API  177
                Making Your Own Custom Controls  178
            8. Embedding Audio with HTML5  187
                Including Audio with the audio Element  187
                Enabling Audio for All Browsers  188
                 Adding Fallback Content for Older Browsers  189
                New Audio Attributes  190
                 The src Attribute  190
                 The preload Attribute  190
                 The loop Attribute  190
                 The autoplay Attribute  191
                 The controls Attribute  191
                The Media API  192
                Creating a Beat Mixer  193
                Adding Streaming Radio  197
            9. Changing Browser History  207
                History Basics  207
                 Browser Compatibility  208
                Adding to History with pushState  208
                Creating an Image Viewer  211
                Popping State in the Image Viewer  214
                Changing History with replaceState  216
                Changing the Page History  218
                Using Advanced State Data Objects to Pass Information Across Pages  221
                Testing History Security  225
                Helpful Libraries  228
            10. Location Awareness with the Geolocation API  231
                Geolocation Overview  231
                 Browser Compatibility  232
                 Where in the World: getCurrentPosition  233
                Determining Your Location with a Simple getCurrentPosition  233
                 Location Privacy  237
                Mapping a Location with getCurrentPosition  237
                Determining Distance with PositionOptions  243
                Following a Moving Location with watchPosition  250
            11. Client-Side Storage  259
                Client-Side Storage Overview  259
                 Data Security  260
                 Keys and Values: sessionStorage and localStorage  261
                Getting and Setting Session Storage  263
                 Chrome Developer Tools for Viewing Storage  265
                Styling from Session Storage  266
                Storing Forms with Local Storage  271
                Catching Events in Local Storage  275
                Web SQL Database API  283
                Using a Web Database for a Grocery List  286
            12. Communication and Threading  297
                WebSocket API Overview  297
                Talking Through Web Sockets  299
                Threading Through Web Workers  302
                Creating a Web Worker  304
                Adding Two-Way Communication  308
                Leveraging a Shared Web Worker  311
            13. Browser Experience in HTML5  319
                Drag and Drop API  319
                Dragging and Dropping Across divs  321
                Leveraging Events and dataTransfer  325
                Application Cache and API  334
                 Browser Cache Security  334
                 Referencing a Manifest File  335
                Creating a Manifest File  335
                 CACHE  336
                 FALLBACK 336
                 NETWORK 337
                 Updating the Cache via the Manifest  337
                Using Web Pages Offline  337
                Application Cache API  340
                Notification API  341
                 Notification Permissions  343
                 Browser Compatibility  343
                Displaying a Simple Notification  344
                Creating a Tweet Notification Page  348
            14. Working with Local Files  359
                File API Overview  359
                 File API Security  360
                Getting File Attributes  360
                Processing Multiple Files with Drag and Drop  362
                The FileReader Interface  367
                Previewing Images Through readAsDataURL  368
                Parsing a CSV File with readAsText  373
                File API Extended Specifications  381
                Creating a Local File  382
            15. Integrating Device Data
                Brief Device APIs History  389
                Contacts API  389
                Retrieving All Contacts and Mobile Numbers  393
                Messaging API  396
                Network Information API  397
                Battery Status Events  398
                HTML Media Capture  398
                Capturing Pictures with File Input  399
                Device Orientation and Motion Events  403
                Creating a Bubble Level  404



Freec 'h5c3 keywords'-list (='ptools')
            ---- Html --

                <br>  <hr>
                <meta />
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/define-the-head-and-body-of-an-html-document

                <h1>
                <h2>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/headline-with-the-h2-element
                <p>Hello Paragraph</p>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/inform-with-the-paragraph-element

                <!--
                <p>Hello Paragraph</p>
                -->
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/uncomment-html

                -- h5 ----
                main     #=helps with SEO (etc)
                    .
                <main> 
                  <h1>Hello World</h1>
                  <p>Hello Paragraph</p>
                </main>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/introduction-to-html5-elements
                    .
                header footer nav video article section
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/introduction-to-html5-elements

                <img src="img_girl.jpg" alt="Girl in a jacket" width="500" height="600"> 
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/add-images-to-your-website

                <a href="https://www.freecatphotoapp.com">Cat Photos</a>
                   href-attrib.                           anchor text
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/add-images-to-your-website
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/link-to-external-pages-with-anchor-elements
                    --
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/nest-an-anchor-element-within-a-paragraph
                    .
                <a href="#"><img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg" alt="Three kittens running towards the camera."></a>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/turn-an-image-into-a-link

                <a href="#contacts-header">Contacts</a>
                         linking to internal sections of a page
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/link-to-internal-sections-of-a-page-with-anchor-elements
                    .
                <a href="#" target="_blank">cat photos</a>.</p>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/make-dead-links-using-the-hash-symbol

                <ul>
                  <li>milk</li>
                  <li>prawns</li>
                </ul>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/create-a-bulleted-unordered-list

                <ol>
                  <li>Garfield</li>
                  <li>Sylvester</li>
                </ol>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/create-an-ordered-list


                <input type="text">
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/create-a-text-field
                <input type="text" placeholder="cat photo URL">

                <form action="https://www.freecatphotoapp.com/submit-cat-photo">
                  <input type="text" placeholder="cat photo URL">
                </form>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/create-a-form-element

            ___zzzz  'Add a Submit Button to a Form @@'


                <!DOCTYPE html>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/declare-the-doctype-of-an-html-document
                <head>
                  link
                  meta
                  title
                   .
                  style
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/define-the-head-and-body-of-an-html-document
                <body>

                Two (Simple) Example Pages
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/define-the-head-and-body-of-an-html-document



            ---- Css ----
                case sensitive(!)
                can change: color, fonts, positioning, spacing, sizing, decorations, Transitions
                place: inline, in style-tags, in external file
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/change-the-color-of-text

                <h2 style="color: blue;">CatPhotoApp</h2>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/change-the-color-of-text

                <style>
                  h2 {
                  ^^ = the selector
                    color: red;
                  }
                </style>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-css-selectors-to-style-elements

                .red-text { color: red; }
                    .
                <h2 class="blue-text">CatPhotoApp</h2>
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-a-css-class-to-style-an-element

                font-size: 16px;
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/change-the-font-size-of-an-element
                font-family: sans-serif;
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/set-the-font-family-of-an-element

                <link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">
                    =google web fonts
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/import-a-google-font

                serif sans-serif monospace
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/specify-how-fonts-should-degrade

                font-family: Helvetica, sans-serif;
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/specify-how-fonts-should-degrade

                font degrading

                .larger-image { width: 500px; }
                .smaller-image { width: 100; }
                    .
                <a href="#"><img class="smaller-image" src="......
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/size-your-images

                some prop.s of css borders: style color width
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-borders-around-your-elements

                .thin-red-border {
                  border-color: red;
                  border-width: 5px;
                  border-style: solid;
                }
                .thick-green-border {
                  border-color: green;
                  border-width: 10px;
                  border-style: solid;
                }
                    https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-borders-around-your-elements


                background-color: red;
                margin: 20px 40px 20px 40px;
                padding: 1.5em;
                color: green;
                font-family: monospace;
                color: pink !important;  #so libraries do not override own values
                  color: #000000;
                  color: #f0f;
                  background-color: rgb(255, 165, 0);


            -- css var.s --

                --penguin-skin: gray:
                  .
                background: var(--penguin-skin, gray);

                :root {

                @media (max-width: 350px) {

                @keyframes wave {


                head body p  #id .class [type='checkbox']  (=selectors)

                  px em

            -- 

                text-align: center;
                width: 220px;

                <strong>Text</strong>
                <u>Ph.D. Students</u>
                <em>Text</em>
                  <s>Text<s>

                background-color: rgba(45, 45, 45, 0.1);
                background-color: transparent;

                box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
                opacity: 0.7;

                text-transform: uppercase
                font-weight: 800;
                line-height: 25px;


                pseudo classes
                    = a keyword that can be added to selectors, in order to select a specific state of the element

                a:hover {

                position: relative;
                  position: absolute;
                  position: fixed;
                 float: left;
                (using position: absolute | relative | fixed | sticky)
                z-index: 2;
                display: block;
                margin: auto;

                    hsl(0, 100%, 50%)  #red
                background-color: hsl(120, 100%, 50%);

                background: linear-gradient(35deg, #CCFFFF, #FFCCCC);
                  background: url("https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png");
                  transform: scale(1.5);
                  transform: skewX(-32deg);

                ::before
                ::after


            -- css animation

                @keyframes colorful {
                Use CSS Animation to Change the Hover State of a Button @@
                animation-fill-mode: forwards;
                fade in animation

                ease
                animation-timing-function: ease-out;
                ease-in
                animation-timing-function: linear;
                animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);


            -- ?? (accesib.)
                
                alt  (+when no alt)
                only one <h1>
                one <main>   #+other newer often rendered as <div>s
                 <article>
                <section>
                the <heading> landmark
                <nav>  <audio>  <figure>   <label>
                 <fieldset>

                <input type="date" id="input1" name="input1">
                 <time>
                contrast

                <button accesskey="b">Important Button</button>
                <div tabindex="0">I need keyboard focus!</div>


            -- media queries --

                design for smallest screen first
                @media (max-width: 100px) { /* CSS Rules */ }
                @media (max-height: 800px) { p { font-size: 10px; } } 
                 img:   height: auto;
                'retina display'
                using viewport units, instead of px/em to size text  #=for responsive typography
                10vw
                    10 % of viewport width
                3vh
                    3 % of viewport height
                70vmin
                    70% of the viewport's smaller dimension (=height + width)
                100vmax
                    100% of the viewport's bigger dimension (=height + width)


            -- flex box --

                display: flex;


            ---- css grid ----  #=a newer standard

                display: grid;
                  ..
                  ..
                grid-column
                  grid-column: 1 / 3;
                'cells'
                justify-self: stretch;   #def.
                align-self: stretch;     #def.
                 justify-items
                 align-items
                grid-template-areas
                grid-area: header;
                grid-template-rows: repeat(100, 50px);
                  .
                grid-template-columns: repeat(2, 1fr 50px) 20px;
                grid-template-columns: 100px minmax(50px, 200px);
                repeat(auto-fill, minmax(60px, 1fr));
                grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
                  .
                @media (min-width: 400px){
                "Grids within Grids"



            ---- SASS ----
--
TODO: EXPORT + UNIQ ALL(!) KEYWORDS FROM ZENGARDEN EXPORT-DIR (=REF.DB OF ALL CSS-'WORDS') (**)
~/Documents/doks/h5c3.pdf
                    doc_newest2019/h5c3_duck.txt
                        doc_newest2019/h5c3_duck.txt
                p8
            html: text, lists, images, tables, forms, video audio flash, miscellaneous
            css: presentation, layout
            new h5 tags: SEO
                p9
            screen readers
                p10
            content management system       CMS
                p11
            DNS server      #acts like phone book
            ISP     internet service provider
                p13
            CH. 1 - STRUCTURE (HTML)

                p21
            <html>
            <body>
            <p>Some text</p>        #an HTML element  (**)
                p22
            opening tag  closing tag
                p27
            'attributes tell us more about elements'
                = a name + a value
                p28
            <p lang="fr">Paragraphe</p>
                p29
            <body>
            <head>
                contains info about(!) the page (like title)
            <title>
                =in the head
                p33
              mac: TextWrangler
                p37
            View Source (**)        c-u / c-k (??)



                p40
            CHAPTER 2 - Text
                p41
            structural markup           headings, paragraphs
            semantic markup             emphasis, quotation, meaning of acronym
                p43
            <h1> -- <h6>
                p44
            <p>
                p45
            ( <b> )     <strong>
            ( <i> )
                +words 'said in a diff. way .... like technical terms, latin botanic names (etc)
                p46
            <sup>
            <sub>

                p47
            white space collapsing
                =extra whitespace, lines etc  gets displayed as/truncated to one(!) space   ***(!)
            tip: structure your code for readability (and use extra whitespace)
                p48
            line breaks             <br/> <br /> 
            horizontal rules        <hr/> <hr /> 
                empty elements  (*)
                p51
            <strong>        #def. bold
            <em>            #emphasis, def. italic
                p52
            <blockquote cite="http://en.wikipedia.org/wiki/Winnie-the-Pooh">
            <q>             #shorter quotes within(!) paragraphs
                    +both can use the cite-attribute w. a URL
                p53
            <abbr title="Professor">Prof</abbr>     //  <acronym> #h4
                p54
            <cite>  ??
                =indicate where (like which book) a quote comes from
                                    #def. italic
            <dfn>
                indicate first use of a term
                                    #often def. italic
                p55
            <address>
                contains contact details (often e-mail) for author of the page
            + hCards  (=microformat)
                p56
             <ins>
             <del>          #often marked as striked over text

            <s>  (earlier <u>)
                something is no longer accur./relevant (but should not be deleted
                            #often marked as striked through

                p58
            Example Text: Very simple text  (**)
            <html>
            <head>
            <body>
            <h1>
            <h2>
            <p>
             <em>
                p60
            CHAPTER 3 - Lists  **       (numbered, bulleted, definition)
                                    =ordered, unordered, 
                p63
            <ol>
              <li>post 1</li>
              <li>post 2</li>
            </ol>

            spec. type of numbering for o-lists (number, letter, roman numeral etc) ; use CSS list-style-type   p333-335
                p64
            <ul>
              <li>post x</li>
              <li>post y</li>
            </ul>

            spec. type of bullets for u-lists (circles, squares etc) ; use CSS list-style-type   p333-335
                p65
            <dl>
              <dt>flu</dt>                      #term
              <dd>a type of disease</dd>        #the definition
                                            sometimes several def.s
            </dl>

                p66
            NESTED LISTS **         #eg. bulletlist within bulletlist
                p68
            Example: Text with List
                p70
            CHAPTER 4 - Links  **       (internal links, external links, open new browser win, email links)
                p73
            Opening tag (=including link target URL) >LinkName/Text<Closing tag
                            href="  "
                p74
            use descriptive text for a-elements

                p75
            Link to Other/External sites
                use full absolute(/qualified) URL with links href-attribute (**)
            ('An absolute URL starts with the domain name for that site, ')
                p76
            Link to Other Pages on Same Site (**)

              ...
                <li><a href="index.html>Home</a></li>
                <li><a href="about-us.html>About</a></li>
              ...
            relative url

                p77
            DIRECTORY STRUCTURE **** !!
              root folder/directory
                p78
            index.html ; =in the page's root folder, +(=necess.??) in every subfolder of the page  (*)
                p80
            website is live                     =uploaded to a server
            go to base dir on server            /
                p81
            <a href="mailto:jon@ass.org">email jon</a>
                p82
            <a href="blabla.com" target="_blank">Link</a> (opens in new win)
                p83
            Link to specific part of the same page

            <h1 id="top">Film-Making Terms</h1>
            <a href="#arc_shot">Arc Shot</a><br />
             .....
             .....
            <h2 id="arc_shot">Arc Shot</h2>
             .....
             .....
            <p><a href="#top">Top</a></p>

                p84
            Link to specific part of another page  (**)
            <a href="http:/www.htmlandcssbook.com/#bottom">
                p86
            EXAMPLE: TEXT WITH LINKS (and a comment specifying 'additional content'(=below this mark))  **
                p88
            CHAPTER 5 - IMAGES **!
                (adding images **, choosing the right format, optimizing images for the web)
                p89
            - 
            - pick right format
            - show an image at the right size
            - optimize images for use on the web =to make pages load faster
                p91
            stock images            images you pay to use

            istockphoto
            gettyimages
            veer
            sxc
            fotolia
                p92
            on a big site you might like to add subfolders inside the images folder
                eg. interface (logos and buttons), products (product photographs, news (im. related to news)
                p93
            <img>
                <img src="path/im.jpg" alt="A bear" title="Bears are big fierce creatures" />
            src
            alt
                provides text to describe im. if cannot be shown/seen
                for purely graphic enhancers, like dividing lines       alt=""
            title
                provide additional info about image
                (most browsers will display as tooltip on hover)
                p94
             width="600" height="450" />
            benefit of spec.ing im. dimensions      browser can position text correctly before loading of im. is complete
#NOTE modern: im. dimensions more often specified w. css!
                p95
            im. before paragr.
                paragr. starts on new line after image
            im. inside start of paragr.
                first row of paragr. aligns w. bottom of im.
            im. in middle of paragr.
                im. placed between words
                p96
            why placing of im.s is important        (block elements (h1, p etc) vs inline elements (b, em, img))
                p97
                ((legacy code:  <align>)
                            left right
                =use CSS instead  =padding // margin
                p99
                ((legacy code:  <align>)
                            top middle bottom
                =use CSS instead

                p101
            tips/rules for creating images**:
            1. Save images in the right format
                jgep, gif, png
            2. Save images at the right size
                same w/h it will appear on the w.site (measured in pixels)
            3. Measure images in pixels
                p102
            softw. for editing images
              Photoshop Elements
                p103
            im. fileformat: jpg
                photos (eg. wh. y. have many colors in the image)
                p106
            im. fileformat: gif // png
                im. w. few colors / large areas w. same color
            teterm: large area filled w. same color ; flat color

                p107
            Image Dimensions **
            example: web page design includes im. 300 x 150 px
                save / crop / resize image to 300 x 150 px
                p108
            image position: standing (=vertical) and horizontal
                portrait  landscape
                p109
            recommended resolution im.s for print
                300 DPI or higher
            recommended resol. im.s for web
                72 PPI (or higher),  although 'may not matter' (!!(*))

                p110
            Vector Images
             like SVG (**)
                p111
            Animated Gifs (**)
                p112
            Transparency
                gif     has 'sharp' edges
                png     im. has diag./rounded edges + semitransparence (**!)
                p113
            Check size of Im. (=on website)
                view image info // open in new tab
                p114
            <figure>        contain images + one caption    ___html5 **
              <img src.....
                ....
              <br>
              <figcaption> .....
              ..... </figcaption>
            </figure>

                p116
            Example: Images  **
                p118
            CHAPTER 6 - Tables **
                p122
            Each block in the grid is referred to as a ___ ; table cell

                p123 + p124  (****)
            <table>
              <tr>
                <th></th>       #mark empty header cells, or table may not render corr.ly
                <th scope="col">Col 2 ('2 4')</th>
              </tr>
              <tr>              'table row'
                <th scope="row">Row Header</th>
                <td>1</td>      'table data'
                <td>2</td>
              </tr>
              <tr>
                <td>3</td>
                <td>4</td>
              </tr>
            </table>

#+Control borders of tables using CSS

            +SCOPE (=setting Column/Row Headers ******)
                p125
             ***
            <td colspan="3">Gym</td>
                p126
            <td rowspan="2">Movies</td>
                p127        #especially useful for long tables
            further clarify tables for screenreaders etc
                encapsul. top, mid, low parts of table in  <thead>, <tbody> and <tfoot>
                p128
            +use for <thead> etc
                can be used to 'splitshow' table headings for long tables (**)
                p129
            Legacy code (=replaced by css)
             width="
             cellpadding="
             cellspacing="
                p130
            Legacy code (=replaced by css)
             border="
             bgcolor="

                p132
            Example: Tables **(!)
                p134
            CHAPTER 7 - Forms **
            - collect information from visitors
            - different form controls
            - new html5 form controls
                p137
            best known form on web
                the google search box  *
                p138
            Form Controls

              adding text
            text input
            password input
            text area

              choices
            radio buttons
            checkboxes
            drop-down boxes

              submission
            submit buttons
            image buttons
            uploading files
                p139
            How Forms Work

            1. name of each form control  +  value    is sent to the server
            2. server processes information using a system language (like php, c#)
            (3. server creates new page to send back  based on info recieved)
                p140
            how the info is sent to the server
                name value-pairs        username=Ivy
                p141

            <form action="http://www.example.com/subscribe.php"
              method="get">
              <p>This is where the form controls will appear,
                </p>
            </form>

            action
                val. is the url for page on the server that will recieve the form information wh. submitted

            method
            get     #val.s from form are concat.d to the url (=spec.d in the 'action' attribute)
                    #will be used, if the 'method' attribute is not used
                use for
                    - short forms (like search boxes)
                    - reading(=not changing) data from the bd
            post    #val.s sent in 'http headers'
                use for
                    - file uploading (=by the user)
                    - sent info is very long
                    - contains sensit. data (like passwords)
                    - writes info to db (=change or delete)

            identifying specific form control (=by the script)
                use standard id attribute (*)
                p142
            text input  

                <input type="text" name="username" size="15"
                  maxlength="30" />

#size       legacy. use css to spec. size of eg. input-box
            maxlength       limit inputtable char.s, eg. to 4
                p143
            type="password"         #char.s not shown when entering
            size, maxlength

            Fully secure solution (for inputting + sending passwords)  **
                use SSL (Secure Sockets Layer)  (+its newer replacement TLS **!)
                p144
            <form action="http://www.example.com/comments.php">
              <p>What did you think of this gig?</p>
              <textarea name="comments" cols="20" rows="4">Enter
                your comments...</textarea>
            </form>

            <textarea>
             #cols="            #Legacy. Use CSS to spec. size of box
             #rows="            #Legacy. Use CSS to spec. size of box

            the text in the 'textarea' elem.
                shown as def. text      tip: some sites use JS to clear def.text wh. user clicks the text area
                p145
            type="radio"
            name            should be same
            value           should be diff.
            checked
                p146
            type="checkbox"
            name            should be same
            value           indicates val. sent to server if box is checked
            checked
                p147
            <select>
            name
            <option>
            value
            selected
                p148
            Multiple select box
            'turn drop down sel. box into box showing more than one option'
                add eg. size="4"        #note: test on diff. browsers
            multiple="multiple"         #=using the c/k-key

                p149
            File input box  ****!
              method="post"
            type="file"

            type="submit"
                p150
            Submit button
              <input type="submit" name="subscribe" value="Subscribe to site" />

            styling buttons **
                CSS or use image for button
                p151
            (image button)
             type="image" src=".....
                p152
            <button><img.....
                =gives ability to combine img + text on button

             type="hidden" name="bookmark"      #can be inspected w. 'view source'

                p153
            <label>             #extra for screenreaders etc  (+=can click either control or name**)
            two ways of using
                wrap around form input      spec. separ. + for="male" (for example)
                                                                  (needs to match the id-attr of form elem.)

            recomm. placement of labels on form controls
                above / left            text inputs / areas, sel. boxes, file uploads
                right                   indiv. checkboxes / radio buttons
                p154
            Grouping Form Elements
            <fieldset>          #+lines/edges can be customized w. CSS
              <legend>          form contr. group caption (*!)
                p155
            Form Validation (newer =w. h5 instead of js)
                required="required"     ___html5
                p156
            Date Input
                type="date"     ___html5
                p157
            type="email"        ___html5
            type="url"          ___html5
                p158
            Search input  =create a search box
              type="search"     ___html5

              placeholdere="Enter keyword"      ?????

                p160
            Example: Forms **
            'This example shows a feedback and newsletter sign-up form.'
                p164
            CHAPTER 8 - Extra Markup **
            - html version
            - id + grouping elements
            - comments, meta info, iframes(??)
                p165
            - class / id attributes         #'global attributes'
            - embed a page within a page        w. iframes
                p168
            MathMl
            CML                 #mark up chemical formulae
              ## XHTML 1.0 Frameset
                p169
            Doctypes *

            <!DOCTYPE html>

            (XHTML strict       first thing in dok (=not even a space before))
                p170
            <!-- marking a section etc -->

            <!--
              section to be commented out
            -->

                p171
            ID ATTRIBUTE **!        #styling w. CSS + interactivity w. JS ******* !!!!!!!
            id="pullquote"
                p172
            CLASS ATTRIBUTE **!
            class="important admittance"        #sever. classes for one elem. (**!)
                p173
            block elements          h1  p  ul  li  (etc.)
                p174
            inline elements         a  b  em  img  (etc.
                p175
            Grouping text and elem.s in a block **

            <div id="header">       #+eg. styling the div-section w. CSS

#can be clarifying to add comment after the closing tag (of the div)
                p176
            Grouping text and elements inline (**!)
            <span>          hold text / several elem.s
            (eg. like inline version of div *)
                        often used for styling (+w. id/class for targeting)
            <span class="gallery">
                p177
            <iframe>            'inline frame'
                            eg. embed GMaps     #can be external page, or on same page/server

              width="450"
              height="350"
              src="http://maps.google......
                p178
# scrolling="
# frameborder="
            seamless                ___html5        #'where scrollbars are not desired'

                p179 + p180
            INFORMATION ABOUT YOUR PAGES  (=META ETC ******/########)
            <meta name="" content=">
                creator  time sensitive

            <html>
              <head>
                <title>Information About Your Pages</title>
                <meta name="description"
                  content="An Essay on Installation Art" />
                <meta name="keywords"           #in practice no longer has any effect
                  content="installation, art, opinion" />
                <meta name="robots"
                  content="nofollow" />
                <meta http-equiv="author"
                  content="Jon Duckett" />
                <meta http-equiv="pragma"       #prevents caching
                  content="no-cache" />
                <meta http-equiv="expires"      #=when cache should expire
                  content="Fri, 04 Apr 2014 23:59:59 GMT" />
              </head>
              <body>
              </body>
            </html>
                p181
            'escape' characters / escape codes / entity references
            &lt;        &60#        #unicodenumber in decimal

            &gt;        &62#
            &amp;       &38#
            &quot;      &34#

            &copy;      &169#
            &reg;       &174#
            &trade;     &8482#

            &lsquo;     &8216#
            &ldquo;     &8220#

                p184
            EXAMPLE PAGE: EXTRA MARKUP (Doctype, meta, id/class, div, char. entities) **
                p186
            CHAPTER 9 - flash, Video, Audio
                p187
             (youtube  soundcloud*)
                p189
            (flash)
             .fla  .swf
                p190
            (Use of flash)
                (Prototype, script.aculo.us, jQuery)    #early(?) js animation libraries
                p193
            (adding flash movie to web page  with js)

            <script type="text/javascript" src="http://aja......."></script>
                p195
            video formats       webm  mp4
              encoding
                p196
            youtube (etc) vs self hosting video

                p199
            <video>         ___html5
              no DRM
            Control appearance of video/audio playback controls (**)
                =javascript (??/!)
                p200
            <video>
            src
            poster
            width, height
            controls
            autoplay
            loop

            preload     none  auto  metadata
                p201
            (alt. way? of) specifying source (one or more) of video
                <source src="........." type='video/mp4;codecs="avcl.42E01E, mp4a.40.2"' />
                p202
            Working w. video and H5 (*!)        create own playback controls, diff. versions + resolutions of video, tell diff. parts of page to change (when video reaches certain point) **!
                p203
            Adding Audio to Web pages

            Tip: popup window w. au-player for y. site ; can play uninterrupted wh. changing/browsing sub-pages
                p204
            adding a flash mp3-player
                p205
            Adding HTML5 Audio to your pages

            <audio>
             src
             controls       #+can specify y. own controls w. javascript
             autoplay
             preload
             loop
                p206
            H5: Multiple Audio Sources  (*)
            <source>

            mp3  ogg vorbis
                p208
            Example: flash, Video and Audio
                p210
            CHAPTER 10 - Introducing CSS
                p211
            css rules
            css properties
                p213
            'block level elements look like they start on a new line'
                p214

            example styles

              boxes
            w/h
            borders (color, width, style)
            bg col./images
            pos. in browser win.

              text
            typeface
            size
            color
            it./bold/u-case/l-case/small caps

            (+styling lists, tables, forms  (etc?))
                p215

            css: associates style rules with html elements

            p {                      #  {......}  ='declaration block'  jsjq p12
              font-family: Arial;}

            (= selector + declaration)      #+together constitutes 'a rule'
                p216

            h1, h2, h3 {
              font-family: Arial;
              color: yellow;}
                property                #like: color, font, width, height, border
                       value

                p218
            Example: Introduction to CSS
             =Simple website styled w. CSS  **
                p219
            Using External CSS  **(!)
            (in <head>)
                <link href="css/styles.css" type="text/css" rel="stylesheet" />
            (often placed in dir css // styles)

            rel         relationship betw. the html page and linked in file (eg. 'stylesheet' for css file)

            +Can link in several stylesheets  (eg. presentation(=fonts and colors), layout(=of page - placements, paddings etc))


            body {
              font-family: arial;
              background-color: rgb(185,179,175);}

                p220
            Using internal CSS  (**)
            <style>         #=inside head, after title  (**)

            Legacy type inline h4 style ** ; <p style="color:red;">     #eg. Anki etc. (**!)
                p221
            css selectors  **(*!)
                css sel.s are  case sensitive(!!)


                p222
            Table: Commonly Used CSS Selectors  **

              selector               matches/means           example
            universal sel.                                  * {}
            type sel.               element names           h1, h2, h3 {}
            class sel.              class name              .note {}
                                                                #note-class
                                                            p.note {}
                                                                #paragr.s w. note-class (**)
            id sel.                 id name                 #intro {}
            child sel.              elem. is child of       li>a {}
                                                                #links w.in lists (*)
            descendant sel.(??)     inside elem.
                                      (=also children??)    p a {}
                                                                links embedded in p:s
            general sibling sel.    =not have to be directly
                                      preceding element     h1~p {}
                p223
            'Understanding how CSS rules cascade means you can write simpler style sheets, because you can create generic rules that apply to most elements and the override the properties of individual elements that need to appear differently.'

            css rules and precedence:

            last rule:
            two selectors are identical         latter will take precedence

            specificity:
            h1 vs *, p vs p b, p vs p#intro         more specific will take precedence

            important:
            override already set general rule       color: blue !important;}    ****
                p224
            padding: inherit;}

            font-family: Arial, Verdana, sans-serif;        #typeface
            padding: 10px;
                p225
            benefits to external style sheets           after loaded, page loads faster
                p226
            test page in several browsers:
            browsercam.com
            browserlab
            browseshots
            crossbrowsertesting

            searching for css bugs:
            positioniseverything.net
            quirksmode.org

                p228
            CHAPTER 11 - Colors **
                p229
            - three ways of specifying color
            - color terminology
            - contrast (+read/legibility)
             - bg colors
                p231
            color: DarkCyan;
            color: white;
            rgb(100,100,100)
#3ee3e80

            HSLA  (***)             ___css3

            /* css comment */
                p232
            'If you do not specify a background color, then the background is transparent.'
                p233
            Color

            'There is also a good color picking tool at: colorschemedesigner.com '
                p234

            Color Names             147 supported by browsers (eg. MediumAquaMarine)

            Hue                         eg. red, blue etc
            Saturation                  'the amount of grey in the color'
            Brightness('value')         'how much black is in the color'
                p235
            'For long spans of text, reducing he contrast a little bit improves readability'
            reduce contrast  eg. use dark gray text on white (or cream white) bg
            'If text is reversed(=light col. on dark bg), you can increase height between lines + font weight  to make it easier to read'

            tool online for checking contrast: ww.snook.ca/technical/colour_contrast/color.html

                p236
            Opacity ***
            opacity: 0.5;                               ___css3

            background-color: rgba(0,0,0,0.5);          ___css3

            fallback for older browsers
              =not supporting opacity       set normal rule, then RGBA (=browser will use second for overriding if supported)
                p237
            HSL COLORS      ___css3
            hue             colloquial idea of color ("kulör")
                                oft. repres. as color wheel/circle  (values from 0-360)
            saturation      'amount of gray in the col.'
            lightness(!!)   ='the amount of white(lightness) or black(darkness) in a color
              ('luminosity')

            (photoshop, gimp etc: concerning brightness vs lightness)
                p/g uses brightness  =only adds black
                lightness offers both black and(!) white
                p238
            background-color: hsl(0,0%,78%);
            background-color: hsla(0,0%,78%);
                hue                 expressed as angle (0-360)
                lightness =50%          halfway betw. white and black =normal
                p240
            Example: Color      'the pH scale'

                p244
            CHAPTER 12 - Text **
            - size, typeface
            - bold, italics, capitals, underlines
            - spacing betw. lines, words, and letters
                p245
            two groups of text formatting properties        font prop.s (font, italic, textsize), font-independent formatting (color, spacing )
                p247
            serif           considered easier to read for long (printed) textpassages
            serif           tends to be clearer for small onscreen text
            monospace       commonly used for code (aligns nicely =makes text easier to follow)
                p248
            weight
             (light medium bold black)

            font anatomy terminologi: (**)
            cap height          (heigt of) top of flat letters
            ascender            (reaches) above the cap height  #like serif 'h'
            x-height            height of the letter x
            baseline            line the letters sit on
            descender           (stretching) below the baseline  #like 'y', 'g'

            style
            italic vs oblique       italic =cursive aspect to some lettering  oblique =takes the normal style + puts it on an angle

            stretch
             (condensed regular extended)
            condensed ('narrow')    letters thinner + squeezed together
                p249

              serif
            Georgia
            Times
            Times New Roman

              sans
            Arial
            Verdana
            Helvetica

            font stack      =specify more than one typeface =create order of precedence
                p250

              monospace
            Courier
            Courier New

              cursive
            Comic Sans MS
            Monotype Corsiva

              fantasy   #most often for titles
            Impact
            Naettenschweller  (??)


            example specifying a normal/usable font stack **!
                font-family: Georgia, Times, serif;
                p251
            Techniques that Offer a Wider Choice of Typefaces

            @font-face
            can be downloaded by page

            font-family
            font-face
            serviced-based font-face
            images
             sifr
            cufon  #creates svg with js

                p253
            font-family  (***)
            'Designers suggest pages usually look better if they use no more than three typefaces on a page'
                p254
            font-size
              12px
              200%
              1.3em         #'equivalent to the letter m'
                p255
            the font ratio scale        8 9 10 11 12 14 18 24 32 48 60 72 (points)

            'A pixel roughly equates to a point(=term often used by print designers), bec. a point corresponds to 1/72 of an inch, and most computer displays have a resolution of 72 dots per inch'

            def. size for text in browser                   16px
            preference of some modern web designers         leaving body text at 16px (=not scaling down to 12px)


                p256
            CONVERSION TABLE  PIXELS TO PERCENTAGES TO EMS ****************
            (=for 12px, and newer 16px) ****

            when to use pt instead of px        creating style sheets for printer-friendly versions of pages

            (ems, + the extra (ie6/7) p-rule)
                p257
            @font-face      use font, even if not installed on the browsing computer (**)

            @font-face {
              font-family: 'ChunkFiveRegular';
              src: url('fonts/chunkfive.eot');}     #possibly specifying paths to a few diff. versions of the font
            h1, h2 {
              font-family: ChunkFiveRegular, Georgia, serif;}

            fontsquirrel
            fontex
            openfontlibrary

            typekit
            kernest
            fontspring
             www.google.com/webfonts

                p258
            font types              eot, woff, ttf/otf, svg     #+should appear in css font spec. in that order
            avoiding 'flash of unstyled content'-flicker        delete unnecessary glyphs from font // host on Content Delivery Network
            providing several font formats for web site     convert, eg. at fontsquirrel (/fontface/generator)      #+provides the css code for the @font-face rule **(**)
                p259
            .credits {
              font-weight: bold;}

            normal          =can be used as an 'off switch'
                p260
            font-style: italic;
            oblique
                p261
            text-transform: uppercase;
            text-transform: uppercase;
            text-transform: capitalize;

            increase readability for uppercase text ; increase letter-spacing
                p262
            text-decoration: underline;
            none                #eg. remove underline from links
            overline
            line-through
            blink
                p263
            leading (=line spacing)

            p {
              line-height: 1.4em;}

            leading is measured __ ; =distance from top of ascender  to bot of descender descender above (=free space betw. line and line above)
            line height         font-size + leading (*(*))
            tips line spacing ; vert. space betw. lines should be larger than space betw. each word (=helps eye move along line instead of down)  #sugg. startvalue: 1.4-1.5em
                p264
            kerning in css ; letter-spacing
            tip: use of (=increase) kerning * ; if heading/sentence is all uppercase
            tip: use of (extra) word spacing ; if bold typeface / increased kerning

            letter-spacing: 0.2em;      #kerning

            word-spacing: 1em;

                p265
            text-align: left;
            right
            center
            justify
                p266
            vertical-align: text-top;
                note: aligns inline(!) elements, like img, em or strong elements
            baseline
            sub
            super
            top
            text-top
            middle
            bottom
            text-bottom
             +can take length (specified in px/em) / percentage of the line height (??)
                p267
            text-indent: 20px;
            text-indent: -9999px;       #the Phark subst. trick (??/!)

            'allows you to indent first line of text within an element'  (??/*)


                p268
            drop shadow  (**)
            text-shadow: 2px 2px 7px #111111;       #three lengths + col. of text
             tip: can also be used for 'embossing' (=add shadow slightly lighter than the text)

            l.val. 1        how far to left/right shadow should fall
            l.val. 2        distance to top/bottom shadow should fall
            l.val. 3        (optional) amount of blur that should be applied to the drop shadow
                p269
             **(**)
            :first-letter       #=technically not properties (=pseudo-elements)
            :first-line

            'You specify the pseudo-element at the end of the selector, and then specify the declarations as you would normally for any other element.'

            hint meaning of 'pseudo-' in ps-elements/classes        acts like there is/gives an extra element/class attrib. for selecting


                p270
            *****           #more pseudoclasses (*)
            a:link {
            a:visited {
            a:hover {
            a:active {
               #eg. button being pressed/link being clicked
                p271
            input.submit:hover {
            input.submit:active {
            input.text {
            input.text:focus {
              #'for example, when your cursor is in a form input ready to accept typing'
            'When used, ps-classes should appear in this order:  :link, :visited, :hover, :focus, :active'

                p272
            TABLE: ATTRIBUTE SELECTORS  *******
            existence       p[class]            p with attrib. 'class'
            equality        p[class="dog"]      p with attrib. 'class', whose val. is 'dog'
            space           p[class~="dog"]     p with attrib. 'class', whose val. is list
                                                    of space sep. words (+one word is 'dog')
            prefix          p[class^"d"]        p elem. w. attrib.val. starting w. 'd'
            substring       p[class*"do"]       p elem. w. attrib.val. containing 'do'
            suffix          p[class$"g"]        p elem. w. attrib.val. ending w. 'g'
                p274
            EXAMPLE: TEXT (font sizes, drop shadows, increasing line height, underline hovered text**)

                p278
            CHAPTER 13 - Boxes **
            - controlling size of boxes         #=css treats each html elem as if it lives in its own box
            - box model for borders, margin and padding
            - displaying and hiding boxes


                p280
            GRAF.INSPIR. - PIANOS ='THE ANALOG SPECIALISTS' ****(**)
                p281
            Box Dimensions
            height: 300px;      #perc/em is more commonly used, bec. of responsive design (**)
            width: 400px;

            percentage uses ___ as ref. for its size **
                size of browser win. (or encasing other box)
            ems uses __ as ref. for its size *
                size of text within it


                p282
            ****(**)    #also very useful for responsive design (**)
            min-width: 450px;
            max-width: 650px;
                p283
            min-height
            max-height
                p284
            line wrapping (**)
            overflow: hidden;
            overflow: scroll;           #show scrollbars
                p285
            adjusting box properties for padding and spacing ***(*!!)
            padding     space betw. content in box (eg. text) and box's border (**)
            border      borderline separating box from surrounding content/boxes
            margin      outside border (=adding extra space to other objects)

            (note: if box width specified, borders margin and padding are added to its width and height) (**/?)
                p286
             facing side
                p287
            border-width: 2px;
            border-width: thick;
              thin
              medium
            border-width: 1px 4px 12px 4px;

            or:
            border-top-width
            border-right-width
            border-bottom-width
            border-left-width
                p288
            p.one { border-style: solid; }
            dotted
            dashed
            double
            groove
            ridge
            inset
            outset
             hidden / none      **

            border-top-style
            border-right-style
            border-bottom-style
            border-left-style
                p289

            border-color: #0088dd;
            border-color: #bbbbaa #111111 #ee3e80 #0088dd;
              (=top right bottom left)

            border-top-style
            border-right-style
            border-bottom-style
            border-left-style

            border-color: darkcyan;
                p290
            border  (=shorthand) *

            p {
              width: 250px;
              border: 3px dotted #0088dd;}
#=specify width, style, and color in one property
                p291
            padding  (=between text and its box-border) *

            padding: 10p;
                #or %/em

            padding-top
            padding-right
            padding-bottom
            padding-left

            padding: 10px 5px 3px 1px;

            padding: 20px 10px;     ****
                #top bot 20  left right 10  ****

            Note: padding is not inherited like color (=every element needing padding has to be specified)
                p292
            margin: 20px;

            margin-top
            margin-right
            margin-bottom
            margin-left

            margin: 1px 2px 3px 4px;

            margin: 20px 10px;
                #top bot 20  left right 10  ****
                p293
            center box on page (or inside element)
              margin: 10px auto 10px auto       #(+also set width (=otherwise will be maxed))

            note: text-align is inherited by child elements
                p294
            (IE 6 box model)        (=includes padding etc in def. width (!))
                p295
            Cause inline/block-level element to act as the other (**!) / hide element (=visibly)  (*)
            display: none;
            display: inline;

            inline
            block
            inline-block        'causes a block-level element to flow like an inline element, while retaining other features of a block-level element'


            +Example: =Creating navigation menu items for a site =li-elements displayed as inline (**!)  +a 'coming soon' ****
                p296

            hide box but leave its space blank
                visibility: hidden;
                p297
            border-image: url("path/file.gif") 11 11 11 11 stretch;     ??(?)
             -moz
             -webkit
            repeat
            round
                p298
            text-shadow: 5px 5px 5px #777777;       #length length blur color
                    +spread of shadow(?)  inset
                p299
            rounded corners **
            border-radius: 10px;

            border-top-right-radius
            border-bottom-right-radius
            border-bottom-left-radius
            border-top-left-radius

            border-radius: 5px 10px 5px 10px;


                p300
            TIP: MORE COMPLEX SHAPES BY SPECIFYING DIFF. LENGTHS **
            border-top-left-radius: 80px 50px;
            shorthand for targetting all four corners at once ******
            border-radius: 1em 2em 3em 4em / 1em 2em 3em 4em;       #=specifies 4 hor. val.s, then 4 vert. val.s
            (creating a/the circle)
                p301

                p302
            Example: Boxes  THE MUSIC SHOP HOMEPAGE ****(!!)  *********
                SEE MORE, STUDY ETC ********
                p306
            CHAPTER 14 - Lists, Tables and Forms
            - bullet point styles
            - borders/backgrounds to tables
            - change appearance of form elements
                p309
            list-style-type
             'marker'

            ul
             none disc circle square

            ol
             decimal
             decimal-leading-zero
             lower-alpha
             upper-alpha
             lower-roman
             upper-roman

            ol {
              list-style-type: upper-roman;}
                p310
            Images for bullets *

            list-style-image: url("path/file.png");}

            li {
              margin: 10px 0px 0px 0px;}
                p311
            put bullets outside/inside quote's box

            list-style-position: outside;       #=default
            inside

                p312
            list style shorthand (**)
            list-style: inside circle;      #=style, image, position (in any order)
                p313
            Review: Table Properties (**!)

            width  padding  text-transform  letter-spacing  font-size
            border-top  border-bottom  text-align  background-color
            :hover (=highlight row on hover(**))
                +=EXAMPLE ***(!)
                p314
            tips for styling tables (=ensure they are clean and easy to follow) **(!)
            - give cells padding
            - distinguish headings
            - shade alternate rows
            - align numerals                #eg. with text-align

            EXAMPLE: TABLE  =GREAT BASIC TABLE **(!!)
                p315
            Border on empty cells       #may be useful rule to set, since diff. browsers treat empty cells differently

            empty-cells: show;
            hide
            inherit
                p316
            Gaps between cells

            border-spacing: 5px 15px;
            border-collapse: collapse;      #preventing adjac. cell borders merging (which can cause doubling effects)
            separate


                p317
            STYLING FORMS **(!)
              common styling for forms
            - text inputs / text areas                  #easy
            - submit buttons                            #easy
            - labels on forms (=for alignment etc)
                    #sel.boxes, radio buttons, checkboxes  (=harder to get consistent look)

# tip: site for downloading (=code for styling)??
               formalize.me     #'author has done the hard work of making forms look
                                    consistent across browsers'


                p318
            COMMON STYLING FOR (FORM) TEXT INPUTS (**!)
            input {
              font-size 120%;
            color
            background-color
            border
            border-radius
            :focus                  #eg. diff. color when using elem. (**)
             :hover

            input:focus, input:hover {

            input#email {
              background-image: url("images/email.png");}       #****
                p319
            Styling Submit buttons  (**)        #recap/example, like p318
            color
            text-shadow
            border-bottom           ****
            background-color    +GRADIENT ***
             :hover
                p320
            fieldset        edge/border around form
            legend          descriptive text (=indicate what information is required in the fieldset)

            (commonly styled properties:
             width  color  background-color  border  border-radius  padding
                p321
            Problem: Aligning Form Controls  (**/??!)

            <form action="example.php" method="post">
                p322
            Solution 2 (=for more complex forms)

            (= span, float(*!)    ...)
                p323
            Cursor Styles

            a {
              cursor: move;}

            auto
            crosshair
            default
            pointer
            move
            text
            wait
            help
            ur("cursor.gif");

                p324
            Web Developer Toolbar (=Extension Firefox/Chrome) **
              chrispederick.com/work/web-developer

            - see css styles and html structure of a web page

            -- hovering an element gives outline (=how much space takes up)
            -- helpful wh. writing css selectors
                    hovering over an elem. reveals its structure (=element nesting etc(??))
            -- css styles       click on elem. =reveals css rules applying to it (+their code-line)     #for checking your own code or on s.one else's site
                p326
            Example: Lists, Tables and Forms  (**)
            (=See More (**/!!?))

            'Rounded corners on the table headers are created using the :first-child and :last-child pseudo classes ('
                p331
            (- 'Forms benefit from styles that make them feel more interactive')
                p332
            CHAPTER 15 - Layout **      #=Page(!!) Layout
            - controlling the position of elements
            - creating site layouts
            - designing for different sized screens
                p333
            overview
            - normal flow, relative positioning, absol. positioning, floats
            - diff. devices =diff. screen sizes / diff. resolutions
            - fixed width vs liquid layouts
            - using grids to make page designs look more professional


                p334
            'FIXED GEAR FOREVER' =BICYCLE SHOP WEBSITE EXAMPLE ******** !!!!!!!
                p335
            (separating the boxes, w. css
                use borders, margins, padding, bg colors
                p336
            block-level element w. other block-level element inside it is called a ___ ; parent element
            DIVS AND GROUPING MAIN BLOCKS (HEADER, CONTENT, FOOTER ETC) TOGETHER *******
            A div w. other elem.s inside (eg. grouping logo and main nav. into the header) is called a/the ___
                containing element
                p337
            css positioning schemes

            normal flow
            relative positioning        #=move/offset the elem. affected by 'relative', but other/surrounding elem.s 'stay put/do not move'
            absolute positioning        (***/###!)
                #+also: static, fixed (??)
                    https://www.lifewire.com/absolute-vs-relative-3466208
                    https://www.youtube.com/watch?v=P6UgYq3J3Qs
                #testing w./in CODEPEN


                p338
            fixed positioning           =locks elem. in rel. to the browser win. ****!!!!
            floating elements       takes elem. out of normal flow + the fl. elem. becomes a block-level elem. (=around which other content can flow) ****!!    #=using a Phrase or Image as a Drop Cap (****)!

            +use z-index property *******!!!!
                p339
            normal flow  (def. (=syntax WOULD be:   position: static)

            (("block level elements (in normal flow) starts on new line" (=even if not taking up whole win.)))
                p340
            Relative Positioning ******

            position: relative

            offset properties:
            top
            bottom
            left
            right

            (px  %  em)
                p341
            position: absolute;

            top
            bottom
            left
            right
                p342
            position: fixed;
                p343
            Overlapping elements
                z-index ****
            other name for (the) z-index        stacking context

            z-index: 10;        #=closer to the top/'screen' than index =5
                                (# can be negative number (**!))

                p344
            Float (+width)      =take elem. in normal flow +place right/left (and make other elem.s flow around it) **(!)
            example: 'The floated Einstein quote' ***(**!)      #<blockquote>
                p345 + p346
            'A lot of layouts place boxes next to each other. The float(!) property is commonly used to achievi this.'
            (+solving problems ='It is more common to use the clear(!) property to solve this issue.'

            Clearing floats
            'The clear property allows you to say that no element (within the same containing element) should touch the left or righthand sides of a box.'  (=???)

            clear: left;
            right
            both
            none
                p347 + p348
            'If a containing element only contains floated elements, some browsers will treat it as if it is zero pixels tall.'  (=and collapse things)

            +solution:
            div {
              border: 1px solid #665544;
              overflow: auto;                   **!
              width: 100%;                      **!
                p349
            multi-column layouts (=with floats)  **(*)!

            Use a div element to represent each column (**)  (+use:
            width
            float       #positions the columns next to each other
            margin      #creates a gap between the columns
                p350
            <div class="column1of3">

            .column1of3, .column2of3, .column3of3 {
              width: 300px;
              float: left;
              margin: 10px;}
                p351
            SCREEN SIZES

            iphone 4
            size        3.5in
            resol.      960*640px

            ipad 2
            size        9.7in
            resol.      1024*768px
                p352
            macbook
            size        13.3in
            resol.      1280*800px

            imac
            size        27in
            resol.      2560*1440px


                p353
            'BECAUSE SCREEN SIZES AND DISPLAY RESOLUTIONS VARY SO MUCH, WEB DESIGNERS OFTEN TRY TO CREATE PAGES OF AROUND 960-1000 PX WIDE' (=most users will be able to see designs this wide on their screens) ******* !!!!!!!!

            Top/Initial area  =Grab interest etc
            being 'above the fold'      #newspaper term (=visib. top/front half of a newspaper)

            =tip: Put Most/some (good selection of) Interesting material
              (but not cram too much in)
            within top 570-600 px (=height) of page  **** (!!!!!!)

            [+newest trend at time of book-publ: Create Adaptive/Responsive designs (=can change depending on size of screen)]
                p354
            (+GOOD EXAMPLE OF 'ABOVE THE FOLD' **!)
                p355
            Fixed width layouts
                p356
            Liquid layouts !!**(*)      #=can stretch and adapt width and height (??/**)
                p357--p360
            A FIXED WIDTH // LIQUID LAYOUT(uses %-ages)  (=2 examples)  (****)
            ('Sometimes an extra HTML element is used to contain the page, ....')  (**/-->)
                p361
            LAYOUT GRIDS *****
            Widely used grid by web designers ** ; the '960 pixel grid'  *****

            grid might seem like a restriction, but:
            - creates continuity betw. diff. pages which may use diff. designs (**!)
            - ....
            ....
            ....


                p363
            Possible Layouts =from the 960 pixel wide / 12 column  grid  ******(!!!!)
              (='1-6 columns')
                p364        #+non-equal sized combinations (**)


                p365
            CSS FRAMEWORKS ******
            =code for common tasks, like:
            creating layout grids  styling forms  creating printer friendly versions of pages  (etc)

            the 960.gs css Framework  ******(!!!!!!)    #=Create Layout Grid (**)
            (+ blueprintcss.org  lessframework.com  yahoo yui grids**)
                p366
                p367
            class="article grid_4"
            clearfix
                p368
            (='.... style sheet has taken care of the layout, ..... Therefore ...'  we only need to add some style information =font, colors etc)


                p369
            MULTIPLE STYLE SHEETS ******
            (eg. creating separ. stylesheets for
             typography, layout, forms, tables, (+maybe even sub-sections of a site))

            @import url("tables.css");
            @import url("typography.css");

            +tip: 'If a stylesheet uses the @import rule, it should appear before the other rules.'  (******)
                p370
            (Including multip. style sheets w. html  link)


                p372
            EXAMPLE LAYOUT ='THE BICYCLE SHOP' *********
            (=using a 960.gs Grid) ********     (=SEE MORE *******)

            push_7
            push_9

            +Textured background (=with png-images) ******
                p378
            Chapter 16 - Images **(?)
            - controlling size of im.s          #w. css
            - aligning im.s                     #w. css
            - adding bg im.s **                 #w. css
                #to boxes etc
                p379
            - Create image rollovers in CSS  (**!)
                p381
            (CONTROLLING IM. SIZE IN CSS(**))
            img.large {         #=set size via class selectors (**)
              width: 500px;
              height: 500px;}

            Helping pages to load quicker and smoother *(*)
                (=if image sizes are spec.d in advance (in the css), the page can load the html-spec.d content  =without waiting for the images to download ***!!
                                        #(=instead of putting the sizes in the html)

            examples (of some im.size 'classes')  (**)
            small portrait      220 * 360
            small landscape     330 * 210
            feature photo       620 * 400
                p382
            determining sizes for images + giving name
                small  medium  large


                p383
            Aligning Images     #SEE MORE *****
            float       (=instead of <img>'s align attrib.)

            1. add float prop. to class (created) for the size of im.s
            2. new classes (like  img.align-left )

            (+adding margins / borders  to images)
                p384
            Centering images using css

            turn into block level element
                display: block;
            +

            A. text-align: center;  (=on the containing element)
            B. margin: 0px auto;    (=on im. itself)

            (+(??) 'you can specify class names that allow any element to be centered' (like for the dimensions/alignment of im.s)?)
                p385
            Background images

            body {
              background-image: url(..........

            ('If you search online, you will find lots of resources that offer background textures that you can use on your pages')
                p386
            background-repeat
            repeat
            repeat-x
            repeat-y
            no-repeat

            background-attachment
            fixed
            scroll
                p387
            Background Position
            background-position: center top
            left bottom (etc etc)                   #second val. defaults to center (=if one only spec.s one value)

            'You can also use a pair of pixels
            or percentages. These represent
            the distance from the top left
            corner of the browser window
            (or containing box). The top left
            corner is equal to 0% 0%.
            The example shown, w. val.s of
            50% 50%, centers the image
            hor. and vert.ly.'

            background-position: 50% 50%;


                p388
            background  (shorthand  = background-color -image -repeat -attachment -position)
            *******

                #must be spec.d in correct order (but unwanted can be left out)

            eg.
            div {
              background:
                url(ex-1.jpg)
                no-repeat top left,
                url(ex-2 ........


                p389
            ___ZZZZ
            IMAGE ROLLOVERS & SPRITES ***********   +=SEE MORE (!!!!!)
            Change style of button/link  when user moves mouse over it ****** !!!!!
                =called a 'rollover'
            ='setting a background image for the link/button that has three different styles of the same button (but only allows enough space to show one of them at a time).'

            'When a single image is used for several different parts of an interface, it is known as ______ ; a 'sprite'  ******** !!!!!!!!

            (=browser only needs to request one image (rather than many)  =can make the web site load faster)
                p390
            (???? =SEE MORE)
            display
            inline-block
            background-position
            :hover
            :active
                p391
            css3 Gradients (**)   (+bg image as fallback(=??))

            linear-gradient ((??))
                (+angle of gradients, gradient stops, radial gradients (etc etc))
                p392
            Using Background images  (+tip:
            lower bg image contrast + put screen over (=makes text on top easier to read)


                p394
            EXAMPLE (IMAGES) - GALERIE BOTANIQUE (!! ****)
            (an image gallery layout)

            div  (class wrapper)
            figure + figcaption
            (+3d look to images (=like a piece of card etc **))
                p397
            (Summary)
            - 'You can use a background image behind the box created by any element on a page'
            - (you can create sprite cards of several images to use, like for button in diff. states (=reduces num. of images your browser has to load)


                p398
            CHAPTER 17 - HTML5 LAYOUT  ****
            - h5 layout elements
            (- how (+how to ensure) old browsers understand new elements)
            - styling h5 layout elements with css
                p399
            importance/use etc. **
            - offer helpful alternatives to <div>
                p400        (Yoko's Kitchen  (??/*))
                p401
            classic way of organizing big blocks of a webpage design
                <div> elem.s + class/id attributes for identification
                (eg. page, header, nav, article, article, sidebar, footer)
                p402
            Some new h5 elements (=fixing/standardizing some of the older 'conventions') ***
                <header>  <nav>  <article>  <aside>  <footer>
                p403
            <header>
            </header>
            <footer>
            </footer>

            ,
            tip extra use for header/footer **
                    =header/footer for individual <article> / <section> within the page (**!)
                    ## eg. for blog-post: =header for title+date  +  footer for links for sharing to soc.netw.sites (**!)
                p404
            <nav>
            main nav. at top of sites +(used by some) for bottom nav. (=like terms of service etc)  **
                p405
            <article>       'acts as a container for any section of a page that could stand alone and potentially be syndicated'    #article, blog entry, comment, forum post (or any other independent piece of content)
            (+could potentially be used by nesting      =blog post inside an <article> + as comments on the article (and the like/etc))
             <hgroup> (??)
                p406
            <aside>
            used inside <article> elem.
                contain info related to articl. but not essential to its overall meaning (eg. a pullquote, a glossary)
            use outside(!) <article>
                container for content related to entire page (eg. links to other sections of the site, list of recent posts, a search box, recent tweets by the author)
                p407
            <section>       groups related content together +typically each section would have its own heading  (eg. a site might have several, for containing  latest news, top products, newsletter signup,,   group <article>s w. common theme/purpose   splitting long article up into separate sections)

            containing element for the entire page
                '(job) still best left to the <div> element'
                p408
            <hgroup>            #note: has been criticized for being a mere style hook
                grouping title and subtitle
                p409
            <figure>
            <figcaption>

            ??
            +Examples of usage includes:
            images  video  graphs  diagrams  code samples  text that supports the main body of an article
                p410
            <div class="wrappper">


            </div><!-- .wrapper -->
                p411
            Wrap entire block level element (+containing child elements) in an a-element
                =turn the entire block into a link  (**!)
                p412
            Helping older browsers understand

            <!--[if lt IE 9]>       #etc  (***)
             <script src=".........

            h5 'shiv/shim'


                p413 + p414
            EXAMPLE: HTML5 LAYOUT  (='YOKOS KITCHEN') ***************** SEE MORE !!!!!!

            class="courses"




                p420
            CHAPTER 18 - Process and Design
            - how to approach building a site
            - understanding your audience and their needs
            - how to present information visitors want to see
                p421
            - how to understand the audience your site may attract
            and what information they will expect to find on it
            - how to organize the info so visitors can find what they're looking for
            - good design theory
            - design tips (for attractive and professional sites)
                p423
            Target audience: Individuals        **(*)
                (age range of audience, income level, where do they live  (etc etc)
            Target audience: Companies
                p424
            'Invent som fictional visitors from your typical target audience.'
            (+Income and Web use examples  **!)

                p425
            Why people visit your website

            - Key motivations
            - Specific goals
             *****

            +q.s like: 'Are they already familiar with the service/product you offer, or do they need to be introduced to it?'
                p426
            'What your visitors are trying to achieve'

            create list of reasons why people would be coming to your site
                p427
            What information your visitors need
            (=to be able to accomplish their goals/what they want?)

            (=START BUILDING/LISTING THE INFORMATION ON YOUR SITE + ITS ORGANIZATION)

            - do you need to introduce yourself and your services?
            - what is special about what you offer that differentiates you from other sites that offer something similar?
                p428
            How often people will visit your site
            (eg. how often do you need to update your site?)

            can be useful to set schedule for/how often to update your site
            +can be useful to update diff. parts of the site more often (*)
                p429
            SITE MAPS
            'Now that you know what needs to appear on y. site, you can start to organize the information into sections or pages.'

            'The aim is to create a diagram of the pages that will be used to structure the site.'      #=the site map

            Card Sorting - putting each piece of information a visitor might need to know on a separate piece of paper  + organize the related information into groups
            (=each group relates to a page, and on larger sites the pages can in turn be grouped together to form different sections of the website)

            the groups are then turned into a diagram, that is known as the site map
            (can be useful to ask target audience people to help y. group related info together)

            'Additionally ......, each section might require its own section homepage to link to all of the information within it.'


                p430
            EXAMPLE SITE MAP ************* !!!!!!!!!!!!!!!!

            Home
             About
              history
              foundation
              future plans
             Articles
              .....
             Visit
              .....
              .....
             Shop
              .....
              .....
             Contact

            *********

                p431
            WIREFRAMES (=???????????? /***(**))
            (simple sketch of the key info  needs to go on each page of a site)
            (=shows hierarch  + how much space it might require(!))

            (AHA (=+/like Greyboxing  etc)


            Focus on:
            - What information needs to be on each page
            +create a visual hierarchy (to indicate the most important parts of each page)

            online wireframe tools
             gomockingbird.com
             lovelycharts.com

                p432
            EXAMPLE WIREFRAME ******

             logo
             (the 5 nav-links *)
              product photo
              key selling point of product (x3 etc)

             news

             testimonials
             
             sale

              copyright notice
                p433

            (Getting your message across using design)

                masthead


            DIFFERENT CONTENT/FUNCTIONS (EG. ON/IN AN ONLINE NEWSPAPER) **!
                (+organizing it/them)

            prioritizing (+'visual hierarchy')

            organizing (='Grouping together related content into blocks or chunks makes the page look simpler (and easier to understand))

                p434
            'Attention is immed. drawn to a picture that shows the services the comp. offers, ...'
                p435
            Visual hierarch

            Size
            Color
            Style
                p436
            images (often grabs attention first)
                p437
            Grouping and Similarity

            proximity
            closure
            continuance
            white space
            color
            borders
                p438

            Consistancy
              Headings      'Giving a chunk of information a heading clearly tells the user whether or not the content of the grouping is relevant to the or not (**!)  #+screen readers can often pick out and read the headings
                p439
            Designing Navigation

            concise
            clear
            selective
                p440
            primary, secondary, tertiary nav.
                sec.        under primary / down side of page
                tert./last  at bottom of page
            (+maybe a search function)          #implement search functions w. google search, etc

            context
            interactive     color + maybe some extra marker/symbol (=to indicate on which page you are)
            consistent
                p442
            CHAPTER 19 - Practical Information **!
            - SEO -- Search Engine Optimization
            - Using analytics to understand visitors
             - putting your site on the web


                p445
            Search Engine Optimization (SEO)  **** !!!!!!

            On-Page Techniques
            - keywords to appear in your page text and html code (+'There are seven essential places' (=where you want your keywords to appear)
            - appropriate text for im-alt:s also helps search engines (=understand the content of images)
            Off-Page Techniques
            - getting other sites to link to you  (most important =sites whose content is related to yours)
            - ranks links w. important keywords (=as tag's 'inner text') as more important  (+'The words that appear in links to your site should also appear in the text of the page that the site links to.')
                p446
            On-Page SEO     #'the seven key places' (for your keywords)

            1. page title
            2. url / web address
                (where possible, use keywords in the file name)
            3. headings
                (<h1>, <h2>  etc)
            4. text
                ('helps to repeat the keywords in the main body of the text at least 2-3 times')
            5. link text
            6. image alt text
            7. page descriptions
                (=in the meta tags)
                p447
            How to identify Keywords and Phrases
            1. Brainstorm (products and services)
                'What words would you use to (try to) find/if you were looking for my site?'
                (+'keyword phrases'  (like "guitar lessons", "perfect pitch"))
            2. Organize
                'Group the keywords into separate lists for the different sections or categories of your website.'
            3. Research
                =use tools for generating more/more precise keywords (=from your first suggestions)
                = adwords.google.co.uk/select/KeywordToolExternal  (+use 'exact word' (rather than 'broad match'))
                 wordtracker.com
                 keyworddiscovery.com
                p448
            4. Compare
                    (to other sites / competitors)
            5. Refine
                    'If there is a phrase that is very relevant but you find there si a lot of competition, you should still use it.'  + 'Could other words be incorporated into a phrase?' (eg. incorporating your location, may help people find you)
            6. Map
                'Pick 3-5 keywords or phrases that map to each page of your website and use these as the keywords for each page.'

                p449
            Analytics **!

            As soon as people start coming to your site:
            - How they found it
            - What they were looking at
            - At what point they were leaving

            google.com/analytics
            Where to put the g-analytics code? ; just before the </head> tag
                p450
            How many people are coming to your site?

            visits
            unique visits
            page views
            pages per visit
            average time on site
            date selector
            export (=report, like to Excel)
                p451
            'The content link on the left-hand side allows you to learn more about what the visitors are looking at when they come to your site.'

            pages
            landing pages
            top exit pages
            bounce rate
                'high bounce rate suggests that the conten is not what they were looking for, or that the page did not sufficiently encourage them to look around the rest of the site.'

                p452
            Where are your visitors from?       #='traffic sources'

            referrers
            direct
            search terms (**)
              advanced features     (e-commerce tracking)
                p453
            Domain Names and Hosting

            domain name     #like bbc.co.uk
            web hosting
                disk space
                bandwidth
                backups
                p454
            email accounts              #size + number of mailboxes you can use
            server-side langs and db.s
            Hosted Services
                (like for wordpress etc: 'allow you to point your domain name to their servers.')
                p455
            FTP (and 'third party tools')

                p456
             ftp://mydomain.com
            SOME FTP-APPLICATIONS  (***(*))


            (some popular third party tools:)

            Blogs

            wordpress.com
            tumbIr.com
            posterous.com

            E-Commerce

            shopify.com
            bigcartel.com
            go.magento.com

            Email Newsletters

            campaignmonitor.com
            mailchimp.com

            Social Networking
            Sharing Buttons

            addthis.com
            addtoany.com
                p467
            TROUBLESHOOTING
                p468


                p469
            HTML ELEMENTS       #alphabetically ordered lists  *****
                p470
            HTML ATTRIBUTES
                p471
            CSS PROPERTIES
            PSEUDO-CLASSES, ELEMENTS AND RULES  (**)
 h5cb/c3cb
            ~/Documents/doks/h5cb.pdf
            ~/Documents/doks/c3cb.pdf
  h5cb
                Contents

                Introduction  xix
                Acknowledgments  xxvii
                About the Authors  xxix


                1 New Structural Elements in HTML5
                BEGINNER RECIPE:
                Building an HTML5 Starter Document
                  doctype
                    <!DOCTYPE html>
                  Character Encoding
                    <meta charset="utf-8" />
                  JavaScript and CSS Links
                  Syntax Writing Style  !!
                Where Do All the New Elements Come From?
                    analyzing more than 1 billion web pages for Class names
                BEGINNER RECIPE:
                Using the header Element to Create a Site Header
                    <header>  (+multiple headers?)
                BEGINNER RECIPE:
                Using the hgroup Element to Group Headings
                    ????
                BEGINNER RECIPE:
                Creating Navigation with the nav Element
                    =ul-list inside <nav> (instead of ul-top w. nav-id)
                INTERMEDIATE RECIPE:
                Using the New article Element
                    ='reusable independent block of content'
                    ( Would it appear in syndication (that is, an RSS feed)? Yes! Does it make sense on its own? Yes! It is an article then. )
                INTERMEDIATE RECIPE:
                Grouping Content with the section Element
                    'area of content or an area of a page that nearly always requires a heading'
                  Which Should You Use: article or section?
                    unlike <div>, section has semantic meaning (=grouping of related content)
                BEGINNER RECIPE:
                Creating a Sidebar with the aside Element
                BEGINNER RECIPE:
                Using the footer Element
                INTERMEDIATE RECIPE:
                Using the HTML5 Outliner to Ensure the Correct Structure
                    Chrome Plugin =H5 Outliner
                ADVANCED RECIPE:
                Using All the New Elements to Build a News Page
                    =Tut
                ADVANCED RECIPE:
                Using All the New Elements to Build a Search Results Page
                Summary

                2 Grouping, Text-Level, and Redefined Semantics
                BEGINNER RECIPE:
                Marking Up Figures and Captions with the figure and figcaption Elements
                BEGINNER RECIPE:
                Marking Up the Date and Time with the time Element
                    code dates and times that are readable by machines + readable by users
                BEGINNER RECIPE:
                Making a Native Toggle Widget with the details Element
                    (=block arrow (for opening/hiding content))
                BEGINNER RECIPE:
                Using the address Element for Contact Information
                BEGINNER RECIPE:
                Highlighting Text with the mark Element
                    'If a user searches a site and is taken to a separate page, the term they searched for might be highlighted for their reference.'
                BEGINNER RECIPE:
                Using the s Element to Show Inaccurate or Irrelevant Content
                    (='no longer correct or relevant')
                Changes to Existing Elements
                  The cite Element
                    represents the title of a work (=book/song)
                  The ol Element
                    =now has three acceptable attributes: start reversed type
                  The dl Element
                    description, or association list  (like creating a glossary)
                  The small Element
                    small print (=copyright information, terms, conditions, legal information etc)
                  The b and strong Elements
                    (used for styling a section)
                  The i and em Elements
                    =that text is in an alternative voice or mood
                  The abbr Element
                    (=has been merged w. <acronym>)
                  The hr Element
                    +='now represents a break, after a paragraph, such as a scene change in a book.'
                  Elements That Are No More
                    acronym, applet (=use object) etc etc
                BEGINNER RECIPE:
                Wrapping Links Around Elements
                    (="handy - gives you a much large/wider clickable area")
                INTERMEDIATE RECIPE:


                Adding Semantic Information with Microdata (**)
                    'has five attributes: itemid , itemprop , itemref , itemscope , and itemtype.'
                INTERMEDIATE RECIPE:
                Using WAI-ARIA with HTML5   #web accesibility initiatives ...
                    teterm: landmark roles
                ADVANCED RECIPE:
                Marking Up an Article Page with Comments
                    ????
                Summary

                3 Browser Handling in HTML5
                BEGINNER RECIPE:
                Dealing with Internet Explorer
                  Using JavaScript to Make HTML5 Compatible
                    the h5 shiv
                  Making CSS Compatible
                Boilerplates
                    'a series of folders and files that allow you to start your project quickly'  #snippets etc
                    http://html5boilerplate.com
                    http://html5reset.org
                    http://initializr.com
                BEGINNER RECIPE:
                Testing for HTML5 Features
                    ="feature detection, instead of browser sniffing"
                INTERMEDIATE RECIPE:  *
                Leveraging jQuery to Replace a Calendar
                INTERMEDIATE RECIPE:
                Using Modernizr to Detect Features
                    +="detects but does not add(!) the missing functionality for you"
                    property flags for detecting  geolocation api, localstorage, drag and drop, canvas  (etc etc)
                Polyfilling
                    (filling in missing functionality via code library)
                Useful HTML5 Verification Sites
                    http://findmebyIP.com:
                    http://caniuse.com:
                    http://html5test.com:
                    http://html5readiness.com:
                Summary

                4 New Layout and Style Techniques with CSS3
                INTERMEDIATE RECIPE:
                Creating a Responsive Design with CSS3
                    <link rel="stylesheet" media="screen and
                    (max-device-width: 480px)" href="smartphone.css" />
                    <link rel="stylesheet" media="screen and
                    (min-width: 480px)" href="screen.css" />
                     --
                    /* styles for smartphones and very small screen resolution */
                    @media only screen and (min-width: 320px) and (max-width: 400px)
                Media Queries
                  Sensible Usage
                  Targeting the iPhone and Android Devices
                    <meta name="viewport" content="width=device-width; initial-scale=1.0; " />
                BEGINNER RECIPE:
                Using Custom Fonts with @font-face
                  File Formats and the Cross-Browser Fix
                    Listing 4.7 uses only a .ttf (TrueType/OpenType) font file. Unsurprisingly, there are
                    cross-browser implementation issues. There are several different font file formats:
                    Embedded OpenType (.eot)
                    OpenType PS (.otf )
                    TrueType/OpenType (.ttf )
                    SVG (.svg)
                    WOFF (.woff )   #=the new web standard
                  Type Services
                    font squirrel
                    h1 {font-family: 'Yanone Kaffeesatz', arial, serif;}
                    font stacks


                INTERMEDIATE RECIPE:
                Making Buttons with CSS Gradients and Multiple Backgrounds  **(**)
                    background: (-moz-)linear gradient(white, black);
                INTERMEDIATE RECIPE:
                Enhancing a Site with Transformations and Transitions  #=Animations **
                    (-moz-)transform: rotate(270deg);
                     translate
                     skew
                     scale
                     /* You can also chain them together in a single declaration: */
                     h1{transform: translate(100px, 200px) skew(40deg) skew(2) rotate(40deg);}
                      --
                    transition: all 1s ease-in;
                    Animated Image Zoom on Mouse Hover
                     img:hover {
                            transform:  rotate
                            scale
                ADVANCED RECIPE:


                Creating Animations with CSS  (****!!)
                     name  moveIt
                     duration  5s
                     iteration-count  infinite
                     timing-function  linear
                    keyframes
                    @-moz-keyframes moveIt {
                      from {
                      to {
                    'Animated banner'
                     Tahoma, Geveva, sans-serif
                Summary

                5 HTML5 Web Forms
                Validation
                HTML 4 Input Types
                BEGINNER RECIPE:
                Creating a Form to Collect Contact Information
                  input type="email"
                  input type="tel"
                  input type="url"
                BEGINNER RECIPE:
                Creating a Search Form with input type="search"
                BEGINNER RECIPE:
                Creating Calendar and Time Controls
                  input type="datetime"
                  input type="datetime-local"
                  input type="date"
                  input type="time"
                  input type="month"
                  input type="week"
                  Placing Restrictions on Dates and Times
                    min max  (=attributes)
                BEGINNER RECIPE:
                Creating a Number Picker
                BEGINNER RECIPE:
                Creating a Slider (Without the Need for JavaScript)
                    <label for="range">Volume</label>
                BEGINNER RECIPE:
                Creating a Color Picker
                    input type="color"
                BEGINNER RECIPE:
                Displaying Results with the output Element
                    ='output from a script' etc (??)
                BEGINNER RECIPE:
                Using Form Placeholder Text
                BEGINNER RECIPE:
                Creating an Autocomplete Feature with list and datalist

                BEGINNER RECIPE:
                Tracking the Completion of a Task with the progress Element  **
                BEGINNER RECIPE:
                Measuring with the meter Element
                    <meter min=0" ...
                BEGINNER RECIPE:
                Jumping to a form Element When the Page Loads
                    <input autofocus 
                BEGINNER RECIPE:
                Allowing Multiple Entries
                    multiple
                BEGINNER RECIPE:
                Basic Validation with the required Attribute

                INTERMEDIATE RECIPE:
                Writing Your Own Validation Rule
                    ='Even though HTML5 has built-in validation, you can set your own rules using the pattern attribute and regular expressions.'  **
                BEGINNER RECIPE:
                Limiting User Input
                  step
                  min, max
                  formnovalidate, novalidate
                    (useful wh. wanting to save curr. state of form, rather than submit it)
                INTERMEDIATE RECIPE:
                Customizing and Styling the Form
                    input:invalid:required
                    input:focus:invalid
                    input:valid
                     .....
                     .....
                     .....
                     .....
                Error Messages
                    =Can change the error message text (*!)
                ADVANCED RECIPE:
                Putting It All Together to Make a Sign-Up Form
                Summary

                6 Drawing with Canvas
                Canvas Overview
                    the <canvas> elem. in the html + the js to draw on the canvas
                  Getting Started
                    canvas {
                      border: 1px solid #000;
                    }
                      ....
                      ....
                    <canvas id="myCanvas" width="640" height="480"></canvas>
                     --
                    .... .getContext('2d');
                  X and Y Coordinates
                BEGINNER RECIPE:  (=introd. to canvas drawing)

                Laying a Grid on the Canvas  (**##!)
                    'Drawing the Canvas Grid'
                Canvas Tools
                BEGINNER RECIPE:
                Making Simple Shapes and Lines
                    rectangle line path arc curve (bez/quadr)


                  Drawing and Styling a Rectangle or Square  ********** ++++
                    SEE MORE (!!)
                    The following are some of the more common effect methods that are available for
                    shapes:
                    strokeStyle : Specifies the color or style for lines around shapes
                    fillStyle: Specifies the color or style used inside shapes
                    canvas.shadowOffsetX / shadowOffsetY: Specifies the distance of the shadow
                    canvas.shadowBlur: Specifies the level of the blurring effect
                    canvas.shadowColor: Specifies the color of the shadow
                    createLinearGradient: Creates a linear gradient inside the shape
                    createRadialGradient: Creates a radial gradient inside the shape
                  Applying Gradients to Shapes
                    var grd = canvas.createLinearGradient
                    canvas.createRadialGradient
                    grd.addColorStop(0, '#000');
                     --
                    canvas.fillStyle = grd;
                    canvas.strokeStyle = '#09c';
                    canvas.lineWidth = 5;
                    canvas.fillRect(0, 0, 200, 200);
                    canvas.closePath();
                     --
                    canvas.closePath();
                  Drawing Lines and Paths
                    canvas.moveTo(10,10);
                    canvas.lineTo(630, 470);
                    canvas.stroke();
                     --
                    canvas.beginPath();
                INTERMEDIATE RECIPE:
                Drawing Polygons with a Path ***(*!)
                INTERMEDIATE RECIPE:
                Drawing Arcs and Circles
                  Drawing Curves
                    canvas.arc(x, y, radius, startAngle, endAngle, antiClockwise(Boolean));
                BEGINNER RECIPE:
                Adding Text
                    canvas.font = 'bold 80px Tahoma';
                    canvas.fillStyle = '#000';
                    canvas.fillText('HTML5 Canvas', 10, 100);
                    canvas.strokeStyle = '#000';
                    canvas.lineWidth = 3;
                    canvas.fillStyle = '#ccc';
                    canvas.textAlign = 'center';
                    canvas.fillText('HTML5 Canvas', 320, 200);
                    canvas.strokeText('HTML5 Canvas', 320, 200);
                BEGINNER RECIPE:
                Drawing an Image
                    drawImage **
                INTERMEDIATE RECIPE:
                Cropping an Image
                    ='by using the third method signature'  (=includes cropping properties)
                    (+use image to fill background of a shape)
                INTERMEDIATE RECIPE:
                Animating a Sprite Map ***(*!)
                    ="by including and cropping source image"
                    context.drawImage( etc etc .....


                Canvas Transformations ***(*)
                    rotate
                    scale
                    transform


                ADVANCED RECIPE:
                Animating an Image
                    ="roll a gear across the canvas from left to right" **!
                    var stepCounter
                    var stepDegrees
                    var stepDistance
                    var stepSpeed
                    var stepFullRevolution    (etc ***!)
                     --
                        Note ******** !!!!
                        You can interact with the canvas, whether to play a game or move a shape, by catching mouse events such as mouseover and click.


                ADVANCED RECIPE:
                Animating a Vertical Bar Chart
                    =from sample JSON Data ****** !!!!!!
                Summary

                7 Embedding Video with HTML5
                BEGINNER RECIPE:
                Including Video with the video Element
                  Browser and Device Support
                  HTML5 and Video Codecs
                    ogg  webm
                  Why Should You Care About Codecs?
                INTERMEDIATE RECIPE:
                Enabling Video for All Browsers
                    <video src="mymovie.mp4"></video>
                     controls
                  Adding Fallback Content for Older Browsers
                  New Video Attributes
                    src  (attrib)
                    poster  (attrib)
                    preload="metadata"
                    audio
                    loop
                    autoplay
                     controls (**!)
                INTERMEDIATE RECIPE:
                Creating a Video with Subtitles and Captions  (and descriptions)
                    <track src="subtitles.vtt" kind="subtitles" srclang="en" label="English">
                    captions
                    descriptions
                    chapters
                    metadata
                    .vtt  .srt (**)
                    VideoSub (=jQuery)
                  Other Subtitle Styling Options
                    (=adding bold etc etc)
                The Media API
                    HTML5 provides a vast and exciting API for multimedia. Using the API and JavaScript, you can manipulate the video in your web pages. The following is a list of the available API events:


                ADVANCED RECIPE:
                Making Your Own Custom Controls  ****** (*)
                    +=  video.addEventListener( .......
                    (( video.webkitEnterFullscreen()  ))
                Summary
                    WebVTT

                8 - Embedding Audio with HTML5
                BEGINNER RECIPE:
                Including Audio with the audio Element
                    <audio src="music.mp3" controls />
                INTERMEDIATE RECIPE:
                Enabling Audio for All Browsers
                  Adding Fallback Content for Older Browsers
                New Audio Attributes
                  The src Attribute
                  The preload Attribute
                  The loop Attribute
                  The autoplay Attribute
                  The controls Attribute
                The Media API ***(!!)
                INTERMEDIATE RECIPE:
                Creating a Beat Mixer  **!
                    $('audio')  .....
                    removeAttr
                    addClass


                ADVANCED RECIPE:
                Adding Streaming Radio  ***** (json-list of url:s, etc)
                Summary

                9 Changing Browser History
                History Basics
                  Browser Compatibility
                BEGINNER RECIPE:
                Adding to History with pushState
                BEGINNER RECIPE:
                Creating an Image Viewer **
                INTERMEDIATE RECIPE:
                Popping State in the Image Viewer
                BEGINNER RECIPE:
                Changing History with replaceState
                INTERMEDIATE RECIPE:
                Changing the Page History
                ADVANCED RECIPE:
                Using Advanced State Data Objects to Pass Information
                Across Pages
                INTERMEDIATE RECIPE:
                Testing History Security  *
                        (=against phishing (website forgery))
                Helpful Libraries
                Summary

                10 Location Awareness with the Geolocation API
                Geolocation Overview
                  Browser Compatibility
                  Where in the World: getCurrentPosition
                BEGINNER RECIPE:
                Determining Your Location with a Simple
                getCurrentPosition
                  Location Privacy
                INTERMEDIATE RECIPE:
                Mapping a Location with getCurrentPosition
                INTERMEDIATE RECIPE:
                Determining Distance with PositionOptions
                ADVANCED RECIPE:
                Following a Moving Location with watchPosition  *

                    (+Mapping Hacks (x2) // OpenLayers (**!/?))

                11 Client-Side Storage
                Client-Side Storage Overview
                  Data Security
                  Keys and Values: sessionStorage and
                  localStorage
                BEGINNER RECIPE:
                Getting and Setting Session Storage
                  Chrome Developer Tools for Viewing Storage
                BEGINNER RECIPE:
                Styling from Session Storage
                    'provide the visitor ... w. the opportunity to select a theme color for the background of the page'
                INTERMEDIATE RECIPE:
                Storing Forms with Local Storage  *(*)


                ADVANCED RECIPE:
                Catching Events in Local Storage
                    ='implement ... allow the visitor to take notes as they browse through the site' ****
                Web SQL Database API
                    ='store more complex objects, properties, and relationships'
                ADVANCED RECIPE:
                Using a Web Database for a Grocery List  (**!)
                Summary

                12 Communication and Threading
                WebSocket API Overview
                    'communicating with servers through direct socket messages'
                BEGINNER RECIPE:
                Talking Through Web Sockets
                Threading Through Web Workers
                BEGINNER RECIPE:
                Creating a Web Worker
                INTERMEDIATE RECIPE:
                Adding Two-Way Communication
                ADVANCED RECIPE:
                Leveraging a Shared Web Worker
                    SharedWorker  (=object **)
                Summary

                13 Browser Experience in HTML5
                Drag and Drop API
                    draggable="true"
                    dropzone
                    DataTransfer  (etc)
                BEGINNER RECIPE:
                Dragging and Dropping Across divs
                    (=dragging and dropping notes)
                ADVANCED RECIPE:
                Leveraging Events and dataTransfer
                    dragstart
                    drag
                    dragenter
                     .....
                  (=the 'wood blocks tower game')
                Application Cache and API
                  Browser Cache Security
                  Referencing a Manifest File
                BEGINNER RECIPE:
                Creating a Manifest File
                  CACHE
                  FALLBACK
                  NETWORK
                  Updating the Cache via the Manifest


                BEGINNER RECIPE:
                Using Web Pages Offline  ****!!
                Application Cache API
                (Web) Notification(s) API
                  Notification Permissions
                  Browser Compatibility
                BEGINNER RECIPE:
                Displaying a Simple Notification
                ADVANCED RECIPE:
                Creating a Tweet Notification Page  **!
                Summary

                14 Working with Local Files
                File API Overview
                    FileList  (interface)
                    File      (interface)
                    FileReader    (interface)
                    name
                    type
                    size
                    lastModifiedDate
                  File API Security
                BEGINNER RECIPE:
                Getting File Attributes
                    file.lastModifiedDate  (etc)
                BEGINNER RECIPE:
                Processing Multiple Files with Drag and Drop
                    (='asynchronously read files from client-side JavaScript.')
                The FileReader Interface
                INTERMEDIATE RECIPE:
                Previewing Images Through readAsDataURL
                ADVANCED RECIPE:
                Parsing a CSV File with readAsText
                File API Extended Specifications
                ADVANCED RECIPE:
                Creating a Local File
                Summary

                15 Integrating Device Data
                Brief Device APIs History
                Contacts API
                BEGINNER RECIPE:
                Retrieving All Contacts and Mobile Numbers
                Messaging API
                Network Information API
                Battery Status Events
                HTML Media Capture
                    'designed to instruct browser agents to launch media capture tools'

                INTERMEDIATE RECIPE:
                Capturing Pictures with File Input **
                Device Orientation and Motion Events
                    (=acceleration  etc)
                INTERMEDIATE RECIPE:
                Creating a Bubble Level  (=spirit level)
                Summary

                Recipes
                Index
  c3cb
              Preface

              1. Using HTML Basics  1
                1.1 Picking a Text Editor
                    gedit, jedit, notepad++,  atom
                      textwrangler
                1.2 Coding a Basic HTML Page
                1.3 Understanding DOCTYPEs and Effects on Browser Layout
                1.4 Marking Up Headers
                1.5 Making Appropriate Quotations
                    <blockquote cite=......
                1.6 Adding an Image
                1.7 Adding Audio with HTML5
                1.8 Incorporating Video with HTML5
                1.9 Using strong and em Effectively
                    strong (bold)  em (italic)      #=defaults
                1.10 Creating Lists
                1.11 Making a Link to a Web Page  (**(*))
                    Linking to another web page on the same site
                    root relative link
                    Linking to certain elements within a web page
                1.12 Coding Tables
                1.13 Creating an HTML vCard (hCard)  (**)
                    (=microformat)
                1.14 Marking Up an Event (hCalendar)
                    based on iCalendar file format (?)
                1.15 Validating HTML
                    'Use the W3C validator'  += input web document URI
                    (or upload CSS file / entering CSS rules)
                        +More Options > Verbose Output
                    bookmarklet: 'iny piece of JS (in the address portion of a bookmark)'

              2. CSS Basics  33
                2.1 Applying CSS Rules to a Web Page
                    selectors + properties
                    selector { property: value; }
                    selector {
                      property: value;
                    }
                    selector, selector {
                      property: value;
                    }
                2.2 Using Basic Selectors to Apply Styles
                    type selectors
                        sel.s that name the elem./HTML tag to style
                        (eg. h1, p etc)
                    class sel.s
                    id sel.s
                    descendent sel.s
                    universal sel(s)
                2.3 Applying Child Selectors
                    div > strong {
                      text-decoration: none;
                    }
                2.4 Applying Adjacent Selectors
                    li + li {
                      font-size: 200%;
                    }
                2.5 Applying Attribute Selectors
                    a[href] {
                    a[href="csscookbook.com"] {
                    a[title~="tv hd digital"] {
                    a[title|="anti"] {
                    ^=
                    $=
                    *=
                2.6 Using Pseudo-Classes  (**!)
                    a:link
                    a:visited
                    a:hover
                    a:active
                    ETC ETC
                     (eg.  :last-child)
                2.7 Using Pseudo-Elements
                    p::first-letter
                    p::first-line {
                    p::before {
                    p::after {
                2.8 Determining When to Use Class and ID Selectors
                    class ='apply sever. times w.in a dok'
                2.9 Understanding CSS Properties
                2.10 Understanding the Box Model  #teterm ***(!)
                    'Every block-level element ..... contains a top, right, bottom and left edge.'
                2.11 Associating Styles to a Web Page  (***!)
                    (externally, internally, inline)
                    tip: When to use inline styles/internal stylesheets
                      one(!) elem. in page / testing + starting out (=then migrate to external stylesheet) 
                2.12 Understanding the Origin
                    (=importance hierarchy of inline / external styles etc  **(!!))
                2.13 Understanding the Sort Order Within CSS
                    'rule closest to the content wins'
                2.14 Using !important to Override Certain CSS Rules
                2.15 Clarifying Specificity
                    more specific rules generally wins *(!)
                    Impact, Haettenschweiler, "Arial Narrow Bold", sans-serif;
                    Futura, "Century Gothic", AppleGothic, sans-serif;
                    "Gill Sans", Trebuchet, Calibri, sans-serif;
                    'The p selector has a specificity value of 0,0,0,1.'
                2.16 Setting Up Different Types of Stylesheets **!
                    link
                    @media screen {  #print, projection
                    Table 2-5. List of media types
                    (all, aural, braille, embossed
                     handheld, print, projection, screen, tty, tv)
                2.17 Adding Comments Within Stylesheets
                    /*  */
                2.18 Organizing the Contents of a Stylesheet
                    1. Elements ( h1 through h6 , p , a , list , links , images )
                    2. Typography
                    3. Page layout (header, content, navigation, global navigation, subnavigation, side-
                    bar, footer)
                    4. Form tags (form, fieldset, label, legend)
                    5. Content (post, events, news)
                     --
                    /* Typography & Colors
                    ------------------------------------ */
                    [css code ]
                2.19 Working with Shorthand Properties
                    eg.  font: italic 18pt verdana, arial, sans-serif;
                2.20 Setting Up an Alternate Stylesheet
                    ='You want to provide other style options for users who might want larger text', different color scheme etc.
                    +tip: JS style switchers (*)
                2.21 Using Floats
                    ='place image on left / right side' + text to wrap around it
                    ("Position is everything")
                      (+/or overflow)
                2.22 Using Self-Clearing Floated Elements  (****!!)
                    'You want to stop a floated element from overlapping other content, but without any reliance on other HTML elements.'
                2.23 Using Absolute Positioning
                    (positioning elem. based on the window (rather than its default position))
                2.24 Using Relative Positioning
                    (=relative to its natural position, as rendered by the browser)
                2.25 Using Shackling Positioning
                    (relative + absolute for parent and child (**))
                2.26 Stacking Elements with z-index  **(**!)
                2.27 Validating CSS Rules
                    CSS validator bookmarklet (*)
                     (+ffox extension =passing curr. viewed page to the W3C CSS Validator) *

              3. Web Typography  105
                3.1 Specifying Fonts
                    font-family
                     serif sans-serif monospace cursive fantasy
                  Georgia , Times , "Times New Roman" , Garamond , "Century Schoolbook"
                  Verdana , Arial , Helvetica , Trebuchet , Tahoma
                  Courier , "MS Courier New" , Prestige
                  "Lucida Handwriting" , "Zapf-Chancery"
                  Comic Sans , Whimsy , Critter , Cottonwood
                   ****
                  ('The CSS 2.1 specification for inheritance (**))
                3.2 Using Web-Safe Fonts  (****)
                    (='preinstalled on many/most computers)
                        +Linux: Microsoft TrueType
                        msttcorefonts  (package)
                    extended web-safe fonts
                    Font stacks + robust stacking (**!)
                3.3 Setting an Ampersand Flourish  (*!)
                    (maybe book tip: The Elements of Typographic Style (Bringhurst))
                3.4 Embedding Font Files  **!
                    (eg. the Museo font)
                    Creating cros-browser embedding (+converting font file to .eot file)
                    Typekit  Fontdeck   (sIFR 3)
                3.5 Forcing a Break on Really Long Words
                    ( word-wrap: break-word )
                3.6 Specifying Font Measurements and Sizes
                    (+different units)
                    Relative units
                        em      default font size set in user's browser pref.s
                        ex      the 'x-height'
                        px      =the 'smallest dot that can be made on a computer screen'
                3.7 Gaining More Cross-Browser Consistency with Font Sizes
                    (=consistent across diff. browsers + os.es)
                    body {
                      font-size: 62.5%;
                    }
                    (+ 1em for Windows (??/*))
                     --
                    font(size) keywords
                        xx-small, x-small, x-large  ...
                3.8 Setting Hyphens, Em Dashes, and En Dashes
                    &#8212;  (etc)     &em;
                3.9 Centering Text
                3.10 Setting Text to Be Justified
                3.11 Indicating an Overflow of Text with an Ellipsis
                3.12 Removing Space Between Headings and Paragraphs
                    ( margin  padding )
                3.13 Setting a Simple Initial Cap
                    ( p:first-letter { )
                3.14 Setting a Larger, Centered Initial Cap
                3.15 Setting an Initial Cap with Decoration (Imagery)  ****(!)
                3.16 Creating a Heading with Stylized Text
                    (= shorthand property)
                3.17 Creating a Heading with Stylized Text and Borders  (*)
                    border-top border-bottom 
                3.18 Stylizing a Heading with Text and an Image
                3.19 Creating a Pull Quote with HTML Text
                    <blockquote>
                     --
                    blockquote {
                3.20 Placing a Pull Quote to the Side of a Column
                    padding-left   float
                3.21 Creating a Pull Quote with Borders
                3.22 Creating a Pull Quote with Images
                3.23 Setting the Indent in the First Line of a Paragraph
                    text-indent
                3.24 Setting the Indent of Entire Paragraphs  ++SEE MORE (!!#***)
                    (= use class selectors)
                    p.normal {  #etc
                3.25 Creating a Hanging Indent
                    ( use negative text-indent)
                3.26 Styling the First Line of a Paragraph
                    ( :first-line )
                3.27 Styling the First Line of a Paragraph with an Image
                    ( :first-line  + bg image )
                3.28 Creating a Highlighted Text Effect
                    <strong> + css background-color
                3.29 Changing the Text Selection Color
                    ::selection {
                    ::-moz-selection {
                3.30 Changing Line Spacing
                    line-height
                3.31 Adding a Graphic Treatment to HTML Text **!
                    <span>  + Gilder/Levin replacement technique
                    (+ the 'clear' property  (??))
                3.32 Placing a Shadow Behind Text
                    text-shadow  (**)
                3.33 Adjusting the Space Between Letters and Words
                    letter-spacing  word-spacing
                    (+tip: use relative unit sizes)
                3.34 Applying Baseline Rhythm on Web Typography
                    ???????? / ***********  (SEE MORE)
                    Baseline Rhythm Calculator
                    (+'vertical rhythm')
                3.35 Styling Superscripts and Subscripts Without Messing the Text Baseline  ((**))
                3.36 Setting Up Multiple Columns of Text

              4. Images  179
                4.1 Transforming Color Images to Black and White in IE with CSS
                    filter: gray;
                4.2 Setting a Border Around an Image
                4.3 Setting a Rounded Border Around an Image
                4.4 Removing Borders Set on Images by Default in Some Browsers
                4.5 Setting a Background Image
                4.6 Creating a Line of Background Images  (*)
                4.7 Positioning a Background Image
                4.8 Using Multiple Background Images on One HTML Element
                4.9 Setting Images on a Border
                4.10 Creating a Stationary Background Image
                4.11 Stretching Images As the Browser Resizes
                4.12 Stretching an Image Across the Entire Browser Window
                4.13 Making Images Scalable
                4.14 Setting How a Browser Renders an Image
                4.15 Rotating Images with CSS
                4.16 Setting Gradients with CSS  (**)
                4.17 Creating Transparent PNG Images for IE6 and Later
                4.18 Using Transparent PNG Images with JavaScript
                4.19 Overlaying HTML Text on an Image
                4.20 Replacing HTML Text with an Image
                4.21 Building a Panoramic Image Presentation  (* *)
                4.22 Combining Different Image Formats
                4.23 Rounding Corners with Fixed-Width Columns
                4.24 Rounding Corners (Sliding Doors Technique)
                4.25 Rounding Corners (Mountaintop Technique)
                4.26 Rounding Corners with JavaScript
                4.27 Setting a Shadow on an Element with CSS  ****!

                4.28 Placing a Drop Shadow Behind an Image **
                4.29 Placing a Smooth Drop Shadow Behind an Image   *
                4.30 Making Word Balloons  *
                4.31 Hindering People from Stealing Your Images   *
                4.32 Inserting Reflections on Images Automatically
                4.33 Using Image Sprites    (**)
                4.34 Clipping Background Images
                4.35 Applying Masks to Images and Borders

              5. Page Elements  265
                5.1 Eliminating Page Margins
                5.2 Resetting Browser-Style Defaults for Elements
                5.3 Coloring the Scroll Bar in IE
                5.4 Techniques for Centering Elements on a Web Page
                5.5 Placing a Page Border
                5.6 Placing a Border Around the Browser's Viewport
                5.7 Customizing a Horizontal Rule
                5.8 Adding a Lightbox  (***!)
                5.9 Changing the Opacity on Elements   *
                5.10 Adjusting the Opacity of Background Colors

              6. Lists  299
                6.1 Changing the Format of a List
                6.2 Changing the Color of a List Bullet
                6.3 Writing Cross-Browser Indentation in Lists
                6.4 Placing Dividers Between List Items
                6.5 Creating Custom Text Markers for Lists
                6.6 Creating Custom Image Markers for Lists
                6.7 Inserting Larger Custom Image Markers for Lists
                6.8 Making a List Presentation Rich with Imagery
                6.9 Creating Inline Lists
                6.10 Making Hanging Indents in a List
                6.11 Moving the Marker Inside the List
                6.12 Styling a Definition List
                6.13 Styling a Screenplay with the HTML5 dialog Element
                    ******
                6.14 Turning a List into a Directory Tree
                    ???(?)
                6.15 Creating a Star Ranking System  ******!!!!!!

              7. Links and Navigation  341
                7.1 Easily Generating Text-Based Menus and Submenus
                7.2 Removing Underlines from Links (and Adding Other Styles)
                7.3 Changing Link Colors

                7.4 Removing Dotted Lines When Clicking on a Link in Internet Explorer
                7.5 Changing Link Colors in Different Sections of a Page
                7.6 Placing Icons at the End of Different Kinds of Links
                7.7 Changing Cursors
                7.8 Creating Rollovers Without JavaScript   **!
                7.9 Animating Rollovers on Links with CSS3 Transitions
                    *
                7.10 Creating Text Navigation Menus and Rollovers
                7.11 Adding Submenus to Vertical Menus
                7.12 Building Horizontal Navigation Menus
                7.13 Building Horizontal Navigation Menus with Drop-Down Menus
                7.14 Building a Navigation Menu with Access Keys
                7.15 Creating Breadcrumb Navigation
                7.16 Creating Image-Based Rollovers
                7.17 Creating Collapsible Menus
                7.18 Creating Contextual Menus
                7.19 Making Tool Tips with the title Attribute  **(*!)
                7.20 Designing a Dynamic Tabbed Menu  (**!!)
                7.21 Changing Styles on Anchored Links

              8. Forms  397
                8.1 Modifying the Spacing Around a Form
                8.2 Removing the Space Around a Form
                8.3 Setting Styles for Input Elements
                8.4 Changing Styles on Form Elements When a User Clicks on Them
                8.5 Applying Different Styles to Different Input Elements in the Same Form
                8.6 Setting Styles for textarea Elements
                8.7 Setting Styles for select and option Elements
                8.8 Creating a Macintosh-Styled Search Field  **
                8.9 Styling Form Buttons
                8.10 Creating an Image Submit Button  **!
                8.11 Setting Up a Submit-Once-Only Button
                8.12 Creating a Submit Button That Looks Like HTML Text
                8.13 Making an HTML Text Link Operate Like a Submit Button
                    **
                8.14 Designing a Web Form Without Tables  **
                8.15 Designing a Two-Column Form Without Tables  **
                8.16 Integrating Form Feedback with a Form
                8.17 Styling Access Keys in Web Forms
                8.18 Grouping Common Form Elements
                8.19 Entering Data into a Form That Is Similar to a Spreadsheet
                8.20 Sample Design: A Login Form
                8.21 Sample Design: A Registration Form

              9. Tables  453
                9.1 Setting the Borders and Cell Padding for Tables
                9.2 Setting the Cell Spacing
                9.3 Setting the Style for Captions
                9.4 Setting the Styles Within Table Cells
                9.5 Setting the Styles for Table Header Elements
                9.6 Removing Gaps from Images Placed in Table Cells
                9.7 Eliminating Gaps Between Table Cells
                9.8 Creating Alternating Background Colors in Table Rows
                9.9 Adding a Highlighting Effect on a Table Row
                9.10 Sample Design: An Elegant Calendar  *(*)

              10. Designing Web Pages for Printing  481
                10.1 Applying a Stylesheet for Printing to a Web Page
                10.2 Replacing a Color Logo for a Black-and-White Logo When Printing Web Pages
                10.3 Making a Web Form Print-Ready
                10.4 Displaying URIs After Links
                10.5 Inserting Special Characters Before Links
                10.6 Setting Page Breaks for a Printed Document
                10.7 Sample Design: A Printer-Friendly Page with CSS

              11. Page Layouts  505  **** !
                11.1 Building a One-Column Layout
                11.2 Building a Two-Column Layout
                11.3 Building a Two-Column Layout with Fixed-Width Columns
                11.4 Creating a Flexible Multicolumn Layout with Floats
                11.5 Creating a Fixed-Width Multicolumn Layout with Floats
                11.6 Creating a Flexible Multicolumn Layout with Positioning
                11.7 Creating a Fixed-Width Multicolumn Layout with Positioning
                11.8 Using Floats to Display Columns in Any Order
                11.9 Designing an Asymmetric Layout
                11.10 Designing Resolution-Independent Layouts

              12. Hacks, Workarounds, and Troubleshooting  551
                12.1 Overriding Inline Styles
                12.2 Diagnosing CSS Bugs and Browser Issues
                12.3 Using Bookmarklets to Troubleshoot CSS  (**!)
                12.4 Using Browser Extensions to Troubleshoot CSS  (*!)
                12.5 Patching Up Internet Explorer 6
                12.6 Patching Up Internet Explorer 6 with JavaScript
                12.7 Using Conditional Comments to Deliver Styles to Different Versions of Internet Explorer

                12.8 Using CSS Filters to Deliver CSS Rules to Almost Any Browser
                    (**!)
                12.9 Setting Up an Intelligent CSS Delivery System for Modern Browsers  (??(?))
                12.10 Testing a Site Design on More Than One Platform with Only One Computer  (***(!!))
                12.11 Testing a Website with a Text Browser
                    **

              13. Designing with CSS  569   (**)
                13.1 Enlarging Text Excessively
                13.2 Creating Unexpected Incongruity
                13.3 Combining Unlike Elements to Create Contrast
                13.4 Leading the Eye with Contrast  (*)
                13.5 Checking for Enough Color Contrast
                13.6 Emphasizing a Quotation with Smart Quotes
                13.7 Setting a Moving Background Scene When a User Resizes the Window
                13.8 Adding Animation to Elements on a Page  ****!!
                13.9 Creating a Fireworks Display As a User Scrolls
                13.10 Customizing the View Source Stylesheet for Firefox
                13.11 Designing with Grids (CSS Frameworks)   **
                13.12 Sample Design: A Cohesive Web Design  *
                13.13 Sample Design: The U.S. Flag

              14. Interacting with JavaScript  623
                14.1 Determining Whether JavaScript Is Available Within a Browser
                14.2 Applying a Different Stylesheet Based on the Time of Day
                    (*)
                14.3 Redirecting to a Mobile Site Based on the Browser's Screen Width
                    *****(*)
                14.4 Adding a JavaScript Framework to a Web Page
                    **
                14.5 Using CSS3 Selectors in IE6 and IE7
                14.6 Zebra-Striping an HTML Table with JavaScript
                14.7 Highlighting a Table Row with Mouseovers  (**)
                14.8 Adding Effects to Simple Image Rollovers
                    (??/***)
                14.9 Making a Row of Elements with a Variable Amount of Content the Same Height
                    **
                14.10 Setting a Link to Open a New Window
                14.11 Making an Entire div Element Clickable
                    **(!)
                14.12 Supporting Transparent PNGs in IE6 with JavaScript
                14.13 Delivering HTML5 and CSS3 to Browsers That Can Handle Them

                A. Resources  645
                B. CSS 2.1 Properties and Proprietary Extensions  651
                C. CSS 2.1 Selectors, Pseudo-Classes, and Pseudo-Elements  669
                D. CSS3 Selectors and Pseudo-Classes  673
                E. Styling of Form Elements  677
                Index  845
.   doc_newest2019/csstransc.pdf ("the fine art of web design") #2-3 st (6-10 h)
                p4
            (web standards)
            C3 Advanced Layout prototype scripts
              Flickr
                p5
            LINKS AND RESOURCES FOR CSS SHOW AND INSPIRATION (=mezzoblue etc)
                p6
             ("Integrated Web Design")
                p17
            p { color : #000 }
            body { background-color : #fff }
            positioning
            collapsing margins
            the box model
                p18
             double-margin float
             peekaboo bug
             3px jog
                p20
            floats
            diff. forms of positioning
            z-index

                p21
            table based layout (=like a grid)       <td>
            newer (2010-12) layout              <div>  **
                p26
            progressive / MOSe enhancement (Moz, Opera, Safari)
                p27
            @import "modern.css";
                p29
            unordered lists of links into subtle drop-down menus with alpha-transparent png images
                p33
            1. Not all browsers see the same design.
            2. Use all available CSS selectors.
            3. Use CSS3 where possible to look to the future.
            4. Use JavaScript and the DOM to plug the holes in CSS.
            5. Avoid using hacks and filters.
            6. Use semantic naming conventions and microformats.
            7. Share your ideas, and collaborate with others.

                p35
            pseudo-elements
            dynamic pseudo-classes
            Attribute selectors ****
            img[alt] {
            border : 1px dotted #999;
            }
             # all images that contain an alt attrib. (will be given a grey border)
                p37
            Child selectors
            div > a {
              text-indent : -9999px;
            }
                p38
            h2 + p {        //adjacent sibling selectors

            font-size
            border-bottom

            Pseudo-classes and pseudo-elements      //style first line of paragraph
                                                    //style first letter of heading
            div.news p:first-child {

            font-weight: bold

            dynamic pseudo-classes          //style based on action performed by visitor
                p39
            input[type=text]:focus {
            blockquote:lang(de) {
                p40
            p:first-line {
            p.introduction:first-letter {

            font-style: italic;

            Use JavaScript and the DOM to plug the holes in CSS
                p41
            Despite its unfamiliar syntax, the box model hack contains valid CSS, one of the key principles in a transcendent approach to using CSS hacks or filters.

             a:link:after {  ??
                p43
              <!--[if lte IE 6 ]>
            * html hack     #  '*' =all children of a given element
#header  #branding
#sidebar  #content_sub
#footer  #site_info

                p44
            standards for naming **
            www.webpatterns.org
                p45
             Using semantic naming      = <div id="maincol"> vs. <div id="mainContact">
                p46
            "Elemental Nomenclature"
            Rather than name an image file according to how it looks or what it contains, you can name it according to the element to which it relates.  **  #branding.jpg (instead of brighton_pier.jpg from its content)
                p47
                p48
            CSS love child
                p49
            (common naming and CSS signatures)
                                =a use of id-attrib.s (=give visitors possib. to
                                 change style of a site (??/*))  p51
                p51
            headers
            paragraphs
            tables
             (book title, review, etc etc)
            microformats (=use class (and other attributes) to give more precise meaning to your content)
                mark up organization/family name element: add class="org", class="family-name", class="vcard"  p53
             A list apart (magazine)
                p53
            <address>
            <span class=" ......
                p55
            "In Search Of The One True Layout"  Alex Robinson
            Yahoo Dev. Network's UI Library (of CSS tools)      +templates etc.
                p57
            CSS Beauty  StyleGala
             CSS Reboot             #+Websites Design Gallery (=the 4 scribd books)
                    Adium (mac chat app)    #+styling w. css(!)
                p60
                p62
            C-grade  A-grade(!)  X-grade
            'browser matrixes'
             web standards

                p63
            Transcendent CSS is ___ ; work w. others, cross-browser compatib, positioning meaningful, semantic markup at the center of everything you create **!
            discovery of the content-out approach (to using markup) +/= learn how to always structure and order markup meaningfully rather than accourding to how it looks or its visual layout (!)
                p65
            'designing from the content out'
              =(?) do not design contents of the page according to visual order of document (!!/*)  p67  #+=concerning much use of <div> (!!/**)
                p66
            GRAF. INSPIR**: Photo Squares Website *****!!!
                p68
            You should always start writing a document by first using only structural elements such as headers, paragraphs, lists, and quotations.

                p70
            Linearize Page      #Firefox extension (=show the order of content within any webpage)
            <div id="branding">Top-level      etc
            'Optimize the content w. or w.out Stylesheets'  ****!!
                p71
            'the tow areas of navigation are related but kept separate (=at top/bottom)
              sharing a common parent <div> and having their own identities would subtly add more semantic meaning to both navigation lists
              (=place both near beg./end of dok  + use css for placing visually for the design) ****** !!
                p72
            <div id="content_main">Main content</div>
                p73
            FINAL ORDERING, BASED ON LOGICAL DOCUMENT ORDER, SUPERIMPOSED ON THE VIS. DESIGN ****
                p76

            +QUIZ-SHOW (=LOGICAL) ORDERING OF PAGE CONTENTS  ****
            'this is a top-level heading'       #  h1
            'this is a list of names (in no particular order',
             and each name is a link'           #  ul li  +  a
                p77
            <blockquote>
            <cite>
                p78
            "and because those linked words do not properly describe the contents of the pages ..."     #"add a title attribute to those links"
            <li><a href="http://www.page.com" title="Andy's personal site">Red</a></li>
                p80
              a race

                p82
            "table of taxis"  ** (****)
            <table>
            <tr>
            <th>
            <td>
            </table>
                p86
            add descriptive notes to (eg.) image-layers (eg. in photoshop)
            - 'this list has no order'
            - 'an ordered list of top-selling items'
            - 'a top-level heading'
            - 'a quotation from a happy customer'
                    #=contain

                p87
            EXAMPLE: CLARIFYING THE MEANING OF EACH DESIGN ELEMENT ****
                p88
            (Images/Exercise: Mark up w. meaning/content notes)
                p89     lists (**)
                p90
            <ol>
            <li>
                p91
            <ul>
            <li>
                p92
              (stretching the) meaning of definition lists
            <dl>
            <dt>
            <dd>
                p94
            an XHTML compound
            "The elements of Meaningful XHTML"

            lists of contents (in combination w. other structural elements) to create new XHTML compounds

                "A plan so cunning you could brush your teeth with it"  ___skämthumor
                "... , while the German Empire consists of a small sausage factory in Tanganyika."  ___skämthumor
                ### <conversation> ###
            <blockquote>  <p>
                + add in <ol>           #????????????????????  ___hmsemer
                p95
                p96
            ((the unfortunately named address element))
            <ol>
            <li>665 3rd Street, San Fr. .......
              the 'hCard microformat'
            <span class="street-address">665 3rd Street</span>  #coloring an element
                p98

            <span class="adr">
            <span class="street-address">665 3rd Street</span>
            <span class="locality">San Francisco</span>
            <span class="postal-code">94107</span>
            <span class="region">California</span>
            </span>
            + vcard class-attribute (??)

                p100
            'TAKING ON THE GARDENING MAGAZINE TOC-PAGE' ***(*)
                p102    #+ the img-s
                p103
            <li id="p89">

            <h3><em><a href .......     #emphasizing the featured articles

                p109        # CHAPTER 2 - PROCESS
                            Workflow and Prototypes
                p112
             wireframes
            interactive prototypes

                p114
             ********
            CONTENT > WIREFRAMES > STATIC TEST-DESIGNS >>
             MEANINGFUL MARKUP (=STRUCTURE THE CONTENT) > IMPLEMENT THE DES. WITH CSS
                p115
            + COMPLETE PAGE (HTML) STRUCTURE  +  ANNOTATED STYLE-SHEET ******
                p117
             (content brief, milestone dates in contracts, proj.man softw(like basecamp)/spreadsheets  =keep track of content delivery)
                #content brief  (=article on 7nights.com)
                p118
                p119
            using wireframes to:
            - storyboard a visitor's path through a site
            - work quickly through a series of layout iterations
                p121
            :hover
            :focus
            :target
            (+(!) the shortcomings, and true use of wireframes  (etc))
                p123
            When you are designing e-commerce sites similar to Amazon, you can
            more easily convey the process of adding an item to a shopping cart
            and proceeding through the checkout process using images (Figure 2.6).
            Even some of Amazon's slickest user features such as 1-Click ordering
            present no real challenges to an experienced designer.
            2.6 Wireframing exercise with a one-click order process

                p124
            (prototyping Ajax  + the Flickr case (**))
                p125
            Many variables get overlooked when creating
            wireframes or other paper documents.
            Factors such as state, security, error messages,
            level of effort, page flow, DOM scripting
            and other dynamic elements can be ignored
            or misrepresented.

                p127
            the Grey Box Method **
                p129
            using set vector symbols to add greater detail
                p131
             comps      #static design visuals  (mistakenly used as benchmarks)
             liquid page layouts
            starting writing markup and CSS earlier in the process
                    # =static designs do not have to be complete
                p132
            markup guides  (!!)

                p135
            Interactive Prototypes  (****!!)
                #= demonstrating designs in web browser
                 =different versions visually (through style sheets)  (bit like Zen of CSS) **
                p137
            "Clients become angaged when they can interact with HTML wireframes"

            "time ... to learn how to use a Web browser (+a range of extensions) for organizing your style sheets efficiently."
                p141
            choice of browser: =May want to choose same as your target/clients  #eg. for consistancy in testing etc
             two recommended firefox plugins (=for webdev.):

                p142
                - web developer     #'Includes so many useful features' (eg. 'show element information'
                - firebug           #browse DOM w. arrowskeys, sel.ing node will highlight spot on the page
                p143
            live-editing css ***(*)     #panel in  web developer
                "many designers love text so small that it can leave older visitors with their noses pressed against othe screen"  ___skämthumor
            body {
            font : 82%/1.5 "Trebuchet MS", "Lucida Grande" ,"Lucida
            Sans Unicode", Verdana, sans-serif; }

            saving edited font size to external style sheet
                edit css (panel in web developer)  (*)
                p144
            html validator (firefox)        #plugins
            tidy (safari)

            ! during the markup phase: keep your <div> elements to a minimum
                #+ add progressively after markup phase as needed, but only minimally
            (!) choose css positioning over floats  #=otherwise, design can break over pixelsize changes (=one word in italics)
                #=firm basic understanding of absolute, relative, fixed positioning
                p146
            png images w. transparency (!)
            Organizing your css     #mozilla.org Markup Reference (*!)
             /* =content_main */

            - Organizing by location
                p147
            - Marking sections in your CSS
            /* Main content
            ------------------------------------------ */
            - Organizing by element  #p:s, ul:s  etc
            - CSS flags     #  =p  #like own '___' (for searching)

                p148
            Dividing CSS into multiple files (=partic. while building interactive the prototype)
            - layout.css
            - color.css
            - type.css
            tip: use one file as an (=import) aggregator **!
            @import url(color.css);
            @import url(type.css);
                p149
            "HTML prototyping and full-on agile development (=of Web applications)"
                p151
            the Cookr! test-project:

            grey box-dividing page into:
            - content (of interest)
            - navigation and tools      #links + other tools (=helping visitors use the site)
                p153
            'site furniture' (Andy Clarke)      #branding, navigation, site information etc (unrelated to the main content)

                p154
            heading hierarchy/structure within dok. (= h2, h3 etc) **
                p155
            <ul>
            <li>275<sup title="Grammes">g</sup> plain flour</li>

            'secondary content'     #find related and extras (=important feature is 'secondary', not 'may probably appear on right side in finished visual _')
                p156
            (side recipe links / related)  =forms an <ul>

                p157
            XHTML compounds (from the microformats community)       #"The Elements of Meaningful XHTML"
                =like Drs Licks-categories ****  #STATEM, bend  =bend-statement lick

            - preview dok in your webdev browser
                =see structure of your content + validate your markup (**)

            Only now:
            add two(?) divisions
                p158
            <div id="content">
              <div id="content_main">
              Main content
              </div>

              <div id="content_sub">
              Secondary content
              </div>
            </div>

            Next: Add your 'site furniture'
             (=branding etc)  Will appear on every Page of your Site
                p159
            branding        logo + tag line

            tagline

            <div id="branding">
            <h1>Cookr</h1>
            <blockquote>
            <p>A great place to store and share your favorite recipes</p>
            <p><cite>Kimberly Blessing</cite></p>
            </blockquote>

                p160
            stripping down links and extras  +
            organizing (=setting order) by importance **(**)!
            include p:s, links, <ul> and <li>:s  + id="nav_features"  etc
             (and a-links )  **
            [=markup as clean simple html]
                p161
            +'add headings to the lists'
                =will not be visib. in the browser  but helpful
            (=embedded helpers  to further clarify the lists)

            + enclose nav-section in div
            <div id="nav_main">
                p163
            content order

            Put together generated blocks (of marked up basic text content)  +
            arrange as list (=put in numbered logical order)
            eg.

            branding, navigation, main content, supplem. countent, site information
                p164

            DOCTYPE
            <head>
            <title>
            <meta http-equiv="content-type" content="text/html; charset=utf-8" /> </head>

            <body id="cookr-co-uk" class="recipe">

            <!-- 1. Branding -->        #etc.

                p165
            +COMPLETE BASIC MARKUP OF COOKR-PAGE (****)
                p168
            Implementing the static design with CSS
            the _ css file
            overriding (='normalizing') all the browser styles  #=more cross-browser control of visual appearance
            body, div, dl, dt, dd, ol, ........
                p169
            /* Normalizes font-size for headers */

            border-collapse

            'working from the body'
            html {
              text-align: center; }

            tantek      #more about normalizing browser styles

                p170
            body {
              position: relative  #**/?
              width: 770px;
              margin: 0 auto;
              text-align: left; }
                p171
            div#content {
              position: relative;
              width: 100% }

            make two equal columns of the content
            div#content_main {
              left: 0;
              width: 50%;
              padding: 1em 0; }

            div#content_sub {
              left: 50%;
              width: 50%;
              padding: 1em 0; }

            += 'css positioning allows you to switch the position of the two columns ...' (=easily)
                p173
            (+combined rule  to give all of your remaining layout divisions a width)

            'relative to what?'     #the normal expected flow (within the browser window)
                = if elem. is rel. positioned, it leaves behind space
                  that other elem.s cannot flow into (=because the rel. elem. is still
                  considered by the browser to be in the normal flow
                p175
            'if there is no positioned ancestor, the element is positioned to the root element <html>'
            absol. positioned elem
                =considered to be out of normal flow of dok
                therefore, text and other elem.s can flow into any space being
                taken up by the elem. prior to being offset

            Inman Position clearing
                =(in this prototyping stage) 'using comb. of JS/CSS to force
                _ (eg. footer) to drop below the absol. positioned columns (??/*)
                    (='positioning the footer below both columns')
                p176
            now: Background Colors  (etc)
                p177
            div#site_info {
              height: 120px;
              background: transparent url(site_info.png) no-repeat 0 0;
            }
                p178
            z-index: 10;

            replace h1 elem. with alpha-transpar. png image     #suggestion: use Phark method (??)      (keeping orig. header text, but move to outside viewport)

                p179

            ___ZZZZ


                p181
            display: inline
                p182
            'you've styled each of the different navigation elements using a combination of text and images'
                p185
            div#site_info h5 + p {
                p186
            Understanding elements of typographical style
            Trebuchet MS
            Lucinda Grande
            Lucinda Sans Unicode
            Verdana
                p191
            CHAPTER 3 - Inspiration
            - explore the divine proportion
            - design with grids in mind
                p194
            flow line  column  gutter  module
                p195
            1 2 3 5 8 13  #the fibonacci series
             (Thinking outside the grid)

                p196
            Graf Inspir: 'A List Apart' **
                p200
            fixed-liquid-elastic    # _ width design
            the divine proportion   #phi: eg. 1.618.......  =1.62
                p201
            770(width) / 1.62 =475px  #=the main mid content
            ex. 2:
            use/include image 400 pixels wide       x1.62 =648px (for the total design)
            ?????????????????

            +'Creating Microgrids'  #******(/?????????????????)
                p203
            adding rulers (for pixel perfect alignment of elem.s) ????/**
             grid imposition method
                p204
            Elastic (em-based) design
            the "Elastic Lawn" zengarden w.page
            + '48 em for his layout'  (+overall content  (div. by 1.62  gives main content and sidebar)  ???/**

            'to ensure that text lines do not stretch beyond a comfortable width, the mozilla designers have limited the maximum width of their content to 70 em'  (???!)

            what is an em?          hor. width of curr. font size**  (=12 points at 12-point type)  ***(!!)

            gutters: 'I prefer to add left and right margins or padding to a column's child elements .....'
                p206
            width: 23%;     #=percent instead of em:s
                (='allows their flexible design to shrink/grow when both the text and the window is resized')  (**)
            fully elastic vs elastic and fluid (??)
                p207
            (Fully flexible layouts)
            'A fluid grid will expand and collapse along with a visitor's window' (+'make no assumptions about window size and resolution')
            div. proportions give ratio of content/subcontent (eg. whole page/main content)     =approx.  60% 40%
                p208
            width: 100%;
            max-width: 70em;        #=sets maximum line length (*!)

            symmetrical grid(??)

            rational grid design
            rational(?) ratio       "supercolumns"
                p209
            (tip/idea: creating rectangles from a grid
                +moving rect.s around inside grid (and maybe even overlapping them))
                p211
            tips (=Graf.Inspir.) for sites using grid-based design techniques:
            Subtraction
                p214
            Airbag Industries
                p216
            Jeff Croft
              CSS Reboot
                p218
            Veerle's Blog
                p221 + p222
            (Concerning newspaper grids *)
                p223
            traditional eight-column design
              "This has proved particularly important to readers on crowded commuter trains who every day need to combine their morning fix of news with an exercise in origami"  ___skämthumor
            teterm: masthead
                p227
            Using contemporary six-column design
            column spanning
             content-rich
                p231
            alternative newspaper layouts  #eg. Asahi Shimbun
             Newseum
              (+mashed-up new and interesting (by building text from alternative layouts, like A. Shimbun))
                p235
            'Bringing New Grids to Web Design'      #=green W.Bush-article
            'Remaking Newsvine w. contemporary newspaper grid'

            - setting a baseline grid
            - creating columns, supercolumns, gutters
            - using microgrids to give balance to design details
            - making images flexible in size
                p236
            'leading with the grid'
            'I have deliberately chosen to work on a wider-format canvas, ... less tempted by the urge to shoehorn content into a narrow width ... might be better suited to a fixed-pixel design'
                p237
            'If it is important that particular content appears above the fold for most users, it is important to test your design in as many different browsing environments as you can'
                p239
            Exposing dirty little secrets
            'you can further subdivide each of its modules, using either the same proportions or perhaps the divine proportion, or the rule of thirds.'     #='microgrids'
                p240
            Elastic Images      #+'try this css background-image workaround technique'
            div.lead_image {
              height: 300px;
              margin: 0 10px;
              background: #fff url(lead_image.jpg) no-repeat center;
            }
            ("this is one of the situations where use of inline styles actually may be justified")
                p241
            clagnut.com     #'more experiments in flexible width and elastic image techniques'


            Next:
            set the mood for your designs, use paper and virtual scrapbooks, work more efficiently with photos/image, extend your browser with helpful tools  (+look outside the web for your design inspiration)
                p243
            " - that moment where ordinarily sane people leap up and down whooping (in the United States) or quitley sobbing  It's so lovely, isn't it Norman? (in Britain)"  ___skämthumor
                p245
            "They might even drive straight by and mistakenly pull up outside your neighbor's property, the house farther down the street, without concrete Roman pillars"  ___skämthumor
                p246
            mood boards
            'but also the emotions that the colors, lighting, and textures can create.'
              hard shiny surfaces
              range of soft textures
                p248
            "Many of my art-school friends keyt their scrapbooks chock-full of design inspiration as obsessively as I sharpened my pencils.'  ___skämthumor

                p249 p250 p251
            =GRAF.INSPIR. (****!!)
                p253
            Looking at magazines for Interface Inspiration
            'posters and billboards jostle for our attention, and when they have been exposed to the ravages of the weather, they will take on new characters as they degrade'

            Typography: Typography Crash Course Roundup (**!)
             'The Anatomy of Web Fonts"
                p254
            GRAF.INSPIR.
                p255
            using sIFR  (for fine typography for the web*)
             ((Google Web Fonts ??/*))
                #=Flash+JS-script (******!!!!!)
                p256
            graf.inspir. (**)
                p257
             Stylegala
                (Netdiver)
            CSS Galleries: stylegala, cssbeauty  (zenofcss)
                p258
            photos and images before digital: "The rest would be stored in boxes in the attic to be uncovered centuries later."  ___skämthumor
                +"... and hope, in several hundred years, your descendants won't find your boxes and wonder why some of their ancestors in the late twentieth century had no heads."

                p259
            flickr (useful tip for finding unexpected comb.s of im.s): search for general terms (eg. red, grid, shiny)  #+wait minute and search again
#Flickr lets y. search for im.s within particular CC license (**!)
                p260
            GRAF.INSPIR. **(*)
                p261
            CREATING COLOR PALETTES *************  !!!!!!!!!!!!!!!!!!! ___SEEMORE
                p262
            Flock (for browsing Flickr and Photobucket)

                p263
            GRAF.INSPIR. ******************************  !!!!!!!!!!!!!!!!!!!!!!!
             iPhoto Scrapbooks
                p265
            ('Designing is more than creating attractive visuals')
              '... keep in mind how a visual design can add meaning to a site that goes far beyond the pixels drawn on the screen.'
                p268
            (tables and font tags)
            "Please don't imagine this book as your art teacher. I might have grown a beard long enough for a badger to live in while writing it, but I have not worn sandals and have never, ever listened to the Grateful Dead."  ___skämthumor
            'perhaps starkly lit in the photo studio to show off their curves and angles.'
                p273
            'It is often true that when you see something regularly enough, you become desensitized to it.'     #visual landmarks, fronts of office buildings, banks, cafées, shops  (=in the city where you live (and know all(!) too well))
            ('lying down at park bench looking up at familiar buildings' / 'Getting to top of roof of familiar building etc'  --may get ideas for innovative new grids for your web page  (etc)

                p275
            ***************
             'the humble sidebar'
            Images that break out of their columns to add a more organic visual flow can help 
            Web designs avoid looking too structured or boxy. You can give form elements,
            very difficult to present in new and interesting ways, a new twist by adding
            graphic details that may be inspired by a teenage magazine's puzzle page.
                p276
            'Magazine cuttings from my scrapbook suggest new and interesting ways to design for the web' *******        GRAF.INSPIR. *****(!!)
                p277
            (summary??:  The Fine Art of Web Design)
             Web Standards Awards Site (??)
                p278
            'Taking CSS to new heights'
                p279
            ", and I see many of the mistakes of the past being repeated again, this time with the added gloss of big footers, rounded corners, and often inappropriate uses for Ajax and related technologies."
            (antidesign)
            ('should not focus on technologies; instead, you should focus on what you want to achieve creatively.')
                p281
            CHAPTER 4 - Transcendence
            - CSS positioning and floats
            - explore developments in CSS3
            - create w. the Absolute Layout Module
                p283
            'bringing together all of the principles you've learned so far'
            (='not creating pixel-perfect rendering across all browsers')
                p284
            Absolute Positioning
            relative (='offsetting')
            absolute        obj. an elem. is positioned 'from'(??(?)) =an element's 'positioning context'
            fixed
            static          #mostly used for overriding previous positioning rules
              (+article at autisticcuckoo)

                p286
             (specification tables)
            EX/TUTS: BUILDING SOME WEBSITE DESIGNS ******
            'But before you can position the images, you need to establish the positioning context for these positioned images by adding position: relative; (with no offsets) to the unordered list'
                p288
            Positioning the images  ('The real magic in this design...')
                p289
            a:hover img { outline: 1px solid #000 }
                p292
            'When you need to re-create this design as a sidebar, what could be better than reusing the markup from the previous example?'
            (=zoom/expanding sidebar ****)

                p294
            IMAGE ZOOM WITH CSS *********** !!!!!!!!
            the style:
            a:hover img {       #=using CSS dynamic pseudo-classes
            z-index: 100;       #(!!) Give image high z-index value (!!!)
                p295
            the 'rollover(!) effect'

                p296
            EXAMPLE/PROJ. 2 (='ALT-COLORED FIELDS/BLOCKS' **(!!))
                p297
            'a design that will expand to 92 percent of the browser window width but will never go smaller than 770 pixels:'
            width: 92%;
            min-width: 770px;
            each list 'box' to 50% width (!! ****)
                p300
            'Now you can absolutely position three images into the spaces you have created'  (**)
                p301
            ''Getting the Pepper cuisine image right'' (=combination of relative etc (***(!!))

                p302
            EXAMPLE/PROJ. THREE ****
                p303
            'has four items' (=each gets 25% of the width) (**)
                p305
            [Getting IE6 etc to (be able to) use CSS3 etc (******)]
                p306
            'You should always take care when using attribute selectors in combination with straight id and class selectors to avoid specificity issues' (**!(!))

            Attribute selectors  #=style an elem. based on whether an elem. has an attrib. name (eg. href)  or based on the attrib. value (  li[id="cake"],  ....  )
            + Child selectors  **(!)    li > h3 {

            'Once again, by floating images you allaw the text to wrap around them.'
                p308
            transforming basic design 1 into a sidebar ((*))
                p309
            'wireframing with XHTML and CSS'  (=completely flip position of your sidebar(**)  =w. minimal changes to/inside just your code) (**!)

                p310
            EXAMPLE/PROJ NO 3:  FLOWERS IN MY GARDEN  =WOW!!!!!!!!!!!!!! ***************
            (+ 'combining techniques for a dynamic page')
                p311
            (=combining positioning, floats  etc)
            '; it includes only one division, a heading, and an unordered list.' (******(!!))
                p313
            background-repeat: no-repeat;
            background-position: 10px 10px;
                p314
            Active branding  #=adding links and other useful tools to your banner/branding area(??/*(!))
            (MAKING THE MASTHEAD ACTIVE) (***!!)

                p315
            ('Add the finishing touches' (**!))
            overflow: hidden;    #etc  (****(!!))
                p317
                +(=clearing floats w.out structural markup (=not having to add 'breaks and divisions'-hacks  (again, using presentational markup for structure of the dok)))
            Constantia  (font)
            Palatino
            Times, serif
                p319
            h3 + p + p {
            .... <span>  ......   </span>

                p320
            js :target class implementation  (for IE)  ((**))
            font-variant: small-caps
            Lucida
                p323
            CSS3 (**!)
            css3 is a modular specification
             selectors module

                p324
             paged media mod.
             backgrounds and borders mod.
             multi-column layout mod.
             advanced layout mod.
             media queries mod. *********
                p326
            "A Tribute to Selectors"
            "CSS3 Selectors Explained"
            selectors, background images, columns, Advanced Layout Module

            - attribute selectors
            - dynamic pseudo-classes (new)   :target :lang
            - structural pseudo-classes (new)   :nth-child :last-of-type

                p327
            tbody > .odd { background-color: #fff; }
            tbody > .even { background-color: #000; color: #fff; }
            Implement :nth-child  w. JS DOM-scripting  (****!!)
                p329
            (+ the 'flower-list/box' example  ****)
            li:nth-child(even) img {

            ', you can target specific elements based on the number of siblings that have come before them.'
            tr:nth-child(10n-1)  #*******
                p330
            Designing with the Backgrounds and Borders Module
            'Attaching more than one background image to any element is on the wish list of almost ever CSS-savvy designer I know.'   ++p332
                p332
            (+setting the repeat-properties)
            ((++ability to position each image ***(*)))

                p333
            'CREATING A FLEXIBLE BOX' ************** !!!!!!!!!!!!!!!!! (!!)
                p335
            (DESIGNING W. MULTIPLE BACKGROUND IMAGES)  (**)
            'Because this design will be flexible, all the measurements you'll use are based on em:'  (**!)
                p338
            'Z is not dead!'
            More about complex z-index from Aleksandar Vacic
                p340
            'For more on styling form buttons:' ******   "Push My Button" article

            selecting form elements (for styling)  w.
            input[type="text"] {
            input[value="Add"] {

            Drop cap w. :first-letter
                p341
            text-shadow: #333 0 1px 2px;
                p342
            --->> 'Multiple background images'
                p344
            BrowserCam
                p345
            'Note: Need a reminder of the difference between a block and an inline element?"
                p346

            div#content_main { column-count: 3; }

            div#content_main { column-width: 15em; }

            column-gap
            column-rule
                p347
            multi-column layout module (!!)
            'Fortunately, a group of new properties determine where column breaks occur:'
                (always, avoid   etc)  (*!)
            image rules
                p348
            (multi-column implemented using JS+DOM)  (*)
             www.csscripting.com

                p350
            EXAMPLE/PROJ: COOKBOOK 411 ************** !!!!!!!!!!!!!
                p351
            (implemented by: two divisions =top-level heading + introduction; main content + the unordered list
                p353
            -moz-column-width: 18em;
            -moz-column-gap: 25px;
                p354
            (GRAF.INSPIR)
                p355
            Advanced Layout
            www.positioniseverything.com
            (breaking free of using floats and positioning for layout (=achieving true separation of presentation and content))
                p356
            'Back to the Grid'

            display:
            "abc"
            "def";
            'Two other values (@ and .) define whether a slot is the default or contains only white space:'
                p358
            body { display:
            "a b c (intrinsic)"
            "d e f (intrinsic)"; }

             position: a;
                p359
            (='Situating content into slots')
                ('template-based positioning')

                p361
            Designing with the Advanced Layout Module (*****!!!!!)
              ALMCSS
                p362
            'You can also create a microgrid by giving each field its own display-model property to divid it into varying numbers of vertical columns'  (eg.  display-model: "112 (intrinsic)";  )
----
freec 01 h5c3 bookmarks
            FREEC 01 - H5C3 -- 1of4
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-01_respwebdes.txt
                    freec-01.1av4-bmk.txt
                xxHash: 55d4ee2a

                Introduction to Basic HTML & HTML5
                Closing tags look like this:
                Each challenge has tests you can run at any time by clicking the "Run tests" button.
                Note: As a convention, all HTML tags are written in lowercase, for example <p></p> and
                The lorem ipsum text is randomly scraped from a famous passage by Cicero of Ancient Rome.
                * Uncomment your h1, h2 and p elements.
                These include main, header, footer, nav, video, article, section and others.
                These tags give a descriptive structure to your HTML, make your HTML easier to read, and help with Search Engine Optimization (SEO) and accessibility.
                The main HTML5 tag helps search engines and other developers find the main content of your page.
                Example usage, a main element with two child elements nested inside it:
                <img src="https://www.your-image-source.com/your-image.jpg">
                &lt;img src="https://www.your-image-source.com/your-image.jp
                The text inside an alt attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.
                Note: If the image is purely decorative, using anempty alt attribute is a best practice.
                <img src="https://www.your-image-source.com/your-image.jpg" alt="Author standing...
                &lt;img src="https://www.your-image-source.com/your-image.jpg" alt="Author standing on a beach with two thumbs up
                a elements need a destination web address called an href attribute.
                They also need anchor text.
                <a href="https://freecodecamp.org">this links to freecodecamp.org</a>
                &lt;a href="https://freecodecamp.org"&gt;this links to freecodecamp.o
                To create an internal link, you assign alink's href attribute to a hash symbol # plus the value of the id attribute for the element that you want to internally link to, usually further down the page.
                Remove the target="_blank" attribute from the anchor tag since this causes the linked document to open in a new window tab.
                Then add an id attribute with a value of "footer" to the <footer> element at the...
                Then add an id attribute with a value of "footer" to the &lt;footer&gt; element at the bottom of the
                Sometimes you want to add a elements to your website before you know where they will link.
                This is also handy when you're changing the behavior of a link using JavaScript, which we'll learn about later.
                Replace the href attribute value with a #, also known as a hash symbol, to create a dead link.
                You can make elements into links by nesting them within an a element.
                Remember to use # as your a element's href property in order to turn it into a dead link.
                Unordered lists start with an opening <ul> element, followed by any number of <li>...
                Unordered lists start with an opening &lt;ul&gt; element, followed by any number of &lt;li&g
                HTML has another special element for creating ordered lists, or numbered lists.
                Ordered lists start with an opening <ol> element, followed by any number of <li>...
                Ordered lists start with an opening &lt;ol&gt; element, followed by any number of &lt;li&g
                You can create a text input like this:
                Note that input elements are self-closing.
                Placeholder text is what is displayed in your input element before your user has inputted anything.
                <input type="text" placeholder="this is placeholder text">
                &lt;input type="text" placeholder="this is placeholder tex
                You can build web forms that actually submit data to a server using nothing more than pure HTML.
                <form action="/url-where-you-want-to-submit-form-data"></form>
                &lt;form action="/url-where-you-want-to-submit-form-data"&gt;&
                Nest your text field inside a form element, and add the action="https://freecatphotoapp.com/submit-cat-photo" attribute to the form element.
                <button type="submit">this button submits the form</button>
                &lt;button type="submit"&gt;this button submits the form&lt
                Add a button as the last element of your form element with a type of submit , and "Submit" as its text.
                For example, if you wanted to make a text input field required, you can just add the attribute required within your input element, like this: &lt;input type="text" requir
                By wrapping an input element inside of a label element it will automatically associate the radio button input with the label element surrounding it.
                By creating a radio group, selecting any single radio button will automatically deselect the other buttons within the same group ensuring only one answer is provided by the user.
                <input type="radio" name="indoor-outdoor">Indoor </label>
                &lt;input type="radio" name="indoor-outdoor"&gt;Indoor &l
                It is considered best practice to set a for attribute on the label element, with a value that matches the value of the id attribute of the input element.
                Add a pair of radio buttons to your form, each nested in its own label element.
                * Each of your radio button elements should be added within the form tag.
                <label for="loving"><input id="loving" type="checkbox" name="personality"> Loving</label>
                &lt;label for="loving"&gt;&lt;input id="loving" type="checkbox" name="personality"&gt; Lo
                Inputs of type radio and checkbox report their values from the value attribute.
                When the user submits the form with the indoor option selected, the form data will include the line: indoor-outdoor=indoor.
                So the value attribute needs to be set to something to identify the option.
                Use the input label text, in lowercase, as the value for the attribute.
                * One of your radio buttons should have the value attribute of indoor.
                To do this, just add the word "checked" to the inside of an input element.
                Hint: Try putting your opening div tag above your "Things cats love" p element and your closing div tag after your closing ol tag so that both of your lists are within one div.
                For HTML5, you use <!DOCTYPE html>.
                HTML. For HTML5, you use &lt;!DOCTY
                Metadata elements, such as link, meta, title,and style, typically go inside the head element.
                Finally, you can write CSS rules in an external style sheet, then reference that file in the HTML document.
                The idea behind CSS is that you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page.
                <h2 style="color: blue;">CatPhotoApp</h2>
                &lt;h2 style="color: blue;"&gt;CatPhotoAp
                For example, if you wanted all h2 elements to be red, you would add a style rule that looks like this:
                Finally, be sure to add a semicolon to the end of each of your element's style rules.
                You can apply a class to an HTML element like this: <h2 class="blue-text">CatPhotoApp</h2>...
                tag. You can apply a class to an HTML element like this: &lt;h2 class="blue-text"&gt;CatPho
                Note that in your CSS style element, class names start with a period.
                oApp&lt;/h2&gt; . Note that in your CSS style element, class names st
                Font size is controlled by the font-size CSS property, like this:
                You can set which font an element should use, by using the font-family property.
                There are many sources for web fonts on the Internet.
                To import a Google Font, you can copy the font(s) URL from the Google Fonts library and then paste it in your HTML.
                Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name.
                When one font isn't available, you can tell the browser to "degrade" to another font.
                font-family: Helvetica, sans-serif; }
                Create a class called smaller-image and use it to resize the image so that it's only 100 pixels wide.
                For example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class:
                Remember that you can apply multiple classes to an element using its class attribute, by separating each class name with a space.
                <img class="class1 class2">
                &lt;img class="class1 class
                Basic CSS: Add Rounded Corners with border-radius
                In addition to pixels, you can also specify the border-radius using a percentage.
                background-color: green; }
                There are several benefits to using id attributes: You can use an id to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.
                id attributes should be unique.
                Give your form element the id cat-photo-form.
                An id also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the id will be applied.
                Note that inside your style element, you always reference classes by putting a .
                You always reference ids by putting a # in front of their names.
                You may have already noticed this, but all HTML elements are essentially little rectangles.
                Three important properties control the space that surrounds each HTML element: padding, margin,and border.
                * Your blue-box class should give elements 20px of padding.
                * Your blue-box class should give elements 20px of margin.
                If you set an element's margin to a negative value, the element will grow larger.
                Change the margin of the blue box to -15px, so it fills the entire horizontal width of the yellow box around it.
                CSS allows you to control the padding of all four individual sides of an element with the padding-top, padding-right, padding-bottom, and padding-left properties.
                CSS allows you to control the margin of all four individual sides of an element with the margin-top, margin-right, margin-bottom,and margin-left properties.
                padding: 10px 20px 10px 20px;
                Basic CSS: Use Clockwise Notation to Specify the Margin of an Element
                Basic CSS: Use Attribute Selectors to Style Elements
                For this challenge, you will use the [attr=value] attribute selector to style the checkboxes in CatPhotoApp.
                [type='radio'] {
                Relative units, such as em or rem, are relative to another length value.
                If you use it to set the font-size property itself, it's relative to the parent's font-size.
                Note: There are several relative unit options that are tied to the size of the viewport.
                Now let's start fresh and talk about CSS inheritance.
                We can prove that the body element exists here by giving it a background-color of black.
                Finally, give your body element the font-family of monospace by adding font-family: monospace; to your body element's style declaration.
                Our "pink-text" class overrode our body element's CSS declaration!
                Applying multiple class attributes to a HTML element is done with a space between them like this:
                However, the order of the class declarations in the <style> section is what is important.
                However, the order of the class declarations in the &lt;style&gt; section is what is impo
                Note: It doesn't matter whether you declare this CSS above or below pink-text class, since id attribute will always take precedence.
                Do you remember inline styles?
                In many situations, you will use CSS libraries.
                So when you absolutely need to be sure that an element has specific CSS, you can use !important
            FREEC 01 - H5C3 -- 2of4
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-01_respwebdes.txt
                    freec-01.2av4-bmk.txt
                xxHash: 55d4ee2a

                For example, #000000 is black and is also the lowest possible value.
                Color Hex Code Dodger Blue #1E90FF Green #00FF00 Orange #FFA500 Red #FF0000
                For example, red's hex code #FF0000 can be shortened to #F00.
                The RGB value for black looks like this:
                rgb(255, 255, 255)
                Color RGB Blue rgb(0, 0, 255) Red rgb(255, 6, 0) Orchid rgb(218, 112, 214) Sienna rgb(160, 82, 45)
                CSS Variables are a powerful way to change many CSS style properties at once by changing only one value.
                * penguin class should declare the --penguin-skin variable and assign it to gray.
                To create a CSS variable, you just need to give it a name with two hyphens in front of it and assign it a value like this:
                Now you can use that variable elsewhere in your CSS to change the value of other elements to gray.
                border-radius: 30% 30% 30% 120%; transform: rotate(-45deg) ; z-index: -1;
                After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.
                Note: This fallback is not used to increase browser compatibility, and it will not work on IE browsers.
                background: var(--penguin-skin, black);
                Note that this can be useful for debugging.
                When your browser parses the CSS of a webpage, it ignores any properties that it doesn't recognize or support.
                That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade.
                Let's improve our browser compatibility by adding another background declaration right before the existing declaration and set its value to red.
                When you create a variable, it is available for you to use inside the selector in which you create it.
                To make use of inheritance, CSS variables are often defined in the :root element.
                :root is a pseudo-class selector that matches the root element of the document, usually the html element.
                You can then over-write these variables by setting them again within a specific element.
                Basic CSS: Use a media query to change a variable
                CSS Variables can simplify the way you use media queries.
                For instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.
                In the :root selector of the media query, change it so --penguin-size is redefined and given a value of 200px.
                @media (max-width: 350px) {
                Visual Design in web development is a broad topic.
                It combines typography, color theory, graphics, animation, and page layout to help deliver a site's message.
                In web development, HTML gives structure and semantics to a page's content, and CSS controls the layout and appearance of it.
                text-align: justify; causes all lines of text except the last line to meet the left and right edges of the line box.
                Add a width property to the entire card and set it to an absolute value of 245px.
                Here's an example that changes the height of an image to 20px:
                Applied Visual Design: Use the strong Tag to Make Text Bold
                Applied Visual Design: Use the u Tag to Underline Text
                Anchor tags also have a default underlined formatting.
                To emphasize text, you can use the em tag.
                To strikethrough text, which is when a horizontal line cuts across the characters, you can use the s tag.
                With the s tag, the browser applies the CSS of text-decoration: line-through; to the element.
                Applied Visual Design: Create a Horizontal Line Using the hr Element
                rgba() is great to use in this case, as it allows you to adjust the opacity.
                You'll use background-color: rgba(45, 45, 45, 0.1) for this challenge.
                To make the heading significantly larger than the paragraph, change the font-size of the h4 tag to 27 pixels.
                The box-shadow property applies one or more shadows to an element.
                * offset-x (how far to push the shadow horizontally from the element), * offset-y (how far to push the shadow vertically from the element), * blur-radius,
                * spread-radius and * color, in that order.
                The blur-radius and spread-radius values are optional.
                Multiple box-shadows can be created by using commas to separate properties of each box-shadow element.
                box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
                A value of 1 is opaque, which isn't transparent at all.
                The text-transform property in CSS is used to change the appearance of text.
                The following table shows how the different text-transform values change the example text "Transform me".
                Applied Visual Design: Set the font-size for Multiple Heading Elements
                The font-weight property sets how thick or thin characters are in a section of text.
                The font-size property in CSS is not limited to headings, it can be applied to any element containing text.
                CSS offers the line-height property to change the height of each line in a block of text.
                A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.
                For example, the styling of an anchor tag can be changed for its hover state using the hover pseudo-class selector.
                Here's the CSS to change the color of the anchor tag to red during its hover state:
                CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model.
                Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans).
                The default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it.
                When the position of an element is set to relative, it allows you to specify how CSS should move it relative to its current position in the normal flow of the page.
                It Pairs with the CSS offset properties of left or right, and top or bottom.
                These say how many pixels, percentages, or ems to move the item away from where it is normally positioned.
                It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom.
                Applied Visual Design: Move a Relatively Positioned Element with CSS Offsets
                Applied Visual Design: Lock an Element to its Parent with Absolute Positioning
                If you forget to add a position rule to the parent item, (this is typically done using position: relative;), the browser will keep looking up the chain and ultimately default to the body tag.
                Lock the #searchbar element to the top-right of its section parent by declaring its position as absolute.
                The next layout scheme that CSS offers is the fixed position, which is a type of absolute positioning that locks an element relative to the browser window.
                One key difference between the fixed and absolute positions is that an element with a fixed position won't move when the user scrolls.
                The navigation bar in the code is labeled with an id of navbar.
                Applied Visual Design: Push Elements Left or Right with the float Property
                It's commonly used with the width property to specify how much horizontal space the floated element requires.
                When elements are positioned to overlap (i.e.
                It must be an integer (i.e.
                Add a z-index property to the element with the class name of first (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle).
                Applied Visual Design: Center an Element Horizontally Using the margin Property
                Images are inline elements by default, but can be changed to block elements when you set the display property to block.
                Center the div on the page by adding a margin property with a value of auto.
                When two colors are opposite each other on the wheel, they are called complementary colors.
                They have the characteristic that if they are combined, they "cancel" each other out and create a gray color.
                However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.
                Modern color theory uses the additive RGB model (like on a computer screen) and the subtractive CMY(K) model (like in printing).
                There are many color picking tools available online that have an option to find the complement of a color.
                For example, magenta is made with red and blue, and is the complement to green.
                Tertiary colors are the result of combining a primary color with one of its secondary color neighbors.
                One example that can use tertiary colors is called the split- complementary color scheme.
                Color Hex Code orange #FF7F00 cyan #00FFFF raspberry #FF007F
                In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.
                This page will use a shade of teal (#09A7A1) as the dominant color, and its orange (#FF790E) complement to visually highlight the sign-up buttons.
                CSS3 introduced the hsl() property as an alternative way to pick a color by directly stating these characteristics.
                In hsl(), hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.
                Saturation is the amount of gray in a color.
                Lightness is the amount of white or black in a color.
                red hsl(0, 100%, 50%) yellow hsl(60, 100%, 50%) green hsl(120, 100%, 50%) cyan hsl(180, 100%, 50%) blue hsl(240, 100%, 50%) magenta hsl(300, 100%, 50%)
                Mixing white with a pure hue creates a tint of that color, and adding black will make a shade.
                All elements have a default background-color of transparent .Our nav element currently appears to have a cyan background, because the element behind it has a background-color set to cyan.Add a background-color to the nav element so it uses the same cyan hue, but has 88% saturation and 25% lightness values to change its tone and shade.
                CSS provides the ability to use color transitions, otherwise known as gradients, on elements.
                background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);
                The repeating-linear-gradient() function is very similar to linear-gradient() with the major difference that it repeats the specified gradient pattern.
                If every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.
                One way to add texture and interest to a background and have it stand out more is to add a subtle pattern.
                The background property supports the url() function in order to link to an image of the chosen texture or pattern.
                To change the scale of an element, CSS has the transform property, along with its scale() function.
                The transform property has a variety of functions that let you scale, move, rotate, skew, etc., your elements.
                The next function of the transform property is skewX(), which skews the selected element along its X (horizontal) axis by a given degree.
                Applied Visual Design: Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis
                Applied Visual Design: Create a Graphic Using css
                One of the easier ones to try is a crescent moon shape.
                Manipulate the square element in the editor to create the moon shape.
                Applied Visual Design: Create a More Complex Shape Using CSS and HTML
                But first, you need to understand the ::before and ::after pseudo-elements.
                For the ::before and ::after pseudo-elements to function properly, they must have a defined content property.
                When the ::before and ::after pseudo- elements are used to make shapes, the content property is still required, but it's set to an empty string.
                Applied Visual Design: Learn How the CSS @keyframes and animation Properties Work
                animation-name sets the name of the animation, which is later used by @keyframes to tell CSS which rules go with which animations.
                animation-duration sets the length of time for the animation.
                This is done by giving CSS properties for specific "frames" during the animation, with percentages ranging from 0% to 100%.
                For the element with the anim id, the code snippet above sets the animation-name to colorful and sets the animation-duration to 3 seconds.
                Create an animation for the element with the id rect, by setting the animation-name to rainbow and the animation-duration to 4 seconds.
                Applied Visual Design: Use CSS Animation to Change the Hover State of a Button
                Note that ms stands for milliseconds, where 1000ms is equal to 1s.
                The @keyframes rule should only have an entry for 100%.
                * The @keyframes rule should use the animation-name background-color.
                Applied Visual Design: Modify Fill Mode of an Animation
                This can be done by setting the animation-fill-mode property to forwards.
                When elements have a specified position,such as fixed or relative, the CSS offset properties right, left, top,and bottom can be used in animation rules to create movement.
                Add a horizontal motion to the div animation.
                For this challenge, you'll change the opacity of an animated element so it gradually fades as it reaches the right side of the screen.
                Applied Visual Design: Animate Elements Continually Using an Infinite Animation Count
                animation-iteration-count: 3;
                Applied Visual Design: Make a CSS Heartbeat using an Infinite Animation Count
                Applied Visual Design: Animate Elements at Variable Rates
                Alter the animation rate for the element with the class name of star-1 by changing its @keyframes rule to 50%.
                You can achieve the same goal by manipulating the animation-duration of multiple elements.
                Set the animation-duration of the elements with the classes star-1, star-2, and star-3 to 1s, 0.9s, and 1.1s, respectively.
                Applied Visual Design: Change Animation Timing with Keywords
                In CSS animations, the animation-timing-function property controls how quickly an animated element changes over the duration of the animation.
                For example, the default value is ease, which starts slow, speeds up in the middle, and then slows down again in the end.
                Other options include ease-out, which is quick in the beginning then slows down, ease-in, which is slow in the beginning, then speeds up at the end, or linear, which applies a constant animation speed throughout.
                For the elements with id of ball1 and ball2, add an animation-timing-function property to each, and set #ball1 to linear, and #ball2 to ease-out.
                CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.
                In CSS animations, Bezier curves are used with the cubic-bezier function.
                The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.
            FREEC 01 - H5C3 -- 3of4
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-01_respwebdes.txt
                    freec-01.3of4-bmk.txt
                xxHash: 55d4ee2a

                The cubic-bezier function consists of four main points that sit on this 1 by 1 grid: p0, p1, p2, and p3.
                You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow.
                This animation is a linear change of an element during the length of an animation, and is the same as using the linear keyword.
                Applied Visual Design: Use a Bezier Curve to Move a Graphic
                Similar animation progressions to the ease-out keyword can be achieved by using a custom cubic Bezier curve function.
                In general, changing the p1 and p2 anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time.
                Here's an example of a Bezier curve using values to mimic the ease-out style:
                Remember that all cubic-bezier functions start with p@ at (0,0) and end with p3 at (1, 1).
                Applied Visual Design: Make Motion More Natural Using a Bezier Curve
                The following cubic Bezier curve simulates a juggling movement:
                This includes people with visual, auditory, mobility, or cognitive disabilities.
                Here are three general concepts this section will explore throughout the following challenges:
                A great resource for your projects going forward is the W3 Consortium's Web Content Accessibility Guidelines (WCAG).
                Per HTML5 specification, this is now considered mandatory.
                However, sometimes images are grouped with a caption already describing them, or are used for decoration only.
                Applied Accessibility: Use Headings to Show Hierarchical Relationships of Content
                Semantic meaning means that the tag you use around content indicates the type of information it contains.
                With six choices, it's tempting to use a tag because it looks better in a browser, but you can use CSS to edit the relative sizing.
                One final point, each page should always have one (and only one) h1 element, which is the main subject of your content.
                Change all the h5 tags to the proper heading level to indicate they are subsections of the h2 ones.
                HTML5 introduced a number of new elements that give developers more options while also incorporating accessibility features.
                By default, a browser renders these elements similarly to the humble div.
                However, using them where appropriate gives additional meaning in your markup.
                It's not meant to include items that repeat across pages, like navigation links or banners.
                The main tag also has an embedded landmark feature that assistive technology can use to quickly navigate to the main content.
                If you've ever seen a "Jump to Main Content" link at the top of a page, using a main tag automatically gives assistive devices that functionality.
                article is a sectioning element, and is used to wrap independent, self-contained content.
                The tag works well with blog entries, forum posts, or news articles.
                Ask yourself if you removed all surrounding context, would that content still make sense?
                Similarly for text, would the content hold up if it were in an RSS feed?
                The section element is also new with HTML5, and has a slightly different semantic meaning than article.An article is for standalone content, and a section is for grouping thematically related content.
                For example, if a book is the article, then each chapter is a section .When there's no relationship between groups of content, then use a div.
                Applied Accessibility: Make Screen Reader Navigation Easier with the header Landmark
                It's used to wrap introductory information or navigation links for its parent tag and works well around content that's repeated at the top on multiple pages.
                This tag is meant to wrap around the main navigation links in your page.
                Using a footer (covered in the next challenge) is sufficient.
                It's primarily used to contain copyright information or links to related documents that usually sit at the bottom of a page.
                The audio tag supports the controls attribute.
                This shows the browser default play, pause, and other controls, and supports keyboard functionality.
                It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it.
                HTML5 introduced the figure element, along with the related figcaption.
                The next several challenges cover some important scenarios using attributes in forms.
                The label tag wraps the text for a specific form control item, usually the name or label for a choice.
                The value of the for attribute must be the same as the value of the id attribute of the form control.
                Each choice is given a label with a for attribute tying to the id of the corresponding item as covered in the last challenge.
                Since radio buttons often come in a group where the user must choose one, there's a way to semantically show the choices are part of a set.
                The fieldset wrapper and legend tag are not necessary when the choices are self-explanatory, like a gender selection.
                Using a label with the for attribute for each radio button is sufficient.
                The type attribute on this element indicates what kind of input will be created.
                Depending on browser support, a date picker shows up in the input field when it's in focus, which makes filling in a form easier for all users.
                <label for="input1">Enter a date:</label> <input type="date" id="input1" name="input1">
                &lt;label for="input1"&gt;Enter a date:&lt;/label&gt; &lt;input type="date" id="input1"
                Add an input tag with a type attribute of "date",an id attribute of "pickdate", and a name attribute of "date".
                Continuing with the date theme, HTML5 also introduced the time element along with a datetime attribute to standardize times.
                Applied Accessibility: Make Elements Only Visible to a Screen Reader by Using Custom CSS
                .sr-only {
                Give the position an absolute value, the left a-10000px value, and the width and height both 1px values.
                The Web Content Accessibility Guidelines (WCAG) recommend at least a 4.5 to 1 contrast ratio for normal text.
                The ratio is calculated by comparing the relative luminance values of two colors.
                The WCAG-recommended contrast ratio of 4.5:1 applies for color use as well as gray- scale combinations.
                You may recall the contrast ratio is calculated using the relative luminance (or lightness) values of the foreground and background colors.
                In practice, the 4.5:1 contrast ratio can be reached by shading (adding black to) the darker color and tinting (adding white to) the lighter color.
                Darker shades on the color wheel are considered to be shades of blues, violets, magentas, and reds, whereas lighter tinted colors are oranges, yellows, greens, and blue-greens.
                You can easily adjust the lightness of the colors since he declared them using the CSS hsl() property (which stands for hue, saturation, lightness) by changing the third argument.
                Note: Some online color picking tools include visual simulations of how colors appear for different types of colorblindness.
                (Their similar lightness also fails the contrast ratio check).
                Screen reader users have different options for what type of content their device reads.
                Instead, you should use brief but descriptive text within the a tags to provide more meaning for these users.
                HTML offers the accesskey attribute to specify a shortcut key to activate or bring focus to an element.
                HTML5 allows this attribute to be used on any element, but it's particularly useful when it's used with interactive ones.
                This same functionality can be given to other elements, such as div, span, and p, by placing a tabindex="0" attribute on them.
                This method is generally used to bring focus to content programmatically (like when a div used for a pop-up window is activated), and is beyond the scope of these challenges.
                This is achieved when the value of the attribute is set to a positive number of 1 or higher.
                Introduction to the Responsive Web Design Challenges
                If you expect most of your traffic to be from mobile users, take a 'mobile-first' approach.
                Then add conditional rules for larger screen sizes.
                Media Queries consist of a media type, and if that media type matches the type of device the document is displayed on, the styles are applied.
                @media (max-width: 100px) { /* CSS Rules */ }
                Add a media query, so that the p tag has a font-size of 10px when the device's height is less than or equal to 800px.
                Making images responsive with CSS is actually very simple.
                max-width: 100%; height: auto;
                The simplest way to make your images properly appear on High-Resolution Displays, such as the MacBook Pros "retina display" is to define their width and height values as only half of what the original file is.
                Instead of using em or px to size text, you can use viewport units for responsive typography.
                The four different viewport units are:
                body { width: 30vw; }
            FREEC 01 - H5C3 -- 4of4
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-01_respwebdes.txt
                    freec-01.4of4-bmk.txt
                xxHash: 55d4ee2a

                A website's User Interface ("UI") has two components.
                In Responsive Web Design, a UI layout must accommodate many different browsers and devices accessing the content.
                It is a layout mode that arranges elements in a predictable way for different screen sizes and browsers.
                Placing the CSS property display: flex; on an element allows you to use other flex properties to build a responsive page.
                Add the CSS property display to #box-container and set its value to flex.
                header, the header's .profile-name, the header's .follow-btn, the header's h3 and h4, the footer , and the footer's .stats.
                CSS Flexbox: Use the flex-direction Property to Make a Row
                This makes it possible to align any children of that element into rows or columns.
                You do this by adding the flex-direction property to the parent item and setting it to row or column.
                Other options for flex-direction are row-reverse and column-reverse.
                Add the CSS property flex-direction to the #box-container element, and give it a value of row-reverse.
                Add the CSS property flex-direction to the #box-container element, and give it a value of column.
                Add the CSS property flex-direction to the header's .profile-name element and set the value to column.
                Fortunately, the justify-content property has several options to do this.
                For each, the direction the flex items are arranged is called the main axis.
                One of the most commonly used is justify-content: center;, which aligns all the flex items to the center inside the flex container.
                Other options include:
                CSS offers the align-items property to align flex items along the cross axis.
                The different values available for align-items include:
                Add the CSS property align-items to the header's .follow-btn element.
                However, using the flex-wrap property tells CSS to wrap items.
                CSS also has options for the direction of the wrap:
                CSS Flexbox: Use the flex-shrink Property to Shrink Items
                For example, if one item has a flex-shrink value of 1 and the other has a flex-shrink value of 3, the one with the value of 3 will shrink three times as much as the other.
                CSS Flexbox: Use the flex-grow Property to Expand Items
                CSS Flexbox: Use the flex-basis Property to Set the Initial Size of an Item
                The units used by the flex-basis property are the same as other size properties (px, em, %,etc.).
                The value auto sizes items based on the content.
                The flex-grow, flex-shrink, and flex-basis properties can all be set together by using the flex property.
                For example, flex: 1 0 10px; will set the item to flex-grow: 1;, flex- shrink: 0;,and flex-basis: 10px;.
                The order property is used to tell CSS the order of how flex items appear in the flex container.
                The property takes numbers as values, and negative numbers can be used.
                This property allows you to adjust each item's alignment individually, instead of setting them all at once.
                This is useful since other common adjustment techniques using the CSS properties float, clear, and vertical-align do not work on flex items.
                CSS Grid: Create Your First CSS Grid
                Turn any HTML element into a grid container by setting its display property to grid.
                Note: In CSS Grid, the parent element is referred to as the container and its children are called items.
                .d1{background:LightSkyBLue;} .d2{background:LightSalmon;} .d3{background:PaleTurquoise;} .d4{background:LightPink;} .d5{background:PaleGreen;}
                CSS Grid: Add Columns with grid-template-columns
                display: grid;
                To adjust the rows manually, use the grid-template-rows property in the same way you used grid-template-columns in previous challenge.
                You can use absolute and relative units like px and em in CSS Grid to define the size of rows and columns.
                You can use these as well:
                grid-template-columns: auto 50px 10% 2fr 1fr;
                To add a gap between the columns, use the grid-column-gap property like this:
                You can add a gap in between the rows of a grid using grid-row-gap in the same way that you added a gap in between columns in the previous challenge.
                grid-gap is a shorthand property for grid-row-gap and grid-column-gap from the previous two challenges that's more convenient to use.
                CSS Grid: Use grid-column to Control Spacing
                These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.
                Make the item with the class item5 consume the last two columns of the grid.
                CSS Grid: Use grid-row to Control Spacing
                In CSS Grid, the content of each item is located in a box which is referred to as a cell.
                You can align the content's position within its cell horizontally using the justify- self property on a grid item.
                This CSS Grid property accepts other values as well:
                CSS Grid: Align an Item Vertically using align-self
                To do this, you use the align-self property on an item.
                This property accepts all of the same values as justify-self from the last challenge.
                CSS Grid: Align All Items Horizontally using justify-items
                CSS Grid: Align All Items Vertically using align-items
                You can group cells of your grid together into an area and give the area a custom name.
                Do this by using grid-template-areas on the container like this:
                Note: Every word in the code represents a cell and every pair of quotation marks represent a row.
                In addition to custom labels, you can use a period (.)
                CSS Grid: Place Items in Grid Areas Using the grid-area Property
                After creating an area's template for your grid container, as shown in the previous challenge, you can place an item in your custom area by referencing the name you gave it.
                In this case, the item will use the entire top row because that whole row is named as the header area.
                If your grid doesn't have an areas template to reference, you can create an area on the fly for an item to be placed like this:
                item1 { grid-area: 1/1/2/4; }
                This is using the line numbers you learned about earlier to define where the area for this item will be.
                The numbers in the example above represent these values:
                Fortunately, there's a better way - by using the repeat function to specify the number of times you want your column or row to be repeated, followed by a comma and the value you want to repeat.
                grid-template-rows: repeat(100, 50px);
                CSS Grid: Limit Item Size Using the minmax Function
                grid-template-columns: 100px minmax(50px, 200px);
                The repeat function comes with an option called auto-fill.
                You can create flexible layouts when combining auto-fill with minmax, like this:
                The only difference is that when the container's size exceeds the size of all the items combined, auto-fill keeps inserting empty rows or columns and pushes your items to the side, while auto-fit collapses those empty rows or columns and stretches your items to fit the size of the container.
                Note: If your container can't fit all your items on one row, it will move them down to a new one.
                CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items.
                CSS Grid: Create Grids within Grids
                * Build a Tribute Page * Build a Survey Form * Build a Product Landing Page * Build a Technical Documentation Page * Build a Personal Portfolio Webpage


