vim:fdm=indent:fdl=2:
set fdm=indent fdl=2 guifont=*

PowerPoint
LOffice Impress

Pandoc
Reveal.js
                    .
                    Absolutely! Here's a list of 15-20 Reveal.js features that can help you create visually engaging presentations, going beyond the basics:
                    Core Features & Transitions ----
                        Horizontal and Vertical Slides: Create complex layouts with nested slides.
                        Slide Transitions: Use various transitions like fade, slide, convex, concave, and zoom.
                        Background Transitions: Smoothly change backgrounds between slides.
                        Fragments: Gradually reveal elements on a slide (e.g., bullet points, images).
                    Visual Enhancements:
                        Background Images and Videos: Use media to create immersive backgrounds.
                        Parallax Backgrounds: Add depth and movement with parallax effects.
                        Custom CSS Styling: Tailor the look and feel to match your branding.
                        Themes: Use pre-built themes or create your own.
                        Syntax Highlighting: Display code snippets with proper formatting.
                        Interactive Elements: Embed iframes, videos, and interactive charts.
                    Advanced Features & Interactivity:
                        Speaker Notes: Add notes for yourself that are visible only in the speaker view.
                        Markdown Support: Write content in Markdown for faster slide creation.
                        Auto-Animate: Create smooth transitions between slides with matching elements.
                        PDF Export: Generate a PDF version of your presentation.
                        Remote Control: Control your presentation from a smartphone or tablet.
                        Plugins: Extend functionality with plugins for features like charts, diagrams, and more.
                        MathJax Support: Display mathematical formulas using LaTeX.
                        Embedded HTML: You can embed any html into a slide.
                        Slide numbering: Show the slide number.
                        Animated gifs: Add animated gifs.
                    These features can help you create presentations that are not only informative but also visually appealing and engaging. Remember to use these features thoughtfully and avoid overwhelming your audience with too many effects.
                Markdown + Pandoc = Reveal
                    Yes, absolutely! Using Markdown with Pandoc to create Reveal.js presentations is an excellent and highly recommended workflow. Here's why and how it benefits you:

                    Advantages of Markdown + Pandoc:

                        Content Focus:
                            Markdown lets you concentrate on writing your content without getting bogged down in HTML markup.
                            This is particularly useful for text-heavy presentations.
                        Rapid Prototyping:
                            You can quickly create a basic structure and outline of your presentation in Markdown.
                            Pandoc handles the conversion to Reveal.js, saving you significant time.
                        Clean and Readable Source:
                            Markdown files are easy to read and maintain, even for complex presentations.
                        Version Control Friendly:
                            Markdown files are plain text, making them ideal for version control systems like Git.
                            Tracking changes and collaborating becomes much easier.
                        Flexibility:
                            Pandoc is incredibly versatile and supports a wide range of input and output formats.
                            This means you can easily convert your Markdown presentations to other formats if needed (e.g., PDF, HTML).
                        Separation of Concerns:
                            You separate content creation (Markdown) from presentation styling and layout (Reveal.js).
                            This makes it easier to update content without affecting the presentation's design.

                    Workflow Outline:

                        Write in Markdown:
                            Use Markdown syntax to create your slides, headings, lists, images, and other content.
                            Use horizontal rules (---) to separate slides.
                        Pandoc Conversion:
                            Use the Pandoc command-line tool to convert your Markdown file to a Reveal.js HTML file.
                            You can specify Reveal.js options and themes in the Pandoc command.
                        Reveal.js Customization:
                            Open the generated HTML file in WebStorm or your preferred editor.
                            Add custom CSS, JavaScript, and Reveal.js features to enhance the presentation.
                            Fine-tune transitions, backgrounds, and other visual elements.
                        Iterate and Refine:
                            Continue to refine your Markdown content and Reveal.js customizations until you're satisfied.

                    Example Pandoc Command:
                    Bash

                    pandoc -t revealjs -s input.md -o output.html --variable revealjs-url=reveal.js

                        input.md: Your Markdown file.
                        output.html: The generated Reveal.js HTML file.
                        --variable revealjs-url=reveal.js: This is important, it tells pandoc where to find the reveal.js files. You will have to download reveal.js, and place it in a location that pandoc can access, relative to the output.html file.

                    Tips:

                        Explore Pandoc's Reveal.js options to customize the conversion process.
                        Use CSS to create a consistent and visually appealing theme.
                        Leverage Reveal.js plugins to add advanced features.

                    In conclusion, using Markdown with Pandoc provides a solid foundation for creating Reveal.js presentations. It streamlines the content creation process and allows you to focus on delivering a compelling message.
Impress.js

Emacs Org
  TODO: MAY WANT TO CONVERT LIST TO FEATURES
  + NOTE DIFFERENT FLAVORS WITH ___TAGS
Sphinx  <raw|Overview>
                Sphinx

                Sphinx is a powerful documentation generator primarily used for creating high-quality technical documentation, especially for software projects.

                Key Features:

                    ReStructuredText: Primarily uses reStructuredText as the source markup language, although it also supports Markdown with the MyST extension.

                    Autodoc: Automatically generates documentation for Python objects (classes, functions, modules) by inspecting their docstrings.

                    Cross-referencing:
                        Easily link between different sections, figures, and code elements within your documentation.
                        Supports cross-referencing to external documentation.

                    Directives:
                        Provides a rich set of directives for controlling document structure, including:
                            .. include::: Include content from other files.
                            .. figure::: Include images with captions.
                            .. admonition::: Create attention, note, warning, etc., blocks.

                    Themes:
                        Offers a variety of themes to customize the look and feel of your generated documentation, such as the popular "Read the Docs" theme.

                    Extensions:
                        Extensible with numerous extensions that add support for various features, including:
                            Math equations (using LaTeX)
                            Support for other programming languages
                            Integration with various tools and services

                Code Example (Simplified Autodoc):
                Python

# In your Python module (my_module.py)
                def my_function(arg1, arg2):
                    """
                    This is the docstring for my_function.

                    Args:
                        arg1: Description of argument 1
                        arg2: Description of argument 2

                    Returns:
                        The result of the function.
                    """
                    # ... function implementation ... 

                Strengths:

                    Powerful and Feature-Rich: Sphinx offers a comprehensive set of features for creating professional-quality documentation.
                    Excellent for Technical Documentation: Particularly well-suited for documenting software projects, APIs, and other technical topics.
                    Large and Active Community: A strong community provides extensive documentation, tutorials, and support.
                    Customization: Highly customizable through themes, extensions, and configuration options.
Markdown
                https://www.markdownguide.org/basic-syntax/
                header                    #
                paragraph
                fetstil, kursivering      *fetstil*  _kursivt_
                blockquote                     > Mitt citat
                list                      - punktlista   1. 2. numrerad lista
                image                     ![bildtext](/sökväg/fil.png)  #+as var-reference(!)
                code                      `   ```python
                separator-line            *** --- ___
                hyperlink                 Detta är [min länk](https://duckduckgo.com "En popup-text").  (+Formatering)
                      #+as var-reference(!)
                 escaping                  \
                (anchor/page-links)
                Task Lists ***            - [ ] Task One
                Tables **(*) (+justification)
                ---- Jupyter Notebooks
                 inline html
                set Fonts
                color note-boxes
                 highlight part of text
                definition list
                nav.
                Latex         $\sqrt{k}$
Jupyter Markdown
                      https://medium.com/analytics-vidhya/the-ultimate-markdown-guide-for-jupyter-notebook-d5e5abf728fd

                  The Ultimate Markdown Guide (for Jupyter Notebook)

                  Hannan Satopay
                  Published in Analytics Vidhya
                  10 min read
                  Nov 18, 2019

                    All code and no heading makes Jupyter a dull read.

                  You may have heard the above
                  proverb, but if not, then well, I
                  have just made it up! But it does
                  hold some weight, especially
                  given that if you have glanced at
                  notebooks published by others,
                  you might also have noticed that
                  the authors have helpfully
                  described their code by
                  incorporating text, links, and
                  images between code cells. To do
                  that, you can use a Markdown
                  cell. Markdown writing skills are
                  essential to portray your work in
                  the Jupyter notebook to offer the
                  reader a sufficient explanation
                  of both the code and the concept.

                  But first...


                  What's Markdown?

                  Markdown is a lightweight Markup
                  language with a plain text
                  syntax. John Gruber developed the
                  Markdown language in 2004 in a
                  collaborative effort with Aaron
                  Swartz, intending to enable
                  people to "write with
                  easy-to-read and easy-to-write
                  plain text format and potentially
                  convert it to structurally
                  correct XHTML (or HTML)."
                  Markdown is designed to be as
                  easy-to-read and easy-to-write as
                  possible. Readability, however,
                  is emphasized above all else.

                  Nevertheless, Markdown is not a
                  substitute for, or even close to,
                  HTML. Its syntax is minimal,
                  correlating only to a tiny
                  proportion of HTML tags.
                  Markdown's idea is to make
                  reading, writing, and editing
                  prose easy without the intention
                  to create a syntax that's just
                  for quickly adding HTML tags.
                  HTML is a format for publishing,
                  while Markdown is a format for
                  reading. Therefore, the
                  formatting syntax of Markdown
                  tackles just issues that can be
                  expressed in plain text. You
                  simply use HTML for any Markup
                  that is not covered by the
                  Markdown syntax. You don't need
                  to preface it or delimit it to
                  indicate that you are switching
                  from Markdown to HTML - you just
                  use the tags.

                  Among the data enthusiasts,
                  Jupyter notebook is in trend. It
                  is simple to use and helps you to
                  create and share documents that
                  include code, visualizations, and
                  narration. Recall that a Jupyter
                  Notebook is a series of cells
                  that can store text or code.
                  Cells shape a notebook's core.
                  Markdown Cells allows you to
                  write and render Markdown syntax.
                  Here's where you can explain and
                  document the processes. On the
                  other hand, code cells allow you
                  to write and run program code
                  like Python.

                    Jupyter Notebook - Types of Cells

                    Note: The Markdown formatting
                    syntax is not processed within
                    block-level HTML tags but is
                    processed within span-level
                    tags.

                  Now that we have some background
                  knowledge about Markdown, without
                  any further ado, let's dive into
                  the syntax!


                  Markdown Syntax Collections

                  Headings  ____

                  Markdown Syntax --

                  # Header 1
                  ## Header 2
                  ### Header 3
                  #### Header 4
                  ##### Header 5
                  ###### Header 6

                  Equivalent HTML Syntax --

                  <h1>Header 1</h1>
                  <h2>Header 2</h2>
                  <h3>Header 3</h3>
                  <h4>Header 4</h4>
                  <h5>Header 5</h5>
                  <h6>Header 6</h6>


                  Text Emphasis  ____

                  Bold  __

                  Markdown Syntax --

                  **This is bold text**
                  __This is bold text__

                  Equivalent HTML Syntax --

                  <strong>This is bold text</strong>


                  Italic  __

                  Markdown Syntax --

                  *This is italic text*
                  _This is italic text_

                  Equivalent HTML Syntax --

                  <em>This is italic text</em>


                  Bold & Italic  __

                  Markdown Syntax --

                  ***Bold and Italic***
                  ___Bold and Italic___

                  Equivalent HTML Syntax --

                  <strong><em> Bold and Italic </em></strong>


                  Strikethrough  __

                  Markdown Syntax --

                  ~~Scratch this~~

                  Equivalent HTML Syntax --

                  <del>Scratch this</del>


                  Backslash Escape  __ ____

                  Backslash Escape prevents
                  Markdown from interpreting a
                  character as an instruction,
                  rather than as the character
                  itself.

                  Markdown Syntax --

                  \# Not a header

                  Equivalent HTML Syntax --

                  # Not a header


                  Paragraphs  __

                  A paragraph is simply one or more
                  consecutive lines of text,
                  separated by one or more blank
                  lines.

                  Markdown Syntax --

                  Hello World!
                  We are learning Markdown.

                  Equivalent HTML Syntax --

                  <p>Hello World!</p>
                  <p>We are learning Markdown.</p>


                  Line Break  __

                  A line break is the termination
                  of the previous line and the
                  beginning of a new line.

                  Markdown Syntax --

                  To force a line return, place two
                  or more empty spaces at the end
                  of a line and press the Enter
                  key.

                  Some text

                  Some more text

                  Equivalent HTML Syntax --

                  The line break tag starts with
                  <br> tag with no closing tag
                  which breaks the line, and the
                  remaining contents begin with a
                  new line.

                  Some text <br>
                  Some more text


                  Blockquotes  __

                  Blockquotes can hold the large
                  chunk of text and are generally
                  indented.

                  Markdown Syntax --

                  > This is a blockquote

                  Equivalent HTML Syntax --

                  <blockquote>This is a blockquote</blockquote>


                  Nested Block Quoting  __

                  Markdown Syntax --

                  > some text
                  >> and then some more text
                  >>> and then some more

                  Equivalent HTML Syntax --

                  <blockquote>
                    <p>some text</p>
                    <blockquote>
                      <p>and then some more text</p>
                      <blockquote>
                        <p>and then some more</p>
                      </blockquote>
                    </blockquote>
                  </blockquote>


                  Horizontal Line  __

                  Markdown Syntax --

                  ---
                  ___
                  ***

                  Equivalent HTML Syntax --

                  <hr>


                  Ordered List  __

                  The Ordered List is a numbered list.

                  Markdown Syntax --

                  1. Cheese
                  2. Carrot
                  3. Coconut

                    Note: Numbering is irrelevant

                  Equivalent HTML Syntax --

                  <ol>
                    <li>Cheese</li>
                    <li>Carrot</li>
                    <li>Coconut</li>
                  </ol>


                  Unordered List  __

                  The Unordered list is a bullet list.

                  Markdown Syntax --

                  - Cheese
                  - Carrot
                  - Coconut

                  Equivalent HTML Syntax --

                  <ul>
                    <li>Cheese</li>
                    <li>Carrot</li>
                    <li>Coconut</li>
                  </ul>


                  Graphics  __

                  You can attach graphics (such as
                  images) to a notebook in Markdown
                  cells.

                    Note1: You can also Drag and
                    Drop your images to the
                    Markdown cell to attach it to
                    the notebook.

                    Note2: Below I have used links
                    to images on the web but you
                    can very well use an offline
                    image by adding the complete
                    filename (plus the file path if
                    it is in a different directory
                    other then the Jupyter
                    Notebook).

                  Markdown Syntax --

                  One simple way of adding an image
                  to a Markdown cell is through the
                  following syntax:

                  ![](https://www.python.org/static/community_logos/python-logo-master-v3-TM.png)

                  If you want to add a hover title
                  to the image then you can simply
                  modify the syntax like below:

                  ![](https://www.python.org/static/community_logos/python-logo-master-v3-TM.png "Python Logo")

                  You can also use the
                  reference-style format for the
                  images:

                  ![][some-id]

                  [some-id]: https://www.python.org/static/community_logos/python-logo-master-v3-TM.png "Python Logo"

                  Equivalent HTML Syntax --

                  <img src="https://www.python.org/static/community_logos/python-logo-master-v3-TM.png" title="Python Logo"/>


                  Hyperlinks  ____

                  Automatic Links  __

                  Markdown Syntax --

                  https://en.wikipedia.org

                  Equivalent HTML Syntax --

                  <a href="https://en.wikipedia.org">https://en.wikipedia.org</a>


                  Standard Links  __

                  Markdown Syntax --

                  [click me](https://en.wikipedia.org)

                  Equivalent HTML Syntax --

                  <a href="https://en.wikipedia.org">click me</a>


                  Standard Links (with Mouse-Over Titles)  __

                  Markdown Syntax --

                  [click me](https://en.wikipedia.org "Wikipedia")

                  Equivalent HTML Syntax --

                  <a href="https://en.wikipedia.org" title="Wikipedia">click me</a>


                  Reference-Style Links  __

                  Markdown Syntax --

                  This is [a reference][id]
                  [id]: https://en.wikipedia.org "Wikipedia"

                    Note: Link IDs are not
                    case-sensitive.

                  You don't really have to give
                  your link an ID. If you use the
                  words in the first set of
                  brackets to later define the
                  link, Markdown will understand
                  it. This works as follows:

                  This is [a reference][]
                  [a reference]: https://en.wikipedia.org "Wikipedia"

                  Equivalent HTML Syntax --

                  This is <a href="https://en.wikipedia.org" title="Wikipedia">a reference</a>


                  Anchor Links  __

                  An anchor link is a link on a
                  page that brings you to a
                  specific place on that page. In a
                  Jupyter Notebook, it can be used
                  to link to any section of the
                  notebook for easy navigation.

                    Note: The ID used for the
                    linking should be unique to
                    avoid misdirection.


                  Technique 1

                  Create a new cell above the
                  section you want to link to and
                  add the following line of code:

                  <a id="id"></a>

                  To create an anchor link that
                  links to the above section,
                  simply add the following line of
                  code:

                  [Section title](#id)


                  Technique 2

                  If you have a section with the
                  heading - My Great Heading then
                  to add an anchor link to this
                  section, simply add a hyphen in
                  place of the blank space like
                  below:

                  [Section title](#My-Great-Heading)


                  Task Lists  __

                  Markdown Syntax --

                  - [x] Some task
                  - [ ] Some more task

                  Equivalent HTML Syntax --

                  <input type="checkbox" disabled checked> Some task
                  <input type="checkbox" disabled> Some more task


                  Code Section  __

                  Markdown Syntax --

                  Inline Code:

                  `some piece of inline code`
                  ```
                  some piece of block code
                  ```

                  You can also perform syntax
                  highlighting like below:

                  ```javascript
                  var s = "JavaScript syntax highlighting";
                  alert(s);
                  ```
                  ```
                  python
                  s = "Python syntax highlighting"
                  print s
                  ```

                  Equivalent HTML Syntax --

                  You can use the <code> tags in
                  HTML to get similar results. For
                  syntax highlighting, appropriate
                  classes have to be utilized for
                  the different elements.


                  Table  __

                  A table can be constructed using
                  | (pipe symbol) and - (dash) to
                  mark columns and rows.

                  Markdown Syntax --

                  |Header|Header|Header|
                  |------|------|------|
                  |A     |B     |C     |
                  |X     |Y     |Z     |

                    Note: It is not important to
                    add spaces after each text,
                    roughly aligning with the
                    columns will do just fine.
                    Also, the number of dashes is
                    irrelevant and is just
                    cosmetical.

                  The text in each header and cell
                  of a table will by default
                  justify to the right.

                  For manually changing the
                  justification, you can use:

                  Use :-: for centered
                  Use - for right centered
                  Use :- for left centered

                  Equivalent HTML Syntax --

                  <table>
                    <thead>
                      <tr>
                        <th>Header</th>
                        <th>Header</th>
                        <th>Header</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>A</td>
                        <td>B</td>
                        <td>C</td>
                      </tr>
                      <tr>
                        <td>X</td>
                        <td>Y</td>
                        <td>Z</td>
                      </tr>
                    </tbody>
                  </table>


                  Inline HTML  ____

                  Text Color
                  
                  <span style="color:color">Text</span>

                  Where color =
                  blue|red|green|pink|yellow

                  For a list of all the supported
                  color names, checkout HTML Color
                  Names.

                  You can use also use the HEX
                  color codes for customizing the
                  text color.


                  Text Font Family  __

                  <span style="font-family:Comic Sans MS">This is a text</span>

                  For a list of some commonly used
                  fonts, checkout CSS Font Family
                  List.


                  Colored Note Boxes  __

                  Use one of the following <div>
                  tags to display text in a colored
                  box. The color of the box is
                  determined by the alert type that
                  is specified.

                  Blue boxes (alert-info)

                  <div class="alert alert-block alert-info">
                  <b>Tip:</b> Use blue boxes (alert-info) for tips and notes.</div>

                  Yellow boxes (alert-warning)

                  <div class="alert alert-block alert-warning">
                    <b>Example:</b> Use yellow boxes for examples that are not inside code cells, or use for mathematical formulas if needed. Typically also used to display warning messages.
                  </div>

                  Green boxes (alert-success)

                  <div class="alert alert-block alert-success">
                  <b>Success:</b> This alert box indicates a successful or positive action.
                  </div>

                  Red boxes (alert-danger)

                  <div class="alert alert-block alert-danger">
                  <b>Danger:</b> This alert box indicates a dangerous or potentially negative action.
                  </div>


                  Cell Background Color  __

                  <code style="background:yellow;color:black">Useful for highlighting to grab the attention of the reader towards certain points.</code>

                  Rendered Output

                  I also tend to use the following
                  color style when adding a piece
                  of terminal code to a Markdown
                  cell:

                  <p style="background:black">
                    <code style="background:black;color:white">C:\Users\YOUR_USERNAME> pip3 install roughviz
                    </code>
                  </p>

                  By the way, roughviz is a Python
                  visualization library that I have
                  created for creating
                  sketchy/hand-drawn styled charts.
                  Do check it out on Github and
                  PyPI.


                  HTML Mark Tag  __

                  Highlight parts of a text:

                  Do not forget to buy
                  <mark>milk</mark> today.


                  Definition Lists  __

                  <dl>
                    <dt>First Term</dt>
                      <dd>This is the definition of the first term.</dd>
                    <dt>Second Term</dt>
                      <dd>This is one definition of the second term. </dd>
                    <dd>This is another definition of the second term.</dd>
                  </dl>


                  Navigation Menu  __

                  It defines a set of navigation
                  links.

                  <nav>
                    <a href="https://www.google.com">LinkedIn</a> |
                    <a href="/css/">Github</a> |
                    <a href="/js/">Medium</a> |
                  </nav>


                  LaTeX MATH  __ __

                  Jupyter Notebooks' Markdown cells
                  support LateX for formatting
                  mathematical equations. To tell
                  Markdown to interpret your text
                  as LaTex, surround your input
                  with dollar signs like this:

                  $\sqrt{k}$


                  Geometric Shapes  __

                  Use this code with a decimal or
                  hex reference number from here:
                  UTF-8 Geometric shapes

                  &#reference_number;
GitHub-flavor Markdown (GFM)
                adds: tables, task-lists, user-mentions
                suited for: writing clear, concise documentation within github ecosystem (readme-files, issue-descriptions (hm_eng), comments

                task-lists --
                - [x] Task completed
                - [ ] Task not completed
                user mentions --  (hm_eng)
                @username
                issue- and pull-request references --
                #123
                tables --
                | Header 1 | Header 2 |
                |---|---|
                | Cell 1 | Cell 2 |
                | Cell 3 | Cell 4 |
                fenced code-blocks --
                ```python
                def my_function():
                    print("Hello, world!")
                autolinking of urls --
                emojis --  including shortcodes
                :smile:
Mermaid
                Let's switch tacks slightly with a question on another topic: Could you give me a quick overview about some common constructs in Mermaid (used for constructing UML diagrams and the like), and maybe also list some of the common constructs and features as a list?

                Mermaid is a powerful tool for generating diagrams using a simple and concise text syntax. Here's a breakdown of some common constructs:

                1. Basic Diagram Types:

                    Flowcharts:
                        graph LR (Left to Right)
                        graph TD (Top to Down)
                        graph RL (Right to Left)
                        graph BT (Bottom to Top)
                        Nodes are represented by square brackets []
                        Connections are defined using --> (arrow)

                    Sequence Diagrams:
                        sequenceDiagram
                        Participants are defined with participant Alice
                        Messages are defined with Alice->>Bob: Hello

                    Class Diagrams:
                        classDiagram
                        Classes are defined with class MyClass { and }
                        Relationships (inheritance, association, etc.) are defined using arrows (e.g., --, -->, ..>)

                    Gantt Charts:
                        gantt
                        Define tasks with section and task blocks
                        Specify durations and dependencies between tasks

                2. Common Shapes:

                    Square: []
                    Circle: (( ))
                    Rounded Rectangle: ()()
                    Diamond: {}
                    Asymmetric Shape: <>

                3. Styling:

                    Colors: fill:#color (e.g., fill:#97c2fc)
                    Text Styles: text-align:center, font-size:12px
                    Line Styles: stroke-width:2px, stroke-dasharray:5, 5

                4. Advanced Features:

                    Subgraphs: Group related nodes within a subgraph.
                    Loops and Conditions: loop, alt, opt for conditional flows.
                    Notes: Note over and Note right of to add annotations.

                Example (Flowchart):
                Code snippet

                graph LR
                    A[Start] --> B{Decision}
                    B -- Yes --> C[Action1]
                    B -- No --> D[Action2]
                    C --> E[End]
                    D --> E

                This is a basic overview. Mermaid offers a rich set of features and customization options. I recommend exploring the official Mermaid documentation for a comprehensive guide and more advanced examples.

                You're right, I can provide a more comprehensive list of Mermaid constructs and features:

                1. Diagram Types

                    Flowcharts:
                        graph LR (Left to Right)
                        graph TD (Top to Down)
                        graph RL (Right to Left)
                        graph BT (Bottom to Top)
                    Sequence Diagrams:
                        sequenceDiagram
                    Class Diagrams:
                        classDiagram
                    Gantt Charts:
                        gantt
                    State Diagrams:
                        stateDiagram
                    Entity Relationship Diagrams (ERDs):
                        erDiagram
                    User Journey Diagrams:
                        journey

                2. Basic Shapes & Nodes

                    Square: []
                    Circle: (( ))
                    Rounded Rectangle: ()()
                    Diamond: {}
                    Asymmetric Shape: <>
                    Subgraph: subgraph A { ... }

                3. Connections & Relationships

                    Arrows: -->, ->, --, ..> (for inheritance)
                    Notes: Note over, Note right of

                4. Styling

                    Colors: fill:#color (e.g., fill:#97c2fc)
                    Text Styles: text-align:center, font-size:12px, font-family
                    Line Styles: stroke-width:2px, stroke-dasharray:5, 5, stroke-color

                5. Advanced Features

                    Loops: loop, while, repeat
                    Conditions: if, else, alt
                    Subgraphs: Group related nodes within a subgraph.
                    Customizations: Define custom shapes and styles.
                    HTML-like labels: Use basic HTML tags within node labels (e.g., <b>, <i>, <br>)

                6. Integrations

                    Markdown: Easily integrate Mermaid diagrams into Markdown documents.
                    Jupyter Notebooks: Render Mermaid diagrams within Jupyter Notebooks.
                    VS Code: Use the Mermaid Support extension for syntax highlighting and live preview in VS Code.
PlantUml
----
Pandoc Markdown (*)  #many extensions
                adds: footnotes/references, definition-lists
                suited for: academic writing, technical documentation,  cross-platform publishing

                code-blocks --
                tables --

                footnotes/references --
                Here is a footnote reference: [^1]
                [^1]: This is the footnote.
                definition-lists --
                Term 1
                :    Definition 1
                Term 2
                :    Definition 2
                math-equations --
                $...$  inline math
                $$...$$  display math (hm_eng)
markdown extra
                adds: tables, fenced code blocks(hm_eng), definition-list
                suited for: readability, using markdown within html-blocks provides flexibility for integrating markdown with existing html-content

                tables --
                definition-lists --
                fenced code-blocks --
                markdown within html-blocks --
                <div>
                    This is some text with **bold** formatting.
                </div>
                footnotes/references --
                Attributes for Inline Elements --  ___HM
                <a href="https://example.com" id="my-link">Link</a>
MultiMarkdown
                adds: footnotes, citations, metadata
                suited for: smart typography, metadata-support, strong focus on generating various output-formats (html, pdf, etc) due to its focus on semantic markup

                footnotes --
                definition-lists --
                id- and class-attributes -
                # My Heading {#heading-id} 
                This is a paragraph with a class: {.my-class} 
                <span id="my-span-id">This is a span with an ID.</span>
                smart typography --
                convert " to curly quotes
                convert -- to em-dashes
                convert ... to ellipses
                metadata --
                ---
                title: My Document Title
                author: John Doe
                date: 2024-11-15
                ---
  writers markdown
Restructured Text  <raw>  #python documentation project
                Directives: Restructured Text extensively uses directives, which are special commands that control the document's structure and formatting.

                    Example (including a file):
                    Code snippet

                .. include:: other_file.txt

                Example (creating a section):
                Code snippet

                    .. section:: My Section Title

                Roles: Roles are inline markers that provide specific formatting or instructions.

                    Example (emphasis):
                    Code snippet

                This text is :emphasis:`emphasized`.

                Example (code):
                Code snippet

                    This is :code:`some code`.

                Field Lists:

                    Code snippet

                        :Name: John Doe
                        :Email: john.doe@example.com

                    Targets:
                        Create named targets within the document for easy cross-referencing.

                Key Strengths:

                    Versatility: Restructured Text is a powerful markup language with a wide range of features for creating complex documents, including technical documentation, tutorials, and manuals.
                    Strong Tooling: Supports various tools for document conversion, such as Sphinx, which is widely used for generating documentation for Python projects.
                    Readability: While the syntax might seem a bit more verbose than some other Markdown flavors, Restructured Text often results in well-structured and readable output.
Sphinx Markdown (MyST  <raw>)
                Directives:

                    {directive}: Allows you to use Sphinx directives (like .. include::) directly within your Markdown.
                    Markdown

                {include} path/to/file.txt

                {role}:  Similarly, you can use Sphinx roles within your Markdown.
                Markdown

                        This is a :code:`code snippet`.

                    Math Support:
                        Supports LaTeX-style math using $...$ for inline math and $$...$$ for display math.

                    Cross-referencing:
                        Allows you to easily create cross-references within your documents using Sphinx's referencing mechanisms.

                    Customizations:
                        Highly customizable through configuration options, allowing you to tailor the behavior and features to your specific needs.

                Key Strengths:

                    Combines Markdown's Simplicity with Sphinx's Power: MyST Markdown seamlessly integrates the ease of use of Markdown with the advanced features and capabilities of the Sphinx documentation framework.
                    Strong Support for Technical Documentation: Ideal for creating complex technical documentation, including tutorials, API references, and user guides.
                    Extensible: Allows you to leverage the full power of Sphinx extensions within your Markdown documents.
PEG Markdown
                adds: smart typography, footnotes/references
                suited for: strong emphasis on correctness, focus on performance, extensibility (designed to be easily extended with custom parsers and output formats)
  Hugo Markdown  <raw>
                You got it! Here's Hugo Markdown with a focus on features beyond standard Markdown and including code examples:

                Hugo Markdown

                    Shortcodes:
                    Markdown

                {{< figure src="/images/myimage.jpg" alt="My Image" caption="A nice image" >}}

                {{< video src="https://www.youtube.com/embed/..." >}}

                Hugo supports custom shortcodes that allow you to easily embed images, videos, and other elements into your content.

                Front Matter:
                YAML

                ---
                title: "My Blog Post"
                date: 2024-11-15
                tags: ["hugo", "blogging"]
                ---

                Front Matter allows you to define metadata for your content, such as title, date, author, and tags, which is used by Hugo to organize and display your content.

                Dynamic Content:
                Markdown

                    {{ .Site.Title }} 
                    {{ range .Site.Data.myData }} 
                        {{ .name }} 
                    {{ end }}

                    Hugo allows you to use templates and data files to dynamically generate content, such as menus, sidebars, and other elements.

                Key Strengths:

                    Designed for Static Site Generation: Hugo Markdown is specifically designed for use with the Hugo static site generator, offering seamless integration with its features and templating engine.
                    Powerful Features: Shortcodes, front matter, and dynamic content provide powerful tools for creating complex and feature-rich websites.
                    Performance: Hugo is known for its speed and efficiency, making it a popular choice for building fast and responsive websites.
  Critic Markup  <raw>  #often used together with e.g. MultiMarkdown
                Focus: CriticMarkup is not a Markdown flavor itself, but rather a system for annotating and tracking changes within a Markdown document. It's designed for collaborative editing and review.

                Key Features:

                    Additions:
                    Markdown

                This is {++an addition++}. 

                Deletions:
                Markdown

                This is {--a deletion--}. 

                Substitutions:
                Markdown

                This is {~~old text~>new text~~}. 

                Comments:
                Markdown

                This is a test{>>Comment here<<}. 

                Highlights:
                Markdown

                        This is a {==highlighted text==}. 

                Key Strengths:

                    Collaboration: Enables clear and concise communication of changes and suggestions during the editing process.
                    Version Control: Helps track changes effectively and facilitates easier merging of contributions.
                    Readability: Provides a clear and human-readable way to annotate and review documents.

                Note: CriticMarkup is typically used in conjunction with other Markdown flavors like MultiMarkdown.
MD Editors (...)
----
Xml
  DotNet Xml Documentation
Emacs XML-Mode
Vim Xml-Tools
json, yaml  # look at more m.u. formats
vim json-tools
                  https://github.com/elzr/vim-json
                https://github.com/rhysd/vim-fixjson
                https://vimnotes.com/using-jq-and-other-tools-seamlessly-in-vim/
                https://dev.to/mfilej/quickly-format-and-manipulate-json-in-vim-using-jq-2963
                https://rafaelleru.github.io/blog/json-magic-vim/
                https://gist.github.com/christoomey/880c87192c8f005bcdb5
Context
texinfo
Docbook
Wiki

Gemini-Question: Listing different Markdown flavors 
                - Standard Markdown:
                The original and most basic flavor.
                - CommonMark: A standardized and stricter version of Markdown.
                - Kramdown: A robust Markdown superset used by Jekyll and Ruby on Rails.
                - Discount: An early and influential Markdown implementation.
                - Remark: A fast and efficient Markdown parser.
                - Maruku: Another popular Markdown parser with a focus on simplicity and readability.
                - Markdown Here: A browser extension that allows you to easily write and preview Markdown. (Not strictly a "flavor" but a significant implementation)
                - StackEdit: A cloud-based Markdown editor with support for various flavors. (Similar to Markdown Here)
                - MyST Markdown: A flavor specifically designed for scientific and technical documentation, with support for mathematical equations (using LaTeX).
                - GitHub Pages Markdown: The flavor used for creating websites with GitHub Pages.
                - Hugo Markdown: The flavor used by the Hugo static site generator, with features like shortcodes and front matter.
                - Mermaid Markdown: While technically a separate language, it's often used within Markdown documents for creating diagrams and flowcharts.
                - PlantUML Markdown: Similar to Mermaid, allows embedding PlantUML diagrams within Markdown.
                - Critic Markup: Designed for peer review and collaborative editing of Markdown documents.
                Restructured Text (reST):
                    A markup language developed by the Python documentation project.
                    Known for its clear and concise syntax.
                    Often used for technical documentation, especially within the Python ecosystem.
                Python Markdown:
                    While there isn't an official "Python Markdown" standard, this generally refers to Markdown implementations and libraries written in Python.
                    Popular libraries include markdown and mistune.
                    These libraries provide Python developers with tools to parse, render, and manipulate Markdown text.
                Jupyter Markdown:
                    A variant of Markdown used within Jupyter Notebooks.
                    Supports features like code blocks, equations (using LaTeX), and interactive elements.
                Sphinx Markdown:
                    The flavor used by the Sphinx documentation generation system.
                    Extends Markdown with features like directives for including code blocks, cross-referencing, and generating tables of contents.

Pdf
Emacs Pdf-Tools
a2ps

Vim LatexSuite
----
~/Empire/Doks/Comp/lang/tex/latex/Freedman_LaTeXCheatSheet.pdf
~/Empire/Doks/Comp/lang/tex/latex/latexcheatsheet.pdf [@]
  ~/Empire/Doks/Comp/lang/tex/latex/notes4pros-latex.pdf
  [+pull out all methods etc from 'Beautiful Typography in Tex and Friends' ****]
  https://tex.stackexchange.com/questions/1319/showcase-of-beautiful-typography-done-in-tex-friends#24719
    https://www.scribd.com/read/287708181/LaTeX-Cookbook
evince -p 1 ~/Dropbox/rsc/data/lists/ref/comp/cb/latexcb.pdf &
            Downloading the example code
            1 - The Variety of Document Types ----
              TeX and LaTeX distributions
              LaTeX editors
            Writing a short text
            Writing a thesis
              Changing the input encoding
              Getting a right-justified table of contents
              Changing the margins
              Modifying the layout of captions
              Centering displayed equations
            Designing a book
              Changing the page layout
              Designing a title page
              Adding a cover page
              Changing the document class
            Creating a presentation
              Using short titles and names
              Uncovering information piecewise
              Splitting frames in columns
              Showing an outline for each section
              Removing the navigation symbols
              Changing the font
              Changing the color
              Loading a theme from the Internet
              Providing a handout
            Designing a curriculum vitae
            Writing a letter
              Separating paragraphs
              Changing the signature
              Adding enclosures
            Producing a leaflet
              Fold marks and cut lines
              Adjusting the margins
              Adding a background image
              Changing the sectioning font
            Creating a large poster
            2 - Tuning the Text ----
            Inputting accented characters
            Improving justification and hyphenation
            Converting numbers to words
              Multilingual support
              Gender
              Enumerated lists
            Putting text into a colorful box
            Visualizing the layout
              Using geometry
              Examining the page layout details
            Visualizing boxes of letters and symbols
            Typesetting in a grid
            Absolute positioning of text
            Starting a paragraph with an over-sized letter
              Changing the drop cap size
              Coloring the initial
            Fitting text to a shape
              Further shapes
              Cutting out shapes
            Creating a pull quote
            3 - Adjusting Fonts ----
            Basic font commands
            Choosing a font for a document
              Latin Modern
              Kepler fonts
              Font combinations
            Locally switching to a different font
              A command for changing the font
              An environment for changing the font
            Importing just a single symbol from a font family
            Writing bold mathematical symbols
              Standard LaTeX
              AMS-LaTeX and amsmath
              Comparing bm and amsmath
            Getting the sans serif mathematics font
              An alternative approach
              Sans serif fonts with direct math support
              Arev Sans
              Kepler fonts
            Writing double stroke letters as if on a blackboard
            Enabling the searching and copying of ligatures
            Suppressing ligatures
            Adding a contour
            4 - Working with Images ----
            Including images with optimal quality
            Automating image positioning
              Limiting the floating figures and tables
              Fixing the position of a figure
            Manipulating images
            Adding a frame to an image
            Cutting an image to get rounded corners
            Shaping an image like a circle
            Drawing over an image
            Aligning images
            Arranging images in a grid
            Stacking images
            5 - Beautiful Designs ----
            Adding a background image
            Creating beautiful ornaments
            Preparing pretty headings
            Producing a calendar
            Mimicking keys and menu items
            6 - Designing Tables ----
            Creating a legible table
            Adding footnotes to a table
            Aligning numeric data
            Merging cells
            Splitting a cell diagonally
            Adding shape, shading, and transparency
              Numbering table rows automatically
              Adding styles to rows and columns
            Importing data from files
            7 - Contents, Indexes and Bibliographies ----
            Tuning a table of contents, lists of figures, and tables
              Automatic correction of widths
              Printing a flat table of contents
              Getting KOMA-Script like-sans-serif headings
            Creating a bibliography
            Adding _a glossary
            Creating a list of acronyms
            Producing an index
            8 - Getting the Most out of the PDF ----
            Adding hyperlinks
              Inserting custom hyperlinks
               Linking to a place within the document
               Linking to labeled objects
               Linking to the Internet
              Changing the color and shape of the hyperlinks
              Getting backreferences in the bibliography
              Hyperlinking index entries
            Adding metadata
            Adding copyright information
            Inserting comments
            Producing fillable forms
            Optimizing the output for e-book readers
            Removing white margins
            Combining PDF files
            Creating an animation
            9 - Creating Graphics ----
            Building smart diagrams
              Circular diagrams
              Bubble diagrams
              Constellation diagrams
              Descriptive diagrams
              Priority descriptive diagrams
              Animating a diagram
              Further customization
            Constructing a flowchart
            Building a tree
              Creating a decision tree
            Building a bar chart
            Drawing a pie chart
              Square charts
              Polar area charts
              Cloud charts
            Drawing a Venn diagram
            Putting thoughts in a mind map
            Generating a timeline
            10 - Advanced Mathematics ----
            Quick-start for beginners
              Math styles
              Greek letters
              Math symbols
              Squares and fractions
              --
              Subscripts and superscripts
              Operators
              Numbering and referencing equations
              Writing multiline formulas with alignment
               Aligning at the relation symbol
               Centering a block of equations
              Adjusting numbering
            Fine-tuning math formulas
            Automatic line-breaking in equations
            Highlighting in a formula
            Stating definitions and theorems
              Adjusting the numbering
              An alternative theorem package
              Additional theorem tools
            Drawing commutative diagrams
            Plotting functions in two dimensions
              Adding ticks and grids
              Reducing axes
              Plotting in polar coordinates
            Plotting in three dimensions
              Reducing axes
            Drawing geometry pictures
              Defining points
              Calculating points
              Drawing objects
              Printing labels
            Doing calculations
            11 - Science and Technology ----
            Typesetting an algorithm
            Printing a code listing
            Application in graph theory
            Writing physical quantities with units
            Writing chemical formulae
            Drawing molecules
              Drawing rings
              Naming molecules
              Using building blocks
              Applying TikZ options
              Using ready-drawn carbohydrates
            Representing atoms
            Drawing electrical circuits
            12 - Getting Support on the Internet ----
            Exploring online LaTeX resources
              Software archives and catalogues
              User groups
              Web forums and discussion groups
              Frequently Asked Questions
            Using web forums
            Framing a really good question

