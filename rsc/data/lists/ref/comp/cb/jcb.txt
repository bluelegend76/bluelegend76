set foldmethod=indent foldlevel=2
vim: fdm=indent:fdl=2:

https://www.programcreek.com/2014/09/top-100-classes-used-in-java-projects/
            A large portion of Java software development is using APIs from various libraries. From 10,000 open source Java projects, I extracted the frequency of API classes. The classes are either from Java standard library or from third-party libraries. Each class is counted once for each project. The list below shows the top 100.

            1. Top 100 Java Classes

            The number in parenthesis is the frequency, and it scales from 1 - 10,000. For example, “java.util.ArrayList (6958)” means out of 10,000 projects, 5958 of them use java.util.ArrayList. You can go to the full list here.

            java.util.ArrayList  (6958)
            java.io.IOException  (6866)
            java.util.List  (6784)
            java.util.HashMap  (5590)
            java.util.Map  (5413)
            java.io.File  (5097)
            java.io.InputStream  (4234)
            java.util.Set  (3915)
            java.util.Arrays  (3884)
            java.util.Iterator  (3856)
            java.util.Collections  (3643)
            java.util.Date  (3461)
            java.util.HashSet  (3278)
            java.io.BufferedReader  (3257)
            java.util.Collection  (3192)
            java.net.URL  (3168)
            java.io.FileInputStream  (3044)
            java.io.InputStreamReader  (3023)
            org.junit.Test  (3008)
            java.io.FileOutputStream  (2843)
            java.io.FileNotFoundException  (2669)
            java.io.OutputStream  (2563)
            java.util.regex.Pattern  (2469)
            java.io.Serializable  (2437)
            java.util.LinkedList  (2372)
            java.text.SimpleDateFormat  (2245)
            java.util.Properties  (2190)
            java.util.Random  (2171)
            java.lang.reflect.Method  (2141)
            java.io.ByteArrayOutputStream  (2112)
            java.util.regex.Matcher  (2012)
            android.os.Bundle  (2007)
            java.util.logging.Logger  (1999)
            java.io.UnsupportedEncodingException  (1968)
            org.junit.Before  (1920)
            java.util.Comparator  (1896)
            java.io.ByteArrayInputStream  (1868)
            java.io.PrintWriter  (1862)
            java.util.Calendar  (1854)
            android.app.Activity  (1843)
            java.net.MalformedURLException  (1828)
            android.content.Context  (1780)
            android.view.View  (1731)
            java.util.Locale  (1719)
            java.util.Enumeration  (1709)
            java.util.Map.Entry  (1705)
            java.io.FileWriter  (1677)
            java.io.FileReader  (1651)
            android.util.Log  (1614)
            android.content.Intent  (1601)
            java.lang.reflect.InvocationTargetException  (1594)
            java.util.logging.Level  (1557)
            java.lang.reflect.Field  (1499)
            java.io.StringWriter  (1499)
            android.widget.TextView  (1442)
            java.util.LinkedHashMap  (1409)
            java.io.Reader  (1390)
            java.net.URI  (1377)
            java.io.Writer  (1339)
            java.text.ParseException  (1318)
            junit.framework.TestCase  (1318)
            java.io.OutputStreamWriter  (1295)
            java.io.StringReader  (1279)
            java.io.BufferedWriter  (1265)
            java.util.Vector  (1254)
            java.util.StringTokenizer  (1251)
            java.text.DateFormat  (1246)
            java.util.concurrent.TimeUnit  (1237)
            java.io.BufferedInputStream  (1235)
            java.util.TreeMap  (1227)
            org.xml.sax.SAXException  (1218)
            javax.servlet.http.HttpServletRequest  (1175)
            java.io.PrintStream  (1168)
            java.util.TreeSet  (1160)
            android.widget.Toast  (1157)
            java.util.Hashtable  (1154)
            java.lang.reflect.Constructor  (1139)
            java.net.URLEncoder  (1134)
            java.security.NoSuchAlgorithmException  (1134)
            org.w3c.dom.Document  (1130)
            android.widget.Button  (1129)
            org.junit.After  (1128)
            javax.servlet.http.HttpServletResponse  (1109)
            java.awt.Color  (1099)
            java.net.URISyntaxException  (1085)
            javax.servlet.ServletException  (1081)
            javax.xml.parsers.DocumentBuilderFactory  (1076)
            java.lang.annotation.Retention  (1075)
            java.security.MessageDigest  (1072)
            java.util.concurrent.Executors  (1062)
            java.net.UnknownHostException  (1057)
            org.slf4j.Logger  (1054)
            java.sql.SQLException  (1043)
            org.slf4j.LoggerFactory  (1042)
            java.util.UUID  (1040)
            java.net.InetAddress  (1026)
            junit.framework.Assert  (1011)
            android.view.ViewGroup  (1005)
            java.util.concurrent.ConcurrentHashMap  (1001)
            java.awt.event.ActionEvent  (995)
https://www.crio.do/blog/string-methods-in-java/
            Exploring String Class in Java

            In Java, Strings are an instance of the String class and Double quotes “ ” are used to represent Strings in Java.
            Examples of Strings in Java

                “Project-based Learning”
                “Java NOob 2 Expert!!”
                “abc”

            How do we create strings in Java?

            A String object can be created in one of two ways:

                String Literal - Double quotes are used to construct string literals.
                Using new: Using the keyword "new," a Java String is generated.

            Let's look at each.
            String Literal - Double quotes are used to construct string literals.

            Example: String  greetString = “Welcome”;

            This creates a String object in Java String Pool also referred to as String Constant Pool (SCP) which is a special place for all strings in Heap Memory.

            Why is this special area in heap(SCP) required? Is it only for Strings?

            Yes it is only for strings mainly for 2 reasons

                Most Used Objects
                Immutability of Strings

            By storing only one copy of each literal String in the pool, JVM will optimize the amount of memory allocated for strings. When we declare a String variable and assign it a value, the JVM scans the pool for a String of the same value. If it is located, the compiler would automatically return a reference to its memory address rather than allocating additional memory.

            public class SCP {

                public static void main(String[] args) {

                    String s1 = "Crio";

                    String s2 = "Crio";

                    String s3 = new String("Crio");

                    

                    System.out.println(s1==s2); // true

                    System.out.println(s1==s3); // false

                    System.out.println(s2==s3); // false

                    System.out.println(s1.equals(s3)); // true

                    System.out.println(s1.equals(s2)); // true

                    System.out.println(s2.equals(s3)); // true

                }

            }

            2.    Using new: Using the keyword "new," a Java String is generated.

            Example: String greetString = new String(“Welcome”)

            This declaration creates a string object in heap memory and checks to see if it is in the string pool. If the string “Welcome” is not in the string pool, it will add it; otherwise, it will skip it and return a reference variable, which refers to the newly created heap object.

            To read more about SCP glance through - https://www.baeldung.com/java-string-constant-pool-heap-stack
            How and why is it useful to use String functions in Java programming?

            The String class contains over 60 methods that serve as basic utility methods to make the life of a developer dealing with strings smoother.
            Note about Immutability Of Strings

            Since the String class is immutable, all string objects generated with literals or new operators cannot be altered or updated. At the time of creation, the value of the immutable class object is set. Immutability of strings has numerous advantages, including improved performance due to the String Pool model, security, and thread safety.
            Quick Exercise to demonstrate this concept is given below

            class ImmutableString{  

             public static void main(String args[]){  

               String str = "Learning String";  

               manipulateString(str);  

               System.out.println(str);//will print Learning String because strings are immutable objects  

             }  

             

             private static void manipulateString(String str) {

               str.concat(" By Doing");//concat() method appends the string at the end

             }  

            }

            You must use different classes, such as StringBuilder that are mutable counterparts of String if you wish to move the String to different methods for modification.

            class ImmutableString{  

             public static void main(String args[]){  

               StringBuilder str = "Learning String";  

               manipulateString(str);  

               System.out.println(str);//will print Learning String By Doing because stringbuilder object is mutable  

             }  

             

             private static void manipulateString(StringBuilder str) {

               str.concat(" By Doing");//concat() method appends the string at the end

             }  

            }

            What if you plan to write your own implementation of existing methods?

            That's a perfect way to practice and improve your Java skills, but it's definitely not a good idea to use it in production.

            The primary reason for this is that you might easily introduce bugs into your code. The Java Community is vast, and these implementations have been thoroughly reviewed and tested in stringent environments and are well known. Instead of reinventing the wheel, you should concentrate on your business logic. Another reason includes inbuilt documentation support, enhances the readability of code, and continued support from the community.

            For example, to find out the number of characters contained in the string object, length() method can be used instead of iterating over all characters and increasing the count one at a time.

            String creditCardNumber = “1234-5678-2345”

            boolean isValidCreditCard = creditCardNumber.length() == 12 ? true : false;

            Let's dive deep into the most commonly used Java string methods and understand their working.
            1. indexOf()

            Used to find characters and substrings in a string. It returns the index of the first occurrence from the left of the passed string within this string; moreover, if we provide the fromIndex, it starts searching from that index.
            Syntax of indexOf()

            public int indexOf​(int str, int fromIndex)
            Parameter(s)

                str:  Substring to be searched for
                fromIndex: Search begins from this index

            Return Value

            Index of the first occurrence of the specified substring, 0 if an empty string is passed, or -1 if there is no such occurrence.
            Overloaded Variants

                public int indexOf​(int ch)

                public int indexOf​(int ch, int fromIndex)

                public int indexOf​(String str)

                public int indexOf​(String str,int fromIndex)

            Real world application of indexOf()

            Ever wondered how your favorite search feature in Code Editors works?

            indexOf() can be used to implement this feature. How?

            The idea is to iterate over all of the lines and invoke indexOf() with the target string, and if there are multiple occurrences of the target string in the same line, start from where the last found substring ends.  

            public static int findOccurances(String[] paragraph, String target) {

                 

                 int index = 0, totalOccurances = 0;

                 

             for (int lineNumber = 0;lineNumber < paragraph.length; ++lineNumber)      

             { 

               String line = paragraph[lineNumber];

               while (true) {

                index = line.indexOf(target, index);

                if (index != -1) {

              System.out.println("Found at line number " + lineNumber + " at position " + index);

                totalOccurances++;

                index += target.length();

              } else {

                break;

               }

              }

             }

             return totalOccurances;

            }
            Try it yourself

            Write a function that uses indexOf() to find if a given character is a vowel or not.

            Input - any character; Output - true if a given character is vowel else false

            Don't forget to share your unique approach in the comments below.
            2. toCharArray()

            Used to form a new character array from this string. The newly allocated array's contents are initialized to contain the characters represented by this string, and its length is the length of this string.
            Syntax of toCharArray()

            public char[] toCharArray()
            Parameter(s)

            None
            Return Value

            char[] array is created in memory with content as characters of the string and its reference is returned
            Real world application of toCharArray()

            As we have discussed above, string objects are immutable.

            During heavy string manipulation operations, many new string objects are made and this can be memory inefficient. A good idea is to convert it to char Array first, then perform manipulation operations and then convert it back to a string object.

            Let's take an example to see if a given string is palindrome or not.

            String palindrome = "Dot saw I was Tod";

            int len = palindrome.length();

            char[] charArray = palindrome.toCharArray();

            for (int j = 0; j < len; j++) {

                if (charArray[j] != charArray[len - 1 - j]) {

                   System.out.println(“Not a palindrome”);

                }

            }

            System.out.println(“Valid palindrome”);
            Try it yourself

            Find all the indices of uppercase letters present in the string and convert them to their ASCII value.

            Example - Input - asBcDeE  Output - [2,4,6] modified string - as66c68e69

            Let us know your most optimal approach in the comments below
            3. charAt()

            The character at the designated index (follows 0 based indexing) is extracted from the string. It's useful for checking a certain index without looping over the whole string.
            Syntax of charAt()

            public char charAt​(int index)
            Parameter(s)

                Index: index of character in string to be retrieved

            Return Value

            char value from String at index passed as argument

                Throws

            IndexOutOfBoundsException - if the argument provided is negative or greater than the length of String.
            Real world application of charAt()

            Counting the frequency of a particular character - charAt() can be used to iterate the string and count frequency of a character.

            String str = "I am upskilling by learning by doing";

            int spaceCount = 0;

            for (int i = 0; i < str.length(); i++) { 

              if (str.charAt(i) == " ") {

                 spaceCount++;

              }

            }

            System.out.println(spaceCount); // 6
            Try it yourself

            Print the characters along with their frequency in the order of their occurrence.

            Example - Input - “learnByDoing”

            Output - [[l, 1], [e,1], [a,1],  [r, 1], [n, 2], [B, 1], [y,1], [d,1], [o, 1], [i,1], [g,1]]

            Let us know your most optimal approach in the comments below.
            4. concat()

            The passed string is appended to the end of the specified string. It's a great option for combining/merging strings.
            Syntax of concat()

            public String concat​(String str)
            Parameter(s)

            str: string to be appended at end of a given string
            Return Value

            A new String object with a passed string appended at the end of the given string.
            Real world application of concat()

            You must have filled many forms online and encountered fields like Address Line 1, Address Line 2.

            Do you think these are stored as it is in the database?

            You might be wrong if you think so. When form data is processed it is combined to form a single field like a full address.

               String addressLine1 = "4424  Black Oak Hollow Road ";

              String addressLine2 = "San Francisco ";

              String addressLine3 = "California 94108";

              String fullAddress =

              addressLine1.concat(addressLine2).concat(addressLine3);

              System.out.println(fullAddress); 

              // 4424  Black Oak Hollow Road San Francisco California 94108
            Try it yourself

            While entering credit/debit card details you must have encountered multiple fields to fill in entering the card number. How will you combine them and verify with the server that your card number is valid?

            Assume that server stores number in filed credit card number in the format 1234-567-1239

            Let us know your most optimal approach in the comments below.
            5. replace()

            Used for replacing characters and substrings in a string.
            Syntax of replace()

            public String replace​(char oldChar, char newChar)
            Parameter(s)

                oldChar: Character that needs to be replaced
                newChar: Character that will replace the oldChar

            Return Value

            A new String object containing a string created by replacing all instances of oldChar with newChar.
            Real world application of replace()

            If you are a programmer, you might have encountered a scenario in which you needed to modify the name of all instances of your variable. How would you put this feature into action?

            public static void replace(String[] paragraph, String oldChar, String newChar ) {

                 

             for (int lineNumber=0;lineNumber< paragraph.length; ++lineNumber)      

             { 

               String line = paragraph[lineNumber];

               line = line.replace(oldChar, newChar);

             }

            }
            Try it yourself

            Given an array of Strings. Remove all the whitespaces present in all the strings that are part of this array.

            Example - Input - [['hey this is '], ['a example of'], ['replace method ']];

            Output - 'heythisisaexampleofreplacemethod'

            Let us know your most optimal approach in the comments below.
            6. substring()

            Used to extract a portion of a string from a given string. It creates a new string object without altering the original string.
            Syntax of substring()

            public String substring​(int beginIndex, int endIndex)
            Parameter(s)

                beginIndex: Search begins from this index
                endIndex: Search end at endindex-1

            Return Value

            A new String object resulting from the part of the original string sliced out on the basis of begin and endIndex.

                Throws

            IndexOutOfBoundsException - if beginIndex is negative or larger than the length of this String object.

            Overloaded Variant

                public String substring​(int beginIndex)

            Real world application of substring()

            We can find out all the substrings of a given string using substring(). Though this is not an optimal approach, it will help you through the learning of the substring method's working.

            public void SubString(String str, int n)

            {

              for (int i = 0; i < n; i++)

                for (int j = i+1; j <= n; j++)

                  System.out.println(str.substring(i, j));

            }
            Try it yourself

            Find out if the given string is palindrome or not by using substring().

            Share your solution with fellow readers in the comments section below.
            7. split()

            Used to separate the specified string depending on the regular expression. The limit statement is used to limit the number of strings returned after separating.
            Syntax of split()

            public String[] split​(String regex, int limit)
            Parameter(s)

                regex:  Substring to be searched for
                limit: Search begins from this index

            Return Value

            An array containing each substring of this string is ended by a substring that matches the given expression or by the end of the string. The array's substrings are listed in the order in which they appear in this string.

                Throws

            PatternSyntaxException - if the regular expression's syntax is invalid
            Overloaded Variants

                public String[] split​(String regex)

            Real world application of split()

            We can count the number of words present in a paragraph by splitting the string by passing space as an argument.

            String str = "This string contains five words";

            String[] arrayOfWords = str.split(" ");

            System.out.println(arrayOfWords.length);
            Try it yourself

            Given a date string in DD/MM/YYYY format, extract and print the year given in the string.

            Example - Input  - 26/09/2000 Output - 2000
            8. compareTo()

            As Java developers, we often need to sort items that are grouped together in a list or in a class, and compareTo() is used to compare two Strings alphabetically.
            Syntax of compareTo()

            public int compareTo​(String anotherString)
            Parameter(s)

                anotherString: String to be compared

            Return Value

            0 if the argument string is equal to given string;

            Value < 0 if the given string is lexicographically less than the string argument;

            Value > 0 if the given string is lexicographically greater than the string argument.
            Real world application of compareTo()

            Comparison-based sorting algorithms are the most used sorting algorithms.

            In educational institutes mostly students are arranged based on increasing the order of their firstName. If the firstName of 2 students is the same then decide on the basis of increasing order of their lastName.

            class Student implements Comparable<Student> {  

              public String firstName;  

              public String lastName;

              public int age;

              public Student(String firstName) {  

                this.firstName = firstName;

                this.age = age;  

              }  

              public int compareTo(Student student) {  

                int comparison = firstName.compareTo(student.firstName);

                return comparison == 0 

                       ? lastName.compareTo(student.lastName) 

                       : comparison;

              }   

            }  

            public class SortStudents {  

              public static void main(String[] args) {  

                  List<Student> students=new ArrayList<Student>();  

                  students.add(new Student("Jame", 19));  

                  students.add(new Student("Saurav", 20));  

                  students.add(new Student("Jacky", 20)); 

                  

                Collections.sort(students);  

              }  

            }  
            Try it yourself

            Use compareTo() to find the length of a string.

            Hint: Closely examine what compareTo() returns and how this can help us to find the length of the string.

            Mention your approach in the comments section.
            9. strip()

            To eliminate all trailing and leading whitespaces from the specified string.
            Syntax of strip()

            public String strip()
            Parameter(s)

            None
            Return Value

            Returns a string whose value is this string, with all leading and trailing white space removed.
            Real world application od strip()

            When taking input from your presentation layer, you must ensure that trailing and leading whitespaces do not contaminate the actual string. This ensures the data is consistently stored in the database and processed in the backend.

            split() can be used to ensure that our input is not polluted.

             public static void login() {

                  // Get input from frontend    

                  String username = getUserNameFromUI(); // "  crio.do "

                  String password = getPasswordFromUI(); // " abc"

                  String cleanUsername = username.strip(); // "crio.do"

                  String cleanPassword = password.strip(); // "abc"

                  Account account = new Account(cleanUsername, cleanPassword); 

                  // save credentials to database

                  db.save(account);

            }
            Try it yourself

            What happens if we don't delete the whitespaces? Does it have an effect on our business operations, or is it just a way to keep things clean? Find out by taking any leading spaces in a string and comparing it to the original string with no leading spaces.

            Mention your observations in the comment section below.
            10. valueOf()

            Used to return string representation of the passed argument. valueOf() has a plethora of overloaded variants that aid in the conversion of almost any primitive form to string.
            Syntax of calueOf()

            public static String valueOf​(char[] data)
            Parameter(s)

                data :  Character Array to be converted to string

            Return Value

            Returns a new String object that contains data as the string representation of the passed argument
            Overloaded Variants

            public static String valueOf​(boolean b)

            public static String valueOf​(char c)

            public static String valueOf​(int i)

            public static String valueOf​(long l)

            public static String valueOf​(float f)

            public static String valueOf​(double d)

            public static String valueOf​(char[] data)

            public static String valueOf​(char[] data, int offset, int count)

            public static String valueOf​(Object obj)
            Real world application of valueOf()

            We can form a single String combining all the elements of char Array using valueOf()

            char array[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g'};

            System.out.println(String.valueOf(array)) ;// abcdefg 
            Try it yourself

            Use valueOf() to convert an object to its String representation. What did you observe? Find out the reason for this weird output and let us know in the comments below.
shortlist
            Java Method 
                
            Syntax
                
            Returns
                
            Usage

            indexOf()
                

            indexOf​(String str, int fromIndex)
                

            int
                

            For finding the index of the first occurrence of a character or a string in the given string. 

            toCharArray()
                

            toCharArray()
                

            char[]
                

            To form a new character array from this string

            charAt()
                

            charAt​(int index)
                

            char
                

            To get character at the specified index 

            concat()
                

            concat​(String str)
                

            String
                

            To append the passed string to the end of the given string. 

            replace()
                

            replace​(char oldChar, char newChar)
                

            String
                

            To replace all the occurrences of the given character/String from given String

            substring()
                

            substring​(int beginIndex, int endIndex)
                

            String
                

            To get a part of a string from the given string.

            split()
                

            split​(String regex,int limit)
                

            String[]
                

            For splitting the given string based on the given regular Expression.

            compareTo()     
                

            compareTo​(String anotherString)
                

            int
                

            To compare two Strings Lexicographically. 

            strip()
                

            strip()
                

            String
                

            To remove all trailing and leading whitespaces from the given string.

            valueOf()
                

            valueOf​(char[] data)
                

            String
                

            To return String representation of the passed argument.
            List of other useful string methods for further learning

                contains​(CharSequence s)
                isEmpty()
                join()
                repeat()
                startsWith() / endsWith()
                toLowerCase() / toUpperCase()
                indent()
~/Dropbox/rsc/Doks/Comp/lang/java/jdir14.tagged.txt **  #=HAS FUNCT/METHODS-LIST
--
~/Empire/Doks/Comp/lang/java/cheatsh-qref/java2.cheatsh.pdf
            Java Programming Guide - Quick Reference

            Java Programming Guide - Quick Reference
            Java Comments:

            Syntax for a standalone application in Java:
            class <classname>
            {
              public static void main(String args[])
              {
                statements;
                ————————;
                ————————;
              }
            }

            Delimiters
            //

            Use
            Used for commenting a single line

            /* ————— */

            Used for commenting a block of code

            /** —————*/

            Used for commenting a block of code.
            Used by the Javadoc tool for
            generating Java documentation.

            Primitive datatypes in Java:

            Steps to run the above application:
            1. Type the program in the DOS editor or notepad. Save the
            file with a .java extension.
            2. The file name should be the same as the class, which has the
            main method.
            3. To compile the program, using javac compiler, type the
            following on the command line:
            Syntax: javac <filename.java>
            Example: javac abc.java
            4. After compilation, run the program using the Java interpreter.
            Syntax: java <filaname> (without the .java extension)
            Example: java abc
            5. The program output will be displayed on the command line.

            DataType

            Size

            Default

            byte
            (Signed
            integer)

            8 bits

            0

            -128
            +127

            short
            (Signed
            integer)

            16 bits

            0

            -32,768
            +32,767

            int
            (Signed
            integer)

            32 bits

            0

            -2,147,483,648
            +2,147,483,647

            0

            -9, 223, 372,036,854,
            775,808,
            +9,223,372,036,
            854, 775, 807

            long
            (Signed
            Integer)
            64 bits

            Min Value
            Max Value

            3

            Java reserved words:
            abstract
            boolean
            Break
            Byte
            case
            try
            continue
            Catch
            char
            class

            default
            if
            package
            do
            implements private
            double
            import
            protected
            else
            instanceof public
            extends int
            return
            Const
            for
            new
            while
            goto
            synchronized
            final
            interface
            short
            finally
            long
            static
            float
            native

            this
            throw
            throws
            transient
            null
            switch
            super
            void
            volatile

            Java naming conventions:

            float
            (IEEE 754
            floating-point)

            32 bits

            0.0

            1.4E-45
            3.4028235E38

            double
            (IEEE 754
            floating-point)

            64 bits

            0.0

            4.9E-324
            1.7976931348623157E308

            char
            (Unicode
            character)
            boolean

            16 bits \u0000 \u0000
            \uFFFF
            1 bit

            false

            Variable Names: Can start with a letter, '$' (dollar symbol), or '_' (underscore);
            cannot start with a number; cannot be a reserved word.

            Variable Declaration:
            <datatype> <variable name>
            Example: int num1;

            Method Names: Verbs or verb phrases with first letter in
            lowercase, and the first letter of subsequent words
            capitalized; cannot be reserved words.
            Example: setColor()

            Variable Initialization:
            <datatype>
            <variable name> = value
            Example: double num2 = 3.1419;

            Class And Interface Names:
            Descriptive names that begin with a capital letter, by convention;
            cannot be a reserved word.

            Escape sequences:
            Literal
            \n
            \t
            \b
            \r

            Constant Names: They are in capitals.
            Example: Font.BOLD, Font.ITALIC

            2

            Represents
            New line
            Horizontal tab
            Backspace
            Carriage return

            4

            Java Programming Guide - Quick Reference

            \f
            \\
            \”
            \ddd
            \xdd
            \udddd

            Java Programming Guide - Quick Reference
            5. Switch statement
            Syntax:
            switch(variable)
            {
              case(value1):
                statements;
                break;
              case(value2):
                statements;
                break;
              default:
                statements;
                break;
            }

            Form feed
            Backslash
            Double quote
            Octal character
            Hexadecimal character
            Unicode character

            Arrays:
            An array which can be of any datatype,
            is created in two steps – array declaration and memory allocation.

            Array declaration
            <datatype> [] <arr ```````````ayname>;

            Examples int[] myarray1;
            double[] myarray2;
            Memory Allocation
            The new keyword allocates memory for an array.
            Syntax
            <arrayname> = new <array type> [<number of elements>];
            Examples
            myarray1 = new int[10];
            Myarray2 = new double[15];

            Class Declaration: A class must be declared using the
            keyword class followed by the class name.
            Syntax
            class <classname>
            {
            ———— Body of the class
            A typical class declaration is as follows:
            <modifier> class <classname> extends
            <superclass name> implements <interface name>
            {
            —————Member variable declarations;
            —————Method declarations and definitions
            }

            Multi-dimensional arrays:
            Syntax:
            <datatype> <arrayname> [] [] = new <datatype>
            [number of rows][number of columns];
            Example:
            int mdarray[][] = new int[4][5];

            © 1999, Pinnacle Software Solutions Inc.

            5

            Java Programming Guide - Quick Reference

            © 1999, Pinnacle Software Solutions Inc.

            Java Programming Guide - Quick Reference

            Flow Control:

            Member variable declarations:

            1. If……..else statements
            Syntax:
            if(condition)
            {
              statements;
            }
            else
            {
              statements;
            }

            <access specifier> <static/final/transient/
            volatile> <datatype> <variable name>
            Example public final int num1;
            Method declarations:
            <access specifier> <static/final> <return type>
            <method name> <arguments list>
            {
            Method body;
            }
            Example public static void main(String args[])
            {
            }

            2. For loop
            Syntax:
            for(initialization; condition; increment)
            {
              statements;
            }

            Interface declaration: Create an interface. Save the file
            with a.java extension, and with the same name as the
            interface. Interface methods do not have any implementation
            and are abstract by default.

            3. While loop
            Syntax:
            while(condition)
            {
              statements;
            }

            Syntax
            interface <interface name>
            {
              void abc();
              void xyz();
            }

            4. Do….While loop
            Syntax:
            do
            {
              statements;
            }
            while(condition);

            7

            Using an interface:
            A class implements an interface with the implements keyword.

            6

            © 1999, Pinnacle Software Solutions Inc.

            8

            Java Programming Guide - Quick Reference

            Java Programming Guide - Quick Reference

            Syntax

            class <classname> extends <superclass name>
            implements <interface name>
            {
              class body;
              —————————;
            }

            final

            Class

            Cannot be subclassed.

            Method

            Cannot be overridden.

            Variable

            Value cannot be changed
            (Constant)

            native

            Method

            Implemented in a language
            other than Java like C,C++,
            assembly etc. Methods do not
            have bodies.

            static

            Method

            Class method. It cannot refer to
            nonstatic variables and methods
            of the class. Static methods are
            implicitly final and invoked
            through the class name.

            Variable

            Class variable. It has only one
            copy regardless of how many
            instances are created. Accessed
            only through the class name.

            Method

            A class which has a synchronized
            method automatically acts as a
            lock. Only one synchronized
            method can run for each class.

            Creating A Package:
            1.
            2.
            3.
            4.
            5.
            6.
            7.

            Identify the hierarchy in which the .class files have to
            be organized.
            Create a directory corresponding to every package, with
            names similar to the packages.
            Include the package statement as the first statement in
            the program.
            Declare the various classes.
            Save the file with a .java extension.
            Compile the program which will create a .class file in
            the same directory.
            Execute the .class file.

            Packages and Access Protection:
            Accessed

            Public

            Protected

            Package

            Private

            From the
            same class ?

            Yes

            Yes

            Yes

            Yes

            From a non
            subclass in
            the same
            package ?

            Yes

            Yes

            Yes

            No

            synchronized

            9

            © 1999, Pinnacle Software Solutions Inc.

            Java Programming Guide - Quick Reference

            © 1999, Pinnacle Software Solutions Inc.

            11

            Java Programming Guide - Quick Reference

            List of exceptions in Java(part of java.lang package):

            From a non subclass outside the package?
            From a subclass in the same package?
            From a subclass outside the package ?

            Essential exception classes include Yes

            No

            Yes

            Yes

            Yes

            Yes

            No

            Yes

            No

            No

            Exception

            Description

            ArithmeticException

            Caused by exceptional
            conditions like divide by
            zero

            ArrayIndexOfBounds
            Exception

            Thrown when an array is
            accessed beyond its bounds

            ArrayStoreException

            Thrown when an incompatible
            type is stored in an array

            ClassCastException

            Thrown when there is an invalid
            cast

            IllegalArgument
            Exception

            Thrown when an inappropriate
            argument is passed to a method

            IllegalMonitorState
            Exception

            Illegal monitor operations such as
            waiting on an unlocked thread

            No

            No

            Attribute modifiers in Java:
            Modifier
            abstract

            Acts on
            Class

            Description

            Contains abstract methods.
            Cannot be instantiated.

            Interface

            All interfaces are implicitly abstract.
            The modifier is optional.

            IllegalThreadState
            Exception

            Thrown when a requested
            operation is incompatible with
            the current thread state.

            Method

            Method without a body.
            Signature is followed by a
            semicolon. The class must also
            be abstract.

            IndexOutOfBounds
            Exception

            Thrown to indicate that an index
            is out of range.

            NegativeArraySize
            Exception

            Thrown when an array is created
            with negative size.

            © 1999, Pinnacle Software Solutions Inc.

            10

            © 1999, Pinnacle Software Solutions Inc.

            12

            Java Programming Guide - Quick Reference

            Java Programming Guide - Quick Reference

            NullPointerException

            Invalid use of a null reference.

            setPriority()

            Changes the priority of the thread

            NumberFormatException

            Invalid conversion of a string to a
            number.

            currentThread()

            Returns a reference to the
            currently executing thread

            SecurityException

            Thrown when security is violated.

            activeCount()

            Returns the number of active
            threads in a thread group

            ClassNotFound
            Exception

            Thrown when a class is not found.

            CloneNotSupported
            Exception

            Attempt to clone an object that
            does not implement the Cloneable
            interface.

            IllegalAccess
            Exception

            Thrown when a method does not
            have access to a class.

            Exception Handling Syntax:
            try
            {
              //code to be tried for errors
            }
            catch(ExceptionType1 obj1)
            {
              Instantiation
              Exception

              Thrown when an attempt is made
              to instantiate an abstract class or
              an interface.

              //Exception handler for ExceptionType1
            }
            catch(ExceptionType2 obj2)
            {

              InterruptedException

              Thrown when a second thread
              interrupts a waiting, sleeping, or
              paused thread.

              //Exception handler for ExceptionType2
            }
            finally
            {
              //code to be executed before try block ends.
              This executes whether or not an //
              exception occurs in the try block.
            }

            The java.lang.Thread class

            I/O classes in Java (part of the java.io package):

            The Thread class creates individual threads. To create a thread
            either (i) extend the Thread class or (ii) implement the Runnable
            interface. In both cases, the run() method defines operations

            I/O class name

            Description

            BufferedInputStream

            Provides the ability to buffer the

            © 1999, Pinnacle Software Solutions Inc.

            13

            Java Programming Guide - Quick Reference

            © 1999, Pinnacle Software Solutions Inc.

            15

            Java Programming Guide - Quick Reference

            performed by the thread.
            Methods of the Thread class:
            BufferedOutputStream
            Methods

            Description

            run()

            Must be overridden by
            Runnable object; contains code
            that the thread should perform
            Causes the run method to
            execute and start the thread

            start()

            sleep()

            BufferedReader
            BufferedWriter

            Causes the currently executing
            thread to wait for a specified time
            before allowing other threads to
            execute

            interrupt()

            Interrupts the current thread

            Yield()

            Yields the CPU to other runnable
            threads

            DataInputStream

            DataOutputStream

            File

            getName()

            Returns the current thread's name

            getPriority()

            Returns the thread's priority as an
            integer

            isAlive()

            Tests if the thread is alive; returns
            a Boolean value

            join()

            Waits for specified number of
            milliseconds for a thread to die

            setName()

            Changes the name of the thread

            FileInputStream
            FileOutputStream
            ObjectInputStream

            ObjectOutputStream

            PrintStream

            RandomAccessFile
            © 1999, Pinnacle Software Solutions Inc.

            14

            input. Supports mark() and
            reset() methods.
            ___pickout
            Provides the ability to write bytes
            to the underlying output stream
            without making a call to the
            underlying system.
            Reads text from a character
            input stream
            Writes text to character
            output stream
            Allows an application to read
            primitive datatypes from an
            underlying input stream
            Allows an application to write
            primitive datatypes to an output
            stream
            Represents disk files and
            directories
            Reads bytes from a file in a file
            system
            Writes bytes to a file
            Reads bytes i.e. deserializes
            objects using the
            readObject() method
            Writes bytes i.e. serializes
            objects using the
            writeObject()method
            Provides the ability to print
            different data values in an
            efficient manner
            Supports reading and writing to
            a random access file

            © 1999, Pinnacle Software Solutions Inc.

            16

            Java Programming Guide - Quick Reference

            Java Programming Guide - Quick Reference

            StringReader

            Character stream that reads
            from a string

            StringWriter

            Character stream that writes to
            a StringBuffer that is later
            converted to a String

            The java.io.InputStream class: The InputStream class is
            at the top of the input stream hierarchy. This is an abstract class
            which cannot be instantiated. Hence, subclasses like the
            DataInputStream class are used for input purposes.
            Methods of the InputStream class:
            Method
            available()

            Description
            Returns the number of bytes that can be
            read

            close()

            Closes the input stream and releases
            associated system resources

            mark()

            Marks the current position in the input
            stream

            mark
            Supported()

            read()

            Returns the name of the file and directory
            denoted by the path name
            isDirectory() Tests whether the file represented by the
            pathname is a directory
            lastModified() Returns the time when the file was last
            modified
            l length()
            Returns the length of the file represented by
            the pathname
            listFiles()
            Returns an array of files in the directory
            represented by the pathname
            setReadOnly() Marks the file or directory so that only
            read operations can be performed
            renameTo()
            Renames the file represented by the
            pathname
            delete()
            Deletes the file or directory represented by
            the pathname
            canRead()
            Checks whether the application can read
            from the specified file
            canWrite()
            Checks whether an application can write to
            a specified file
            getName()

            Creating applets:
            1.

            Returns true if mark() and reset() methods
            are supported by the input stream

            2.
            3.

            Abstract method which reads the next byte
            of data from the input stream

            4.

            read(byte b[]) Reads bytes from the input stream and
            stores them in the buffer array

            © 1999, Pinnacle Software Solutions Inc.

            17

            Java Programming Guide - Quick Reference
            skip()

            The java.io.OutputStream class: The OutputStream class
            which is at the top of the output stream hierarchy, is also an
            abstract class, which cannot be instantiated. Hence, subclasses
            like DataOutputStream and PrintStream are used for
            output purposes.
            Methods of the OutputStream class:
            Description

            close()

            Closes the output stream, and releases
            associated system resources

            write(int b)

            Writes a byte to the output stream

            write(byte b[])

            Writes bytes from the byte array to the
            output stream

            © 1999, Pinnacle Software Solutions Inc.

            19

            Java Programming Guide - Quick Reference

            Skips a specified number of bytes from the
            input stream

            Method

            Write the source code and save it with a .java
            extension
            Compile the program
            Create an HTML file and embed the .class file with the
            <applet> tag into it.
            To execute the applet, open the HTML file in the browser
            or use the appletviewer utility, whch is part of the Java
            Development Kit.

            The <applet> tag: Code, width, and height are
            mandatory attributes of the <applet> tag. Optional attributes
            include codebase, alt,name, align, vspace, and
            hspace. The code attribute takes the name of the class file as
            its value.
            Syntax:
            <applet code = “abc.class” height=300
            width=300>
            value= value1 >
            <param name=parameterName1
            value= value2 >
            <param name=parameterName2
            </applet>
            Using the Appletviewer: Appletviewer.exe is an
            application found in the BIN folder as part of the JDK. Once an
            HTML file containing the class file is created (eg. abc.html),
            type in the command line:
            Appletviewer
            abc.html
            java.applet.Applet class:

            Methods of the java.applet.Applet class:

            flush()

            Flushes the ouput stream, and writes
            buffered output bytes

            ___Pickout
            java.io.File class: The File class abstracts information
            about files and directories.

            Method

            Description

            init()

            Invoked by the browser or the
            applet viewer to inform that the
            applet has been loaded
            Invoked by the browser or the
            applet viewer to inform that
            applet execution has started
            Invoked by the browser or the
            applet viewer to inform that
            applet execution has stopped

            start()

            Methods of the File class:
            stop()
            Method

            Description

            exists()

            Checks whether a specified file exists

            © 1999, Pinnacle Software Solutions Inc.

            18

            © 1999, Pinnacle Software Solutions Inc.

            20

            Java Programming Guide - Quick Reference

            destroy()

            getAppletContext()
            getImage()

            getDocumentBase()

            getCodeBase()
            getParameter()
            showStatus()

            Java Programming Guide - Quick Reference

            Invoked by the browser or the
            appletviewer to inform that the
            applet has been reclaimed by the
            Garbage Collector
            Determines the applet context or
            the environment in which it runs
            Returns an Image object that can
            be drawn on the applet window

            setBackground()
            setForeground()
            SetSize()
            setLocation()
            setBounds()

            Returns the URL of the HTML page
            that loads the applet
            Returns the URL of the applet's
            class file
            Returns the value of a named
            applet parameter as a string
            Displays the argument string on
            the applet's status

            addFocusListener()

            addMouseListener()

            addKeyListener()

            getGraphics()
            java.awt.Graphics class: The Graphics class is an
            abstract class that contains all the essential drawing methods
            like drawLine(), drawOval(), drawRect() and so on. A
            Graphics reference is passed as an argument to the paint()
            method that belongs to the java.awt.Component class.
            Methods of the Graphics class:
            Method
            drawLine()

            Description
            Draws a line between (x1,y1) and
            (x2,y2) passed as parameters
            drawRect()/fillRect() Draws a rectangle of specified
            width and height at a specified
            © 1999, Pinnacle Software Solutions Inc.

            21

            Java Programming Guide - Quick Reference

            update(Graphics g)

            Sets the background color of the
            component
            Sets the foreground color of the
            component
            Resizes the component
            Moves the component to a new
            location
            Moves the component to specified
            location and resizes it to the
            specified size
            Registers a FocusListener
            object to receive focus events
            from the component
            Registers a MouseListener
            object to receive mouse events
            from the component
            Registers a KeyListener object
            to receive key events from the
            component
            Returns the graphics context of
            this component
            Updates the component. Calls the
            paint() method to redraw the
            component.

            AWT Components: Many AWT classes like Button,
            Checkbox, Label, TextField etc. are subclasses of the
            java.awt.Component class. Containers like Frame and
            Panel are also subclasses of components, but can additionally
            hold other components.

            © 1999, Pinnacle Software Solutions Inc.

            23

            Java Programming Guide - Quick Reference
            Label:

            location
            drawOval()/fillOval() Draws a circle or an ellipse that
            fills within a rectangle of specified
            coordinates
            drawString()
            Draws the text given as a
            specified string
            drawImage()
            Draws the specified image onto
            the screen
            drawPolygon()
            /fillPolygon()
            Draws a closed polygon defined
            by arrays of x and y coordinates
            setColor()

            setFont()

            Sets the specified color of the
            graphics context

            Constructors
            ·
            Label() - Creates an empty label
            ·
            Label(String s) - Creates a label with left
            justified text string
            ·
            Label (String s, int alignment) - Creates
            a label with the specified text and specified aligment.
            Possible values for alignment could be Label.RIGHT,
            Label.LEFT, or Label.CENTER
            Methods of the Label class:
            Method

            Description

            getAlignment()

            Returns an integer representing
            the current alignment of the Label.
            0 for left, 1 for center, and 2 for
            right alignment.
            Sets the alignment of the Label to
            the specified one
            Returns the label's text as a
            string
            Sets the label's text with the
            specified string

            Sets the specified font of the
            graphics context
            setAlignment()

            java.awt.Component class: The Component class is an
            abstract class that is a superclass of all AWT components. A
            component has a graphical representation that a user can
            interact with. For instance, Button, Checkbox,
            TextField, and TextArea.

            getText()

            Methods of the Component class:

            Button:

            Method

            Description

            Constructors

            paint(Graphics g)

            Paints the component. The
            Graphics context g is used for
            painting.

            Button() - Creates a button without a label
            Button(String s) - Creates a button with the specified
            label

            © 1999, Pinnacle Software Solutions Inc.

            setText()

            22

            © 1999, Pinnacle Software Solutions Inc.

            24

            Java Programming Guide - Quick Reference

            Java Programming Guide - Quick Reference

            Methods of the Button class:
            Method
            addActionListener()

            getActionCommand()

            Choice() - Creates a new choice menu, and presents a popup menu of choices.

            Description
            Registers an ActionListener
            object to receive action events
            from the button

            Methods of the Choice class:

            Returns the command name of
            the action event fired by the
            button. Returns the button label
            if the command name is null.

            GetLabel()

            Returns the button's label

            SetLabel()

            Sets the button's label to the
            specified string

            Method

            Description

            add()

            Adds an item to a choice menu

            addItem()

            Adds an item to a choice menu

            addItemListener()

            Registers an ItemListener object
            to receive item events from the
            Choice object

            getItem()

            Returns the item at the specified
            index as a string

            getItemCount()

            Returns the number of items in the
            choice menu

            getSelectedIndex()

            Returns the index number of the
            currently selected item

            getSelectedItem()

            Returns the currently selected item
            as a string

            insert()

            Inserts a specified item at a specified
            index position

            remove()

            Removes an item from the choice
            menu at the specified index

            Checkbox:
            Constructors
            ·
            ·

            Checkbox() - Creates a checkbox without any label
            Checkbox(String s) - Creates a checkbox with a
            specified label
            Checkbox(String s, boolean state) - Creates
            a checkbox with a specified label, and sets the specified
            state
            Checkbox(String s, boolean state,
            CheckboxGroup cbg) - Creates a checkbox with a
            specified label and specified state, belonging to a
            specified checkbox group

            ·

            ·

            © 1999, Pinnacle Software Solutions Inc.

            25

            Java Programming Guide - Quick Reference

            © 1999, Pinnacle Software Solutions Inc.

            27

            Java Programming Guide - Quick Reference

            Methods of the Checkbox class:

            TextField:

            Method

            Description

            Constructors

            addItemListener()

            Registers an ItemListener
            object to receive item events from
            the checkbox

            getCheckboxGroup()

            Returns the checkbox's group

            getLabel()

            Returns the checkbox's label

            · TextField() - Creates a new text field
            · TextField(int cols) - Creates a text field with the
            specified number of columns
            · TextField(String s) – Creates a text field initialized with
            a specified string
            · TextField(String s, int cols) - Creates a text field
            initialized with a specified string that is wide enough to hold a
            specified number of columns

            getState()

            Determines if the checkbox
            is checked or unchecked

            setLabel()

            Sets the label of the check box
            with the specified string

            setState()

            Sets the specified checkbox state

            Methods of the TextField class:
            Method

            Description

            isEditable()

            Returns a boolean value indicating
            whether or not a text field is
            editable

            setEditable()

            Passing True enables text to be
            edited, while False disables
            editing. The default is True.

            addActionListener()

            Registers an ActionListener
            object to receive action events
            from a text field

            getEchoChar()

            Returns the character used for
            echoing

            getColumns()

            Returns the number of columns
            in a text field

            Creating Radio Buttons (Mutually exclusive checkboxes):
            ·
            ·

            First create a CheckboxGroup instance –
            CheckboxGroup cbg = new CheckboxGroup();
            While creating the checkboxes, pass the checkbox group
            object as an argument to the constructor - Checkbox
            (String s, boolean state, CheckboxGroup
            cbg)

            Choice:
            Constructors
            © 1999, Pinnacle Software Solutions Inc.

            26

            © 1999, Pinnacle Software Solutions Inc.

            28

            Java Programming Guide - Quick Reference
            setEchoChar()

            Sets the echo character for a text
            field
            Returns the text contained in the
            text field
            Sets the text for a text field

            Java Programming Guide - Quick Reference
            Methods of the List class:
            Method

            Description

            add()

            Adds an item to the end of the
            scrolling list

            addItemListener()

            Registers an ItemListener
            object to receive Item events from
            a scrolling list

            · TextArea() - Creates a new text area
            · TextArea(int rows, int cols) - Creates a new
            empty text area with specified rows and columns
            · TextArea(String s) – Creates a new text area with the
            specified string
            · TextArea(String s, int rows, int cols) - Creates
            a new text area with the specified string and specified rows
            and columns.
            · TextArea(String s, int rows, int cols, int
            scrollbars) - Creates a text area with the specified text,
            and rows, columns, and scrollbar visibility as specified.

            deselect()

            Deselects the item at the specified
            index position

            getItem()

            Returns the item at the specified
            index position

            getItemCount()

            Returns the number of items in the
            list

            getSelectedIndex()

            Returns the index position of the
            selected item

            Methods of the TextArea class:

            getSelectedItem()

            Returns the selected item on the
            scrolling list

            isMultipleMode()

            Determines if the scrolling
            list allows multiple selection

            remove()

            Removes a list item from a
            specified position

            setMultipleMode()

            Sets a flag to enable or disable
            multiple selection

            getText()
            setText()

            TextArea:
            Constructors

            Method

            Description

            getText()

            Returns the text contained in the
            text area as a string

            setText()

            Sets the specified text in the text
            area

            getRows()

            Returns the number of rows in the

            © 1999, Pinnacle Software Solutions Inc.

            © 1999, Pinnacle Software Solutions Inc.

            Java Programming Guide - Quick Reference

            Java Programming Guide - Quick Reference
            Scrollbar:
            Constructors

            getColumns()

            text area
            Returns the number of columns in
            the text area

            selectAll()

            Selects all the text in the text area

            setEditable()

            A True value passed as an
            argument enables editing of the
            text area, while False disables
            editing. It is True by default.

            · Scrollbar() - Creates a new vertical scroll bar
            · Scrollbar(int orientation) - Creates a new scroll
            bar with a particular orientation, which is specified as
            Scrollbar.HORIZONTAL or Scrollbar.VERTICAL
            · Scrollbar(int orientation, int value,
            int visible, int minimum, int maximum)- Creates
            a new scroll bar with the specified orientation, initial value,
            thumb size, minimum and maximum values
            Methods of the Scrollbar class:

            List:

            Method

            Description

            Constructors

            addAdjustmentListener()

            Registers an
            adjustmentListener object
            to receive adjustment
            events from a scroll bar
            Returns the block
            increment of a scrollbar
            as an integer.
            Returns the maximum
            value of a scrollbar as an
            integer
            Returns the minimum
            value of a scrollbar as an
            integer
            Returns the orientation of
            a scrollbar as an integer
            Returns the current value
            of a scrollbar as an integer

            · List() - Creates a new scrolling list
            · List(int rows) - Creates a new scrolling list with a
            specified number of visible lines
            · List(int rows, boolean multiple) - Creates a
            scrolling list to display a specified number of rows. A True
            value for Multiple allows multiple selection, while a False
            value allows only one item to be selected.

            getBlockIncrement()

            getMaximum()

            getMinimum()

            getOrientation()
            getValue()

            © 1999, Pinnacle Software Solutions Inc.

            © 1999, Pinnacle Software Solutions Inc.

            Java Programming Guide - Quick Reference

            setOrientation()
            setValue()
            setMinimum()
            setMaximum()

            Java Programming Guide - Quick Reference

            Sets the orientation of a scrollbar
            Sets the current value of a
            scrollbar
            Sets the minimum value of a
            scrollbar
            Sets the maximum value of a
            scrollbar

            Interface method

            Description

            actionPerformed()

            Invoked whenever an ActionEvent
            object is generated (button is
            clicked)

            Frame:

            TextListener interface: Implemented by a class to handle
            text events. Whenever the text value of a component changes,
            an interface method called textValueChanged is invoked,
            which must be overridden in the implementing class.

            Constructors

            Interface method

            Description

            · Frame() - Creates a new frame without any title
            · Frame(String s) - Creates a new frame with the
            specified title

            textValueChanged()

            Invoked whenever a Text
            Event object is generated (text
            value changes)

            Menus:
            AdjustmentListener interface: Implemented by a class that
            handles adjustment events. The method
            adjustmentValueChanged(), overridden by the
            implementing class is invoked everytime an AdjustmentEvent
            object occurs (when a scrollbar is adjusted).

            · Can be added only to a frame
            · A MenuBar instance is first created as:
            MenuBar mb = new MenuBar();
            · The MenuBar instance is added to a frame using the
            setMenuBar() method of the Frame class as follows:
            setMenuBar(mb);
            · Individual menus are created (instances of the Menu class)
            and added to the menu bar with the add() method

            Interface method
            adjustmentValueChanged()

            Dialog: Direct subclass of java.awt.Window, which accepts
            user input.

            Description
            Invoked whenever an
            AdjustmentEvent object is
            generated (when a scrollbar
            thumb is adjusted)

            ItemListener interface: Implemented to handle state change
            events. The method itemStateChanged()must be overridden
            by the implementing class.
            © 1999, Pinnacle Software Solutions Inc.

            33

            Java Programming Guide - Quick Reference
            Constructors
            · Dialog(Frame parent, boolean modal) – Creates a
            new initially invisible Dialog attached to the frame object
            parent. The second argument specifies whether the dialog
            box is Modal or Non-modal.
            · Dialog (Frame parent, String s, boolean modal)
            – Same as the above. The second argument specifies the title
            of the dialog box.

            © 1999, Pinnacle Software Solutions Inc.

            Java Programming Guide - Quick Reference
            Method
            Description
            itemStateChanged() Invoked whenever an ItemEvent
            object is generated (a checkbox is
            checked, an item is selected from a
            choice menu, or an item is selected
            from a list)

            FileDialog: Direct subclass of Dialog, which displays a dialog
            window for file selection.

            FocusListener interface: Implemented to receive
            notifications whenever a component gains or loses focus. The
            two methods to be overridden are focusGained() and
            focusLost(). The corresponding adapter class is
            FocusAdapter.

            Constructors

            Method

            Description

            · FileDialog(Frame f, String s) - Creates a new
            dialog for loading files(file open dialog) attached to the frame
            with the specified title
            · FileDialog(Frame f, String s, int i) - Creates a
            file dialog box with the specified title. The third argument
            specifies whether the dialog is for loading a file or saving a file.
            The value of i can be either FileDialog.LOAD or
            FileDialog.SAVE

            focusGained()

            Invoked whenever a component
            gains keyboard focus
            Invoked whenever a component
            loses keyboard focus

            AWT Event Listener interfaces: For every AWT event class
            there is a corresponding event-listener interface, which is a part
            of the java.awt.event package and provides the eventhandling methods.
            ActionListener interface: Implemented by a class that
            handles an action event. The method actionPerformed()
            must be overridden by the implementing class.

            © 1999, Pinnacle Software Solutions Inc.

            35

            focusLost()

            KeyListener interface: Implemented to handle key events.
            Each of the three methods – keyPressed(),
            keyReleased(), keyTyped() – receives a KeyEvent
            object when a key event is generated.
            Method

            Description

            KeyPressed()

            Invoked whenever a key is
            pressed

            keyReleased()

            Invoked whenever a key is
            released

            © 1999, Pinnacle Software Solutions Inc.

            36

            Java Programming Guide - Quick Reference
            keyTyped()

            Java Programming Guide - Quick Reference

            Invoked whenever a key is typed

            MouseListener interface: Implemented by a class handling
            mouse events. It comprises of five methods invoked when a
            MouseEvent object is generated. Its corresponding adapter
            class is the MouseAdapter class.
            Method

            Description

            mouseClicked()

            Invoked when mouse is clicked
            on a component

            mouseEntered()

            Invoked when mouse enters a
            component

            mouseExited()

            Invoked when mouse exits a
            component

            mousePressed()

            Invoked when mouse button is
            pressed on a component

            mouseReleased()

            Invoked when mouse button is
            released on a component

            Invoked when the window is no
            longer the active window i.e. the
            window can no longer receive
            keyboard events

            windowIconified()

            Invoked when a normal window is
            minimized

            windowDeiconified()

            Invoked when a minimized
            window is changed to normal
            state

            java.sql.Driver interface:
            class.

            Implemented by every driver

            Methods of the Driver interface:

            MouseMotionListener interface: Implemented by a class
            for receiving mouse-motion events. Consists of two methods –
            mouseDragged() and mouseMoved(), which is invoked
            when a MouseEvent object is generated.
            MouseMotionAdapter is its corresponding adapter class.

            © 1999, Pinnacle Software Solutions Inc.

            windowDeactivated()

            37

            Java Programming Guide - Quick Reference

            Method

            Description

            acceptsURL()

            Returns a Boolean value indicating
            whether the driver can open a
            connection to the specified URL

            connect()

            Tries to make a database connection
            to the specified URL

            getMajorVersion()

            Returns the driver's major version
            number

            getMinorVersion()

            Returns the driver's minor version
            number

            © 1999, Pinnacle Software Solutions Inc.

            39

            Java Programming Guide - Quick Reference
            jdbcCompliant()
            JDBC compliant driver

            Tests whether the driver is a genuine

            Method

            Description

            mouseDragged()

            Invoked when the mouse is pressed on
            a component and dragged

            java.sql.Connection interface: Represents a session with a
            specific database. SQL statements are executed within a session
            and the results are returned.

            mouseMoved()

            Invoked when mouse is moved over
            a component

            Methods of the Connection interface:

            WindowListener interface: Implemented by a class to
            receive window events. It consists of seven different methods to
            handle the different kinds of window events, which are invoked
            when a WindowEvent object is generated. Its corresponding
            adapter class is the WindowAdapter class.
            Method

            Description

            windowOpened()

            Invoked when the window is
            made visible for the first time

            windowClosing()

            Invoked when the user attempts
            to close the window from the
            Windows system menu

            windowClosed()

            Invoked when the window has
            been closed as a result of calling
            the dispose() method

            windowActivated()

            Invoked when the window is
            made active i.e. the window can
            receive keyboard events

            © 1999, Pinnacle Software Solutions Inc.

            39

            Method

            Description

            Close()

            Immediately releases the database
            and JDBC resources

            commit()

            Makes all changes since the last
            commit/rollback permanent, and
            releases the database locks held by
            the connection

            createStatement()

            Creates and returns a Statement
            object. It is used for sending SQL
            statements to be executed on the
            database

            getMetaData()

            Returns a DatabaseMetaData
            object that represents metadata
            about the database

            isReadOnly()

            Checks whether the connection is a
            read-only connection

            prepareCall()

            Creates and returns a
            Callable Statement object,

            © 1999, Pinnacle Software Solutions Inc.

            4

            Java Programming Guide - Quick Reference
            prepareCall()

            prepareStatement()

            rollback()

            setAutoCommit()

            Java Programming Guide - Quick Reference

            Creates and returns a
            CallableStatement object
            (used for calling database stored
            procedures)
            Creates and returns a
            PreparedStatement
            object (used for sending
            precompiled SQL statements to
            the database)
            Discards all the changes made
            since the last commit/rollback
            and releases database locks held
            by the connection
            Enables or disables the auto
            commit feature. It is disabled by
            default

            java.sql.DriverManager class: Responsible for managing a
            set of JDBC drivers. It attempts to locate and load the JDBC
            driver specified by the getConnection() method.
            Methods of the DriverManager class:
            Method

            Description

            getConnection()

            Attempts to establish a database
            connection with the specified
            database URL, and returns a
            Connection object

            getLoginTimeout()

            Returns the maximum number of
            seconds a driver can wait when
            attempting to connect to the
            database

            © 1999, Pinnacle Software Solutions Inc.

            © 1999, Pinnacle Software Solutions Inc.

            Java Programming Guide - Quick Reference

            Java Programming Guide - Quick Reference

            registerDriver()

            Registers the specified driver with
            the DriverManager

            setLoginTimeout()

            Sets the maximum number of
            seconds a driver can wait when
            attempting to connect to the
            database

            getDrivers()

            Returns an enumeration of all the
            drivers installed on the system

            getDriver()

            Returns a Driver object that
            supports connection through a
            specified URL

            © 1999, Pinnacle Software Solutions Inc.

            © 1999, Pinnacle Software Solutions Inc.

            
~/Empire/Doks/Comp/lang/java/cheatsh-qref/java.cheatsh.pdf
            THE JAVA LANGUAGE CHEAT SHEET

            IF STATEMENTS:

            CLASS/OBJECT TYPES:

            Primitive Types:

            if( boolean_value ) { STATEMENTS }
            else if( bool )
            { STATEMENTS }
            else if( ..etc )
            { STATEMENTS }
            else
            { STATEMENTS }
            //curly brackets optional if one line

            INSTANTIATION:
            public class Ball {//only 1 public per file
            //STATIC FIELDS/METHODS
            private static int numBalls = 0;
            public static int getNumBalls() {
            return numBalls;
            }
            public static final int BALLRADIUS = 5;

            INTEGER: byte(8bit),short(16bit),int(32bit),
            long(64bit),DECIM:float(32bit),double(64bit)
            ,OTHER: boolean(1bit), char (Unicode)
            HEX:0x1AF,BINARY:0b00101,LONG:8888888888888L
            CHAR EXAMPLES: 'a','\n','\t','\'','\\','\”'

            Primitive Operators
            Assignment Operator: = (ex: int a=5,b=3; )
            Binary Operators (two arguments): + - * / %
            Unary Operators: + - ++ -Boolean Not Operator (Unary): !
            Boolean Binary: == != > >= < <=
            Boolean Binary Only: && ||
            Bitwise Operators: ~ & ^ | << >> >>>
            Ternary Operator: bool?valtrue:valfalse;

            Casting, Conversion
            int x = (int)5.5; //works for numeric types
            int x = Integer.parseInt(“123”);
            float y = Float.parseFloat(“1.5”);
            int x = Integer.parseInt(“7A”,16); //fromHex
            String hex = Integer.toString(99,16);//toHex
            //Previous lines work w/ binary, other bases

            java.util.Scanner, input, output
            Scanner sc = new Scanner(System.in);
            int i = sc.nextInt(); //stops at whitespace
            String line = sc.nextLine(); //whole line
            System.out.println(“bla”); //stdout
            System.err.print(“bla”); //stderr,no newline

            java.lang.Number types
            Integer x = 5; double y = x.doubleValue();
            double y = (double)x.intValue();
            //Many other methods for Long, Double, etc

            java.lang.String Methods
            //Operator +, e.g. “fat”+”cat” -> “fatcat”
            boolean equals(String other);
            int length();
            char charAt(int i);
            String substring(int i, int j); //j not incl
            boolean contains(String sub);
            boolean startsWith(String pre);
            boolean endsWith(String post);
            int indexOf(String p); //-1 if not found
            int indexOf(String p, int i); //start at i
            int compareTo(String t);
            //“a”.compareTo(“b”) -> -1
            String replaceAll(String str, String find);
            String[] split(String delim);

            StringBuffer, StringBuilder
            StringBuffer is synchronized StringBuilder
            (Use StringBuilder unless multithreaded)
            Use the .apend( xyz ) methods to concat
            toString() converts back to String

            java.lang.Math
            Math.abs(NUM),Math.ceil(NUM),Math.floor(NUM)
            ,Math.log(NUM),Math.max(A,B),Math.min(C,D),
            Math.pow(A,B),Math.round(A),Math.random()

            LOOPS:
            while( bool )
            { STATEMENTS }
            for(INIT;BOOL;UPDATE) { STATEMENTS }
            //1INIT 2BOOL 3STATEMENTS 4UPDATE 5->Step2
            do{ STATEMENTS }while( bool );
            //do loops run at least once before checking
            break;
            //ends enclosing loop (exit loop)
            continue; //jumps to bottom of loop

            //INSTANCE FIELDS
            private int x, y, vx, vy;
            public boolean randomPos = false;
            //CONSTRUCTORS
            public Ball(int x, int y, int vx, int vy)
            {
            this.x = x;
            this.y = y;
            this.vx = vx;
            this.vy = vy;
            numBalls++;
            }
            Ball() {
            x = Math.random()*100;
            y = Math.random()*200;
            randomPos = true;
            }

            ARRAYS:
            int[] x = new int[10]; //ten zeros
            int[][] x = new int[5][5]; //5 by 5 matrix
            int[] x = {1,2,3,4};
            x.length; //int expression length of array
            int[][] x = {{1,2},{3,4,5}}; //ragged array
            String[] y = new String[10]; //10 nulls
            //Note that object types are null by default
            //loop through array:
            for(int i=0;i<arrayname.length;i++) {
            //use arrayname[i];
            }
            //for-each loop through array
            int[] x = {10,20,30,40};
            for(int v : x) {
            //v cycles between 10,20,30,40
            }

            //INSTANCE METHODS
            public int getX(){ return x; }
            public int getY(){ return y; }
            public int getVX(){ return vx; }
            public int getVY(){ return vy; }
            public void move(){ x+=vx; y+=vy; }
            public boolean touching(Ball other) {
            float dx = x-other.x;
            float dy = y-other.y;
            float rr = BALLRADIUS;
            return Math.sqrt(dx*dx+dy*dy)<rr;
            }

            //Loop through ragged arrays:
            for(int i=0;i<x.length;i++)
            for(int j=0;j<x[i].length;j++) {
            //CODE HERE
            }
            //Note, multi-dim arrays can have nulls
            //in many places, especially object arrays:
            Integer[][] x = {{1,2},{3,null},null};

            FUNCTIONS / METHODS:
            Static Declarations:
            public static int functionname( … )
            private static double functionname( … )
            static void functionname( … )
            Instance Declarations:
            public void functionname( … )
            private int functionname( … )
            Arguments, Return Statement:
            int myfunc(int arg0, String arg1) {
            return 5; //type matches int myfunc
            }
            //Non-void methods must return before ending
            //Recursive functions should have an if
            //statement base-case that returns at once

            }
            //Example Usage:
            public static void main(String[] args) {
            Ball x = new Ball(5,10,2,2);
            Ball y = new Ball();
            List<Ball> balls = new ArrayList<Ball>();
            balls.add(x); balls.add(y);
            for(Ball b : balls) {
            for(Ball o : balls) {
            if(b != o) { //compares references
            boolean touch = b.touching(o);
            }
            }
            }
            }

            ® 2013 Kapparate, © 2013 Kapparate Operating LLC

            POLYMORPHISM:

            JAVA COLLECTIONS:

            java.util.PriorityQueue<T>

            Single Inheritance with “extends”
            class A{ }
            class B extends A{ }
            abstract class C { }
            class D extends C { }
            class E extends D
            Abstract methods
            abstract class F {
            abstract int bla();
            }
            class G extends F {
            int bla() { //required method
            return 5;
            }
            }
            Multiple Inheritance of interfaces with
            “implements” (fields not inherited)
            interface H {
            void methodA();
            boolean methodB(int arg);
            }
            interface I extends H{
            void methodC();
            }
            interface K {}
            class J extends F implements I, K {
            int bla() { return 5; } //required from F
            void methodA(){} //required from H
            boolean methodB(int a) { //req from A
            return 1;
            }
            void methodC(){} //required from I
            }
            Type inference:
            A x = new B(); //OK
            B y = new A(); //Not OK
            C z = new C(); //Cannot instantiate abstract
            //Method calls care about right hand type
            (the instantiated object)
            //Compiler checks depend on left hand type

            List<T>: Similar to arrays
            ArrayList<T>: Slow insert into middle
            //ArrayList has fast random access
            LinkedList<T>: slow random access
            //LinkedList fast as queue/stack
            Stack: Removes and adds from end

            A queue that is always automatically sorted
            using the comparable function of an object

            GENERICS:
            class MyClass<T> {
            T value;
            T getValue() { return value; }
            }
            class ExampleTwo<A,B> {
            A x;
            B y;
            }
            class ExampleThree<A extends List<B>,B> {
            A list;
            B head;
            }
            //Note the extends keyword here applies as
            well to interfaces, so A can be an interface
            that extends List<B>

            List Usage:
            boolean add(T e);
            void clear(); //empties
            boolean contains(Object o);
            T get(int index);
            T remove(int index);
            boolean remove(Object o);
            //remove uses comparator
            T set(int index, E val);
            Int size();

            public static void main(String[] args) {
            Comparator<String> cmp= new LenCmp();
            PriorityQueue<String> queue =
            new PriorityQueue<String>(10, cmp);
            queue.add("short");
            queue.add("very long indeed");
            queue.add("medium");
            while (queue.size() != 0)
            System.out.println(queue.remove());
            }
            class LenCmp implements Comparator<String> {
            public int compare(String x, String y){
            return x.length() – y.length();
            }
            }

            java.util.Collections algorithms

            List Traversal:
            for(int i=0i<x.size();i++) {
            //use x.get(i);
            }
            //Assuming List<T>:
            for(T e : x) {
            //use e
            }
            Queue<T>: Remove end, Insert beginning
            LinkedList implements Queue
            Queue Usage:
            T element(); // does not remove
            boolean offer(T o); //adds
            T peek(); //pike element
            T poll(); //removes
            T remove(); //like poll
            Traversal: for(T e : x) {}
            Set<T>: uses Comparable<T> for uniqueness
            TreeSet<T>, items are sorted
            HashSet<T>, not sorted, no order
            LinkedHashSet<T>, ordered by insert
            Usage like list: add, remove, size
            Traversal: for(T e : x) {}
            Map<K,V>: Pairs where keys are unique
            HashMap<K,V>, no order
            LinkedHashMap<K,V> ordered by insert
            TreeMap<K,V> sorted by keys
            V get(K key);
            Set<K> keySet(); //set of keys
            V put(K key, V value);
            V remove(K key);
            Int size();
            Collection<V> values(); //all values
            Traversal: for-each w/ keyset/values

            Sort Example:
            //Assuming List<T> x
            Collections.sort(x); //sorts with comparator
            Sort Using Comparator:
            Collections.sort(x, new Comparator<T>{
            public int compareTo(T a, T b) {
            //calculate which is first
            //return -1, 0, or 1 for order:
            return someint;
            }
            }
            Example of two dimensional array sort:
            public static void main(final String[] a){
            final String[][] data = new String[][] {
            new String[] { "20090725", "A" },
            new String[] { "20090726", "B" },
            new String[] { "20090727", "C" },
            new String[] { "20090728", "D" } };
            Arrays.sort(data,
            new Comparator<String[]>() {
            public int compare(final String[]
            entry1, final String[] entry2) {
            final String time1 = entry1[0];
            final String time2 = entry2[0];
            return time1.compareTo(time2);
            }
            });
            for (final String[] s : data) {
            System.out.println(s[0]+" "+s[1]);
            }
            }
            }
            More collections static methods:
            Collections.max( … ); //returns maximum
            Collections.min( … ); //returns maximum
            Collections.copy( A, B); //A list into B
            Collections.reverse( A ); //if A is list

            ® 2013 Kapparate, © 2013 Kapparate Operating LLC

            
~/Empire/Doks/Comp/lang/java/cheatsh-qref/java-qguide.pdf
            CORE JAVA CHEATSHEET
            Iterative Statements

            Java Programming
            Java is a high level, general purpose programming
            language that produces software for multiple platforms. It
            was developed by James Gosling in 1991 and released by
            Sun Microsystems in 1996 and is currently owned by
            Oracle.

            // for loop
            for (condition) {expression}

            Size

            byte
            8
            short
            16
            int
            32
            long
            64
            float
            32
            double
            64
            char
            16
            Boolean 1

            Arrays In Java
            1 - Dimensional
            // Initializing
            type[] varName= new type[size];

            // for each loop
            for (int i: someArray) {}

            User -Deﬁned Exceptions

            // while loop
            while (condition) {expression}

            Primitive Data Types
            Type

            Learn JAVA from experts at https://www.edureka.co

            // Declaring
            type[] varName= new type[]{values1, value2,...};

            Array with Random Variables

            Range

            // do while loop
            do {expression} while(condition)

            -128..127
            -32,768..32,767
            -2,147,483,648.. 2,147,483,647
            9,223,372,036,854,775,808.. 9,223..
            3.4e-0.38.. 3.4e+0.38
            1.7e-308.. 1.7e+308
            Complete Unicode Character Set
            True, False

            Fibonacci series
            for (i = 1; i <= n; ++i)
            {
            System.out.print(t1 + " + ");
            int sum = t1 + t2; t1 = t2;
            t2 = sum;
            }

            Java Operators
            Type

            Operators

            Arithmetic
            Assignment
            Bitwise
            Logical
            Relational
            Shift
            Ternary
            Unary

            +, – , *, ? , %
            =, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=
            ^, &, |
            &&, ||
            <, >, <=, >=,==, !=
            <<, >>, >>>
            ?:
            ++x, –x, x++, x–, +x, –x, !, ~

            Pyramid Pattern
            k = 2*n - 2;
            for(i=0; i<n; i++)
            {
            for(j=0; j<k; j++){System.out.print(" ");}
            k = k - 1;
            for(j=0; j<=i; j++ ){System.out.print("* ");}
            System.out.println();
            }

            Decisive Statements

            Java Variables
            {public|private} [static] type name [= expression|value];

            //if statement
            if (condition) {expression}

            Java Methods
            {public|private} [static] {type | void} name(arg1, ...,
            argN ){statements}

            Data Type Conversion
            // Widening (byte<short<int<long<float<double)
            int i = 10; //int--> long
            long l = i; //automatic type conversion
            // Narrowing
            double d = 10.02;
            long l = (long)d; //explicit type casting
            // Numeric values to String
            String str = String.valueOf(value);
            // String to Numeric values
            int i = Integer.parseInt(str);
            double d = Double.parseDouble(str);

            //if-else statement
            if (condition) {expression} else {expression}

            Maximum value in an Array
            double max = 0;
            for (int i=0; i<arr.length(); i++)
            { if(a[i] > max) max = a[i]; }

            Reversing an Array
            for(int i=0; i<(arr.length())/2; i++)
            { double temp = a[i];
            a[i] = a[n-1-i];
            a[n-1-i] = temp; }

            Multi – Dimensional Arrays
            // Initializing
            datatype[][] varName
            // Declaring
            datatype[][] varName
            value2....}..};

            =

            new dataType[row][col];

            =

            {{value1, value2....},{value1,

            Transposing A Matrix
            for(i = 0; i < row; i++)
            { for(j = 0; j < column; j++)
            { System.out.print(array[i][j]+" "); }
            System.out.println(" ");
            }

            Multiplying two Matrices
            //switch statement
            switch (var) { case 1: expression; break;
            default: expression; break; }

            Prime Number
            if (n < 2)
            {
            return false;
            }
            for (int i=2; i <= n/i; i++)
            {
            if (n%i == 0) return false;
            }
            return true;

            for (i = 0; i < row1; i++)
            { for (j = 0; j < col2; j++)
            { for (k = 0; k < row2; k++)
            { sum = sum + first[i][k]*second[k][j]; }
            multiply[i][j] = sum;
            sum = 0; } }

            Java Strings
            // Creating String using literal
            String str1 = “Welcome”;

            Factorial of a Number

            User Input
            // Using BufferReader
            BufferedReader reader = new BufferedReader(new
            InputStreamReader(System.in));
            String name = reader.readLine();
            // Using Scanner
            Scanner in = new Scanner(System.in);
            String s = in.nextLine();
            int a = in.nextInt();
            // Using Console
            String name = System.console().readLine();

            double[] arr = new double[n];
            for (int i=0; i<n; i++)
            {a[i] = Math.random();}

            int factorial(int n)
            {
            if (n == 0)
            {return 1;}
            else
            {
            return(n * factorial(n-1));
            }
            }

            // Creating String using new keyword
            String str2 = new String(”Edureka”);

            String Methods
            str1==str2 //compare the address;
            String newStr = str1.equals(str2); //compares the values
            String newStr = str1.equalsIgnoreCase() //
            newStr = str1.length() //calculates length

            newStr = str1.charAt(i) //extract i'th character
            newStr = str1.toUpperCase() //returns string in ALL CAPS
            newStr = str1.toLowerCase() //returns string in ALL LOWERCASE

            Basic Java Program
            public class Demo
            {
            public static void main(String[] args)
            {
            System.out.println("Hello from edureka!");
            }
            }

            newStr = str1.replace(oldVal, newVal) //search and replace

            Save

            className.java

            newStr = str1.trim() //trims surrounding whitespace
            newStr = str1.contains("value"); //Check for the values

            Compile

            javac className

            newStr = str1.toCharArray(); //Convert into character array
            newStr = str1.IsEmpty(); //Check for empty String

            Execute

            java className

            newStr = str1.endsWith(); //Checks if string ends with the given suffix

            

  ~/Empire/Doks/Comp/lang/java/j9byex.pdf
  ~/Empire/Doks/Comp/lang/java/j9byex.txt
  ~/Empire/Doks/Comp/lang/java/j9cb.pdf
  ~/Empire/Doks/Comp/lang/java/j9cb.txt
  ~/Empire/Doks/Comp/lang/java/jcook.pdf
  ~/Empire/Doks/Comp/lang/java/jcook.txt

~/Empire/Doks/Comp/lang/java/jcook.txt  2014
'jcook' (2014)
            1 - Getting Started: Compiling, Running, and Debugging  1 ----
            1.1. Compiling and Running Java: JDK
            1.2. Editing and Compiling with a Syntax-Highlighting Editor
            1.3. Compiling, Running, and Testing with an IDE
            1.4. Using CLASSPATH Effectively
            1.5. Downloading and Using the Code Examples
            1.6. Automating Compilation with Apache Ant
            1.7. Automating Dependencies, Compilation, Testing, and Deployment with Apache Maven
            1.8. Automating Dependencies, Compilation, Testing, and Deployment with Gradle
            1.9. Dealing with Deprecation Warnings
            1.10. Conditional Debugging Without #ifdef
            1.11. Maintaining Program Correctness with Assertions
            1.12. Debugging with JDB
            1.13. Avoiding the Need for Debuggers with Unit Testing
            1.14. Maintaining Your Code with Continuous Integration
            1.15. Getting Readable Tracebacks
            1.16. Finding More Java Source Code: Programs, Frameworks, Libraries
            2 - Interacting with the Environment  51 ----
            2.1. Getting Environment Variables
            2.2. Getting Information from System Properties
            2.3. Learning About the Current JDK Release
            2.4. Dealing with Operating System–Dependent Variations
            2.5. Using Extensions or Other Packaged APIs
            2.6. Parsing Command-Line Arguments
            3 - Strings and Things  67 ----
            3.1. Taking Strings Apart with Substrings
            3.2. Breaking Strings Into Words
            3.3. Putting Strings Together with StringBuilder
            3.4. Processing a String One Character at a Time
            3.5. Aligning Strings
            3.6. Converting Between Unicode Characters and Strings
            3.7. Reversing a String by Word or by Character
            3.8. Expanding and Compressing Tabs
            3.9. Controlling Case
            3.10. Indenting Text Documents
            3.11. Entering Nonprintable Characters
            3.12. Trimming Blanks from the End of a String
            3.13. Parsing Comma-Separated Data
            3.14. Program: A Simple Text Formatter
            3.15. Program: Soundex Name Comparisons
            4 - Pattern Matching with Regular Expressions  105 ----
            4.1. Regular Expression Syntax
            4.2. Using regexes in Java: Test for a Pattern
            4.3. Finding the Matching Text
            4.4. Replacing the Matched Text
            4.5. Printing All Occurrences of a Pattern
            4.6. Printing Lines Containing a Pattern
            4.7. Controlling Case in Regular Expressions
            4.8. Matching "Accented" or Composite Characters
            4.9. Matching Newlines in Text
            4.10. Program: Apache Logfile Parsing
            4.11. Program: Data Mining
            4.12. Program: Full Grep
            5 - Numbers  139 ----
            5.1. Checking Whether a String Is a Valid Number
            5.2. Storing a Larger Number in a Smaller Number
            5.3. Converting Numbers to Objects and Vice Versa
            5.4. Taking a Fraction of an Integer Without Using Floating Point
            5.5. Ensuring the Accuracy of Floating-Point Numbers
            5.6. Comparing Floating-Point Numbers
            5.7. Rounding Floating-Point Numbers
            5.8. Formatting Numbers
            5.9. Converting Between Binary, Octal, Decimal, and Hexadecimal
            5.10. Operating on a Series of Integers
            5.11. Working with Roman Numerals
            5.12. Formatting with Correct Plurals
            5.13. Generating Random Numbers
            5.14. Calculating Trigonometric Functions
            5.15. Taking Logarithms
            5.16. Multiplying Matrices
            5.17. Using Complex Numbers
            5.18. Handling Very Large Numbers
            5.19. Program: TempConverter
            5.20. Program: Number Palindromes
            6 - Dates and Times - New API  179 ----
            6.1. Finding Today's Date
            6.2. Formatting Dates and Times
            6.3. Converting Among Dates/Times, YMDHMS, and Epoch Seconds
            6.4. Parsing Strings into Dates
            6.5. Difference Between Two Dates
            6.6. Adding to or Subtracting from a Date or Calendar
            6.7. Interfacing with Legacy Date and Calendar Classes
            7 - Structuring Data with Java  191 ----
            7.1. Using Arrays for Data Structuring
            7.2. Resizing an Array
            7.3. The Collections Framework
            7.4. Like an Array, but More Dynamic
            7.5. Using Generic Collections
            7.6. Avoid Casting by Using Generics
            7.7. How Shall I Iterate Thee? Let Me Enumerate the Ways
            7.8. Eschewing Duplicates with a Set
            7.9. Using Iterators or Enumerations for Data-Independent Access
            7.10. Structuring Data in a Linked List
            7.11. Mapping with Hashtable and HashMap
            7.12. Storing Strings in Properties and Preferences
            7.13. Sorting a Collection
            7.14. Avoiding the Urge to Sort
            7.15. Finding an Object in a Collection
            7.16. Converting a Collection to an Array
            7.17. Rolling Your Own Iterator
            7.18. Stack
            7.19. Multidimensional Structures
            7.20. Program: Timing Comparisons
            8 - Object-Oriented Techniques  239 ----
            8.1. Formatting Objects for Printing with toString()
            8.2. Overriding the equals() and hashCode() Methods
            8.3. Using Shutdown Hooks for Application Cleanup
            8.4. Using Inner Classes
            8.5. Providing Callbacks via Interfaces
            8.6. Polymorphism/Abstract Methods
            8.7. Passing Values
            8.8. Using Typesafe Enumerations
            8.9. Enforcing the Singleton Pattern
            8.10. Roll Your Own Exceptions
            8.11. Using Dependency Injection
            8.12. Program: Plotter
            9 - Functional Programming Techniques: Functional Interfaces, Streams, Parallel Collections  275 ----
            9.1. Using Lambdas/Closures Instead of Inner Classes
            9.2. Using Lambda Predefined Interfaces Instead of Your Own
            9.3. Simplifying Processing with Streams
            9.4. Improving Throughput with Parallel Streams and Collections
            9.5. Creating Your Own Functional Interfaces
            9.6. Using Existing Code as Functional with Method References
            9.7. Java Mixins: Mixing in Methods
            10 - Input and Output  295 ----
            10.1. Reading Standard Input
            10.2. Reading from the Console or Controlling Terminal; Reading Passwords Without Echoing
            10.3. Writing Standard Output or Standard Error
            10.4. Printing with Formatter and printf
            10.5. Scanning Input with StreamTokenizer
            10.6. Scanning Input with the Scanner Class
            10.7. Scanning Input with Grammatical Structure
            10.8. Opening a File by Name
            10.9. Copying a File
            10.10. Reading a File into a String
            10.11. Reassigning the Standard Streams
            10.12. Duplicating a Stream as It Is Written
            10.13. Reading/Writing a Different Character Set
            10.14. Those Pesky End-of-Line Characters
            10.15. Beware Platform-Dependent File Code
            10.16. Reading "Continued" Lines
            10.17. Reading/Writing Binary Data
            10.18. Seeking to a Position within a File
            10.19. Writing Data Streams from C
            10.20. Saving and Restoring Java Objects
            10.21. Preventing ClassCastExceptions with SerialVersionUID
            10.22. Reading and Writing JAR or ZIP Archives
            10.23. Finding Files in a Filesystem-Neutral Way with getResource() and getResourceAsStream()
            10.24. Reading and Writing Compressed Files
            10.25. Learning about the Communications API for Serial and Parallel Ports
            10.26. Save User Data to Disk
            10.27. Program: Text to PostScript
            11 - Directory and Filesystem Operations  365 ----
            11.1. Getting File Information
            11.2. Creating a File
            11.3. Renaming a File
            11.4. Deleting a File
            11.5. Creating a Transient File
            11.6. Changing File Attributes
            11.7. Listing a Directory
            11.8. Getting the Directory Roots
            11.9. Creating New Directories
            11.10. Using Path instead of File
            11.11. Using the FileWatcher Service to Get Notified about File Changes
            11.12. Program: Find
            12 - Media: Graphics, Audio, Video  387 ----
            12.1. Painting with a Graphics Object
            12.2. Showing Graphical Components Without Writing Main
            12.3. Drawing Text
            12.4. Drawing Centered Text in a Component
            12.5. Drawing a Drop Shadow
            12.6. Drawing Text with 2D
            12.7. Drawing Text with an Application Font
            12.8. Drawing an Image
            12.9. Reading and Writing Images with javax.imageio
            12.10. Playing an Audio/Sound File
            12.11. Playing a Video File
            12.12. Printing in Java
            12.13. Program: PlotterAWT
            12.14. Program: Grapher
            13 - Network Clients  421 ----
            13.1. Contacting a Server
            13.2. Finding and Reporting Network Addresses
            13.3. Handling Network Errors
            13.4. Reading and Writing Textual Data
            13.5. Reading and Writing Binary Data
            13.6. Reading and Writing Serialized Data
            13.7. UDP Datagrams
            13.8. Program: TFTP UDP Client
            13.9. URI, URL, or URN?
            13.10. REST Web Service Client
            13.11. SOAP Web Service Client
            13.12. Program: Telnet Client
            13.13. Program: Chat Client
            13.14. Program: Simple HTTP Link Checker
            14 - Graphical User Interfaces  457 ----
            14.1. Displaying GUI Components
            14.2. Run Your GUI on the Event Dispatching Thread
            14.3. Designing a Window Layout
            14.4. A Tabbed View of Life
            14.5. Action Handling: Making Buttons Work
            14.6. Action Handling Using Anonymous Inner Classes
            14.7. Action Handling Using Lambdas
            14.8. Terminating a Program with "Window Close"
            14.9. Dialogs: When Later Just Won't Do
            14.10. Catching and Formatting GUI Exceptions
            14.11. Getting Program Output into a Window
            14.12. Choosing a Value with JSpinner
            14.13. Choosing a File with JFileChooser
            14.14. Choosing a Color
            14.15. Formatting JComponents with HTML
            14.16. Centering a Main Window
            14.17. Changing a Swing Program's Look and Feel
            14.18. Enhancing Your Swing GUI for Mac OS X
            14.19. Building Your GUI Application with JavaFX
            14.20. Program: Custom Font Chooser
            14.21. Program: Custom AWT/Swing Layout Manager
            15 - Internationalization and Localization  517 ----
            15.1. Creating a Button with I18N Resources
            15.2. Listing Available Locales
            15.3. Creating a Menu with I18N Resources
            15.4. Writing Internationalization Convenience Routines
            15.5. Creating a Dialog with I18N Resources
            15.6. Creating a Resource Bundle
            15.7. Extracting Strings from Your Code
            15.8. Using a Particular Locale
            15.9. Setting the Default Locale
            15.10. Formatting Messages with MessageFormat
            15.11. Program: MenuIntl
            15.12. Program: BusCard
            16 - Server-Side Java  539 ----
            16.1. Opening a Server Socket for Business
            16.2. Returning a Response (String or Binary)
            16.3. Returning Object Information Across a Network Connection
            16.4. Handling Multiple Clients
            16.5. Serving the HTTP Protocol
            16.6. Securing a Web Server with SSL and JSSE
            16.7. Network Logging
            16.8. Network Logging with SLF4J
            16.9. Network Logging with log4j
            16.10. Network Logging with java.util.logging
            16.11. Finding Network Interfaces
            16.12. Program: A Java Chat Server
            17 - Java and Electronic Mail  573 ----
            17.1. Sending Email: Browser Version
            17.2. Sending Email: For Real
            17.3. Mail-Enabling a Server Program
            17.4. Sending MIME Mail
            17.5. Providing Mail Settings
            17.6. Reading Email
            17.7. Program: MailReaderBean
            17.8. Program: MailClient
            18 - Database Access  609 ----
            18.1. Easy Database Access with JPA and/or Hibernate
            18.2. JDBC Setup and Connection
            18.3. Connecting to a JDBC Database
            18.4. Sending a JDBC Query and Getting Results
            18.5. Using JDBC Prepared Statements
            18.6. Using Stored Procedures with JDBC
            18.7. Changing Data Using a ResultSet
            18.8. Storing Results in a RowSet
            18.9. Changing Data Using SQL
            18.10. Finding JDBC Metadata
            18.11. Program: SQLRunner
            19 - Processing JSON Data  653 ----
            19.1. Generating JSON Directly
            19.2. Parsing and Writing JSON with Jackson
            19.3. Parsing and Writing JSON with org.json
            20 - Processing XML  661 ----
            20.1. Converting Between Objects and XML with JAXB
            20.2. Converting Between Objects and XML with Serializers
            20.3. Transforming XML with XSLT
            20.4. Parsing XML with SAX
            20.5. Parsing XML with DOM
            20.6. Finding XML Elements with XPath
            20.7. Verifying Structure with Schema or DTD
            20.8. Generating Your Own XML with DOM and the XML Transformer
            20.9. Program: xml2mif
            21 - Packages and Packaging  687 ----
            21.1. Creating a Package
            21.2. Documenting Classes with Javadoc
            21.3. Beyond Javadoc: Annotations/Metadata
            21.4. Archiving with jar
            21.5. Running a Program from a JAR
            21.6. Preparing a Class as a JavaBean
            21.7. Pickling Your Bean into a JAR
            21.8. Packaging a Servlet into a WAR File
            21.9. "Write Once, Install Anywhere"
            21.10. "Write Once, Install on Mac OS X"
            21.11. Java Web Start
            21.12. Signing Your JAR File
            22 - Threaded Java  717 ----
            22.1. Running Code in a Different Thread
            22.2. Displaying a Moving Image with Animation
            22.3. Stopping a Thread
            22.4. Rendezvous and Timeouts
            22.5. Synchronizing Threads with the synchronized Keyword
            22.6. Simplifying Synchronization with Locks
            22.7. Synchronizing Threads the Hard Way with wait( ) and notifyAll( )
            22.8. Simplifying Producer/Consumer with the Queue Interface
            22.9. Optimizing Parallel Processing with Fork/Join
            22.10. Background Saving in an Editor
            22.11. Program: Threaded Network Server
            22.12. Simplifying Servers Using the Concurrency Utilities
            23 - Reflection, or "A Class Named Class"  765 ----
            23.1. Getting a Class Descriptor
            23.2. Finding and Using Methods and Fields
            23.3. Accessing Private Methods and Fields via Reflection
            23.4. Loading and Instantiating a Class Dynamically
            23.5. Constructing a Class from Scratch with a ClassLoader
            23.6. Performance Timing
            23.7. Printing Class Information
            23.8. Listing Classes in a Package
            23.9. Using and Defining Annotations
            23.10. Finding Plug-in-like Classes via Annotations
            23.11. Program: CrossRef
            23.12. Program: AppletViewer
            24 - Using Java with Other Languages  801 ----
            24.1. Running an External Program from Java
            24.2. Running a Program and Capturing Its Output
            24.3. Calling Other Languages via javax.script
            24.4. Roll Your Own Scripting Engine
            24.5. Marrying Java and Perl
            24.6. Calling Other Languages via Native Code
            24.7. Calling Java from Native Code
            Afterword  827
            A. Java Then and Now  829
# ~/Empire/Doks/Comp/lang/java/j9cb.txt
j9cb
            1 - Installation and a Sneak Peek into Java 9 ----
            Installing JDK 9 on Windows and setting up the PATH variable
            Installing JDK 9 on Linux (Ubuntu, x64) and configuring the PATH variable
            Compiling and running a Java application
            New features in Java 9
            JEP 102 -- Process API updates
            JEP 110 -- HTTP/2 client
            JEP 213 -- milling project coin
            JEP 222: jshell -- the Java shell (Read-Eval-Print Loop)
            JEP 238 -- multi-release JAR files
            JEP 266 -- more concurrency updates
            Project Jigsaw
            Using new tools in JDK 9
            jdeprscan
            jdeps
            jlink
            jmod
            JShell
            Comparing JDK 8 and JDK 9
            2 - Fast Track to OOP - Classes and Interfaces ----
            Implementing object-oriented design using classes
            Using inner classes
            Using inheritance and composition to make the design extensible
            Composition makes the design more extensible
            Coding to an interface
            Creating interfaces with default and static methods
            Creating interfaces with private methods
            Using enums to represent constant entities
            Using the @Deprecated annotation to deprecate APIs
            Using HTML5 in Javadocs
            3 - Modular Programming ----
            Using jdeps to find dependencies in a Java application
            Creating a simple modular application
            Creating a modular JAR
            Using a module JAR with pre-JDK 9 applications
            Bottom-up migration
            Modularizing banking.util.jar
            Modularizing math.util.jar
            Modularizing calculator.jar
            Top-down migration
            Modularizing the calculator
            Modularizing banking.util
            Modularizing math.util
            Using services to create loose coupling between consumer and provider modules
            Creating a custom modular runtime image using jlink
            Compiling for older platform versions
            Creating multirelease JARs
            Using Maven to develop a modular application
            4 - Going Functional ----
            Understanding and creating a functional interface
            Understanding lambda expressions
            Using method references
            Creating and invoking lambda-friendly APIs
            Leveraging lambda expressions in your programs
            5 - Stream Operations and Pipelines ----
            Using the new factory methods to create collection objects
            Creating and operating on streams
            Creating an operation pipeline on streams
            Parallel computations on streams
            6 - Database Programming ----
            Connecting to a database using JDBC
            Setting up the tables required for DB interactions
            Performing CRUD operations
            Using prepared statements
            Using transactions
            Working with large objects
            Executing stored procedures
            7 - Concurrent and Multithreaded Programming ----
            Using the basic element of concurrency - thread
            Different synchronization approaches
            Immutability as a means to achieve concurrency
            Using concurrent collections
            Using the executor service to execute async tasks
            Using fork/join to implement divide-and-conquer
            Using flow to implement the publish-subscribe pattern
            8 - Better Management of the OS Process ----
            Spawning a new process
            Redirecting the process output and error streams to file
            Changing the working directory of a subprocess
            Setting the environment variable for a subprocess
            Running shell scripts
            Obtaining the process information of the current JVM
            Obtaining the process information of the spawned process
            Managing the spawned process
            Enumerating live processes in the system
            Connecting multiple processes using pipe
            Managing subprocesses
            9 - GUI Programming Using JavaFX ----
            Creating a GUI using JavaFX controls
            Using the FXML markup to create a GUI
            Using CSS to style elements in JavaFX
            Creating a bar chart
            Creating a pie chart
            Creating a line chart
            Creating an area chart
            Creating a bubble chart
            Creating a scatter chart
            Embedding HTML in an application
            Embedding media in an application
            Adding effects to controls
            Using the new TIFF I/O API to read TIFF images
            10 - RESTful Web Services Using Spring Boot ----
            Creating a simple Spring Boot application
            Interacting with the database
            Installing MySQL tools
            Creating a sample database
            Creating a person table
            Populating sample data
            Creating a RESTful web service
            Creating multiple profiles for Spring Boot
            Deploying RESTful web services to Heroku
            Setting up a Heroku account
            Creating a new app from the UI
            Creating a new app from the CLI
            Containerizing the RESTful web service using Docker
            11 - Networking ----
            Making an HTTP GET request
            Making an HTTP POST request
            Making an HTTP request for a protected resource
            Making an asynchronous HTTP request
            Making an HTTP request using Apache HttpClient
            Making an HTTP request using the Unirest HTTP client library
            12 - Memory Management and Debugging ----
            Understanding the G1 garbage collector
            Unified logging for JVM
            Using the new diagnostic commands for the JVM
            Try with resources for better resource handling
            Stack walking for improved debugging
            Some best practices for better memory usage
            13 - The Read-Evaluate-Print Loop (REPL) Using JShell ----
            Getting familiar with REPL
            Navigating JShell and its commands
            Evaluating code snippets
            Object-oriented programming in JShell
            Saving and restoring the JShell command history
            Using the JShell Java API
            14 - Scripting Using Oracle Nashorn ----
            Using the jjs command-line tool
            Embedding the Oracle Nashorn engine
            Invoking Java from Oracle Nashorn
            Using the ES6 features implemented in Oracle Nashorn
            15 - Testing ----
            Unit testing of an API using JUnit
            Unit testing by mocking dependencies
            Using fixtures to populate data for testing
            Behavioral testing
(?)j9byex
            1.
            Getting Started with Java 9
            Getting started with Java
            Installing Java
            Installation on Windows
            Installation on MAC OS X
            Installation on Linux
            Setting JAVA_HOME
            Executing jshell
            Looking at the byte code
            Packaging classes into a JAR file
            Managing the running Java application
            Using an IDE
            NetBeans
            Eclipse
            IntelliJ
            IDE services
            IDE screen structure
            Editing files
            Managing projects
            Build the code and run it
            Debugging Java
            Summary
            2.
            The First Real Java Program - Sorting Names
            Getting started with sorting
            Bubble sort
            Getting started with project structure and build tools
            Make
            Ant
            Installing Ant
            Using Ant
            Maven
            Installing Maven
            Using Maven
            Gradle
            Installing Gradle
            Setting up the project with Maven
            Coding the sort
            Understanding the algorithm and language constructs
            Blocks
            Variables
            Types
            Arrays
            Expressions
            Loops
            Conditional execution
            Final variables
            Classes
            Inner, nested, local, and anonymous classes
            Packages
            Methods
            Interfaces
            Argument passing
            Fields
            Modifiers
            Object initializers and constructors
            Compiling and running the program
            Summary
            3.
            Optimizing the Sort - Making Code Professional
            The general sorting program
            A brief overview of various sorting algorithms
            Quick sort
            Project structure and build tools
            Maven dependency management
            Code the sort
            Creating the interfaces
            Creating BubbleSort
            Amending the interfaces
            Architectural considerations
            Creating unit tests
            Adding JUnit as dependency
            Writing the BubbleSortTest class
            Good unit tests
            A good unit test is readable
            Unit tests are fast
            Unit tests are deterministic
            Assertions should be as simple as possible
            Unit tests are isolated
            Unit tests cover the code
            Refactor the test
            Collections with wrong elements
            Handling exceptions
            Generics
            Test Driven Development
            Implementing QuickSort
            The partitioning class
            Recursive sorting
            Non-recursive sorting
            Implementing the API class
            Creating modules
            Why modules are needed
            What is a Java module
            Summary
            4.
            Mastermind - Creating a Game
            The Game
            The model of the game
            Java collections
            Interface collection
            Set
            Hash functions
            Method equals
            Method hashCode
            Implementing equals and hashCode
            HashSet
            EnumSet
            LinkedHashSet
            SortedSet
            NavigableSet
            TreeSet
            List
            LinkedList
            ArrayList
            Queue
            Deque
            Map
            HashMap
            IdentityHashMap
            Dependency injection
            Implementing the game
            ColorManager
            The class color
            JavaDoc and code comments
            Row
            Table
            Guesser
            UniqueGuesser
            GeneralGuesser
            The Game class
            Creating an integration test
            Summary
            5.
            Extending the Game - Run Parallel, Run Faster
            How to make Mastermind parallel
            Refactoring
            Processes
            Threads
            Fibers
            java.lang.Thread
            Pitfalls
            Deadlocks
            Race conditions
            Overused locks
            Starving
            ExecutorService
            ForkJoinPool
            Variable access
            The CPU heartbeat
            Volatile variables
            Synchronized block
            Wait and notify
            Lock
            Condition
            ReentrantLock
            ReentrantReadWriteLock
            Atomic classes
            BlockingQueue
            LinkedBlockingQueue
            LinkedBlockingDeque
            ArrayBlockingQueue
            LinkedTransferQueue
            IntervalGuesser
            ParallelGamePlayer
            Microbenchmarking
            Summary
            6.
            Making Our Game Professional - Do it as a Webapp
            Web and network
            IP
            TCP/IP
            DNS
            The HTTP protocol
            HTTP methods
            Status codes
            HTTP/2.0
            Cookies
            Client server and web architecture
            Writing servlets
            Hello world servlet
            Java Server Pages
            HTML, CSS, and JavaScript
            Mastermind servlet
            Storing state
            HTTP session
            Storing state on the client
            Dependency injection with Guice
            The MastermindHandler class
            Storing state on the server
            The GameSessionSaver class
            Running the Jetty web servlet
            Logging
            Configurability
            Performance
            Log frameworks
            Java 9 logging
            Logging practice
            Other technologies
            Summary
            7.
            Building a Commercial Web Application Using REST
            The MyBusiness web shop
            Sample business architecture
            Microservices
            Service interface design
            JSON
            REST
            Model View Controller
            Spring framework
            Architecture of Spring
            Spring core
            Service classes
            Compiling and running the application
            Testing the application
            Integration test
            Application test
            Servlet filters
            Audit logging and AOP
            Dynamic proxy-based AOP
            Summary
            8.
            Extending Our E-Commerce Application
            The MyBusiness ordering
            Setting up the project
            Order controller and DTOs
            Consistency checker
            Annotations
            Annotation retention
            Annotation target
            Annotation parameters
            Repeatable annotations
            Annotation inheritance
            @Documented annotations
            JDK annotations
            Using reflection
            Getting annotations
            Invoking methods
            Setting fields
            Functional programming in Java
            Lambda
            Streams
            Functional interfaces
            Method references
            Scripting in Java 9
            Summary
            9.
            Building an Accounting Application Using Reactive Programming
            Reactive programming in a nutshell
            Reactive systems
            Responsive
            Resilient
            Elastic
            Message-driven
            Back-pressure
            Reactive streams
            Reactive programming in Java
            Implementing inventory
            Summary
            10.
            Finalizing Java Knowledge to a Professional Level
            Java deep technologies
            Java agent
            Polyglot programming
            Polyglot configuration
            Polyglot scripting
            Business DSL
            Problems with polyglot
            Annotation processing
            Programming in the enterprise
            Static code analysis
            Source code version control
            Software versioning
            Code review
            Knowledge base
            Issue tracking
            Testing
            Types of tests
            Test automation
            Black box versus white box
            Selecting libraries
            Fit for the purpose
            License
            Documentation
            Project alive
            Maturity
            Number of users
            The "I like it" factor
            Continuous integration and deployment
            Release management
            Code repository
            Walking up the ladder
            Summary

~/Dropbox/rsc/data/lists/ref/comp/cb/javacb11.txt
evince -p 1 ~/Dropbox/rsc/data/lists/ref/comp/cb/javacb11.pdf &
~/Empire/Doks/Comp/lang/java/java11cb.txt
            Java 11 Cookbook Second Edition
            Nick Samoylov and Mohamed Sanaulla
            Java 11 Cookbook
            Second Edition
            A definitive guide to learning the key concepts of modern application devel-
            opment
            Niel SF Teatro (en ]
            Mohamed Sanaulla
            BIRMINGHAM - MUMBAI
            Why subscribe?
            + Spend less time learning and more time coding with practical eBooks
            and Videos from over 4,000 industry professionals
            « Improve your learning with Skill Plans built especially for you
            + Geta free eBook or video every month
            eV ETM Mla -lcearlel ic
            + Copy and paste, print, and bookmark content
            Packt.com
            Did you know that Packt offers eBook versions of every book published,
            with PDF and ePub files available? You can upgrade to the eBook version at
            www.packt.com and as a print book customer, you are entitled to a dis-
            count on the eBook copy. Get in touch with us at
            customercare@packtpub.com for more details.
            At www.packt.com, you can also read a collection of free technical articles,
            sign up for a range of free newsletters, and receive exclusive discounts and
            offers on Packt books and eBooks.
            Packt is searching for authors like you
            If you're interested in becoming an author for Packt, please visit authors.-
            packtpub.com and apply today. We have worked with thousands of devel-
            opers and tech professionals, just like you, to help them share their insight
            with the global tech community. You can make a general application, apply
            for a specific hot topic that we are recruiting an author for, or submit your
            own idea.
            Table of Contents
            1. Title Page
            2. Copyright and Credits
            1. Java 11 Cookbook Second Edition
            3. Packt Upsell
            1. Why subscribe?
            2. Packt.com
            4. Contributors
            1. About the authors
            2. About the reviewer
            3. Packt is searching for authors like you
            5. Preface
            »
            Sa Ce
            Who this book is for
            What this book covers
            To get the most out of this book
            Download the example code files
            Conventions used
            Sections
            Get in touch
            Reviews
            Installation and a Sneak Peek into Java 1
            Installing JDK 18.9 on Windows and setting up the PATH variable
             
            Installing JDK 18.9 on&#xAo;Linux (Ubuntu, x64) and configuring
            [ietoe ya LAO)
            Compiling and running a Java application
            What's new in Java 11?
            JEP 318&#xA0;&#x2013; Epsilon
            eters
            JEP 333&#xAo;&#x2013; ZGC
            New API
            iM al-1¢-e-Maalo) com
            Using application class-data sharing
            Fast Track to OOP - Classes and Interfaces
            Implementing object-oriented design (OOD)
            UETay alee
            Using inheritance and aggregation
            Aggregation makes the design more extensible
            Coding to an interface
            me \Wacoe (on ame
            Creating interfaces with default and static methods
            Creating interfaces with private methods
            A better&#xAo;way to work with nulls using Optional
            ime) coke(on ee
            Using the utility class Objects
            Modular Programming
            Creating a simple modular application
            Creating a modular JAR
            Using a module JAR with pre-Project Jigsaw JDK applications
            Bottom-up migration
            Modularizing banking.util.jar
            Modularizing math.util. jar
            Modularizing calculator.jar
            Top-down migration
            Getting&#xAo;ready
            Modularizing the calculator
            Modularizing banking.util
            Modularizing math.util
            10.
            ae
            Using services to create loose coupling between the consumer and
            provider modules
            Creating a custom modular runtime image using jlink
            Compiling for older platform versions
            Creating multi-release JARs
            an
            How to open a module for reflection
            Going Functional
            Using standard functional interfaces
            alee ante) c-ee
            Creating a functional interface
            Understanding&#xAo;lambda expressions
            sing lambda expressions
            Using method references
            Static unbound method reference
            Non-static bound method reference
            Non-static unbound method reference
            Constructor method references
            10.
            Leveraging lambda expressions in your programs
            im koa CoKe Con oe
            Streams and Pipelines
            methods
            Creating and operating on streams
            KONA 10),
            Using numeric streams for arithmetic operations
            Completing streams by producing collections
            Completing streams by producing maps
            ae
            Completing streams by producing maps using grouping collectors
            mKe\WAcoe (on ame
            Creating stream operation pipeline
            Processing streams in parallel
            Database Programming
            Connecting to a database using JDBC
            alee ante) core
            Setting up the tables required for DB interactions
            Performing CRUD operations using JDBC
            Using the Hikari Connection Pool (HikariCP),
            ake) WAcoe (on ane
            Using prepared statements
            mKe\Wacoke(on ame
            Using transactions
            Working with large objects
            10.
            11.
            Executing stored procedures
            A a\-1e-e cate) coe
            Using batch operations for a large set of data
            Using MyBatis for CRUD operations
            ee
            ee
            Using the Java Persistence API and Hibernate
            Concurrent and Multithreaded Programming
            Using the basic element of concurrency &#x2013; thread
            Different synchronization approaches
            Immutability as a means of achieving concurrency
            alee ante) coe
            Using concurrent collections
            im kom CoKe CO oe
            Using the executor service to execute async tasks
            Ey
            Better Management of the OS Process
            Spawning a new process
            mea (olde
            Redirecting the process output and error streams to file
            Changing the working directory of a subprocess
            mea elo
            Setting the environment variable for a subprocess
            Running shell scripts
            10.
            Obtaining the process information of the current |VM
            Managing the spawned process
            Enumerating live processes in the system
            ae
            ve
            7
            Connecting multiple processes using pipe
            Getting&#xAo;ready
            Managing subprocesses
            RESTful Web Services Using Spring Boot
            Creating a simple Spring Boot application
            mea olde
            Interacting with the database
            Installing MySQL tools
            Creating a sample database
            Creating a person table
            Populating sample data
            Creating a RESTful web service
            Creating multiple profiles for Spring Boot
            Deploying RESTful web services to Heroku
            Setting up a Heroku account
            Creating a new app from the UI
            Creating a new app from the CLI
            Containerizing the RESTful web service using Docker
            15. Monitoring the Spring Boot 2 application using Micrometer and Prometheus
            There's more
            Networking
            Making an HTTP GET request
            Making an HTTP POST request
            Making an HTTP request for a protected resource
            Making an asynchronous HTTP request
            Making an HTTP request using Apache HttpClient
            Making an HTTP request using the Unirest HTTP client library
            Memory Management and Debugging
            Understanding the Gi garbage collector
            Unified logging for )VM
            Using the jcmd command for the JVM
            mKO\Wal a eld
            Try-with-resources for better resource handling
            Stack walking for improved debugging
            Using the memory-aware coding style
            Best practices for better memory usage
            We
            Understanding Epsilon, a low-overhead garbage collector
            Getting familiar with REPL
            keV olde
            Navigating |Shell and its commands
            Evaluating code snippets
            5. Object-oriented programming in |Shell
            6. Saving and restoring the&#xAo;|Shell command history
            7. Using the&#xAo;|Shell Java API
            18. Working with New Date and Time APIs
            1. Introduction
            2. Howto work with time zone-independent date and time instances
            There's more&#x2026:
            How to construct time zone-dependent time instances
            How to create a date-based period between date instances
            How to create a time-based period between time instances
            There's more&#x2026:
            How to represent epoch time
            How to manipulate date and time instances
            How to do it&#x2026:&#xAo:
            How to compare date and time
            10.
            19.
            How to work with different calendar systems
            How to format dates using the DateTimeFormatter
            Testing
            Behavioral testing using Cucumber
            mea ae) ee
            Unit testing of an API using JUnit
            mea 101d, Coen
            Unit testing by mocking dependencies
            Using fixtures to populate data for testing
            20.
            mKOWal a elon
            Integration testing
            The New Way of Coding with Java 10 and Java 11
            Using local-variable type inference
            Using local-variable syntax for lambda parameters
            21. GUI Programming Using JavaFX
            Creating a GUI using JavaFX controls
            mLe\ Vaan 10). oe
            Using the FXML markup to create a GUI
            Using CSS to the style elements in JavaFX
            of=jadlat-macrteh
            Creating a bar chart
            Creating a pie chart
            KoA Lele
            Embedding HTML in an application
            Getting&#xAo;ready
            10.
            alee antec
            Embedding media in an application
            Adding effects to controls
            Using the Robot API
            22. Other Books You May Enjoy
            1. Leave a review - let other readers know what you think
            

JFx
~/Empire/Doks/Comp/lang/java/jfx/pjfx9-4e.pdf         2018 Pro
            Contents
            About the Authors  ix
            About the Technical Reviewers  xi
            Acknowledgments  xiii
            Foreword xv
            Introduction xvii
            ■Chapter
            ■
            1: Getting a Jump-Start in JavaFX  1
            A Brief History of JavaFX  1
            Prepare Your JavaFX Journey  4
            Required Tools  4
            JavaFX, the Community  5
            Use the Official Specifications  5
            Scenic View  6
            Developing Your First JavaFX Program: Hello Earthrise  7
            Compiling and Running from the Command Line  8
            Understanding the Hello Earthrise Program  9
            Building and Running the Program with NetBeans  16
            Developing Your Second JavaFX Program: “More Cowbell!”  20
            Building and Running the Audio Configuration Program  20
            The Behavior of the Audio Configuration Program  21
            Understanding the Audio Configuration Program  22
            Colors and Gradients  25
            The Model Class for the Audio Configuration Example  26
            Using InvalidationListeners and Lambda Expressions  27
            iii
            www.allitebooks.com■ Contents
            Surveying JavaFX Features  29
            Summary  30
            Resources  31
            ■Chapter
            ■
            2: Creating a User Interface in JavaFX  33
            Programmatic vs. Declarative Creation of the User Interface  33
            Introduction to Node-Centric UIs  33
            Setting the Stage  34
            Understanding the Stage Class  34
            Using the Stage Class: The StageCoach Example  35
            Understanding the StageCoach Program  39
            Making a Scene  46
            Using the Scene Class: The OnTheScene Example  46
            Understanding the OnTheScene Program  48
            Handling Input Events  56
            Surveying Mouse, Keyboard, Touch, and Gesture Events and
            Handlers  56
            Understanding the KeyEvent Class  57
            Understanding the MouseEvent Class  57
            Understanding the TouchEvent Class  58
            Understanding the GestureEvent Class  58
            Animating Nodes in the Scene  58
            Using a Timeline for Animation  59
            Using the Transition Classes for Animation  64
            The Zen of Node Collision Detection  71
            Summary  81
            Resources  81
            ■Chapter
            ■
            3: Properties and Bindings  83
            Forerunners of JavaFX Binding  83
            A Motivating Example  84
            iv
            www.allitebooks.com■ Contents
            Understanding Key Interfaces and Concepts  87
            Understanding the Observable Interface  88
            Understanding the ObservableValue Interface  89
            Understanding the WritableValue Interface  90
            Understanding the ReadOnlyProperty Interface  90
            Understanding the Property Interface  90
            Understanding the Binding Interface  92
            Type-Specific Specializations of Key Interfaces  93
            A Common Theme for Type-Specific Interfaces  94
            Commonly Used Classes  97
            Creating Bindings  98
            Understanding the Bindings Utility Class  98
            Understanding the Fluent Interface API  102
            Understanding the JavaFX Beans Convention  112
            The JavaFX Beans Specification  113
            Understanding the Eagerly Instantiated Properties Strategy  113
            Understanding the Lazily Instantiated Properties Strategy  117
            Using Selection Bindings  119
            Adapting JavaBeans Properties to JavaFX Properties  122
            Understanding JavaBeans Properties  122
            Understanding the JavaFX Property Adapters  124
            Summary  127
            Resources  128
            ■Chapter
            ■
            4: Using Scene Builder to Create a User Interface  129
            Setting the Stage with FXML  130
            Creating a User Interface Graphically with JavaFX Scene Builder  130
            Understanding the FXML File  131
            Understanding the Controller  135
            Understanding the FXMLLoader  138
            v
            www.allitebooks.com■ Contents
            Understanding the FXML Loading Facility  140
            Understanding the FXMLLoader Class  141
            Understanding the @FXML Annotation  146
            Exploring the Capabilities of FXML Files  149
            The Deserialization Power of the FXML Format  149
            Understanding Default and Static Properties  156
            Understanding Attribute Resolutions and Bindings  156
            Using Multiple FXML Files  161
            Creating Custom Components Using fx:root  168
            Event Handling Using Scripting or Controller Properties  173
            Using JavaFX Scene Builder  175
            Overview of JavaFX Scene Builder  176
            Understanding the Menu Bar and Items  176
            Understanding the Library Panel  182
            Understanding the Document Panel  185
            Understanding the Content Panel  187
            Understanding the Inspector Panel  188
            Summary  191
            Resources  191
            ■Chapter
            ■
            5: Collections and Concurrency  193
            Understanding Observable Collections and Arrays  193
            Understanding ObservableList  194
            Handling Change Events in ListChangeListener  198
            Understanding ObservableMap  202
            Understanding ObservableSet  206
            Understanding ObservableArrays  209
            Using Factory and Utility Methods from FXCollections  213
            Using the JavaFX Concurrency Framework  218
            Identifying the Threads in a JavaFX Application  218
            Fixing Unresponsive UIs  224
            Understanding the javafx.concurrent Framework  230
            vi
            www.allitebooks.com■ Contents
            Mixing JavaFX with Other GUI Toolkits  251
            Embedding JavaFX Scenes in Swing Applications  251
            Embedding JavaFX Scenes in SWT Applications  258
            Embedding Swing Components in JavaFX Applications  267
            Summary  273
            Resources  275
            ■Chapter
            ■
            6: Creating Charts in JavaFX  277
            Structure of the JavaFX Chart API  277
            Using the JavaFX PieChart  279
            The Simple Example  279
            Some Modifications  282
            Using the XYChart  287
            Using the ScatterChart  288
            Using the LineChart  294
            Using the BarChart  295
            Using the StackedBarChart  297
            Using the AreaChart  299
            Using the StackedAreaChart  300
            Using the BubbleChart  300
            Summary  305
            Resources  305
            ■Chapter
            ■
            7: Connecting to Enterprise Services  307
            Front-End and Back-End Platforms  307
            Merging JavaFX and Java Enterprise Modules in the Same Environment  309
            Using JavaFX to Call Remote (Web) Services  310
            REST  310
            Using External Libraries  336
            Summary  341
            Index  343
            vii
            www.allitebooks.comAbout the Authors
~/Empire/Doks/Comp/lang/java/jfx/javafx9-example.pdf  2017
            Contents at a Glance
            About the Authors...................................................................................................xix
            About the Technical Reviewer ................................................................................xxi
            Acknowledgments ................................................................................................xxiii
            Introduction ...........................................................................................................xxv
            ■Chapter 1: Getting Started ..................................................................................... 1
            ■Chapter 2: JavaFX and Jigsaw ............................................................................ 47
            ■Chapter 3: JavaFX Fundamentals ........................................................................ 69
            ■Chapter 4: Lambdas and Properties .................................................................. 103
            ■Chapter 5: Layouts and Scene Builder............................................................... 135
            ■Chapter 6: User Interface Controls .................................................................... 171
            ■Chapter 7: Graphics ........................................................................................... 227
            ■Chapter 8: JavaFX Printing ................................................................................ 265
            ■Chapter 9: Media and JavaFX ............................................................................ 283
            ■Chapter 10: JavaFX on the Web ......................................................................... 327
            ■Chapter 11: JavaFX 3D ...................................................................................... 367
            ■Chapter 12: JavaFX and Arduino ....................................................................... 391
            ■Chapter 13: JavaFX on Mobile ........................................................................... 431
            ■Chapter 14: JavaFX and Gestures...................................................................... 467
            ■Chapter 15: Custom UIs ..................................................................................... 491
            ■Chapter 16: Appendix A: References ................................................................. 525
            Index ..................................................................................................................... 551
            ivContents
            About the Authors...................................................................................................xix
            About the Technical Reviewer ................................................................................xxi
            Acknowledgments ................................................................................................xxiii
            Introduction ...........................................................................................................xxv
            ■Chapter 1: Getting Started ..................................................................................... 1
            Downloading Required Software ...................................................................................... 1
            Installing the Java 9 Development Kit .............................................................................. 3
            Installing the JDK on Microsoft Windows ............................................................................................... 3
            Installing the JDK on MacOS X ............................................................................................................... 7
            Installing the JDK on Linux ................................................................................................................... 11
            Setting Environment Variables ....................................................................................... 14
            Setup Windows Environment Variables ................................................................................................ 16
            Setting Up MacOS X/Linux Environment Variables ............................................................................... 19
            Installing Gradle ............................................................................................................. 22
            Installing the NetBeans IDE ............................................................................................ 23
            Creating a JavaFX HelloWorld Application...................................................................... 29
            Using the NetBeans IDE ........................................................................................................................ 30
            Using an Editor and the Terminal (the Command-Line Prompt) ........................................................... 34
            Using Gradle on the Command-Line Prompt ....................................................................................... 38
            Walking Through the HelloWorld Source Code ............................................................... 41
            JavaFX Scene Graph ............................................................................................................................. 42
            JavaFX Node ......................................................................................................................................... 42
            v■ CONTENTS
            Packaging a JavaFX Application..................................................................................... 43
            Downloading the Book's Source Code............................................................................ 44
            Summary ........................................................................................................................ 45
            ■Chapter 2: JavaFX and Jigsaw ............................................................................ 47
            What Is Project Jigsaw? ................................................................................................. 48
            Beneﬁts ................................................................................................................................................ 48
            Drawbacks ............................................................................................................................................ 49
            Java 9 Migration Path ........................................................................................................................... 49
            History ............................................................................................................................ 52
            JAR Hell ................................................................................................................................................ 52
            OSGi ...................................................................................................................................................... 53
            Maven/Gradle ....................................................................................................................................... 54
            Getting Started ............................................................................................................... 55
            What Is the Module Path? ..................................................................................................................... 56
            Module Deﬁnition ................................................................................................................................. 57
            Module Types ........................................................................................................................................ 58
            An Example HelloWorld JavaFX 9 Modular Application .................................................. 63
            Create Project Structure ....................................................................................................................... 63
            Create a Module Deﬁnition ................................................................................................................... 63
            Create Main Application Code............................................................................................................... 64
            Compile Code (Module)......................................................................................................................... 65
            Copy Resources .................................................................................................................................... 65
            Run Application..................................................................................................................................... 66
            Package Application as JAR ................................................................................................................. 66
            Run Application as JAR ......................................................................................................................... 67
            Display Module Description .................................................................................................................. 67
            Summary ........................................................................................................................ 68
            vi■ CONTENTS
            ■Chapter 3: JavaFX Fundamentals ........................................................................ 69
            JavaFX Lines .................................................................................................................. 69
            Drawing Lines ................................................................................................................ 74
            Drawing Shapes ............................................................................................................. 78
            Drawing Complex Shapes .............................................................................................. 79
            A Complex Shape Example ................................................................................................................... 79
            The Cubic Curve ................................................................................................................................... 83
            The Ice Cream Cone.............................................................................................................................. 84
            The Smile.............................................................................................................................................. 86
            The Donut ............................................................................................................................................. 86
            Painting Colors ............................................................................................................... 88
            An Example of Color ............................................................................................................................. 88
            Gradient Color ....................................................................................................................................... 92
            Stop Color ............................................................................................................................................. 92
            Linear Gradient ..................................................................................................................................... 92
            Radial Gradient ..................................................................................................................................... 93
            Semitransparent Gradients ................................................................................................................... 94
            Reﬂective Cycle Gradients .................................................................................................................... 94
            Drawing Text................................................................................................................... 95
            Changing Text Fonts ............................................................................................................................. 97
            Applying Text Effects .......................................................................................................................... 100
            Summary ...................................................................................................................... 101
            ■Chapter 4: Lambdas and Properties .................................................................. 103
            Lambda ........................................................................................................................ 103
            Lambda Expressions........................................................................................................................... 104
            Functional Interfaces.................................................................................................... 107
            Aggregate Operations................................................................................................... 108
            vii■ CONTENTS
            Default Methods ........................................................................................................... 111
            An Example Case: Cats Large and Small ............................................................................................ 111
            Code for the Example ......................................................................................................................... 112
            Explanation of the Code ...................................................................................................................... 116
            Properties and Binding ................................................................................................. 117
            UI Patterns .......................................................................................................................................... 117
            Properties ........................................................................................................................................... 117
            Types of JavaFX Properties................................................................................................................. 118
            JavaFX JavaBean................................................................................................................................ 120
            Property Change Support ................................................................................................................... 121
            Binding ......................................................................................................................... 122
            Bidirectional Binding .......................................................................................................................... 123
            High-Level Binding ............................................................................................................................. 123
            Low-Level Binding .............................................................................................................................. 124
            A Logon Dialog Example ............................................................................................... 124
            Login Dialog Source Code................................................................................................................... 126
            Explanation of the Code ...................................................................................................................... 130
            Summary ...................................................................................................................... 134
            ■Chapter 5: Layouts and Scene Builder............................................................... 135
            Layouts ......................................................................................................................... 135
            HBox ................................................................................................................................................... 136
            VBox.................................................................................................................................................... 140
            FlowPane ............................................................................................................................................ 144
            BorderPane ......................................................................................................................................... 144
            GridPane ............................................................................................................................................. 145
            Scene Builder ............................................................................................................... 150
            Download and Installing Scene Builder .............................................................................................. 151
            Launching Scene Builder .................................................................................................................... 151
            A Code Walkthrough ........................................................................................................................... 169
            Summary ...................................................................................................................... 170
            viii■ CONTENTS
            ■Chapter 6: User Interface Controls .................................................................... 171
            Labels ........................................................................................................................... 171
            Custom Fonts...................................................................................................................................... 173
            Fonts as Icons..................................................................................................................................... 174
            Example: Working with Third-Party Font Packs as Icons .................................................................... 174
            How It Works....................................................................................................................................... 181
            Buttons ......................................................................................................................... 185
            Button ................................................................................................................................................. 185
            Check Box ........................................................................................................................................... 186
            Hyperlink ............................................................................................................................................ 187
            Radio Button ....................................................................................................................................... 187
            Example: Button Fun........................................................................................................................... 189
            Button Fun Instructions ...................................................................................................................... 189
            Source Code of ButtonFun.java .......................................................................................................... 190
            How It Works....................................................................................................................................... 196
            Menus........................................................................................................................... 198
            Creating Menus and Menu Items ........................................................................................................ 198
            Invoking a Selected MenuItem ........................................................................................................... 199
            Example: Working with Menus ........................................................................................................... 200
            How It Works....................................................................................................................................... 202
            Additional Ways to Select Menus and Menu Items............................................................................. 203
            The ObservableList Collection Class ............................................................................ 204
            Working with ListViews ................................................................................................ 204
            Example: Hero Picker.......................................................................................................................... 205
            How It Works....................................................................................................................................... 208
            Working with TableViews ............................................................................................. 209
            What Is a Cell Factory? ....................................................................................................................... 209
            Making Table Cells Editable ................................................................................................................ 210
            Example: Bosses and Employees Working with Tables ...................................................................... 212
            ix■ CONTENTS
            Generating a Background Process ............................................................................... 221
            Creating a Background Task ............................................................................................................... 221
            Example: File Copy Progress Dialog (BackgroundProcesses)............................................................. 222
            How It Works....................................................................................................................................... 225
            Summary ...................................................................................................................... 226
            ■Chapter 7: Graphics ........................................................................................... 227
            Working with Images.................................................................................................... 227
            Loading Images .................................................................................................................................. 228
            Displaying Images .............................................................................................................................. 230
            A Photo Viewer Example............................................................................................... 231
            Features/Instructions.......................................................................................................................... 231
            UML: Class Diagram............................................................................................................................ 233
            File Descriptions ................................................................................................................................. 234
            Source Code ....................................................................................................................................... 235
            Animation ..................................................................................................................... 255
            What Are Key Values? ......................................................................................................................... 255
            What Are Keyframes? ......................................................................................................................... 255
            What Is a Timeline? ............................................................................................................................ 256
            JavaFX Transition Classes .................................................................................................................. 256
            Point-and-Click Game Example .................................................................................... 257
            Source Code ....................................................................................................................................... 257
            How It Works....................................................................................................................................... 261
            Compound Transitions .................................................................................................. 261
            PhotoViewer2 Example................................................................................................. 262
            Summary ...................................................................................................................... 264
            ■Chapter 8: JavaFX Printing ................................................................................ 265
            JavaFX Printing ............................................................................................................ 265
            JavaFX Print APIs.......................................................................................................... 268
            x■ CONTENTS
            Printer and PrinterJob .................................................................................................. 268
            Query Printer Attributes ...................................................................................................................... 270
            Conﬁguring a Print Job ....................................................................................................................... 272
            Printing a Web Page ..................................................................................................... 274
            Example WebDocPrinter Application ............................................................................ 275
            Source Code ....................................................................................................................................... 277
            How Does It Work? ............................................................................................................................. 281
            Summary ...................................................................................................................... 282
            ■Chapter 9: Media and JavaFX ............................................................................ 283
            Media Events ................................................................................................................ 283
            Playing Audio ................................................................................................................ 285
            An MP3 Player Example ...................................................................................................................... 285
            MP3 Audio Player Source Code .......................................................................................................... 287
            How It Works....................................................................................................................................... 301
            Playing Video ................................................................................................................ 314
            MPEG-4 ............................................................................................................................................... 314
            VP6 .ﬂv................................................................................................................................................ 314
            A Video Player Example ...................................................................................................................... 315
            Video Player Source Code................................................................................................................... 316
            How It Works....................................................................................................................................... 320
            Simulating Closed Captioning: Marking a Position in a Video Media ........................... 323
            Closed Captioning Video Example ...................................................................................................... 323
            How It Works....................................................................................................................................... 325
            Summary ...................................................................................................................... 325
            ■Chapter 10: JavaFX on the Web ......................................................................... 327
            JavaFX Web and HTTP2 APIs ........................................................................................ 328
            Web Engine .................................................................................................................. 330
            WebEngine's load() Method ................................................................................................................ 330
            WebEngine's loadContent() Method .................................................................................................... 331
            xi■ CONTENTS
            HTML DOM Content ...................................................................................................... 331
            Obtaining an org.w3c.dom.Document (DOM) Object .......................................................................... 331
            Using Raw XML Content as a String ................................................................................................... 332
            The JavaScript Bridge ........................................................................................................................ 332
            Communicating from Java to JavaScript ............................................................................................ 333
            Communicating from JavaScript to Java ............................................................................................ 333
            Java 9 Module jdk.incubator.httpclient............................................................................................... 335
            Making RESTful Requests................................................................................................................... 339
            The HTTP GET Request ....................................................................................................................... 340
            HTTP POST Request ............................................................................................................................ 341
            WebSockets ........................................................................................................................................ 342
            Viewing HTML5 Content (WebView).................................................................................................... 345
            Example: An HTML5 Analog Clock ...................................................................................................... 345
            Analog Clock Source Code.................................................................................................................. 346
            How It Works....................................................................................................................................... 349
            Inkscape and SVG ............................................................................................................................... 349
            WebEvents .......................................................................................................................................... 350
            Weather Widget Example.................................................................................................................... 351
            One-Liner: Reading an Input Stream into a String .............................................................................. 353
            Source Code ....................................................................................................................................... 354
            How It Works....................................................................................................................................... 363
            Enhancements .................................................................................................................................... 364
            Summary ...................................................................................................................... 365
            ■Chapter 11: JavaFX 3D ...................................................................................... 367
            Basic 3D Scenes in JavaFX .......................................................................................... 367
            A Very Basic 3D Scene Example ......................................................................................................... 367
            Primitives ..................................................................................................................... 369
            Adding a Primitive Example ......................................................................................... 369
            Simple Translate and Rotate Example ................................................................................................ 371
            Multiple Primitive Transformation Example ........................................................................................ 372
            All Together Now: Grouped Primitives ................................................................................................ 373
            xii■ CONTENTS
            Interacting with Your Scene ......................................................................................... 374
            Primitive Picking for Primitives .......................................................................................................... 375
            First Person Movement Using the Keyboard....................................................................................... 376
            First Person Camera Movement Using the Mouse.............................................................................. 377
            Beyond the Basics ........................................................................................................ 379
            Custom 3D Objects Using the TriangleMesh Class ............................................................................. 380
            “Winding” and Wuthering ................................................................................................................... 380
            MeshViews and DrawMode ................................................................................................................ 383
            Roll Camera! ....................................................................................................................................... 388
            Hit the Lights ...................................................................................................................................... 389
            Summary ...................................................................................................................... 390
            ■Chapter 12: JavaFX and Arduino ....................................................................... 391
            The Arduino Board ........................................................................................................ 391
            Programming the Arduino ............................................................................................ 393
            Arduino Web Editor ............................................................................................................................. 394
            Arduino IDE ......................................................................................................................................... 396
            Windows ............................................................................................................................................. 396
            MacOS X or Linux ............................................................................................................................... 398
            Running the IDE .................................................................................................................................. 398
            The Blink Example .............................................................................................................................. 400
            Orientation Visualizer Example ..................................................................................... 401
            How It Works....................................................................................................................................... 406
            Serial Reading .............................................................................................................. 406
            Java Simple Serial Connector............................................................................................................. 406
            JavaFX, the Charting API, and Orientation .................................................................... 406
            Creating the Module Project ............................................................................................................... 407
            Serial Communications....................................................................................................................... 409
            How It Works....................................................................................................................................... 412
            Testing Serial Comms ......................................................................................................................... 414
            The JavaFX Charts API ........................................................................................................................ 414
            Building and Running the Project ....................................................................................................... 420
            xiii■ CONTENTS
            How It Works....................................................................................................................................... 421
            Adding More Functionality .................................................................................................................. 425
            Building and Running the Project ....................................................................................................... 427
            How It Works....................................................................................................................................... 428
            More Examples............................................................................................................. 430
            Summary ...................................................................................................................... 430
            ■Chapter 13: JavaFX on Mobile ........................................................................... 431
            JavaFXPorts: The Port to Mobile ................................................................................... 431
            JavaFXPorts Under the Hood .............................................................................................................. 431
            Getting Started with JavaFXPorts ....................................................................................................... 432
            Hello Mobile World Example ......................................................................................... 433
            How Does It Work? ............................................................................................................................. 435
            Submitting the App to the Stores........................................................................................................ 437
            Gluon Mobile ................................................................................................................ 438
            The Gluon IDE Plug-Ins ....................................................................................................................... 438
            Charm Glisten ..................................................................................................................................... 439
            License ............................................................................................................................................... 441
            Example: The BasketStats App ..................................................................................... 441
            Creating the Project ............................................................................................................................ 441
            Adding the Model................................................................................................................................ 447
            Adding the Service ............................................................................................................................. 450
            Modifying the Main View .................................................................................................................... 453
            Modifying the Board View ................................................................................................................... 457
            Deploy to Mobile ................................................................................................................................. 464
            More Examples............................................................................................................. 465
            Summary ...................................................................................................................... 465
            ■Chapter 14: JavaFX and Gestures...................................................................... 467
            Recognizing Gestures in Your Application .................................................................... 467
            Example: Animating Shapes Along a Path Using Touch Events .................................... 469
            How Does It Work? ............................................................................................................................. 472
            xiv■ CONTENTS
            Touching, Rotating, and Zooming in 3D ........................................................................ 473
            The Leap Motion Controller .......................................................................................... 476
            How It Works....................................................................................................................................... 477
            Getting Started with the Leap SDK ..................................................................................................... 478
            Adding the Leap SDK to a JavaFX Project .......................................................................................... 479
            The Hands Tracking Example.............................................................................................................. 479
            The LeapListener Class....................................................................................................................... 480
            The 3D Model Classes ........................................................................................................................ 483
            The Application Class ......................................................................................................................... 485
            Building and Running the Project ....................................................................................................... 487
            More Examples............................................................................................................. 489
            Summary ...................................................................................................................... 489
            ■Chapter 15: Custom UIs ..................................................................................... 491
            Theming ....................................................................................................................... 491
            Native Look and Feels ........................................................................................................................ 493
            Web and Mobile Look and Feels ......................................................................................................... 495
            Applying the JavaFX CSS Theme ........................................................................................................ 497
            An Example of Switching Themes ...................................................................................................... 500
            JavaFX CSS Styling ...................................................................................................... 505
            What Are Selectors? ........................................................................................................................... 506
            How to Deﬁne -fx- Based Styling Properties (Rules) .......................................................................... 511
            Obeying the JavaFX CSS Rules ........................................................................................................... 512
            Custom Controls ........................................................................................................... 513
            The LED Custom Control ..................................................................................................................... 514
            Structure of the LED Custom Control Example Code .......................................................................... 515
            The Properties of the LED Control....................................................................................................... 516
            The Initialization Code of the LED Control........................................................................................... 519
            Other Ways to Create a Custom Control.............................................................................................. 523
            Summary ...................................................................................................................... 523
            xv■ CONTENTS
            ■Chapter 16: Appendix A: References ................................................................. 525
            Java 9 SDK ................................................................................................................... 525
            Java 9 API Documentation............................................................................................ 525
            Java 9 Features ............................................................................................................ 525
            Java 9 Jigsaw .............................................................................................................. 526
            IDEs .............................................................................................................................. 526
            Deploying Applications ................................................................................................. 526
            JavaFX 2D Shapes ........................................................................................................ 527
            JavaFX Color................................................................................................................. 527
            JavaFX 2.x Builder Classes .......................................................................................... 527
            JavaFX Printing ............................................................................................................ 527
            Project Lambda ............................................................................................................ 528
            Nashorn ........................................................................................................................ 529
            Properties and Bindings ............................................................................................... 529
            Layouts ......................................................................................................................... 530
            JavaFX Tools ................................................................................................................. 530
            Enterprise GUI Frameworks.......................................................................................... 531
            Domain-Speciﬁc Languages ........................................................................................ 532
            Custom UIs ................................................................................................................... 532
            Operating System Style Guidelines .............................................................................. 535
            JavaFX Media ............................................................................................................... 535
            JavaFX on the Web ....................................................................................................... 536
            JavaFX 3D .................................................................................................................... 537
            JavaFX Gaming............................................................................................................. 538
            Java IoT and JavaFX Embedded ................................................................................... 539
            Software and Device Manufacturers ............................................................................ 540
            JavaFX Communities .................................................................................................... 540
            xvi■ CONTENTS
            Applications.................................................................................................................. 541
            Java/JavaFX Books and Magazines ............................................................................. 543
            Author Blogs ................................................................................................................. 544
            Tutorials, Courses, Consulting Firms, and Demos ........................................................ 544
            Tools, Applications, and Libraries ................................................................................. 545
            Videos and Presentations on JavaFX ........................................................................... 547
            Index ..................................................................................................................... 551
~/Empire/Doks/Comp/lang/java/jfx/javafxcb.pdf         2016
            Contents
            1
            JavaFX Tutorial for Beginners1
            1.1Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1
            1.2Your First JavaFX Application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1
            1.2.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1
            1.2.2Overriding the start() Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .2
            1.2.3Showing the Stage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .2
            1.2.4Launching the Application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .3
            1.2.5Adding a Scene to the Stage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .3
            1.2.6The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .4
            Controls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .4
            1.3.1Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .4
            1.3.2Label . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .5
            1.3.2.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .5
            1.3.2.2Adding a Mnemonic to a Label . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .6
            1.3.2.3The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .7
            TextField . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .7
            1.3.3.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .7
            1.3.3.2Setting the width of a TextField . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .9
            1.3.3.3Adding ActionEvent Handler to a TextField . . . . . . . . . . . . . . . . . . . . . . . . . . .9
            1.3.3.4The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .9
            1.3
            1.3.3
            1.3.4
            1.3.5
            1.3.6
            Button . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
            1.3.4.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
            1.3.4.2Adding ActionEvent Handler to a Button . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
            1.3.4.3Setting the mode of a Button . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
            1.3.4.4The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
            MenuButton . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
            1.3.5.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
            1.3.5.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
            CheckBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
            1.3.6.1
            The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21JavaFX Programming Cookbook
            1.3.7
            1.3.8
            1.3.9
            iii
            1.3.6.2The ObservableValue Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
            1.3.6.3The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
            ToggleButton . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
            1.3.7.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
            1.3.7.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
            RadioButton . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
            1.3.8.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
            1.3.8.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
            ChoiceBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
            1.3.9.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
            1.3.9.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
            1.3.10 ComboBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
            1.3.10.1 The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
            1.3.10.2 The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
            1.3.11 ListView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
            1.3.11.1 The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
            1.3.11.2 The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
            1.3.12 TextArea . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
            1.3.12.1 The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
            1.3.12.2 The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
            1.3.13 Menu . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
            1.3.13.1 The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
            1.3.13.2 Using Menu Bars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
            1.3.13.3 Using Menus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
            1.3.13.4 Using Menu Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
            1.3.13.5 The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
            1.4
            2
            Download Java Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
            The JavaFX Media API
            49
            2.1Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
            2.2Playing Audio Clips . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
            2.3
            2.2.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
            2.2.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
            Playing Media . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
            2.3.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
            2.3.2Creating a Media Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
            2.3.3Creating a MediaPlayer Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
            2.3.4Creating a MediaView Node . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
            2.3.5Customizing the MediaView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58JavaFX Programming Cookbook
            2.4
            2.5
            2.6
            2.7
            2.8
            2.9
            iv
            2.3.6Combining Media, MediaPlayer, and MediaView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
            2.3.7The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
            Handling Playback Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
            2.4.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
            2.4.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
            State Transitions of the MediaPlayer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
            2.5.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
            2.5.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
            Controlling Media Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
            2.6.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
            2.6.2Repeating Media Playback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
            2.6.3Controlling the Playback Rate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
            2.6.4Controlling the Playback Volume . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
            2.6.5The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
            Tracking Media Time . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
            2.7.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
            2.7.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
            Marking Positions in the Media . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
            2.8.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
            2.8.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
            Showing Media Metadata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
            2.9.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
            2.9.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
            2.10 Download Java Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
            3
            The JavaFX Concurrent Framework
            91
            3.1Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
            3.2Understanding the Worker Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
            3.3
            3.2.1Utility Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
            3.2.2State Transitions for a Worker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
            3.2.3Properties of a Worker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
            Using the Task Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
            3.3.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
            3.3.2Creating a Task . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
            3.3.3Updating Task Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
            3.3.4Listening to Task Transition Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
            3.3.5Cancelling a Task . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
            3.3.6Running a Task . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
            3.3.7The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102JavaFX Programming Cookbook
            3.4
            3.5
            3.6
            4
            Using the Service Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
            3.4.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
            3.4.2Creating a Service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
            3.4.3Updating Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
            3.4.4Cancelling the Service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
            3.4.5Starting the Service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
            3.4.6Resetting the Service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
            3.4.7Restarting the Service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
            3.4.8The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
            Using the ScheduledService Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
            3.5.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
            3.5.2Creating a ScheduledService . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
            3.5.3Updating ScheduledService Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
            3.5.4Listening to ScheduledService Transition Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
            3.5.5The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
            Download Java Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
            JavaFX Animation Example
            4.1
            4.2
            4.3
            v
            122
            Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
            4.1.1The Duration Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
            4.1.2The KeyValue Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
            4.1.3The KeyFrame Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
            The Timeline Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
            4.2.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
            4.2.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
            Controlling an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
            4.3.1
            4.3.2
            4.3.3
            Playing, Stopping and Pausing an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
            4.3.1.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
            4.3.1.2Playing an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
            4.3.1.3Stopping an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
            4.3.1.4Pausing an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131
            4.3.1.5Knowing the State of an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131
            4.3.1.6The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131
            Delaying the Start of an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
            4.3.2.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
            4.3.2.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
            Looping an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
            4.3.3.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
            4.3.3.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135JavaFX Programming Cookbook
            4.3.4
            4.3.5
            4.4
            4.5
            5
            Auto Reversing an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
            4.3.4.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
            4.3.4.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
            Adjusting the Speed of an Animation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
            4.3.5.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
            4.3.5.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
            Understanding Cue Points . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
            4.4.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
            4.4.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
            Download Java Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
            JavaFX Canvas Example
            5.1
            5.2
            5.1.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
            5.1.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
            Drawing on the Canvas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
            5.2.1Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
            5.2.2Drawing Basic Shapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
            5.2.4
            5.2.5
            5.2.6
            5.4
            143
            Creating a Canvas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
            5.2.3
            5.3
            vi
            5.2.2.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
            5.2.2.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
            Drawing Text . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148
            5.2.3.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148
            5.2.3.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
            Drawing Paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
            5.2.4.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
            5.2.4.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
            Drawing Images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
            5.2.5.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
            5.2.5.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
            Writing Pixels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
            5.2.6.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
            5.2.6.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
            Clearing the Canvas Area . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
            5.3.1The Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
            5.3.2The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
            Download Java Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160JavaFX Programming Cookbook
            6
            JavaFX FXML Tutorial
            6.1
            6.2
            6.3
            6.4
            6.5
            6.6
            6.7
            6.8
            6.9
            vii
            161
            Introduction to FXML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
            6.1.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
            6.1.2Adding UI Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
            6.1.3Importing Java Types in FXML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
            6.1.4Setting Properties in FXML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
            6.1.5Specifying FXML Namespace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
            6.1.6Assigning an Identifier to an Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
            6.1.7The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
            6.1.8The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
            Using Script Event Handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
            6.2.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
            6.2.2The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
            6.2.3The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
            Using Controller Event Handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
            6.3.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
            6.3.2The Controller Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
            6.3.3The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
            6.3.4The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
            Including FXML Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
            6.4.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
            6.4.2The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
            6.4.3The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
            Reusable Objects and Referencing Another Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
            6.5.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
            6.5.2Creating Reusable Objects in FXML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
            6.5.3Referencing Another Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
            6.5.4The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
            6.5.5The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
            Using Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
            6.6.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
            6.6.2The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
            6.6.3The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
            Binding Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
            6.7.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
            6.7.2The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
            6.7.3The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
            Using Resource Bundles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
            6.8.1The FXML Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
            6.8.2The Properties Files for the Resource Bundles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
            6.8.3The Corresponding Java Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
            6.8.4The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
            Download Java Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184JavaFX Programming Cookbookviii
            7185
            JavaFX Applications with e(fx)clipse
            7.1Installing the e(fx)clipse IDE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
            7.2Your first JavaFX Example with e(fx)clipse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
            7.3
            7.4
            7.2.1Creation of the JavaFX Project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
            7.2.2Changing the Main Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
            7.2.3Changing the StyleSheet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
            7.2.4The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
            A JavaFX FXML Example with e(fx)clipse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
            7.3.1Creation of the JavaFX Project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
            7.3.2Changing the Main Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
            7.3.3Changing the StyleSheet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
            7.3.4Changing the FXML File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
            7.3.5Changing the Controller Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
            7.3.6The GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
            Download Java Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
~/Empire/Doks/Comp/lang/java/jfx/jfx-action_2010.txt
~/Empire/Doks/Comp/lang/java/jfx/jfx-action_2010.pdf
            Welcome to the future: introducing JavaFX 1

            .
            Cn

            Introducing JavaFX 2

            Why do we need JavaFX Script? The power of aDSL— 2 © Back to
            the future: the rise of the cloud 4 © Form follows function: the fall
            and relnrth of desktop Java 6

            Minimum effort, maximum impact: a quick shot of JavaFX = 8
            Comparing Java and JavaFX Script: “Hello JavaFX!" 10
            Comparing JavaFX with Adobe AIR, GWT, and Silverlight 11

            Adobe AIR and Flex 11 * Google Web Toolkit 11 * Microsoft
            Silverlight 12 ¢ And by companison, JavaFX 12

            But why should I buy this book? = 12
            Summary 13

             

            DD Ee ee a ae 15
            meh

            2.2

            2.3

            2.4
            eo

            2.6

            2.8

            Annotating code with comments — 16

            Data types 17
            Static, not dynamic, types 17 * Value type declaration = 17
            Initialize-only and reassignable variables (var, def) 20
            Arithmetic on value types (+, -, ete.) 21 « Logic operators (and, or,
            not, <, >, =, >=, <=, /=) 22 Translating and checking types (as,
            instanceof) 23 .

            Working with text, via strings 24
            String literals and embedded expressions 24 © String
            formatting 25 © String localization 26

            Durations, using time literals 28

            Sequences: not quite arrays 29
            Basic sequence declaration and access (sizeof) 29 © Sequence
            creation using ranges ([..], step) 30 © Sequence creation using
            slices ([..<] ) 31 © Sequence creation using a predicate 32
            Sequence manipulation (insert, delete, reverse) 32 ¢ Sequences,
            behind the scenes 34

            Autoupdating related data, with binds 34

            Binding to variables (bind) 35 + Binding to bound variables 36
            Binding to a sequence element 36 © Binding to an entire sequence
            (for) 37 Binding to code 37 © Bidirectional binds (uith
            inverse) 38 © The mechanics behind bindings 39 * Bound
            functions (bound) 40 * Bound object literals 42

            Working nicely with Java 43

            Avoiding naming conflicts, with quoted identifiers 43 * Handling
            Java native arrays (nativearray of) 44

            Summary 45

            ~) JavaFX Script code and structure 46

            PF” 31

            3.2

            Imposing order and control with packages
            (package, import) 47

            Developing classes 48

            Senpts 48 © Class definition (class, def, var, function, this) 49
            Otnect declaration (mit, postinit, isInitialized(), new) 52 © Object
            declaration and sequences 54 © Class inheritance (abstract,
            extends, overnde) 55 ¢ Mixin inheritance (mixin) 58
            Function types 61 © Anonymous functions 62 © Access
            modifiers (package, protected, public, public-read, public-init) 64

            3.3

            3.5
            3.6

            3.7

            3.8

            Flow control, using conditions 67
            Basic conditions (if, else) 67 * Conditions as expressions 68
            Ternary expressions and beyond 69
            Sequence-based loops 70
            Basic sequence loops (for) 70 + For loops as expressions
            (indexof) 71 + Rolling nested loops into one expression 71
            Controlling flow within for loops (break, continue) 72 © Filtering
            for expressions (where) 73
            Repeating code with while loops (while, break, continue) 73
            Act on variable and sequence changes, using triggers 74

            Single-value triggers (on replace) 74 © Sequence triggers (on
            replace [..]) 75

            Trap problems using exceptions
            (try, catch, any, finally) 76

            Summary 78

            Swing by numbers 79

            4.1

            4.2

            4.3

            4.4
            4.5
            4.6

            Swing ume: Puzzle, version 1 82
            Our initial puzzle data class 82 © Our initial GUI class 83
            Building the buttons 85 «© Model/View/Controller, JavaFX Script
            style 87 Running version] 88

            Better informed and better looking: Puzzle, version 2. 88
            Making the puzzle class clever, using (niggers and function
            types 88 © Group checking up close: function types 90 + Firing
            the update: triggers 92 ¢ Better-looking GUI: playing with the
            underlying Suing component 92 Running version 2 94

            Game on: Puzzle, version 3 95

            Adding stats to the puzzle class 96 © Finishing off the puzzle
            grid GUI 98 + Adding a status line to our GUI unth a
            label 101 © Running version 3 102

            Other Swing components — 103
            Bonus: using bind to validate forms — 103

            Summary 105

            5 Behind the scene graph 106

            5.1

            What is a scene graph? = 107
            Nodes: the building blocks of the scene graph 108 © Groups: graph
            manipulation made easy 108

             

            5.2 Getting animated: LightShow, version 1 109
            Raindrop animations 109 * The RainDrop class: creating graphics from
            geometric shapes 110 + Timelines and animation (Timeline,
            KeyFrame) 112 © Interpolating variables across a timeline (at, tween,
            =>) 113 Howthe RainDropclassworks 115 © The LightShow class,
            version 1: a stage for our scene graph 115 * Running version] = 118
            5.3 Total wansformation: LightShow, version 2. 118
            The swirling lines animation 118 © The Swirlinglines class:
            rectangles, rotations, and transformations 119° Manipulating
            node rendering with transformations 121 © The LightShow class,
            version 2: color animations 124° Running version 2 127

            5.4 Lost in translation? Positioning nodes in the scene graph = 128
            5.5 Bonus: creating hypertextstyle links 129
            5.6 Summary 130

            Moving pictures 132
            J 6.1 Taking control: Video Player, version 1 134

            The Uul class: creating tmage nodes — 134 © The Button class: scene
            graph images and user input 135 ¢ The GndBox class: lay out
            your nodes 140 © The Player class, version 1 142 ¢ Running
            wrsion | 144

            6.2. Making the list: Video Player, version 2. 145
            The Last dass: a complex multipart custom node 146 ¢ The
            ListPane class: scrolling and clipping a scene graph 149 « Using
            media in JavaFX 152 © The Player class, version 2: video and
            linear gradients 154 © Creating varying color fills unth
            LinearGradient 159° Running version 2 16]

            6.3 Bonus: taking control of fonts 161

            6.4 Summary 163

            / Controls, charts, and storage 165
            7.1 Comments welcome: Feedback, version 1 166
            The Record class: a bound model for our UI 167 © The Feedback class:
            controls and panel containers 168 « Running version 1 175
            7.2. Chart topping: Feedback, version 2. 175
            Cross-platform persistent storage 176 © How Storage manages its
            files 179 Adding pie and bar charts 180 « Taking control of

            chart axes 187 © Other chant controls (area, bubble, line, and
            scatter) 188 ¢ Running version 2 190

            7.3 Bonus: creating a styled UI control in JavaFX 190

            What is a stylesheet? 191 © Creating a control: the Progress

            class 192 © Creating a skin: the ProgressSkin class 193

            Using our styled control with a CSS document 196 © Further CSS
            details 199

            7.4. Summary 200

            S Web services with style 202
            8.1 Our project: a Flickr image viewer 203
            The Flickr web service 204 © Getting registered with Flickr 204

            8.2 Using a web service in JavaFX = 205
            Calling the web service with HttpRequest 205 © Parsing XML
            with PullParser 208 ¢ A recap 212° Testing our web service
            code 212

            8.3 Picture this: the PhotoViewer application 213
            Displaying thumbnails from the web service: the Gallery View
            class 214° The easy way to animate: transitions 220° The
            main photo desktop: the PhotoViewer class 221 * Running the
            application 228

            8.4 Size matters: node bounds in different contexts 228
            8.5 Summary 229

            (_) From app to applet 230

            9.1 The Enigma project 231
            The mechanics of the Enigma apher 231

            9.2. Programmer/ designer workflow:
            Enigma machine, version | 232

            Getting ready to use the JavaFX Production Suite 233
            Converting SVG files toFXZ 234 © The Rotor class: the heart of the
            encryption 236 © A quick utility class 238 * The Key class:
            input to the machine 239° The Lamp class: output from the
            machine 241 © The Enigma class: binding the encryption engine
            to the interface 243 © Running version 1 246 © Shortcuts
            using NetBeans, Photoshop, or Illustrator 246

            9.3 More cryptic: Enigma machine, version 2. 247
            The Rotor class, version 2: giving the cipher a visual presence 248
            The Paper class: making a permanent output record 251° The

            Enigma class, version 2: at last our code is ready to
            encode 253 Running version 2 256

             

            9.4 From application to applet 257
            The Enigma class: from application to applet. 257 * The JavaFX
            Packager utility 259+ Packaging up the applet 260
            Dragging the applet onto the desktop 263

            9.5 Bonus: Building the Ulin an art tool 266

            9.6 Summary 268

            10 Clever graphics and smart phones 270 :
            : 10.1 Amazing games: a retro 3D puzzle = 271
            Creating a faux 3D effect 272 ¢ Using 2D to create 3D = 273
            10.2. The maze game 274

            The MazeDisplay class: 3D view from 2D points 274 © The Map class:
            where are we? 282 ¢ The Radar class: this is where we are 284
            The Compass class: this is where we're facing 286 ¢ The ScoreBoard
            class: are we there yet? ~=288 © The MazeGame class: our
            application 289 Running the MazeGame project 291

            10.3. On the move: desktop to mobile in a single bound = 291

            Packaging the game for the mobile profile 292 © Running the
            mobile emulator 293 Emulator options 295 © Running the
            software on a real phone 295

            10.4 Performance tips 297

            10.5 Summary 298

            / ] Best of both worlds: using JavaFX from Java 300
            11.1 Different styles of linking the two languages 301
            11.2 Adventures in JavaFX Script 301

            Game engine events 303 © Calling the JavaFX Senpt event code
            from fava 305

            11.3 Adding FX to fava 308

            The problem urith mixing languages 309 © The problem solved: an
            elegant solution to link the languages 309 © Fetching the JavaFX
            Senpt object from unthin fava 311

            11.4 Summary 313

            appendix A Getting started = 315
            appendix B JavaFX Script: a quick reference 323
            appendix C Not familiar with Java? 343

            appendix D JavaFX and the Java platform 350

