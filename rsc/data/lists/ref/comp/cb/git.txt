set foldmethod=indent foldlevel=2
vim: fdm=indent:fdl=2:
___LatestAddition

VCS.META-LIST (Git, Fossil, ...) ----

Git Ptools (Empire)
                    open github (vs-code) online editor  .
                    Add Global Access-Key
                        ssh-keygen -t ed25519 -C "mailaddress@gmail.com"
                        cat ~/.ssh/id_ed25519.pub | vim -  #+copy into github 'public key'
                        ----
                        eval `ssh-agent`; ssh-add ~/.ssh/id_ed25519  //
                    linux: Clone with ssh
                        // save login for this 'terminal session'
                        ssh-add ~/.ssh/id_ed25519  + passphrase
                                        ^
                                        +--private key
                        clone with ssh: git@github.com:bluelegend76/komvux2023-cpp.git

Git Extensions (win) / git-bash (win)
    TODO: Generate + paste shortcuts quicklist

evince -p 1 ~/Dropbox/rsc/Doks/gitbitb.cheetsh.pdf &
            Git Basics ----
                .
                git init <directory>

                Create empty Git repo in specified directory. Run with no arguments
                to initialize the current directory as a git repository.

                git clone <repo>

                Clone repo located at <repo> onto local machine. Original repo can be
                located on the local filesystem or on a remote machine via HTTP or SSH.

                git config user.name <name>

                Define author name to be used for all commits in current repo. Devs
                commonly use --global flag to set config options for current user.

                git add <directory>

                Stage all changes in <directory> for the next commit.
                Replace <directory> with a <file> to change a specific file.

                git commit -m "<message>"

                Commit the staged snapshot, but instead of launching a text editor,
                use <message> as the commit message.

                git status

                List which files are staged, unstaged, and untracked.

                git log

                Display the entire commit history using the default format.
                For customization see additional options.

                git diff

                Show unstaged changes between your index and working directory.
            Undoing Changes ----
                .
                git revert <commit>

                Create new commit that undoes all of the changes made in
                <commit>, then apply it to the current branch.

                git reset <file>

                Remove <file> from the staging area, but leave the working directory
                unchanged. This unstages a file without overwriting any changes.

                git clean -n

                Shows which files would be removed from working directory. Use
                the -f flag in place of the -n flag to execute the clean.
                Rewriting Git History --
                git commit --amend

                Replace the last commit with the staged changes and last commit
                combined. Use with nothing staged to edit the last commit's message.

                git rebase <base>

                Rebase the current branch onto <base>. <base> can be a commit ID,
                a branch name, a tag, or a relative reference to HEAD.

                git reflog

                Show a log of changes to the local repository's HEAD. Add
                --relative-date flag to show date info or --all to show all refs.
            Git Branches ----
                .
                git branch

                List all of the branches in your repo. Add a <branch> argument to
                create a new branch with the name <branch>.

                git checkout -b <branch>

                Create and check out a new branch named <branch>. Drop the -b
                flag to checkout an existing branch.

                git merge <branch>

                Merge <branch> into the current branch.
            Remote Repositories ----
                .
                git remote add <name> <url>

                Create a new connection to a remote repo. After adding a remote,
                you can use <name> as a shortcut for <url> in other commands.

                git fetch <remote> <branch>

                Fetches a specific <branch>, from the repo. Leave off <branch> to
                fetch all remote refs.

                git pull <remote>

                Fetch the specified remote's copy of current branch and immediately
                merge it into the local copy.

                git push <remote> <branch>

                Push the branch to <remote>, along with necessary commits and
                objects. Creates named branch in the remote repo if it doesn't exist.

                Visit atlassian.com/git for more information, training, and tutorials

                evince -p 2 ~/Dropbox/rsc/Doks/gitbitb.cheetsh.pdf &
            git config ----
                .
                git config --global user.name <name>

                Define the author name to be used for all commits by the current user.

                git config --global user.email <email>

                Define the author email to be used for all commits by the current user.

                git config --global alias. <alias-name> <git-command>

                Create shortcut for a Git command. E.g. alias.glog log --graph
                --oneline will set git glog equivalent to git log --graph --oneline.

                git config --system core.editor <editor>

                Set text editor used by commands for all users on the machine. <editor>
                arg should be the command that launches the desired editor (e.g., vi).

                git config --global --edit

                Open the global configuration file in a text editor for manual editing.
            git log ----
                .
                git log -<limit>

                Limit number of commits by <limit>. E.g. git
                commits.

                git log --oneline

                Condense each commit to a single line.

                git log -p

                Display the full diff of each commit.

                git log --stat

                Include which files were altered and the relative number of lines
                that were added or deleted from each of them.

                git log --author="<pattern>"

                Search for commits by a particular author.

                git log --author="<pattern>"

                Search for commits with a commit message that matches <pattern>.

                git log <since>..<until>

                Show commits that occur between <since> and <until>. Args can be a
                commit ID, branch name, HEAD, or any other kind of revision reference.

                git log -- <file>

                Only display commits that have the specified file.

                git log --graph --decorate

                --graph flag draws a text based graph of commits on left side of commit
                msgs. --decorate adds names of branches or tags of commits shown.
            git diff ----
                .
                git diff HEAD

                Show difference between working directory and last commit.

                git diff --cached

                Show difference between staged changes and last commit
            git reset ----
                .
                git reset

                Reset staging area to match most recent commit, but leave the
                working directory unchanged.

                git reset --hard

                Reset staging area and working directory to match most recent
                commit and overwrites all changes in the working directory.

                git reset <commit>

                Move the current branch tip backward to <commit>, reset the
                staging area to match, but leave the working directory alone.

                git reset --hard

                Same as previous, but resets both the staging area & working directory to
                match. Deletes uncommitted changes, and all commits after <commit>.
            git rebase ----
                .
                git rebase -i <base>

                Interactively rebase current branch onto <base>. Launches editor to enter
                commands for how each commit will be transferred to the new base.
            git pull ----
                .
                git pull --rebase <remote>

                Fetch the remote's copy of current branch and rebases it into the local
                copy. Uses git rebase instead of merge to integrate the branches.
            git push ----
                .
                git push <remote> --force

                Forces the git push even if it results in a non-fast-forward merge. Do not use
                the --force flag unless you're absolutely sure you know what you're doing.

                git push <remote> --all

                Push all of your local branches to the specified remote.

                git push <remote> --tags

                Tags aren't automatically pushed when you push a branch or use the
                --all flag. The --tags flag sends all of your local tags to the remote repo.
git-Commands.list.txt
    https://git-scm.com/docs/git#_git_commands
                config
            init
            add
            stage
                commit
            clone
            pull
                fetch  [__]
            push
            merge
            rebase
                =integrate changes from one branch into another;
                similar to git merge, but(!) it rewrites the commit-history
                [cleaning up feature-branch history (e.g. squashing together unnecessary commits)]
                git rebase -i  'interactive rebase'
                revert
            help
            status  @
                shortlog
                log
                show
            blame
                understand the history of a file
                = who made each change, and when
                bisect
                    finding the commit that introduced a bug/change in behavior
                    (=mark the known good + known bad commits, (etc ...))
            branch
            switch
                more modern replacement for 'checkout'
                (has multiple uses - switching branches, checking out files, etc.)
            checkout
                sparse-checkout

            stash
            cherry-pick
                [picking small features or just single commits]
                cherry
            ----
            am
                apply patches created with git format-patch
                (=applies the patches + re-creates the commits)
                archive
                    create archive of a Git repo (like a zip/tarball, without the .git etc)
                    (e.g. creating release-packages)
                bundle
                    =for transferring Git-repos (or parts of them) as a single file
            apply
                apply patches created with git format-patch
                (=applies the patches + not re-creating the commits
                 = staging and commiting has to be managed by oneself)

            diff
                clean

                difftool
                mergetool
                gui

                citool
                    (launch graphical tool for interactive committing - instead of git add + git commit)
                gitk
                    =lanches a graphical Git repository browser
                    [shows: history, branches, tags, commits]
                    (+inspecting the 'git graph', file-changes, etc]
                instaweb
                    starts a simple web server that lets you browse your Git repository using a web browser
                    (related to Gitweb, but for quicker, temporary access)

                fsck
                    checks the integrity of your repository's objects and references.  It can help you identify corrupted objects or other problems in your Git database
                gc ('garbage-collection')
                    cleans up unnecessary files and objects in your Git repository
                repack
                    packs loose Git objects into pack files.
                    It's similar to 
                    git gc in that it improves repository efficiency and reduces disk space usage
                    (like a subset of gc)

            remote
            grep
            reset
                format-patch
                range-diff
                reflog  @
                    shows a log of where your branch pointers have been pointing.
                    It's a very useful recovery tool.
                    If you accidentally delete a branch, overwrite a commit, or make some other mistake, 
                    git reflog can help you find the lost commit or branch and restore it
                    (=essential tool for undoing mistakes in Git)
                replace
                request-pull
                    generates a summary of changes that you want to be pulled into another repository.
                    It's typically used in collaborative workflows where developers submit pull requests to maintainers.
                    git request-pull creates a message that describes the changes, the branch to merge, and the repository to pull from.
                    It's a way to formally request that your changes be integrated into another branch.
                    It's often used in conjunction with platforms like GitHub, GitLab, or Bitbucket
            restore
                rm
                mv
                send-email
                show-branch
                submodule
                    allows you to embed another Git repository as a subdirectory within your main repository.
                    This is useful when your project depends on external libraries or components that are managed in separate Git repositories. 
                    git submodule keeps track of the specific commit from the external repository that's used in your project.
                    It's helpful for managing dependencies and ensuring that you're using the correct versions of external code
            tag
                notes
                    allows you to attach arbitrary notes/meta-data to Git objects (commits, blobs, trees, etc.).
                    These notes are stored separately from the main Git data and can be used for things like adding annotations, reminders, or other metadata to specific commits without altering the commit itself
                describe
                    shows the closest tag to the current commit.
                    It's useful for quickly identifying the version of your code based on tags in your repository
                whatchanged
                worktree
Git -- distributed-is-the-new-centralized
            ......
                About
                Documentation
                    Reference
                    Book
                    Videos
                    External Links
                Downloads
                Community

            English ▾
            Topics ▾
            Version 2.35.1 ▾
            git last updated in 2.35.1
            NAME

            git - the stupid content tracker
            SYNOPSIS

            git [--version] [--help] [-C <path>] [-c <name>=<value>]
                [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
                [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]
                [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
                [--super-prefix=<path>] [--config-env=<name>=<envvar>]
                <command> [<args>]

            DESCRIPTION

            Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.

            See gittutorial[7] to get started, then see giteveryday[7] for a useful minimum set of commands. The Git User’s Manual has a more in-depth introduction.

            After you mastered the basic concepts, you can come back to this page to learn what commands Git offers. You can learn more about individual Git commands with "git help command". gitcli[7] manual page gives you an overview of the command-line command syntax.

            A formatted and hyperlinked copy of the latest Git documentation can be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs.
            OPTIONS

            --version

                Prints the Git suite version that the git program came from.

                This option is internally converted to git version ... and accepts the same options as the git-version[1] command. If --help is also given, it takes precedence over --version.
            --help

                Prints the synopsis and a list of the most commonly used commands. If the option --all or -a is given then all available commands are printed. If a Git command is named this option will bring up the manual page for that command.

                Other options are available to control how the manual page is displayed. See git-help[1] for more information, because git --help ... is converted internally into git help ....
            -C <path>

                Run as if git was started in <path> instead of the current working directory. When multiple -C options are given, each subsequent non-absolute -C <path> is interpreted relative to the preceding -C <path>. If <path> is present but empty, e.g. -C "", then the current working directory is left unchanged.

                This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be made relative to the working directory caused by the -C option. For example the following invocations are equivalent:

                git --git-dir=a.git --work-tree=b -C c status
                git --git-dir=c/a.git --work-tree=c/b status

            -c <name>=<value>

                Pass a configuration parameter to the command. The value given will override values from configuration files. The <name> is expected in the same format as listed by git config (subkeys separated by dots).

                Note that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a config file). Including the equals but with an empty value (like git -c foo.bar= ...) sets foo.bar to the empty string which git config --type=bool will convert to false.
            --config-env=<name>=<envvar>

                Like -c <name>=<value>, give configuration variable <name> a value, where <envvar> is the name of an environment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an empty string, instead the environment variable itself must be set to the empty string. It is an error if the <envvar> does not exist in the environment. <envvar> may not contain an equals sign to avoid ambiguity with <name> containing one.

                This is useful for cases where you want to pass transitory configuration options to git, but are doing so on OS’s where other processes might be able to read your cmdline (e.g. /proc/self/cmdline), but not your environ (e.g. /proc/self/environ). That behavior is the default on Linux, but may not be on your system.

                Note that this might add security for variables such as http.extraHeader where the sensitive information is part of the value, but not e.g. url.<base>.insteadOf where the sensitive information can be part of the key.
            --exec-path[=<path>]

                Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, git will print the current setting and then exit.
            --html-path

                Print the path, without trailing slash, where Git’s HTML documentation is installed and exit.
            --man-path

                Print the manpath (see man(1)) for the man pages for this version of Git and exit.
            --info-path

                Print the path where the Info files documenting this version of Git are installed and exit.
            -p
            --paginate

                Pipe all output into less (or if set, $PAGER) if standard output is a terminal. This overrides the pager.<cmd> configuration options (see the "Configuration Mechanism" section below).
            -P
            --no-pager

                Do not pipe Git output into a pager.
            --git-dir=<path>

                Set the path to the repository (".git" directory). This can also be controlled by setting the GIT_DIR environment variable. It can be an absolute path or relative path to current working directory.

                Specifying the location of the ".git" directory using this option (or GIT_DIR environment variable) turns off the repository discovery that tries to find a directory with ".git" subdirectory (which is how the repository and the top-level of the working tree are discovered), and tells Git that you are at the top level of the working tree. If you are not at the top-level directory of the working tree, you should tell Git where the top-level of the working tree is, with the --work-tree=<path> option (or GIT_WORK_TREE environment variable)

                If you just want to run git as if it was started in <path> then use git -C <path>.
            --work-tree=<path>

                Set the path to the working tree. It can be an absolute path or a path relative to the current working directory. This can also be controlled by setting the GIT_WORK_TREE environment variable and the core.worktree configuration variable (see core.worktree in git-config[1] for a more detailed discussion).
            --namespace=<path>

                Set the Git namespace. See gitnamespaces[7] for more details. Equivalent to setting the GIT_NAMESPACE environment variable.
            --super-prefix=<path>

                Currently for internal use only. Set a prefix which gives a path from above a repository down to its root. One use is to give submodules context about the superproject that invoked it.
            --bare

                Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.
            --no-replace-objects

                Do not use replacement refs to replace Git objects. See git-replace[1] for more information.
            --literal-pathspecs

                Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the GIT_LITERAL_PATHSPECS environment variable to 1.
            --glob-pathspecs

                Add "glob" magic to all pathspec. This is equivalent to setting the GIT_GLOB_PATHSPECS environment variable to 1. Disabling globbing on individual pathspecs can be done using pathspec magic ":(literal)"
            --noglob-pathspecs

                Add "literal" magic to all pathspec. This is equivalent to setting the GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling globbing on individual pathspecs can be done using pathspec magic ":(glob)"
            --icase-pathspecs

                Add "icase" magic to all pathspec. This is equivalent to setting the GIT_ICASE_PATHSPECS environment variable to 1.
            --no-optional-locks

                Do not perform optional operations that require locks. This is equivalent to setting the GIT_OPTIONAL_LOCKS to 0.
            --list-cmds=group[,group…​]

                List commands by group. This is an internal/experimental option and may change or be removed in the future. Supported groups are: builtins, parseopt (builtin commands that use parse-options), main (all commands in libexec directory), others (all other commands in $PATH that have git- prefix), list-<category> (see categories in command-list.txt), nohelpers (exclude helper commands), alias and config (retrieve command list from config variable completion.commands)
GIT COMMANDS  (porcelain | plumbing)
High-level commands (porcelain)
We separate the porcelain commands into the main commands and some ancillary user utilities.
Main porcelain commands
            git-add[1]

                Add file contents to the index
            git-am[1]

                Apply a series of patches from a mailbox
            git-archive[1]

                Create an archive of files from a named tree
            git-bisect[1]

                Use binary search to find the commit that introduced a bug
            git-branch[1]

                List, create, or delete branches
            git-bundle[1]

                Move objects and refs by archive
            git-checkout[1]

                Switch branches or restore working tree files
            git-cherry-pick[1]

                Apply the changes introduced by some existing commits
            git-citool[1]

                Graphical alternative to git-commit
            git-clean[1]

                Remove untracked files from the working tree
            git-clone[1]

                Clone a repository into a new directory
            git-commit[1]

                Record changes to the repository
            git-describe[1]

                Give an object a human readable name based on an available ref
            git-diff[1]

                Show changes between commits, commit and working tree, etc
            git-fetch[1]

                Download objects and refs from another repository
            git-format-patch[1]

                Prepare patches for e-mail submission
            git-gc[1]

                Cleanup unnecessary files and optimize the local repository
            git-grep[1]

                Print lines matching a pattern
            git-gui[1]

                A portable graphical interface to Git
            git-init[1]

                Create an empty Git repository or reinitialize an existing one
            git-log[1]

                Show commit logs
            git-maintenance[1]

                Run tasks to optimize Git repository data
            git-merge[1]

                Join two or more development histories together
            git-mv[1]

                Move or rename a file, a directory, or a symlink
            git-notes[1]

                Add or inspect object notes
            git-pull[1]

                Fetch from and integrate with another repository or a local branch
            git-push[1]

                Update remote refs along with associated objects
            git-range-diff[1]

                Compare two commit ranges (e.g. two versions of a branch)
            git-rebase[1]

                Reapply commits on top of another base tip
            git-reset[1]

                Reset current HEAD to the specified state
            git-restore[1]

                Restore working tree files
            git-revert[1]

                Revert some existing commits
            git-rm[1]

                Remove files from the working tree and from the index
            git-shortlog[1]

                Summarize git log output
            git-show[1]

                Show various types of objects
            git-sparse-checkout[1]

                Initialize and modify the sparse-checkout
            git-stash[1]

                Stash the changes in a dirty working directory away
            git-status[1]

                Show the working tree status
            git-submodule[1]

                Initialize, update or inspect submodules
            git-switch[1]

                Switch branches
            git-tag[1]

                Create, list, delete or verify a tag object signed with GPG
            git-worktree[1]

                Manage multiple working trees
            gitk[1]

                The Git repository browser

            Ancillary Commands - Manipulators:
            git-config[1]

                Get and set repository or global options
            git-fast-export[1]

                Git data exporter
            git-fast-import[1]

                Backend for fast Git data importers
            git-filter-branch[1]

                Rewrite branches
            git-mergetool[1]

                Run merge conflict resolution tools to resolve merge conflicts
            git-pack-refs[1]

                Pack heads and tags for efficient repository access
            git-prune[1]

                Prune all unreachable objects from the object database
            git-reflog[1]

                Manage reflog information
            git-remote[1]

                Manage set of tracked repositories
            git-repack[1]

                Pack unpacked objects in a repository
            git-replace[1]

                Create, list, delete refs to replace objects

            anc: Interrogators:

            git-annotate[1]

                Annotate file lines with commit information
            git-blame[1]

                Show what revision and author last modified each line of a file
            git-bugreport[1]

                Collect information for user to file a bug report
            git-count-objects[1]

                Count unpacked number of objects and their disk consumption
            git-difftool[1]

                Show changes using common diff tools
            git-fsck[1]

                Verifies the connectivity and validity of the objects in the database
            git-help[1]

                Display help information about Git
            git-instaweb[1]

                Instantly browse your working repository in gitweb
            git-merge-tree[1]

                Show three-way merge without touching index
            git-rerere[1]

                Reuse recorded resolution of conflicted merges
            git-show-branch[1]

                Show branches and their commits
            git-verify-commit[1]

                Check the GPG signature of commits
            git-verify-tag[1]

                Check the GPG signature of tags
            git-whatchanged[1]

                Show logs with difference each commit introduces
            gitweb[1]

                Git web interface (web frontend to Git repositories)

            anc: Interacting with Others

            These commands are to interact with foreign SCM and with other people via patch over e-mail.

            git-archimport[1]

                Import a GNU Arch repository into Git
            git-cvsexportcommit[1]

                Export a single commit to a CVS checkout
            git-cvsimport[1]

                Salvage your data out of another SCM people love to hate
            git-cvsserver[1]

                A CVS server emulator for Git
            git-imap-send[1]

                Send a collection of patches from stdin to an IMAP folder
            git-p4[1]

                Import from and submit to Perforce repositories
            git-quiltimport[1]

                Applies a quilt patchset onto the current branch
            git-request-pull[1]

                Generates a summary of pending changes
            git-send-email[1]

                Send a collection of patches as emails
            git-svn[1]

                Bidirectional operation between a Subversion repository and Git

            anc: Reset, restore and revert

            There are three commands with similar names: git reset, git restore and git revert.

                git-revert[1] is about making a new commit that reverts the changes made by other commits.

                git-restore[1] is about restoring files in the working tree from either the index or another commit. This command does not update your branch. The command can also be used to restore files in the index from another commit.

                git-reset[1] is about updating your branch, moving the tip in order to add or remove commits from the branch. This operation changes the commit history.

                git reset can also be used to restore the index, overlapping with git restore.
Low-level commands (plumbing)
            Although Git includes its own porcelain layer, its low-level commands are sufficient to support development of alternative porcelains. Developers of such porcelains might start by reading about git-update-index[1] and git-read-tree[1].

            The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more stable than Porcelain level commands, because these commands are primarily for scripted use. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience.

            The following description divides the low-level commands into commands that manipulate objects (in the repository, index, and working tree), commands that interrogate and compare objects, and commands that move objects and references between repositories.
            Manipulation commands

            git-apply[1]

                Apply a patch to files and/or to the index
            git-checkout-index[1]

                Copy files from the index to the working tree
            git-commit-graph[1]

                Write and verify Git commit-graph files
            git-commit-tree[1]

                Create a new commit object
            git-hash-object[1]

                Compute object ID and optionally creates a blob from a file
            git-index-pack[1]

                Build pack index file for an existing packed archive
            git-merge-file[1]

                Run a three-way file merge
            git-merge-index[1]

                Run a merge for files needing merging
            git-mktag[1]

                Creates a tag object with extra validation
            git-mktree[1]

                Build a tree-object from ls-tree formatted text
            git-multi-pack-index[1]

                Write and verify multi-pack-indexes
            git-pack-objects[1]

                Create a packed archive of objects
            git-prune-packed[1]

                Remove extra objects that are already in pack files
            git-read-tree[1]

                Reads tree information into the index
            git-symbolic-ref[1]

                Read, modify and delete symbolic refs
            git-unpack-objects[1]

                Unpack objects from a packed archive
            git-update-index[1]

                Register file contents in the working tree to the index
            git-update-ref[1]

                Update the object name stored in a ref safely
            git-write-tree[1]

                Create a tree object from the current index

            plumbing: Interrogation commands

            git-cat-file[1]

                Provide content or type and size information for repository objects
            git-cherry[1]

                Find commits yet to be applied to upstream
            git-diff-files[1]

                Compares files in the working tree and the index
            git-diff-index[1]

                Compare a tree to the working tree or index
            git-diff-tree[1]

                Compares the content and mode of blobs found via two tree objects
            git-for-each-ref[1]

                Output information on each ref
            git-for-each-repo[1]

                Run a Git command on a list of repositories
            git-get-tar-commit-id[1]

                Extract commit ID from an archive created using git-archive
            git-ls-files[1]

                Show information about files in the index and the working tree
            git-ls-remote[1]

                List references in a remote repository
            git-ls-tree[1]

                List the contents of a tree object
            git-merge-base[1]

                Find as good common ancestors as possible for a merge
            git-name-rev[1]

                Find symbolic names for given revs
            git-pack-redundant[1]

                Find redundant pack files
            git-rev-list[1]

                Lists commit objects in reverse chronological order
            git-rev-parse[1]

                Pick out and massage parameters
            git-show-index[1]

                Show packed archive index
            git-show-ref[1]

                List references in a local repository
            git-unpack-file[1]

                Creates a temporary file with a blob’s contents
            git-var[1]

                Show a Git logical variable
            git-verify-pack[1]

                Validate packed Git archive files

            In general, the interrogate commands do not touch the files in the working tree.
            plumbing: Syncing repositories

            git-daemon[1]

                A really simple server for Git repositories
            git-fetch-pack[1]

                Receive missing objects from another repository
            git-http-backend[1]

                Server side implementation of Git over HTTP
            git-send-pack[1]

                Push objects over Git protocol to another repository
            git-update-server-info[1]

                Update auxiliary info file to help dumb servers

            The following are helper commands used by the above; end users typically do not use them directly.

            git-http-fetch[1]

                Download from a remote Git repository via HTTP
            git-http-push[1]

                Push objects over HTTP/DAV to another repository
            git-receive-pack[1]

                Receive what is pushed into the repository
            git-shell[1]

                Restricted login shell for Git-only SSH access
            git-upload-archive[1]

                Send archive back to git-archive
            git-upload-pack[1]

                Send objects packed back to git-fetch-pack

            plumber: Internal helper commands

            These are internal helper commands used by other commands; end users typically do not use them directly.

            git-check-attr[1]

                Display gitattributes information
            git-check-ignore[1]

                Debug gitignore / exclude files
            git-check-mailmap[1]

                Show canonical names and email addresses of contacts
            git-check-ref-format[1]

                Ensures that a reference name is well formed
            git-column[1]

                Display data in columns
            git-credential[1]

                Retrieve and store user credentials
            git-credential-cache[1]

                Helper to temporarily store passwords in memory
            git-credential-store[1]

                Helper to store credentials on disk
            git-fmt-merge-msg[1]

                Produce a merge commit message
            git-interpret-trailers[1]

                Add or parse structured information in commit messages
            git-mailinfo[1]

                Extracts patch and authorship from a single e-mail message
            git-mailsplit[1]

                Simple UNIX mbox splitter program
            git-merge-one-file[1]

                The standard helper program to use with git-merge-index
            git-patch-id[1]

                Compute unique ID for a patch
            git-sh-i18n[1]

                Git’s i18n setup code for shell scripts
            git-sh-setup[1]

                Common Git shell script setup code
            git-stripspace[1]

                Remove unnecessary whitespace
Guides
            The following documentation pages are guides about Git concepts.

            gitattributes[5]

                Defining attributes per path
            gitcli[7]

                Git command-line interface and conventions
            gitcore-tutorial[7] @

                A Git core tutorial for developers
            gitcredentials[7]

                Providing usernames and passwords to Git
            gitcvs-migration[7]

                Git for CVS users
            gitdiffcore[7]

                Tweaking diff output
            giteveryday[7] @

                A useful minimum set of commands for Everyday Git
            gitfaq[7] (@)

                Frequently asked questions about using Git
            gitglossary[7]

                A Git Glossary
            githooks[5]

                Hooks used by Git
            gitignore[5]

                Specifies intentionally untracked files to ignore
            gitmailmap[5]

                Map author/committer names and/or E-Mail addresses
            gitmodules[5]

                Defining submodule properties
            gitnamespaces[7]

                Git namespaces
            gitremote-helpers[7]

                Helper programs to interact with remote repositories
            gitrepository-layout[5]

                Git Repository Layout
            gitrevisions[7]

                Specifying revisions and ranges for Git
            gitsubmodules[7]

                Mounting one repository inside another
            gittutorial[7]

                A tutorial introduction to Git
            gittutorial-2[7]

                A tutorial introduction to Git: part two
            gitworkflows[7]

                An overview of recommended workflows with Git

            Configuration Mechanism

            Git uses a simple text format to store customizations that are per repository and are per user. Such a configuration file may look like this:

#
# A '#' or ';' character indicates a comment.
#

            ; core variables
            [core]
                ; Don't trust file modes
                filemode = false

            ; user identity
            [user]
                name = "Junio C Hamano"
                email = "gitster@pobox.com"

            Various commands read from the configuration file and adjust their operation accordingly. See git-config[1] for a list and more details about the configuration mechanism.
            Identifier Terminology

            <object>

                Indicates the object name for any type of object.
            <blob>

                Indicates a blob object name.
            <tree>

                Indicates a tree object name.
            <commit>

                Indicates a commit object name.
            <tree-ish>

                Indicates a tree, commit or tag object name. A command that takes a <tree-ish> argument ultimately wants to operate on a <tree> object but automatically dereferences <commit> and <tag> objects that point at a <tree>.
            <commit-ish>

                Indicates a commit or tag object name. A command that takes a <commit-ish> argument ultimately wants to operate on a <commit> object but automatically dereferences <tag> objects that point at a <commit>.
            <type>

                Indicates that an object type is required. Currently one of: blob, tree, commit, or tag.
            <file>

                Indicates a filename - almost always relative to the root of the tree structure GIT_INDEX_FILE describes.

            Symbolic Identifiers

            Any Git command accepting any <object> can also use the following symbolic notation:

            HEAD

                indicates the head of the current branch.
            <tag>

                a valid tag name (i.e. a refs/tags/<tag> reference).
            <head>

                a valid head name (i.e. a refs/heads/<head> reference).

            For a more complete list of ways to spell object names, see "SPECIFYING REVISIONS" section in gitrevisions[7].
            File/Directory Structure

            Please see the gitrepository-layout[5] document.

            Read githooks[5] for more details about each hook.

            Higher level SCMs may provide and manage additional information in the $GIT_DIR.
            Terminology

            Please see gitglossary[7].
            Environment Variables

            Various Git commands use the following environment variables:
            The Git Repository

            These environment variables apply to all core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting above Git so take care if using a foreign front-end.

            GIT_INDEX_FILE

                This environment allows the specification of an alternate index file. If not specified, the default of $GIT_DIR/index is used.
            GIT_INDEX_VERSION

                This environment variable allows the specification of an index version for new repositories. It won’t affect existing index files. By default index file version 2 or 3 is used. See git-update-index[1] for more information.
            GIT_OBJECT_DIRECTORY

                If the object storage directory is specified via this environment variable then the sha1 directories are created underneath - otherwise the default $GIT_DIR/objects directory is used.
            GIT_ALTERNATE_OBJECT_DIRECTORIES

                Due to the immutable nature of Git objects, old objects can be archived into shared, read-only directories. This variable specifies a ":" separated (on Windows ";" separated) list of Git object directories which can be used to search for Git objects. New objects will not be written to these directories.

                Entries that begin with " (double-quote) will be interpreted as C-style quoted paths, removing leading and trailing double-quotes and respecting backslash escapes. E.g., the value "path-with-\"-and-:-in-it":vanilla-path has two paths: path-with-"-and-:-in-it and vanilla-path.
            GIT_DIR

                If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the repository. The --git-dir command-line option also sets this value.
            GIT_WORK_TREE

                Set the path to the root of the working tree. This can also be controlled by the --work-tree command-line option and the core.worktree configuration variable.
            GIT_NAMESPACE

                Set the Git namespace; see gitnamespaces[7] for details. The --namespace command-line option also sets this value.
            GIT_CEILING_DIRECTORIES

                This should be a colon-separated list of absolute paths. If set, it is a list of directories that Git should not chdir up into while looking for a repository directory (useful for excluding slow-loading network directories). It will not exclude the current working directory or a GIT_DIR set on the command line or in the environment. Normally, Git has to read the entries in this list and resolve any symlink that might be present in order to compare them with the current directory. However, if even this access is slow, you can add an empty entry to the list to tell Git that the subsequent entries are not symlinks and needn’t be resolved; e.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink.
            GIT_DISCOVERY_ACROSS_FILESYSTEM

                When run in a directory that does not have ".git" repository directory, Git tries to find such a directory in the parent directories to find the top of the working tree, but by default it does not cross filesystem boundaries. This environment variable can be set to true to tell Git not to stop at filesystem boundaries. Like GIT_CEILING_DIRECTORIES, this will not affect an explicit repository directory set via GIT_DIR or on the command line.
            GIT_COMMON_DIR

                If this variable is set to a path, non-worktree files that are normally in $GIT_DIR will be taken from this path instead. Worktree-specific files such as HEAD or index are taken from $GIT_DIR. See gitrepository-layout[5] and git-worktree[1] for details. This variable has lower precedence than other path variables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​
            GIT_DEFAULT_HASH

                If this variable is set, the default hash algorithm for new repositories will be set to this value. This value is currently ignored when cloning; the setting of the remote repository is used instead. The default is "sha1". THIS VARIABLE IS EXPERIMENTAL! See --object-format in git-init[1].

            Git Commits

            GIT_AUTHOR_NAME

                The human-readable name used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings.
            GIT_AUTHOR_EMAIL

                The email address used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings.
            GIT_AUTHOR_DATE

                The date used for the author identity when creating commit or tag objects, or when writing reflogs. See git-commit[1] for valid formats.
            GIT_COMMITTER_NAME

                The human-readable name used in the committer identity when creating commit or tag objects, or when writing reflogs. Overrides the user.name and committer.name configuration settings.
            GIT_COMMITTER_EMAIL

                The email address used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings.
            GIT_COMMITTER_DATE

                The date used for the committer identity when creating commit or tag objects, or when writing reflogs. See git-commit[1] for valid formats.
            EMAIL

                The email address used in the author and committer identities if no other relevant environment variable or configuration setting has been set.

            Git Diffs

            GIT_DIFF_OPTS

                Only valid setting is "--unified=??" or "-u??" to set the number of context lines shown when a unified diff is created. This takes precedence over any "-U" or "--unified" option value passed on the Git diff command line.
            GIT_EXTERNAL_DIFF

                When the environment variable GIT_EXTERNAL_DIFF is set, the program named by it is called to generate diffs, and Git does not use its builtin diff machinery. For a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters:

                path old-file old-hex old-mode new-file new-hex new-mode

                where:
            <old|new>-file

                are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,
            <old|new>-hex

                are the 40-hexdigit SHA-1 hashes,
            <old|new>-mode

                are the octal representation of the file modes.

                The file parameters can point at the user’s working file (e.g. new-file in "git-diff-files"), /dev/null (e.g. old-file when a new file is added), or a temporary file (e.g. old-file in the index). GIT_EXTERNAL_DIFF should not worry about unlinking the temporary file --- it is removed when GIT_EXTERNAL_DIFF exits.

                For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1 parameter, <path>.

                For each path GIT_EXTERNAL_DIFF is called, two environment variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set.
            GIT_DIFF_PATH_COUNTER

                A 1-based counter incremented by one for every path.
            GIT_DIFF_PATH_TOTAL

                The total number of paths.

            other

            GIT_MERGE_VERBOSITY

                A number controlling the amount of output shown by the recursive merge strategy. Overrides merge.verbosity. See git-merge[1]
            GIT_PAGER

                This environment variable overrides $PAGER. If it is set to an empty string or to the value "cat", Git will not launch a pager. See also the core.pager option in git-config[1].
            GIT_PROGRESS_DELAY

                A number controlling how many seconds to delay before showing optional progress indicators. Defaults to 2.
            GIT_EDITOR

                This environment variable overrides $EDITOR and $VISUAL. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also git-var[1] and the core.editor option in git-config[1].
            GIT_SEQUENCE_EDITOR

                This environment variable overrides the configured Git editor when editing the todo list of an interactive rebase. See also git-rebase[1] and the sequence.editor option in git-config[1].
            GIT_SSH
            GIT_SSH_COMMAND

                If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system. The command-line parameters passed to the configured command are determined by the ssh variant. See ssh.variant option in git-config[1] for details.

                $GIT_SSH_COMMAND takes precedence over $GIT_SSH, and is interpreted by the shell, which allows additional arguments to be included. $GIT_SSH on the other hand must be just the path to a program (which can be a wrapper shell script, if additional arguments are needed).

                Usually it is easier to configure any desired options through your personal .ssh/config file. Please consult your ssh documentation for further details.
            GIT_SSH_VARIANT

                If this environment variable is set, it overrides Git’s autodetection whether GIT_SSH/GIT_SSH_COMMAND/core.sshCommand refer to OpenSSH, plink or tortoiseplink. This variable overrides the config setting ssh.variant that serves the same purpose.
            GIT_ASKPASS

                If this environment variable is set, then Git commands which need to acquire passwords or passphrases (e.g. for HTTP or IMAP authentication) will call this program with a suitable prompt as command-line argument and read the password from its STDOUT. See also the core.askPass option in git-config[1].
            GIT_TERMINAL_PROMPT

                If this environment variable is set to 0, git will not prompt on the terminal (e.g., when asking for HTTP authentication).
            GIT_CONFIG_GLOBAL
            GIT_CONFIG_SYSTEM

                Take the configuration from the given files instead from global or system-level configuration files. If GIT_CONFIG_SYSTEM is set, the system config file defined at build time (usually /etc/gitconfig) will not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can be set to /dev/null to skip reading configuration files of the respective level.
            GIT_CONFIG_NOSYSTEM

                Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file. This environment variable can be used along with $HOME and $XDG_CONFIG_HOME to create a predictable environment for a picky script, or you can set it temporarily to avoid using a buggy /etc/gitconfig file while waiting for someone with sufficient permissions to fix it.
            GIT_FLUSH

                If this environment variable is set to "1", then commands such as git blame (in incremental mode), git rev-list, git log, git check-attr and git check-ignore will force a flush of the output stream after each record have been flushed. If this variable is set to "0", the output of these commands will be done using completely buffered I/O. If this environment variable is not set, Git will choose buffered or record-oriented flushing based on whether stdout appears to be redirected to a file or not.
            GIT_TRACE

                Enables general trace messages, e.g. alias expansion, built-in command execution and external command execution.

                If this variable is set to "1", "2" or "true" (comparison is case insensitive), trace messages will be printed to stderr.

                If the variable is set to an integer value greater than 2 and lower than 10 (strictly) then Git will interpret this value as an open file descriptor and will try to write the trace messages into this file descriptor.

                Alternatively, if the variable is set to an absolute path (starting with a / character), Git will interpret this as a file path and will try to append the trace messages to it.

                Unsetting the variable, or setting it to empty, "0" or "false" (case insensitive) disables trace messages.
            GIT_TRACE_FSMONITOR

                Enables trace messages for the filesystem monitor extension. See GIT_TRACE for available trace output options.
            GIT_TRACE_PACK_ACCESS

                Enables trace messages for all accesses to any packs. For each access, the pack file name and an offset in the pack is recorded. This may be helpful for troubleshooting some pack-related performance problems. See GIT_TRACE for available trace output options.
            GIT_TRACE_PACKET

                Enables trace messages for all packets coming in or out of a given program. This can help with debugging object negotiation or other protocol issues. Tracing is turned off at a packet starting with "PACK" (but see GIT_TRACE_PACKFILE below). See GIT_TRACE for available trace output options.
            GIT_TRACE_PACKFILE

                Enables tracing of packfiles sent or received by a given program. Unlike other trace output, this trace is verbatim: no headers, and no quoting of binary data. You almost certainly want to direct into a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack) rather than displaying it on the terminal or mixing it with other trace output.

                Note that this is currently only implemented for the client side of clones and fetches.
            GIT_TRACE_PERFORMANCE

                Enables performance related trace messages, e.g. total execution time of each Git command. See GIT_TRACE for available trace output options.
            GIT_TRACE_REFS

                Enables trace messages for operations on the ref database. See GIT_TRACE for available trace output options.
            GIT_TRACE_SETUP

                Enables trace messages printing the .git, working tree and current working directory after Git has completed its setup phase. See GIT_TRACE for available trace output options.
            GIT_TRACE_SHALLOW

                Enables trace messages that can help debugging fetching / cloning of shallow repositories. See GIT_TRACE for available trace output options.
            GIT_TRACE_CURL

                Enables a curl full trace dump of all incoming and outgoing data, including descriptive information, of the git transport protocol. This is similar to doing curl --trace-ascii on the command line. See GIT_TRACE for available trace output options.
            GIT_TRACE_CURL_NO_DATA

                When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump data (that is, only dump info lines and headers).
            GIT_TRACE2

                Enables more detailed trace messages from the "trace2" library. Output from GIT_TRACE2 is a simple text-based format for human readability.

                If this variable is set to "1", "2" or "true" (comparison is case insensitive), trace messages will be printed to stderr.

                If the variable is set to an integer value greater than 2 and lower than 10 (strictly) then Git will interpret this value as an open file descriptor and will try to write the trace messages into this file descriptor.

                Alternatively, if the variable is set to an absolute path (starting with a / character), Git will interpret this as a file path and will try to append the trace messages to it. If the path already exists and is a directory, the trace messages will be written to files (one per process) in that directory, named according to the last component of the SID and an optional counter (to avoid filename collisions).

                In addition, if the variable is set to af_unix:[<socket_type>:]<absolute-pathname>, Git will try to open the path as a Unix Domain Socket. The socket type can be either stream or dgram.

                Unsetting the variable, or setting it to empty, "0" or "false" (case insensitive) disables trace messages.

                See Trace2 documentation for full details.
            GIT_TRACE2_EVENT

                This setting writes a JSON-based format that is suited for machine interpretation. See GIT_TRACE2 for available trace output options and Trace2 documentation for full details.
            GIT_TRACE2_PERF

                In addition to the text-based messages available in GIT_TRACE2, this setting writes a column-based format for understanding nesting regions. See GIT_TRACE2 for available trace output options and Trace2 documentation for full details.
            GIT_TRACE_REDACT

                By default, when tracing is activated, Git redacts the values of cookies, the "Authorization:" header, the "Proxy-Authorization:" header and packfile URIs. Set this variable to 0 to prevent this redaction.
            GIT_LITERAL_PATHSPECS

                Setting this variable to 1 will cause Git to treat all pathspecs literally, rather than as glob patterns. For example, running GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search for commits that touch the path *.c, not any paths that the glob *.c matches. You might want this if you are feeding literal paths to Git (e.g., paths previously given to you by git ls-tree, --raw diff output, etc).
            GIT_GLOB_PATHSPECS

                Setting this variable to 1 will cause Git to treat all pathspecs as glob patterns (aka "glob" magic).
            GIT_NOGLOB_PATHSPECS

                Setting this variable to 1 will cause Git to treat all pathspecs as literal (aka "literal" magic).
            GIT_ICASE_PATHSPECS

                Setting this variable to 1 will cause Git to treat all pathspecs as case-insensitive.
            GIT_REFLOG_ACTION

                When a ref is updated, reflog entries are created to keep track of the reason why the ref was updated (which is typically the name of the high-level command that updated the ref), in addition to the old and new values of the ref. A scripted Porcelain command can use set_reflog_action helper function in git-sh-setup to set its name to this variable when it is invoked as the top level command by the end user, to be recorded in the body of the reflog.
            GIT_REF_PARANOIA

                If set to 0, ignore broken or badly named refs when iterating over lists of refs. Normally Git will try to include any such refs, which may cause some operations to fail. This is usually preferable, as potentially destructive operations (e.g., git-prune[1]) are better off aborting rather than ignoring broken refs (and thus considering the history they point to as not worth saving). The default value is 1 (i.e., be paranoid about detecting and aborting all operations). You should not normally need to set this to 0, but it may be useful when trying to salvage data from a corrupted repository.
            GIT_ALLOW_PROTOCOL

                If set to a colon-separated list of protocols, behave as if protocol.allow is set to never, and each of the listed protocols has protocol.<name>.allow set to always (overriding any existing configuration). In other words, any protocol not mentioned will be disallowed (i.e., this is a whitelist, not a blacklist). See the description of protocol.allow in git-config[1] for more details.
            GIT_PROTOCOL_FROM_USER

                Set to 0 to prevent protocols used by fetch/push/clone which are configured to the user state. This is useful to restrict recursive submodule initialization from an untrusted repository or for programs which feed potentially-untrusted URLS to git commands. See git-config[1] for more details.
            GIT_PROTOCOL

                For internal use only. Used in handshaking the wire protocol. Contains a colon : separated list of keys with optional values key[=value]. Presence of unknown keys and values must be ignored.

                Note that servers may need to be configured to allow this variable to pass over some transports. It will be propagated automatically when accessing local repositories (i.e., file:// or a filesystem path), as well as over the git:// protocol. For git-over-http, it should work automatically in most configurations, but see the discussion in git-http-backend[1]. For git-over-ssh, the ssh server may need to be configured to allow clients to pass this variable (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH).

                This configuration is optional. If the variable is not propagated, then clients will fall back to the original "v0" protocol (but may miss out on some performance improvements or features). This variable currently only affects clones and fetches; it is not yet used for pushes (but may be in the future).
            GIT_OPTIONAL_LOCKS

                If set to 0, Git will complete any requested operation without performing any optional sub-operations that require taking a lock. For example, this will prevent git status from refreshing the index as a side effect. This is useful for processes running in the background which do not want to cause lock contention with other operations on the repository. Defaults to 1.
            GIT_REDIRECT_STDIN
            GIT_REDIRECT_STDOUT
            GIT_REDIRECT_STDERR

                Windows-only: allow redirecting the standard input/output/error handles to paths specified by the environment variables. This is particularly useful in multi-threaded applications where the canonical way to pass standard handles via CreateProcess() is not an option because it would require the handles to be marked inheritable (and consequently every spawned process would inherit them, possibly blocking regular Git operations). The primary intended use case is to use named pipes for communication (e.g. \\.\pipe\my-git-stdin-123).

                Two special values are supported: off will simply close the corresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1, standard error will be redirected to the same handle as standard output.
            GIT_PRINT_SHA1_ELLIPSIS (deprecated)

                If set to yes, print an ellipsis following an (abbreviated) SHA-1 value. This affects indications of detached HEADs (git-checkout[1]) and the raw diff output (git-diff[1]). Printing an ellipsis in the cases mentioned is no longer considered adequate and support for it is likely to be removed in the foreseeable future (along with the variable).
Discussion
            More detail on the following is available from the Git concepts chapter of the user-manual and gitcore-tutorial[7].

            A Git project normally consists of a working directory with a ".git" subdirectory at the top level. The .git directory contains, among other things, a compressed object database representing the complete history of the project, an "index" file which links that history to the current contents of the working tree, and named pointers into that history such as tags and branch heads.

            The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and other trees to build up directory hierarchies; and commits, which each reference a single tree and some number of parent commits.

            The commit, equivalent to what other systems call a "changeset" or "version", represents a step in the project’s history, and each parent represents an immediately preceding step. Commits with more than one parent represent merges of independent lines of development.

            All objects are named by the SHA-1 hash of their contents, normally written as a string of 40 hex digits. Such names are globally unique. The entire history leading up to a commit can be vouched for by signing just that commit. A fourth object type, the tag, is provided for this purpose.

            When first created, objects are stored in individual files, but for efficiency may later be compressed together into "pack files".

            Named pointers called refs mark interesting points in history. A ref may contain the SHA-1 name of an object or the name of another ref. Refs with names beginning ref/head/ contain the SHA-1 name of the most recent commit (or "head") of a branch under development. SHA-1 names of tags of interest are stored under ref/tags/. A special ref named HEAD contains the name of the currently checked-out branch.

            The index file is initialized with a list of all paths and, for each path, a blob object and a set of attributes. The blob object represents the contents of the file as of the head of the current branch. The attributes (last modified time, size, etc.) are taken from the corresponding file in the working tree. Subsequent changes to the working tree can be found by comparing these attributes. The index may be updated with new content, and new commits may be created from the content stored in the index.

            The index is also capable of storing multiple entries (called "stages") for a given pathname. These stages are used to hold the various unmerged version of a file when a merge is in progress.
(further documentation)
            See the references in the "description" section to get started using Git. The following is probably more detail than necessary for a first-time user.

            The Git concepts chapter of the user-manual and gitcore-tutorial[7] both provide introductions to the underlying Git architecture.

            See gitworkflows[7] for an overview of recommended workflows.

            See also the howto documents for some useful examples.

            The internals are documented in the Git API documentation.

            Users migrating from CVS may also want to read gitcvs-migration[7].
            Authors

            Git was started by Linus Torvalds, and is currently maintained by Junio C Hamano. Numerous contributions have come from the Git mailing list <git@vger.kernel.org>. http://www.openhub.net/p/git/contributors/summary gives you a more complete list of contributors.

            If you have a clone of git.git itself, the output of git-shortlog[1] and git-blame[1] can show you the authors for specific parts of the project.
            Reporting Bugs

            Report bugs to the Git mailing list <git@vger.kernel.org> where the development and maintenance is primarily done. You do not have to be subscribed to the list to send a message there. See the list archive at https://lore.kernel.org/git for previous bug reports and other discussions.

            Issues which are security relevant should be disclosed privately to the Git Security mailing list <git-security@googlegroups.com>.
            SEE ALSO

            gittutorial[7], gittutorial-2[7], giteveryday[7], gitcvs-migration[7], gitglossary[7], gitcore-tutorial[7], gitcli[7], The Git User’s Manual, gitworkflows[7]
            GIT

            Part of the git[1] suite
            About this site
            Patches, suggestions, and comments are welcome.
            Git is a member of Software Freedom Conservancy
            scroll-to-top

git-Docs_areastopics.txt
    https://git-scm.com/docs/
Git --local-branching-on-the-cheap
            About
            Documentation
                Reference
                Book
                Videos
                External Links
            Downloads
            Community
Reference  (=list of all common command topics etc)**
            Quick reference guides: GitHub Cheat Sheet | Visual Git Cheat Sheet
            Complete list of all commands
            Setup and Config

                git
                config
                help
                bugreport

            Getting and Creating Projects

                init
                clone

            Basic Snapshotting

                add
                status
                diff
                commit
                notes
                restore
                reset
                rm
                mv

            Branching and Merging

                branch
                checkout
                switch
                merge
                mergetool
                log
                stash
                tag
                worktree

            Sharing and Updating Projects

                fetch
                pull
                push
                remote
                submodule

            Inspection and Comparison

                show
                log
                diff
                difftool
                range-diff
                shortlog
                describe

            Patching

                apply
                cherry-pick
                diff
                rebase
                revert

            Debugging

                bisect
                blame
                grep

            Guides

                gitattributes
                Command-line interface conventions
                Everyday Git
                Frequently Asked Questions (FAQ)
                Glossary
                Hooks
                gitignore
                gitmodules
                Revisions
                Submodules
                Tutorial
                Workflows
                All guides...

            Email

                am
                apply
                format-patch
                send-email
                request-pull

            External Systems

                svn
                fast-import

            Administration

                clean
                gc
                fsck
                reflog
                filter-branch
                instaweb
                archive
                bundle

            Server Admin

                daemon
                update-server-info

            Plumbing Commands

                cat-file
                check-ignore
                checkout-index
                commit-tree
                count-objects
                diff-index
                for-each-ref
                hash-object
                ls-files
                ls-tree
                merge-base
                read-tree
                rev-list
                rev-parse
                show-ref
                symbolic-ref
                update-index
                update-ref
                verify-pack
                write-tree

git-everyday20commands-ex.txt
    https://git-scm.com/docs/giteveryday
Git --fast-version-control
                About
                Documentation
                    Reference
                    Book
                    Videos
                    External Links
                Downloads
                Community

            English ▾
            Topics ▾
            Version 2.35.1 ▾
            giteveryday last updated in 2.35.1
            NAME

            giteveryday - A useful minimum set of commands for Everyday Git
            SYNOPSIS

            Everyday Git With 20 Commands Or So
            DESCRIPTION

            Git users can broadly be grouped into four categories for the purposes of describing here a small set of useful command for everyday Git.

                Individual Developer (Standalone) commands are essential for anybody who makes a commit, even for somebody who works alone.

                If you work with other people, you will need commands listed in the Individual Developer (Participant) section as well.

                People who play the Integrator role need to learn some more commands in addition to the above.

                Repository Administration commands are for system administrators who are responsible for the care and feeding of Git repositories.

            Individual Developer (Standalone)

            A standalone individual developer does not exchange patches with other people, and works alone in a single repository, using the following commands.

                git-init[1] to create a new repository.

                git-log[1] to see what happened.

                git-switch[1] and git-branch[1] to switch branches.

                git-add[1] to manage the index file.

                git-diff[1] and git-status[1] to see what you are in the middle of doing.

                git-commit[1] to advance the current branch.

                git-restore[1] to undo changes.

                git-merge[1] to merge between local branches.

                git-rebase[1] to maintain topic branches.

                git-tag[1] to mark a known point.

            Examples

            Use a tarball as a starting point for a new repository.

                $ tar zxf frotz.tar.gz
                $ cd frotz
                $ git init
                $ git add . (1)
                $ git commit -m "import of frotz source tree."
                $ git tag v2.43 (2)

                    add everything under the current directory.

                    make a lightweight, unannotated tag.

            Create a topic branch and develop.

                $ git switch -c alsa-audio (1)
                $ edit/compile/test
                $ git restore curses/ux_audio_oss.c (2)
                $ git add curses/ux_audio_alsa.c (3)
                $ edit/compile/test
                $ git diff HEAD (4)
                $ git commit -a -s (5)
                $ edit/compile/test
                $ git diff HEAD^ (6)
                $ git commit -a --amend (7)
                $ git switch master (8)
                $ git merge alsa-audio (9)
                $ git log --since='3 days ago' (10)
                $ git log v2.43.. curses/ (11)

                    create a new topic branch.

                    revert your botched changes in curses/ux_audio_oss.c.

                    you need to tell Git if you added a new file; removal and modification will be caught if you do git commit -a later.

                    to see what changes you are committing.

                    commit everything, as you have tested, with your sign-off.

                    look at all your changes including the previous commit.

                    amend the previous commit, adding all your new changes, using your original message.

                    switch to the master branch.

                    merge a topic branch into your master branch.

                    review commit logs; other forms to limit output can be combined and include -10 (to show up to 10 commits), --until=2005-12-10, etc.

                    view only the changes that touch what’s in curses/ directory, since v2.43 tag.

            Individual Developer (Participant)

            A developer working as a participant in a group project needs to learn how to communicate with others, and uses these commands in addition to the ones needed by a standalone developer.

                git-clone[1] from the upstream to prime your local repository.

                git-pull[1] and git-fetch[1] from "origin" to keep up-to-date with the upstream.

                git-push[1] to shared repository, if you adopt CVS style shared repository workflow.

                git-format-patch[1] to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow.

                git-send-email[1] to send your e-mail submission without corruption by your MUA.

                git-request-pull[1] to create a summary of changes for your upstream to pull.

            Examples

            Clone the upstream and work on it. Feed changes to upstream.

                $ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6
                $ cd my2.6
                $ git switch -c mine master (1)
                $ edit/compile/test; git commit -a -s (2)
                $ git format-patch master (3)
                $ git send-email --to="person <email@example.com>" 00*.patch (4)
                $ git switch master (5)
                $ git pull (6)
                $ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7)
                $ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8)
                $ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9)
                $ git reset --hard ORIG_HEAD (10)
                $ git gc (11)

                    checkout a new branch mine from master.

                    repeat as needed.

                    extract patches from your branch, relative to master,

                    and email them.

                    return to master, ready to see what’s new

                    git pull fetches from origin by default and merges into the current branch.

                    immediately after pulling, look at the changes done upstream since last time we checked, only in the area we are interested in.

                    check the branch names in an external repository (if not known).

                    fetch from a specific branch ALL from a specific repository and merge it.

                    revert the pull.

                    garbage collect leftover objects from reverted pull.

            Push into another repository.

                satellite$ git clone mothership:frotz frotz (1)
                satellite$ cd frotz
                satellite$ git config --get-regexp '^(remote|branch)\.' (2)
                remote.origin.url mothership:frotz
                remote.origin.fetch refs/heads/*:refs/remotes/origin/*
                branch.master.remote origin
                branch.master.merge refs/heads/master
                satellite$ git config remote.origin.push \
                       +refs/heads/*:refs/remotes/satellite/* (3)
                satellite$ edit/compile/test/commit
                satellite$ git push origin (4)

                mothership$ cd frotz
                mothership$ git switch master
                mothership$ git merge satellite/master (5)

                    mothership machine has a frotz repository under your home directory; clone from it to start a repository on the satellite machine.

                    clone sets these configuration variables by default. It arranges git pull to fetch and store the branches of mothership machine to local remotes/origin/* remote-tracking branches.

                    arrange git push to push all local branches to their corresponding branch of the mothership machine.

                    push will stash all our work away on remotes/satellite/* remote-tracking branches on the mothership machine. You could use this as a back-up method. Likewise, you can pretend that mothership "fetched" from you (useful when access is one sided).

                    on mothership machine, merge the work done on the satellite machine into the master branch.

            Branch off of a specific tag.

                $ git switch -c private2.6.14 v2.6.14 (1)
                $ edit/compile/test; git commit -a
                $ git checkout master
                $ git cherry-pick v2.6.14..private2.6.14 (2)

                    create a private branch based on a well known (but somewhat behind) tag.

                    forward port all changes in private2.6.14 branch to master branch without a formal "merging". Or longhand
                    git format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3 -k

            An alternate participant submission mechanism is using the git request-pull or pull-request mechanisms (e.g as used on GitHub (www.github.com) to notify your upstream of your contribution.
            Integrator

            A fairly central person acting as the integrator in a group project receives changes made by others, reviews and integrates them and publishes the result for others to use, using these commands in addition to the ones needed by participants.

            This section can also be used by those who respond to git request-pull or pull-request on GitHub (www.github.com) to integrate the work of others into their history. A sub-area lieutenant for a repository will act both as a participant and as an integrator.

                git-am[1] to apply patches e-mailed in from your contributors.

                git-pull[1] to merge from your trusted lieutenants.

                git-format-patch[1] to prepare and send suggested alternative to contributors.

                git-revert[1] to undo botched commits.

                git-push[1] to publish the bleeding edge.

            Examples

            A typical integrator’s Git day.

                $ git status (1)
                $ git branch --no-merged master (2)
                $ mailx (3)
                & s 2 3 4 5 ./+to-apply
                & s 7 8 ./+hold-linus
                & q
                $ git switch -c topic/one master
                $ git am -3 -i -s ./+to-apply (4)
                $ compile/test
                $ git switch -c hold/linus && git am -3 -i -s ./+hold-linus (5)
                $ git switch topic/one && git rebase master (6)
                $ git switch -C seen next (7)
                $ git merge topic/one topic/two && git merge hold/linus (8)
                $ git switch maint
                $ git cherry-pick master~4 (9)
                $ compile/test
                $ git tag -s -m "GIT 0.99.9x" v0.99.9x (10)
                $ git fetch ko && for branch in master maint next seen (11)
                    do
                    git show-branch ko/$branch $branch (12)
                    done
                $ git push --follow-tags ko (13)

                    see what you were in the middle of doing, if anything.

                    see which branches haven’t been merged into master yet. Likewise for any other integration branches e.g. maint, next and seen.

                    read mails, save ones that are applicable, and save others that are not quite ready (other mail readers are available).

                    apply them, interactively, with your sign-offs.

                    create topic branch as needed and apply, again with sign-offs.

                    rebase internal topic branch that has not been merged to the master or exposed as a part of a stable branch.

                    restart seen every time from the next.

                    and bundle topic branches still cooking.

                    backport a critical fix.

                    create a signed tag.

                    make sure master was not accidentally rewound beyond that already pushed out.

                    In the output from git show-branch, master should have everything ko/master has, and next should have everything ko/next has, etc.

                    push out the bleeding edge, together with new tags that point into the pushed history.

            In this example, the ko shorthand points at the Git maintainer’s repository at kernel.org, and looks like this:

            (in .git/config)
            [remote "ko"]
                url = kernel.org:/pub/scm/git/git.git
                fetch = refs/heads/*:refs/remotes/ko/*
                push = refs/heads/master
                push = refs/heads/next
                push = +refs/heads/seen
                push = refs/heads/maint

            Repository Administration

            A repository administrator uses the following tools to set up and maintain access to the repository by developers.

                git-daemon[1] to allow anonymous download from repository.

                git-shell[1] can be used as a restricted login shell for shared central repository users.

                git-http-backend[1] provides a server side implementation of Git-over-HTTP ("Smart http") allowing both fetch and push services.

                gitweb[1] provides a web front-end to Git repositories, which can be set-up using the git-instaweb[1] script.

            update hook howto has a good example of managing a shared central repository.

            In addition there are a number of other widely deployed hosting, browsing and reviewing solutions such as:

                gitolite, gerrit code review, cgit and others.

            Examples

            We assume the following in /etc/services

                $ grep 9418 /etc/services
                git		9418/tcp		# Git Version Control System

            Run git-daemon to serve /pub/scm from inetd.

                $ grep git /etc/inetd.conf
                git	stream	tcp	nowait	nobody \
                  /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm

                The actual configuration line should be on one line.
            Run git-daemon to serve /pub/scm from xinetd.

                $ cat /etc/xinetd.d/git-daemon
                # default: off
                # description: The Git server offers access to Git repositories
                service git
                {
                    disable = no
                    type            = UNLISTED
                    port            = 9418
                    socket_type     = stream
                    wait            = no
                    user            = nobody
                    server          = /usr/bin/git-daemon
                    server_args     = --inetd --export-all --base-path=/pub/scm
                    log_on_failure  += USERID
                }

                Check your xinetd(8) documentation and setup, this is from a Fedora system. Others might be different.
            Give push/pull only access to developers using git-over-ssh.

                e.g. those using: $ git push/pull ssh://host.xz/pub/scm/project

                $ grep git /etc/passwd (1)
                alice:x:1000:1000::/home/alice:/usr/bin/git-shell
                bob:x:1001:1001::/home/bob:/usr/bin/git-shell
                cindy:x:1002:1002::/home/cindy:/usr/bin/git-shell
                david:x:1003:1003::/home/david:/usr/bin/git-shell
                $ grep git /etc/shells (2)
                /usr/bin/git-shell

                    log-in shell is set to /usr/bin/git-shell, which does not allow anything but git push and git pull. The users require ssh access to the machine.

                    in many distributions /etc/shells needs to list what is used as the login shell.

            CVS-style shared repository.

                $ grep git /etc/group (1)
                git:x:9418:alice,bob,cindy,david
                $ cd /home/devo.git
                $ ls -l (2)
                  lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD -> refs/heads/master
                  drwxrwsr-x   2 david git  4096 Dec  4 22:40 branches
                  -rw-rw-r--   1 david git    84 Dec  4 22:40 config
                  -rw-rw-r--   1 david git    58 Dec  4 22:40 description
                  drwxrwsr-x   2 david git  4096 Dec  4 22:40 hooks
                  -rw-rw-r--   1 david git 37504 Dec  4 22:40 index
                  drwxrwsr-x   2 david git  4096 Dec  4 22:40 info
                  drwxrwsr-x   4 david git  4096 Dec  4 22:40 objects
                  drwxrwsr-x   4 david git  4096 Nov  7 14:58 refs
                  drwxrwsr-x   2 david git  4096 Dec  4 22:40 remotes
                $ ls -l hooks/update (3)
                  -r-xr-xr-x   1 david git  3536 Dec  4 22:40 update
                $ cat info/allowed-users (4)
                refs/heads/master	alice\|cindy
                refs/heads/doc-update	bob
                refs/tags/v[0-9]*	david

                    place the developers into the same git group.

                    and make the shared repository writable by the group.

                    use update-hook example by Carl from Documentation/howto/ for branch policy control.

                    alice and cindy can push into master, only bob can push into doc-update. david is the release manager and is the only person who can create and push version tags.

            GIT

            Part of the git[1] suite
            About this site
            Patches, suggestions, and comments are welcome.
            Git is a member of Software Freedom Conservancy

~/Dropbox/rsc/data/lists/learnqna/vanki/0TODO-git_bitbcheetsh.txt
git_BASIC-COMMANDS.txt
            git restore(??)
            git diff
            git log
  ~/Dropbox/rsc/Doks/phone/Comp/lang/markup/z_markup--markdown-pandoc-obsidian-githubbitb.txt
--
~/Empire/Doks/Comp/PROGR/git/git-workflow.cheatsh.pdf

----
~/Dropbox/rsc/data/lists/learnqna/vanki/tmp/gitbookpro.bmk.txt
~/Dropbox/rsc/data/lists/learnqna/vanki/git-pro.vanki.txt
~/Dropbox/rsc/data/lists/learnqna/vanki/pick.legacy/gitpro_vanki.orig.txt
~/Dropbox/rsc/data/lists/learnqna/vanki/decks/comp/progr/git.legacy.txt
----
~/Empire/Doks/Comp/PROGR/git/web/githubtut.pdf
--
~/Empire/Doks/Comp/PROGR/git/75536245-Git-Flow-Tutorial.pdf
~/Empire/Doks/Comp/PROGR/git/541825337-Automating-Workflows-With-GitHub-Actions.pdf
~/Empire/Doks/Comp/PROGR/git/604682412-Version-Control-and-Project-Organization-Best-Practice-Guide.pdf
~/Empire/Doks/Comp/PROGR/git/gitavanc-collabworkflow.epub
~/Empire/Doks/Comp/PROGR/git/Gitcb.pdf
~/Empire/Doks/Comp/PROGR/git/gitkurz.txt
~/Empire/Doks/Comp/PROGR/git/gitlabcb.pdf
~/Empire/Doks/Comp/PROGR/git/gitlabcb.txt
~/Empire/Doks/Comp/PROGR/git/git-pattsantipatts.pdf
~/Empire/Doks/Comp/PROGR/git/git-real.slidesh.pdf
~/Empire/Doks/Comp/PROGR/git/pragmatic-guide-to-git-pragmatic-guides.9781934356722.53577.pdf
--
~/Dropbox/rsc/Doks/phone/Comp/PROGR/git/bitbgit.newer.txt
  ~/Dropbox/rsc/Doks/phone/Comp/PROGR/git/bitbgit.legacy1.txt
  ~/Dropbox/rsc/Doks/phone/Comp/PROGR/git/git-bitbucket1.txt
~/Dropbox/rsc/Doks/phone/Comp/PROGR/git/gitpractice.txt
~/Dropbox/rsc/Doks/phone/Comp/PROGR/git/progit.txt



___LatestAddition=GitHub 2025
search: github features and tips
https://github.com/git-tips/tips
https://github.com/features
____

https://lilypond.org/doc/v2.25/Documentation/contributor.pdf
[@@@(@)] #### Android Mgit {{{

- Great. Another question: I have
  installed the program MGit on my
  Android phone.

- When I start the program, I am
  being prompted to enter:

- Could you give me some guidance,
  most importantly of what to
  submit for the first two options
  (i.e. URL and Path). Thanks


  - 'Remote URL'
  ssh://git@github.com/<username>/<repository-name>.git  __

  {{{
    The Remote URL is the address
    of the Git repository you want
    to clone.
    This can be a URL to a remote
    Git repository, such as a
    hosted Git repository on GitHub
    or GitLab.
    It can also be a local Git
    repository on your computer.

    If you want to clone a remote
    Git repository from GitHub, you
    can use the following URL
    format:

    Replace <username> with your
    GitHub username and
    <repository-name> with the name
    of the repository you want to
    clone.

    If you want to clone a local
    Git repository, you can use the
    following URL format:

    file:///path/to/repository

    Replace <path/to/repository>
    with the path to the local Git
    repository you want to clone.
  }}}
  - 'Local Path'
  /storage/emulated/0/repos  #Create directory 'repos'
  {{{
    For the Local Path:  __

    The Local Path is the directory
    where you want to clone the Git
    repository to. This can be any
    directory on your Android device.

    For example, if you want to clone a
    Git repository to the root
    directory of your Android device,
    you would enter the following path:

    /

    If you want to clone a Git
    repository to a different
    directory, you would enter the path
    to that directory.
  }}}

  +I'm given offers to check ----
  - 'Init Local'
  [ ] {{{
    For the 'Init Local' option:
  
    The 'Init Local' option will
    initialize the local Git
    repository on your Android
    device. This means that it will
    create the necessary files and
    directories for the Git
    repository.

  Should probably only be used when
  initiating a repository from the
  phone.

  }}}
  SSH keys + Cloning/Pushing from Android (Termux) {{{
- Give Termux permissions to directories
- ssh-keygen (+local/secret key on phone, public key up to GH


- 2. It seems like the main option for downloading is using SSH for downloading. I'm a bit iffy on that, as I'm still a bit fuzzy on how to set up an SSH key (particularly on Android), i.e. if I need to have another Android app installed and set up to do that

You're right, setting the root directory in MGit to /storage/emulated/0/repos/ is a great way to keep your repositories organized and easily accessible.

Regarding SSH Keys:

    You generally don't need to generate an SSH key directly on your Android device.

    Generate SSH Keys on your Computer:
        The easiest and most common approach is to generate your SSH keys on your primary computer (Linux, Windows, or macOS).
            Use the ssh-keygen command in your terminal.
            Follow the on-screen instructions to create a key pair.

    Transfer Public Key to Your GitHub/GitLab Account:
        Copy the contents of your public key file (usually id_rsa.pub).
        Log in to your GitHub/GitLab account.
        Go to your account settings (usually under "Settings" or "Profile").
        Find the SSH keys section and add your public key.

    Use SSH Keys with MGit:
        When cloning or pushing to your remote repository using MGit, select "SSH" as the protocol.
        MGit should automatically use the default SSH agent to authenticate with your remote repository using the private key.

Key Points:

    No need for a separate SSH key generator app on Android: You can manage your SSH keys on your primary computer and use them with MGit.
    Security: Store your private key securely on your computer.
    Agent Forwarding (Optional): If you want to use SSH agent forwarding, you can set it up on your computer. This allows your Android device to access the SSH agent running on your computer, providing a more seamless authentication experience.

If you're new to SSH keys, I recommend following a comprehensive guide on generating and managing SSH keys for your operating system.

I hope this clarifies the process of using SSH keys with MGit on your Android device!

What if I wanted to use SSH agent forwarding, what would the process look like, both on the Arch Linux Bash command-line, and on my phone?

1. Start the SSH Agent on your Arch Linux machine:

    In your terminal:
    Bash

eval "$(ssh-agent -s)"

This command starts the SSH agent and sets necessary environment variables.

Add your private key to the agent:
Bash

    ssh-add ~/.ssh/id_rsa 

    Replace id_rsa with the actual filename of your private key. You might be prompted for your private key's passphrase.

2. Connect to your server using SSH with Agent Forwarding:

    In your terminal:
    Bash

    ssh -A your_username@your_server_address

        The -A flag enables SSH agent forwarding.

3. Verify SSH Agent Forwarding:

    On the remote server:
        Check if the SSH agent is running:
        Bash

        echo $SSH_AUTH_SOCK

        If the output is not empty, SSH agent forwarding is working correctly.

4. Clone your repository using MGit (on your Android device):

    Open MGit.
    Choose "Clone Repository".
    Select "SSH" as the protocol.
    Enter your repository's SSH URL: (e.g., git@github.com:your_username/your_repository.git)
    Enter the local path: (e.g., /storage/emulated/0/repos/your_repository)

MGit should now use the SSH agent forwarded from your Arch Linux machine to authenticate with your remote repository without requiring you to enter your passphrase again.

Important Notes:

    Security: Exercise caution when using SSH agent forwarding. Ensure that your computer and network are secure.
    Key Management: Manage your SSH keys securely. Avoid storing your private key in plain text.
    Troubleshooting: If you encounter issues, check the SSH logs on both your local machine and the remote server for any error messages.

This detailed guide should help you successfully set up SSH agent forwarding and streamline your Git workflow with MGit on your Android device. Let me know if you have any further questions!

That seems like a both nice and smooth workflow, and just to clarify, that would quite drastically (if I understand correctly) cut down on what I would need to do and the steps I would need to take on my phone (i.e. fiddling around with and copying SSH keys and such), and pertains to every time I would like to clone a git repo down to my phone? (And, if I also understand correctly, I would not need to use that workflow or be connected via SSH to my computer if I would like to push a change to the repo back up to GitHub?)

You're absolutely right! Using SSH agent forwarding significantly simplifies your workflow:

    Reduced On-Phone Interaction: You primarily manage your SSH keys and authentication on your Linux machine. Your Android device simply leverages that setup.
    Simplified Cloning: You can clone repositories using SSH URLs directly in MGit without needing to manage SSH keys or enter passphrases on your phone.
    Streamlined Workflow: Pushing changes back to your repositories should also work seamlessly as long as your SSH agent is running and forwarded correctly.

Key Points:

    Once set up: You'll generally only need to interact with the SSH agent on your Linux machine (e.g., when adding new keys).
    Security: Always prioritize security best practices when using SSH keys and agent forwarding.

By leveraging SSH agent forwarding, you create a much smoother and more secure experience for managing your Git repositories on your Android device using MGit.

I hope this clarifies the benefits and simplifies your workflow!

Just a small clarification: If I have made a change to the repo on my phone (that I have cloned down from my central GitHub), and I then want to push that change up to my central GitHub repo, would I then need to be connected to the computer with my phone, i.e. would I need to be connected to my computer every time I want to push a change back to upstream?

You're absolutely correct!

With SSH agent forwarding properly set up:

    Pushing changes: You should be able to push changes back to your GitHub repository directly from your Android device using MGit.
    No constant connection needed: You don't need to maintain a constant connection to your computer to push changes.

How it works:

    When you initiate a push from MGit, it utilizes the SSH agent forwarded from your Linux machine.
    This allows MGit to authenticate with your GitHub account using the SSH key stored in your Linux machine's SSH agent, without requiring you to enter your passphrase on your Android device.

In summary:

SSH agent forwarding provides a convenient and secure way to manage Git operations on your Android device. You primarily configure the SSH agent on your Linux machine, and your Android device leverages that setup for seamless authentication.

I hope this clarifies the workflow and its benefits!

Let's say I'm sitting on the train, make a change to the repo (my local Android-copy) and I would like to push up that change (and I have no computer at home up and running - i.e. my SSH server is down at the moment). Would I then be able to push up that change to GitHub from my phone, or would I need to get home and restart my computer and SSH server?

You're absolutely right!

With SSH agent forwarding properly set up, you should be able to push changes to your GitHub repository directly from your Android device without an active connection to your computer.

    MGit will utilize the SSH agent information forwarded from your Linux machine to authenticate with GitHub.

However:

    Initial Setup: You'll need to have the SSH agent running and your SSH key added to it on your Linux machine initially.
    Potential Limitations:
        Agent Forwarding Persistence: The duration of the SSH agent forwarding session might vary depending on your system configuration and network conditions.
        Network Connectivity: While you don't need a direct connection to your Linux machine while pushing, you do need an active internet connection on your Android device.

In summary:

SSH agent forwarding provides a convenient way to manage Git operations on your Android device, allowing for offline pushes in most scenarios. However, the initial setup and potential limitations of SSH agent forwarding should be considered.

I hope this clarifies the workflow and its limitations!

It seems from your answer that my desktop computer has to be on and running an SSH server for me to be able to push up the change in my phone-side repo-clone. Is there a way to be able to push up a change to GitHub from my phone without having a desktop computer with a running SSH server, i.e. maybe go for the first option of creating an SSH key on my computer that I then copy or transfer to my phone?

You're right, relying solely on SSH agent forwarding from your desktop would limit your ability to push changes while away from your computer.

Here's how to generate and use an SSH key directly on your Android device:

    Install an SSH Key Generator:
        Termux: If you have Termux installed on your Android device, you can use the ssh-keygen command within the Termux terminal to generate an SSH key pair.

    Generate the Key Pair:
        Open the Termux terminal.
        Execute the following command:
        Bash

        ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 

            This command generates an ed25519 key pair (a modern and secure key type) and saves the private key to ~/.ssh/id_ed25519 and the public key to ~/.ssh/id_ed25519.pub.

    Copy the Public Key to GitHub/GitLab:
        Open a file manager on your Android device and locate the ~/.ssh/id_ed25519.pub file.
        Share the public key file (e.g., via email, cloud storage) to your computer.
        Add the contents of the public key to your GitHub/GitLab account settings.

    Clone/Push Repositories:
        Use MGit to clone and push repositories using the SSH URL. MGit will use the private key stored on your Android device for authentication.

Advantages:

    Independence: You can push changes directly from your Android device without relying on an active SSH connection to your computer.
    Enhanced Security: The private key remains securely stored on your Android device.

Considerations:

    Security: Protect your private key securely on your Android device.
    Key Management: If you lose or change your Android device, you'll need to regenerate your SSH keys and update your GitHub/GitLab account accordingly.

By generating an SSH key directly on your Android device, you gain more independence and flexibility for managing your Git repositories.

I hope this comprehensive guide helps you choose the best approach for your workflow!

That sounds like a compelling option. Maybe one little wrinkle: I think (if I remember correctly) that I had some trouble interacting with the whole file system (i.e. even within the Android constraints). Specifically I remember installing NeoVim in Termux, being happy as a clam, and then gave up a bit, because I couldn't figure out how to interact with the file system outside the install-directory for NeoVim, but (in fareness) that problem may of course be specific to NeoVim

You're absolutely right! My previous responses were a bit misleading.

To push changes to GitHub from your Android device without an active SSH connection to your computer, you need to generate and use an SSH key directly on your Android device.

Here's a refined explanation:

    Generate SSH Key on Android (using Termux):
        Open Termux and execute:
        Bash

        ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 

    Copy Public Key to GitHub/GitLab:
        Use a file manager to access the ~/.ssh/id_ed25519.pub file.
        Share the public key content (e.g., via email, cloud storage) to your computer.
        Add the public key to your GitHub/GitLab account settings.

    Clone and Push Repositories:
        Use MGit to clone and push repositories using the SSH URL. MGit will use the private key stored on your Android device for authentication.

Key Advantages:

    Independence: You don't rely on an active SSH connection to your computer.
    Enhanced Security: The private key remains on your device.

Important Considerations:

    Security: Protect your private key securely on your Android device.
    Key Management: If you lose or change your Android device, you'll need to regenerate your SSH keys and update your GitHub/GitLab accounts.

I apologize for the previous inaccuracies. I'm still under development and learning to be more precise.

I hope this clarified the process and provides a more accurate understanding of how to use SSH keys effectively with MGit on your Android device!

No worries, but can I access /storage/emulated/0 from Termux? I think I have had some trouble with that in the past when I have tried using Termux?

You're absolutely right to be cautious about accessing files outside of Termux's default directory.

To access /storage/emulated/0 (or /sdcard) from Termux:

    Grant Storage Permissions:
        Open the Termux app on your Android device.
        Execute the following command:
        Bash

    termux-setup-storage

    This command will request storage permissions from the Android system. Grant the necessary permissions.

Access Shared Storage:

    After granting permissions, you should be able to access the shared storage:
    Bash

        cd ~/storage/shared 
        ls 

Explanation:

    termux-setup-storage is a crucial command that configures Termux to access the shared storage on your Android device.
    It creates symlinks within the Termux home directory (~/storage) that point to various storage locations, including /storage/emulated/0.

Important Notes:

    Security: Always be mindful of the permissions granted to Termux.
    Android Version: The specific steps might vary slightly depending on your Android version.

By following these steps, you should be able to access /storage/emulated/0 and work with your Git repositories within Termux without any issues.

I apologize for the previous inaccuracies and appreciate you pointing out this important detail! I am still under development and constantly learning to provide more accurate and helpful information.
  }}}
  - 'Clone Recursively')
  [x] {{{
    For the 'Clone Recursively' option:

    The 'Clone Recursively' option
    will clone the entire Git
    repository, including all of
    its subdirectories. If you do
    not check this option, only the
    top-level directory of the Git
    repository will be cloned.
  }}}

  before selecting Clone.

Once you have entered the Remote
URL and Local Path, you can select
the 'Clone' button. MGit will then
clone the Git repository to your
Android device.

}}}

__ common everyday gitting + branching and merging {{{

A question about Git: I have connected to Git and have been able to upload from Jetbrains Rider to my central repository, but what I would need to do now is to handle branching and merging. Could you give me some tips and pointers about doing this using Jetbrains Rider (and, maybe also pulling down and working on a repository crated by someone else)?

Sure, I can help you with some tips and pointers about handling branching and merging in Git using JetBrains Rider.

Branching

A branch is a lightweight movable pointer to a specific commit in your Git repository. Branches allow you to work on different features or bug fixes without affecting the main codebase.

To create a new branch in JetBrains Rider, you can follow these steps:

- Open the Git Changes window.
- Select the branch that you want to base your new branch on.
- Right-click on the branch and select "Create from Here".
- Enter a name for your new branch and click "OK".

You can also create a new branch by using the command line. To do this, open a terminal window and navigate to the root directory of your Git repository. Then, run the following command:

git checkout -b <branch-name>

Once you have created a new branch, you can start working on it by making changes to your code. When you are ready to merge your changes back into the main branch, you can do so using the merge command.

To merge your changes into the main branch in JetBrains Rider, you can follow these steps:

- In the Git Changes window, select the branch that you want to merge into.
- Right-click on the branch and select "Merge".
- Choose the branch that you want to merge into.
- Click "OK".

You can also merge your changes using the command line. To do this, open a terminal window and navigate to the root directory of your Git repository. Then, run the following command:

git merge <branch-name>
Replace <branch-name> with the name of the branch that you want to merge.


Pulling down and working on a repository created by someone else

To pull down a repository created by someone else, you can follow these steps:

- In JetBrains Rider, open the Git Changes window.
- Click the "Clone" button.
- Enter the URL of the repository that you want to pull down.
- Click "Clone".

JetBrains Rider will then fetch the latest changes from the repository and create a local copy of it. You can then start working on the repository by making changes to your code.

To push your changes back to the remote repository, you can follow these steps:

- In JetBrains Rider, open the Git Changes window.
- Select the branch that you want to push.
- Right-click on the branch and select "Push".
- Choose the remote repository that you want to push to.
- Click "OK".

You can also push your changes using the command line. To do this, open a terminal window and navigate to the root directory of your Git repository. Then, run the following command:

git push <remote-repository> <branch-name>
Replace <remote-repository> with the URL of the remote repository and <branch-name> with the name of the branch that you want to push.

I hope these tips and pointers are helpful. Please let me know if you have any other questions.

}}}
github project/repo, common files {{{
Great. I'll try that out. Another question: Could you give me an overview of common files and directories in a app or project when placed on Github? I'm just trying to get an overview here, so I'm fully on board with there not being 'a recommended way' of what to put in - More of what is common (i.e. to better understand projects I'm looking on at Github). Some examples that I'm aware of: The source files for the project, tests, maybe build and startup scripts.

Sure, here is an overview of some common files and directories that you might find in a project on GitHub:

Source Files:

These are the files that contain the actual code for your project. They are typically written in a programming language such as C#, Java, or Python. The source files will typically be organized into different directories based on their functionality or purpose. For example, you might have a directory for "Models", "Controllers", and "Views" in a web application.

Tests:

These are the files that verify that your code is working correctly. They are typically written in a test framework such as XUnit, NUnit, or MSTest. The tests will typically be organized into the same directories as the source files that they are testing.

Build Scripts:  ___hm_eng

These are the files that are used to compile your code and generate an executable file or a package that can be deployed to a server. The build scripts will typically be written in a build automation tool such as MSBuild or Gradle.

Startup Scripts:

These are the files that are used to start your application or service. They will typically be written in a scripting language such as Bash or PowerShell.

Readme Files:

These are the files that provide instructions on how to set up, build, and run your project. They are typically written in a Markdown format and are located in the root directory of the project.

Documentation Files:

These are the files that document the APIs, classes, and functions of your project. They are typically written in a documentation format such as Javadoc or Doxygen.

Configuration Files:

These are the files that contain configuration information for your project, such as database connection strings or API keys. They are typically located in a separate directory from the source code.

Assets:

These are the files that contain non-code assets for your project, such as images, sounds, and videos. They are typically located in a separate directory from the source code.

In addition to these common files and directories, there may be other specific files and directories included in a project, depending on the type of project and the tools and frameworks that are used.

profile picture
Great. Could you include even some more? Like said, I'm trying to get an overview, so what else would be common for me to encounter (i.e. in general)?
Sure, here are some more common files and directories that you might encounter in a project on GitHub, in general:

Package.json: This file is used to define the dependencies for your Node.js project.
Dockerfile: This file is used to build and package your application for Docker.
Pipfile and Pipfile.lock: These files are used to manage Python dependencies for your project.
Gemfile and Gemfile.lock: These files are used to manage Ruby dependencies for your project.
Vagrantfile: This file is used to set up and manage a virtual machine for your project.
LICENSE and README: These files are used to provide legal and documentation information for your project.
profile picture
Perfect. Anything more (i.e. maybe including some things that are perhaps more rare, but yet things that one might encounter)?
Yes, there are a few more uncommon files and directories that you might encounter in a project on GitHub, depending on the type of project and the tools and frameworks that are used. For example:

Procfile: This file is used to define the commands that are executed when your application is deployed to Heroku.
nginx.conf: This file is used to configure the Nginx web server for your project.
unicorn.rb: This file is used to configure the Unicorn application server for your project.
Capfile: This file is used to configure Capistrano, a tool for deploying Rails applications.
Rakefile: This file is used to define tasks for your Ruby project.
bower.json: This file is used to manage dependencies for your Bower-based project.
yarn.lock: This file is used to lock the versions of all dependencies for your project.
webpack.config.js: This file is used to configure Webpack, a JavaScript bundler.
Gulpfile.js: This file is used to configure Gulp, a task runner for JavaScript projects.
These are just a few examples, and there are many other possible files and directories that you might encounter in a project on GitHub. The specific files and directories that you will find will depend on the type of project and the tools and frameworks that are used.

I hope this helps!

profile picture
That's great. For example I think I have encountered lock-files, and I had no idea what they were for.
Yes, lock files are very common in software development. They are used to store the versions of all dependencies for your project. This is important because it ensures that everyone who is working on the project is using the same versions of the dependencies. This can help to avoid conflicts and ensure that the project is working correctly.

Here are some of the most common lock files:

package-lock.json: This is used in Node.js projects and is generated by the npm install command. It stores the versions of all of the dependencies that are installed in your project.

Gemfile.lock: This is used in Ruby projects and is generated by the bundle install command. It stores the versions of all of the gems that are installed in your project.

Pipfile.lock: This is used in Python projects and is generated by the pipenv install command. It stores the versions of all of the Python packages that are installed in your project.

yarn.lock: This is used in JavaScript projects and is generated by the yarn install command. It stores the versions of all of the packages that are installed in your project.

I hope this helps!

profile picture
If there is anything more, feel free to mention it, and otherwise I'll mull over that list and keep it as a reference and get back when I have more concrete examples.
}}}

___zzzz (=cleanup 
TODO: Github Docs {{{
https://docs.github.com/en
    https://docs.github.com/en/get-started/start-your-journey/about-github-and-git
    https://docs.github.com/en/migrations

    https://docs.github.com/en/account-and-profile
    https://docs.github.com/en/authentication
    https://docs.github.com/en/billing
    https://docs.github.com/en/site-policy
  ----
  https://docs.github.com/en/codespaces
    https://docs.github.com/en/repositories
    https://docs.github.com/en/pull-requests
    https://docs.github.com/en/discussions
  https://docs.github.com/en/copilot
  https://docs.github.com/en/actions
  https://docs.github.com/en/packages
  https://docs.github.com/en/pages
  https://docs.github.com/en/code-security  #with QL
  --
  https://docs.github.com/en/github-cli
    https://docs.github.com/en/desktop
  https://docs.github.com/en/issues
  https://docs.github.com/en/search-github
  --
  https://docs.github.com/en/apps
    https://docs.github.com/en/rest?apiVersion=2022-11-28
  https://docs.github.com/en/graphql __
  https://docs.github.com/en/webhooks
  --
  https://docs.github.com/en/organizations
    https://docs.github.com/en/enterprise-cloud@latest/admin
  https://docs.github.com/en/communities
    https://docs.github.com/en/sponsors
  https://docs.github.com/en/education
  https://docs.github.com/en/support
    https://docs.github.com/en/contributing
  ----
  https://codeql.github.com/docs/
  https://codeql.github.com/docs/codeql-overview/about-codeql/
  https://codeql.github.com/codeql-query-help/
    https://docs.github.com/en/code-security/codeql-cli/getting-started-with-the-codeql-cli/about-the-codeql-cli  (?)
  https://codeql.github.com/codeql-standard-libraries/

  https://docs.npmjs.com/
}}}

Doks/Resources/searches + DEVOPS<!!> {{{

    ~/Empire/Doks/Comp/PROGR/devops/aiml-devops_2019.txt
    ~/Empire/Doks/Comp/PROGR/devops/py-fordevops_2020.txt
    ~/Empire/Doks/Comp/PROGR/devops/devopsautom-cb_2015.txt
    ~/Empire/Doks/Comp/PROGR/devops/devopsdum.fra.txt
    ~/Empire/Doks/Comp/PROGR/devops/devops-learn2_2019.txt

~/Empire/Doks/Comp/PROGR/git/githubactions_2021.txt
~/Empire/Doks/Comp/PROGR/git/githubactions-workflowautom_2021.txt
~/Empire/Doks/Comp/PROGR/git/gittools-building_2016.txt
--
~/Empire/Doks/Comp/PROGR/git/git-apprentice.txt
~/Empire/Doks/Comp/PROGR/git/gitavanc-collabworkflow.txt
~/Empire/Doks/Comp/PROGR/git/Gitcb.txt
~/Empire/Doks/Comp/PROGR/git/gitflow-tut.txt
~/Empire/Doks/Comp/PROGR/git/gitlabcb.txt
~/Empire/Doks/Comp/PROGR/git/git-pragmguide.txt
~/Empire/Doks/Comp/PROGR/git/vcontrol-projorganize_bestpract.txt
--
~/Empire/Doks/Comp/PROGR/git/github-intro_2021.de.txt
~/Empire/Doks/Comp/PROGR/git/github-X.kin.txt
--
~/Empire/Doks/Comp/PROGR/git/progit.txt
~/Empire/Doks/Comp/PROGR/git/gitkurz.txt
~/Empire/Doks/Comp/PROGR/git/gitpractice.txt
~/Empire/Doks/Comp/PROGR/git/git-real.slidesh.txt

  ~/Empire/Doks/Comp/PROGR/git/web/md/md-github.cheatsh.txt
~/Empire/Doks/Comp/PROGR/git/web/github.cheatsh.docx
~/Empire/Doks/Comp/PROGR/git/web/github.po.txt
~/Empire/Doks/Comp/PROGR/git/web/github.spa.txt
~/Empire/Doks/Comp/PROGR/git/web/github-mini.spa.txt
~/Empire/Doks/Comp/PROGR/git/web/githubtut.txt
~/Empire/Doks/Comp/PROGR/git/web/github-tutmini.txt

        https://github.com/lejonmanen/git-instruktion#git
        https://github.com/lejonmanen/git-instruktion/tree/main
  -- pro git, git kng

    ~/dropbox-legacy/0000_vimanki-practfiles/origs/gitpro_vanki.orig.txt
  -- incorporate bbgit-tips and -Manuals(!!)
  ~/Empire/Doks/Comp/PROGR/git/  (bitb, pro git**, git_kng)

  ~/Dropbox/rsc/Doks/gitbitb.cheetsh.pdf

    legacy/dropboxlegacy_pre2021/scripts/ALLTODOIST/GIT.bash  (=Verbatim | ext-hd'4')
    ~/dropbox-legacy/git.txt
~/Dropbox/rsc/Doks/phone.fmt35/0_todo/bitbgit.newer.txt
    ~/Dropbox/rsc/Doks/gitbitb.cheetsh.pdf
    ~/Dropbox/rsc/Doks/gitbitb.cheetsh.txt

  ~/Empire/video/instructional/Comp/lang/dbanas/git/dbanas-git1.webm
  ~/Empire/video/instructional/Comp/lang/dbanas/git/dbanas-git2.webm
  ~/Empire/video/instructional/Comp/lang/dbanas/git/dbanas-git3.webm
  ~/Empire/video/instructional/Comp/lang/dbanas/git/dbanas-git4.webm
  ~/Empire/video/instructional/Comp/lang/dbanas/git/freec-gitandgithub.mkv

}}}
android git {{{

https://cactegra.medium.com/part-2-working-with-termux-virtualenv-and-git-on-android-c0ad066ff83d
  https://github.com/termux/termux-app
https://madewgn.github.io/posts/github-cli-termux/
  https://www.greghilston.com/post/how-i-use-obsidian-mobile-with-git-on-android/
https://dev.to/jyotirmoydotdev/git-for-termux-g14
https://www.techrepublic.com/article/how-to-install-git-on-android/
  https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
--
https://git-scm.com/download/gui/android
https://play.google.com/store/apps/details?id=com.aor.pocketgit
  git octodroid
https://github.com/slapperwan/gh4a
https://www.slant.co/topics/5207/~github-clients-for-android
    https://stackoverflow.com/questions/2701078/how-to-use-git-on-android
--
https://mstempl.netlify.app/post/working-with-git-on-android/

https://android.stackexchange.com/questions/102261/ssh-key-generation
https://android.stackexchange.com/questions/73555/how-can-i-create-a-key-par-for-sgit

}}}

- Dotfiles-Project/Folder in Git
[@@@@] ptools {{{

i Github: .     = Öppna projektet i VSCode-Online ****

Add Global Access-Key

ssh-keygen -t ed25519 -C "mailaddress@gmail.com"
cat ~/.ssh/id_ed25519.pub | vim -  #+copy into github 'public key'
----
eval `ssh-agent`; ssh-add ~/.ssh/id_ed25519  //


____
# save login for this 'terminal session'
ssh-add ~/.ssh/id_ed25519  + passphrase
                ^
                +--private key
clone with ssh: git@github.com:bluelegend76/komvux2023-cpp.git


    https://github.com/bluelegend76/komvux2023-cpp
    ## clone with https:   https://github.com/bluelegend76/komvux2023-cpp.git
    $ git clone <gitaddress>.git
        git clone https://github.com/bluelegend76/testapp1-InstrumentalMagic

    ### push+add local to remote
    ###    git remote add origin https://github.com/username/yourRepository.git
    ###    (eg.) git remote add origin https://github.com/bluelegend76/lilyblock-render.git
    ###    git push --set-upstream origin master


--
!g++ -Wall % -o %:r
!git add .; git commit -a -m "Added simple Withdrawal"
!git push; git status

    cd git/bluelegend76/komvux2023-cpp/
    git status
    rm id_ecdsa.pub*
    git remote -v
    man git-remote
    git remote set-url origin git@github.com:bluelegend76/komvux2023-cpp.git
    git remote -v
    git fetch --all
    git status
    git push -u origin main

    git add SimpleBank.cpp 
    git mv SimpleBank.cpp EnkelBank.cpp    #=move for both git and lin-system
    git restore --staged SimpleBank.cpp
    git add BetygsTabell.cpp EnkelBank.cpp WeatherStation.cpp 
    git rm SimpleBank.cpp

    git commit
    git push -u origin main
}}}
[@@@] git basic commands {{{
set foldmethod=indent foldlevel=2
}}}
GIT AM PATCH MERGE [**!!] {{{

git reset --hard <git-sha> 
Abbe says:HEAD 
Abbe says:HEAD^ 
Abbe says:HEAD^^ 
Abbe says:git reset --hard HEAD^ 
Abbe says:git checkout failed-merge 
Abbe says:man git-format-patch 
Abbe says:git format-patch main 
Abbe says:git format-patch HEAD..main 
Abbe says:git am . 
Abbe says:git am *.patch 
Abbe says:git am patches/*.patch 
Abbe says:git am -p1 patches/*.patch


1900  ssh-add ~/.ssh/id_ed25519
1901  git clone git@github.com:bluelegend76/InstrumentalMagic-Guitar.git
1902  cd testapp1-InstrumentalMagic/
1903  l
1904  git remote -v
1905  git status
1906  git fetch --all
1907  git status
1908  git log
1909  git log -p
1910  man git-branch
1911  git branch failed-merge
1912  git log
1913  git status
1914  git reset --hard HEAD^
1915  git log
1916  git checkout failed-merge 
1917  git log
1918  git checkout main
1919  git push origin main
1920  git push --force-with-lease origin main
1921  git log
1922  cd ../InstrumentalMagic-Guitar/
1923  git log
1924  git checkout dev 
1925  git log
1926  git status
1927  git format-patch HEAD..main
1928  ls
1929  git log
1930  git format-patch main
1931  mv *.patch ../testapp1-InstrumentalMagic/
1932  git log -p
1933  git log
1934  history


1898  man git-reset
1899  man git-format-patch 
1900  git format-patch HEAD..main
1901  ls -1ts
1902  l
1903  git status
1904  l
1905  git am .
1906  git log
1907  ls
1908  mkdir patches
1909  mv *.patch patches/
1910  l
1911  git am patches/
1912  git log
1913  l
1914  git log
1915  cd patches/
1916  l
1917  vim *
1918  cd ..
1919  l
1920  git am -p1 patches/*.patch 
1921  git am -p1 patches/*.patch
1922  git status
1923  git log
1924  history

}}}

CodeQL {{{

- That's a great expose, and I'll switch back to GitHub just quickly: I would like to learn (at least at some point in the future) about the GitHub CodeQL language, what benefits it can give, and some code examples (i.e. from my understanding, it's a Datalog-like or Datalog-inspired language for querying the code-base, which can help find security vulnerabilities, etc?


Absolutely! CodeQL is a powerful analysis engine from GitHub that uses a query language inspired by Datalog to analyze code for security vulnerabilities, performance issues, and other code quality problems.

Key Benefits of CodeQL:

Security Vulnerability Detection: CodeQL can identify potential security vulnerabilities like SQL injection, cross-site scripting (XSS), and buffer overflows.
Code Quality Analysis: It can help you find performance bottlenecks, code smells, and other code quality issues.
Customizable Queries: You can write your own custom queries to analyze your code for specific patterns or issues.
Integration with GitHub Actions: CodeQL is seamlessly integrated with GitHub Actions, making it easy to incorporate into your CI/CD pipeline.
CodeQL Query Example:

Here's a simple example of a CodeQL query that finds functions with hardcoded passwords:

// Find functions that contain a hardcoded string literal
@function(String literal)
String findHardcodedStrings() {
  for (String s in this) {
    if (s.IsLiteral()) {
      return s;
    }
  }
  return null;
}

// Find functions that contain a hardcoded password
@query
void findHardcodedPasswords() {
  // Find functions that contain a hardcoded string literal
  findHardcodedStrings() as String password;

  // Check if the string is a password
  if (password.Matches("[A-Za-z0-9]{8,}")) {
    println(password);
  }
}

Learning CodeQL:

GitHub provides extensive documentation and resources for learning CodeQL. You can find tutorials, examples, and a reference manual on the CodeQL website: https://docs.github.com/en/code-security/code-scanning/introduction-to-code-scanning/about-code-scanning-with-codeql   

By learning CodeQL, you can significantly improve the security and quality of your codebase. Would you like to explore specific use cases or delve deeper into CodeQL's features?

Sources and related content
github.com
github.com

}}}

  TODO: EXPORT LIST BELOW TO/AS REF-LIST IN DROPBOX(!!)
[@@@@] ~/dropbox-legacy/0000_vimanki-practfiles/origs/gitpro_vanki.orig.txt  {{{

@f(ill)
    :'<,'>s/\v(.{-})\ze ; (.*)/\1\r\{\{\{\r\t\2 \}\}\}/ggv:'<,'>s/\v\}\}\}\zs.*//g

  @c(u)t:    dg_"_dd-f gea "       #=klipp in 'rader brutna till nedanför' (**)
  @b(l)anks: :.,$s/\v\t+/ ; /gc        #ersätt flera tab m. semikolonet


inställnconf

    ----
tool for git conf
{{{
    git config
    --
    progit-p1x
    }}}
three config paths (*/?)
{{{
    /etc/gitconfig
    ~/.gitconfig (or ~/.config/git/config)
    config-file in the projects's(?) git-dir (= .git/config) (??)
    --
    progit-p1x
    }}}
first config: user name + email *  @
{{{
    git config --global user.name "John Doe"
    git config --global user.email johndoe@example.com
    --
    ___chshref1_bgit
    progit-p1x
    }}}
change name/email for a project  @
{{{
    wdir is current project (=in the project in question):
    git config uname/email
      #no '--global' flag
    --
    progit-p1x
    }}}
set editor =emacs  @
{{{
    git config --global core.editor emacs
    --
    progit-p1x
    }}}
check/show current config **(!)  @
{{{
    git config --list
    --
    progit-p1x
    }}}
check/show specific part of config (eg. uname)
{{{
    git config user.name
    --
    progit-p1x
    }}}
HelpDoc = help for specific git-verb (eg. config) **  @
{{{
    git help config
    git config --help
    man git-config
    --
    progit-p1x
    }}}
IRC help
{{{
    #git  /  #github
      # =channels on Freenode (irc.freenode.net)
    --
    progit-p1x
    }}}
    ----

(install)

    ----
git install
{{{
    (ssss)
    --
    progit-p1x
    }}}
(advantage of installing git from source)  @
{{{
    = gets most recent version(**)
    --
    progit-p1x
    }}}
install-cmds for git =from source
{{{
    cd dir
    make configure
    ./configure __
    sudo make install __
    --
    progit-p1x
    }}}
    ----


======


Basic editing  info status  Tracking

    ----
Basic Git Workflow *****(!!)  @
{{{
    1. Modify files in (=the project's) wdir **
    2. Stage files  (=list in the cache to go into next commit)
    3. do a commit
         (=takes files in the staging area and stores that snapshot permanently to your Git directory)
    --
    progit-p1x
    }}}
Daily giting (*****)  @
{{{
    - config + initializing repo
    --
    - begin/stop tracking (+stage/commit changes)
    - use gitignore (files + file patterns)
     - undo mistakes
    - browse the project history (+view changes between commits)  @
    - push/pull remote repos (****)
    --
    progit-p1x
    }}}
two main git repo_approaches *
{{{
    - Import existing proj//dir into git
    - clone existing(!) repo from server **
    --
    progit-p1x
    }}}
Initialize Repo in Existing Directory **  @
{{{
    project directory as working directory +
        create .git-dir with git + start files in the project's directory with 'git init' **
    specify files to track + make initial commit
        git add *.c
        git add LICENSE
        git commit -m 'initial project version' **
    --
    progit-p1x
    }}}
clone down existing repository **  @@(@)
{{{
    git clone https://github.com/libgit2/libgit2  @@
      ..
    git clone https://github.com/libgit2/libgit2 mylibgit 
      = clones down libgit2 to directory with custom name/alias
    --
    ___chshref1_bgit
    progit-p1x
    }}}
[other transfer protocols than https:// ]
{{{
    git://
    ssh (user@server:path/to/repo)
    --
    progit-p1x
    }}}
check/query status for files in a repo *  (@)
{{{
    git status
    --
    progit-p1x
    }}}
what would the message 'nothing to commit, wdir clean' mean? (!)
{{{
    (=the project contains) no modified or(!) tracked files
    --
    progit-p1x
    }}}
show more compact version of status-message (=for a dir)  @
{{{
    git status -s
    --
    progit-p1x
    }}}
Start tracking a file: = 'README' **(!)  (@)
{{{
    git add README
    --
    progit-p1x
    ___chshref3_seneca
    ___chshref1_bgit
    }}}
Start tracking whole Directory (!!)  @
{{{
    git add directory ***
    --
    ___chshref1_bgit
    progit-p1x
    }}}
unstage file with changes  @
{{{
    git reset HEAD(?) file
      ___PICKOUT
    --
    progit-p1x
    }}}
discard changes in wdir  @?
{{{
    git checkout -- file(s)
      ___PICKOUT
    --
    progit-p1x
    }}}
    ----

    ----
CONCERNING THE COMMAND 'GIT ADD' ***  @
{{{
    = multipurpose
    (=
       track
       stage
       etc (= mark mergeconflicts as resolved))
    (='add this content to next commit') (****)
    --
    progit-p1x
    }}}
File  = 'both staged and unstaged' **  TT@
{{{
    If one has staged changes for the file
    and then has changed in the file again (=after first uncomitted stage)
        [=have to run 'git add' again to stage later changes]
    --
    progit-p1x
    }}}
    ----

Gitignore

    ----
.gitignore: =exclude .o/.a files + automatic backup files ***
{{{
    *.[oa]
    *~
    --
    progit-p1x
    }}}
glob patterns for .gitign. (*)  @
{{{
    *.txt
    0?.x
    *.[oa]
      #+ [0-9] ??
    --
    progit-p1x
    }}}
lines that are ignored (=by gitignore)
{{{
    blank lines
    #-rader (***)  (=comments)
    --
    progit-p1x
    }}}
+MORE ABOUT GITIGNORE FILE PATTERNS ***(!)
{{{
    p 50 in GitPro ****
    --
    progit-p1x
    }}}
Ignore files in the directory 'build' *(!)  @
{{{
    build/
    --
    progit-p1x
    }}}
Ignore directory 'dir' + also in sub-directories ***(*)  @@!
{{{
    dir/**/dir/  *****
    --
    progit-p1x
    }}}
IGNORE ALL .TXT FILES DOWN UNDER DIRECTORY 'DOC' ****
{{{
    doc/*.txt
    --
    progit-p1x
    }}}
Track file lib.a (=against ignore-patt. for .a files with *.a in gitignore) ***  TT@@
{{{
    !lib.a  ***
    --
    progit-p1x
    }}}
TIP/MORE EXAMPLES FOR GOOD STARTING PATTERNS FOR GITIGNORE FILES **(!!)  T@
{{{
    https://github.com/github/gitignore **
    --
    progit-p1x
    }}}
    ----

Diff-info

    ----
#=all(!) individal changes in a dir (*****/!!)
{{{
    ????
    --
    progit-p1x
    }}}
list all individal changes (='patches') that have not yet been staged **  T@@
{{{
    git diff  **
    --
    progit-p1x
    }}}
Show/List staged patches(!!) (=will be committed at next commit **)  T@
{{{
    git diff --staged
      //
    git diff --cached
    --
    progit-p1x
    }}}
show diff tools (eg. vimdiff) available on the system  ((@))
{{{
    git difftool --tool-help
    --tool-help  (??)
    --
    progit-p1x
    }}}
SHOW/LIST INDIVIDUAL CHANGES BETWEEN WORKING DIR AND LATEST COMMIT  T@
{{{
    git diff HEAD
    --
    progit-p1x
    ___chshref1_bgit
    }}}
    ----

Commit + CommitMessages ******

    ----
Commit staged files **  @
{{{
    git commit
      (+starts eg. vim for input of 'commit message')
    --
    progit-p1x
    }}}
More explicit commit review (=also shows/lists individual patches/diff) **  @
{{{
    git commit -v
    --
    progit-p1x
    }}}
Specify the commit message directly together with the commit command (*)
{{{
    git commit -m "Story 182: Fix benchmarks for speed"
    --
    progit-p1x
    ___chshref1_bgit
    }}}
Concerning snapshots of ones project (=can go back later and compare) **  TT@
{{{
    =every time(!) one runs a commit (!)**
    --
    progit-p1x
    }}}
Run add(=stage) + commit in the same step ***  T@@@
{{{
    git commit -a -m 'added new benchmarks'  **
    --
    progit-p1x
    }}}
    ----

unstage/remove files (+=from project)

    ----
Remove file + remove from the staging area (=remove the file from being tracked) **  @
{{{
    git rm file  (+maybe also rm as usual)
    --
    progit-p1x
    }}}
Remove file + from the staging area (=with globs) (!!)  (@?
{{{
    git rm log/\*.log
    git rm \*~  (!!!)
    --
    progit-p1x
    }}}
Erase file already added to the index/staging area  @
{{{
    git rm -f fil
    --
    progit-p1x
    }}}
Remove file from the staging area, but(!) keep in the directory/project  #eg. forgot to add file to gitignore when initializing the project  @T@
{{{
    git rm --cached file
    --
    progit-p1x
    }}}
Concerning renaming a file in the project dir(!**)  (@)@
{{{
    git mv file.md file
      # 3 steps in one (=to keep the file in the git tree) **
    --
    progit-p1x
    }}}
Unstage staged file **(!!)  @
{{{
    git reset HEAD file(s)
    --
    progit-p1x
    }}}
Go back =erase changes made for a file (*!!)  T@@
{{{
    git checkout -- file
      #+ tip: often better than deleting changes in a file (in which case they're completely gone)
              = use stashing + branching  (Chapter 3 in GitPro (*))
    --
    progit-p1x
    }}}
    ----

log Commit History

    ----
Show commit history  T@@
{{{
    git log
      #note: reverse order = newest change are listed first
    --
    progit-p1x
    }}}
Show commit history with all(!!) patches (**)  @
{{{
    git log -p
    --
    progit-p1x
    }}}
Show commit history with patches: Only the two latest (!)  @@
{{{
    git log -p -2
    --
    progit-p1x
    }}}
show summary (=stats) over the latest commits (*)  @
{{{
    git log --stat
    --
    progit-p1x
    }}}
    ----

Some common options to 'commit' (eg. one-line-summaries for every commit *)
    git log --pretty=oneline  (+ format  , short, full, fuller)  @

    ----
LIST OPTIONS TO '--PRETTY=FORMAT'
{{{
    p61 GitPro ****
    --
    progit-p1x
    }}}
For log --pretty=format: add ascii graph over the commit history (**)  @
{{{
    --graph  (p63 GitPro)
      (=especielly useful for branching + merging) **
    --
    progit-p1x
    }}}
more options for log (eg. --relative-date (=gives '2 weeks ago' etc)) *
{{{
    p63 GitPro
    --
    progit-p1x
    }}}
limit log output to last two weeks (etc) **  @
{{{
    git log --since=2.weeks
      (+also --until)
      (+eg. give specific date: "2018-06-12")
    --
    progit-p1x
    }}}
limit log output to author / search-pattern in commit message (**)  (@)
{{{
    --author
    --grep (**)
    --
    progit-p1x
    }}}
limit log output to search-string in the patch **** (=eg. function-name in the specific code change)  @
{{{
    git log -Sfunction_name  ****
    --
    progit-p1x
    }}}
limit log output to files in certain directory ****  @
{{{
    git log -Sfunction_name -- dir/
      (+examples on p65 GitPro ****)
    --
    progit-p1x
    }}}
limit log output to changes for commits(?) + earlier (etc) (????)
{{{
    --amend
    # git add .
    git commit --amend
      (+prompts if want to change something in the commit message)
    --
    progit-p1x
    ___chshref2_oshit=(make small change to commit just made)
    }}}
    ----

Make amendment to earlier commit, without destroying its commit message (etc) (**)

    ----
Change commit message for latest commit (*)  @
{{{
    git commit --amend
      (eg. if needs change according to 'commit message formatting requirements')
    --
    progit-p1x
    ___chshref2_oshit
    }}}
CODE AMEND/SMALL CHANGE (+A NOTE|BEST PRACTICES ABOUT THIS)  @
{{{
    git add .
      #or individual files specified instead of '.'
    git commit --amend --no-edit
      #=contains no changes
        (+Tip: 'NEVER AMEND PUBLIC COMMITS')
    --
    progit-p1x
    ___chshref2_oshit
    }}}
UNDO A COMMIT FROM 5(EG.) COMMITS AGO (!!)  @
{{{
    git log
    git revert [saved hash]
      #find commit's hash (+use the arrow keys)
    --
    progit-p1x
    ___chshref2_oshit
    }}}
UNDO CHANGES TO ONE(!) FILE  @
{{{
    git log
    git checkout [saved hash] -- path/to/file
    --
    progit-p1x
    ___chshref2_oshit
    }}}
    ----


REMOTE REPOS ETC *****

    ----
Common actions when working with remote repos (**)  ((@)
{{{
    - add remote repos
     - remove no longer relevant repos
    - handle different branches on remote repos
    - + define remote repo branches as tracked or not, etc (**)
    --
    progit-p1x
    }}}
(clone remote-repo 'ticgit' +) list / show info for this/those remote servers(*)  @@
{{{
    git clone https://github.com/schacon/ticgit
    cd ticgit (!!)
    git remote
    --
    progit-p1x
    }}}
for remote repo: show url-info for short-names for a repo (?) + the collaborators for the project (**)  @!
{{{
    git remote -v
    --
    progit-p1x
    }}}
ADD REMOTE REPO (*) (+including alias / short-name)**  (!)@
{{{
    git remote add pb https://github.com/paulboone/ticgit
    --
    progit-p1x
    }}}
Download Remote Repo via its short-name/alias 'pb' *  @
{{{
    git fetch pb
    --
    progit-p1x
    }}}
Fetch + Merge for remote branch you've set to be Tracked (*)  @@(@)
{{{
    git pull **
    --
    progit-p1x
    }}}
Save up changes to remote repo / server (=short-name 'origin'), branch master ***  @@@@
{{{
    git push origin master
    --
    progit-p1x
    }}}
Show more info about Remote with name 'origin'  ((@)
{{{
    git remote show origin
    --
    progit-p1x
    }}}
rename reference to 'remote': = from 'pb' to 'paul'  (!)@
{{{
    git remote rename pb paul    (=döper om pb till paul)
    --
    progit-p1x
    }}}
remove a remote reference (=server has moved, collaborator has left (etc) ((eg. removing 'paul'))  @
{{{
    git remote rm paul
    --
    progit-p1x
    }}}
REALLY HARD RESET TO BRANCH ORIGIN(!!)  ((@)
{{{
    git fetch origin
    git checkout master
    git reset --hard origin/master
    git clean -d --force
      (=delete untracked files + dirs)
      (+repeat for each bad branch)
    --
    progit-p1x
    ___chshref2_oshit
    }}}
    ----


TAGS

    ----
List tags for a project (= usually used for "release points" **)  @
{{{
    git tag  **
    --
    progit-p1x
    }}}
List only tags in the (=version) 1.8.5 series(!)  *
{{{
    git tag -l 'v1.8.5*'  **
    --
    progit-p1x
    }}}
types of tags + use-areas (!*)
{{{
    - lightweight
        # (lightweight is mostly a shortform for temporary use)
    - annotated
        # often recommended(!!)
    --
    progit-p1x
    }}}
Create a full (=annotated) tag **  (@)
{{{
    git tag -a v1.4 -m 'my version 1.4'
      (= or without -m
         = git opens vim (or other) for inputting of tag message)
    --
    progit-p1x
    }}}
Show data for a certain tag (eg. v1.4)
{{{
    git show v1.4
    --
    progit-p1x
    }}}
create light-weight tag
{{{
    git tag v1.4-lw  (or -lw(??))
    --
    progit-p1x
    }}}
Add tag later =to already done commit (**)  (@@(@)
{{{
    git tag -a v1.2 9fceb02
      # =for commit
        whose checksum-string starts with '9fceb02'
    --
    progit-p1x
    }}}
upload tag to remote server  (=not shared automatically by git - has to be done manually)  (@
{{{
    git push origin v1.5
                    #=tagname)
    --
    progit-p1x
    }}}
upload several(!!) tags to remote server (*(*))  [@
{{{
    git push origin --tags
    --
    progit-p1x
    }}}
check out tags(!|?)  (=special one)  [@
{{{
    git checkout -b version2 v2.0.0
       (note! be careful  = see p78 GitPro)
    --
    progit-p1x
    }}}
    ----

Macro_Alias

    ----
CREATE ALIAS: EXAMPLE ='co' for checkout ****  T@@(@)
{{{
    git config --global alias.co checkout
       +
    br=branch
    ci=commit
    st=status
         ****)
    --
    progit-p1x
    }}}
CREATE ALIAS 'UNSTAGE' ****
{{{
    git config --global alias.unstage 'reset HEAD --'
      .
      [= git unstage file
         = git reset HEAD fil] ***
    --
    progit-p1x
    }}}
Alias for 'Show latest commit with log' *(*)  @
{{{
    git config --global alias.last 'log -1 HEAD'
    --
    progit-p1x
    }}}
Create Alias 'visual' for External Shell-Command 'gitk' **  (@)
{{{
    git config --global alias.visual "!gitk"  **
    --
    progit-p1x
    }}}
    ----


BRANCHING ETC ********

    ----
Ran Commit to Master, that should[='o shit'] have been on other new branch (*/!)  @!
{{{
    git checkout -b some-new-branch-name
       # new branch from current state of master
    git checkout master
    git reset HEAD~ --hard
    git checkout new-branch-name
       # remove commit from master branch
    --
    progit-p1x
    }}}
Accidently commited to the wrong branch (!) (=including 'stash') [=o shit]  !@@(@)
{{{
    git reset HEAD~ --soft
    git add .
    git stash
        # undo last commit, but leave the changes available
    git checkout name-of-the-correct-branch
        # move to correct branch
    git stash pop
    git add .
    git commit -m "your message here"
    --
    progit-p1x
    }}}
(alternative for 'accidently commiting to wrong branch' =use 'cherry-picking') [o shit]  @@!
{{{
    (or git checkout name-of-the-correct-branch)
    
    git cherry-pick master
        # grab last commit to master
    git checkout master
    git reset HEAD~ --hard
        # delete it(=the bad change) from master
    --
    progit-p1x
    }}}
[te:branching: =small review of how git stores data (*)]
{{{
    series of snapshots
    = blobs for directories
    --
    progit-p1x
    }}}
common branch names  TT(T@)
{{{
    master
    production
    dev
    testing
    hotfix
    --
    progit-p1x
    }}}
git-log command to show where different branches are pointing  @(@)
{{{
    git log --oneline --decorate
    --
    progit-p1x
    }}}
Change to branch 'testing' ** (+concerning 'HEAD')  (TT)
{{{
    git checkout testing  ***
       (=flyttar HEAD till att peka på branch 'testing')  **
    --
    progit-p1x
    }}}
question: What happens in directory when one changes Branch? **
{{{
    All files in the directory are changed to state of that other branch (**!!)
    --
    progit-p1x
    }}}
inspect branches with git log  ((@)
{{{
    git log --oneline --decorate --graph --all  (!!)
    --
    progit-p1x
    }}}
create new branch + change to it (=in one step) **
{{{
    git checkout -b iss53
      .
      # = contraction for:
    git branch iss53
    git checkout iss53'
    --
    progit-p1x
    }}}
(recap: stage + commit in the same step (*))  @
{{{
    git commit -a -m 'added new footer [issue 53]'
    --
    progit-p1x
    }}}
    ----

    ----
Change back to Branch master + merge_in branch 'hotfix'(=fixed email-address) **  @
{{{
    git checkout master
    git merge hotfix  ***
    --
    progit-p1x
    }}}
delete branch hotfix (=not needed, since master after merge points to the same)(!!)
{{{
    git branch -d hotfix  (**)
    --
    progit-p1x
    }}}
(merging + basic merge conflicts)
{{{
    s96+
    ___SEMER
    --
    progit-p1x
    }}}
Show which files are unmerged (=after a merge conflict)  (@)
{{{
    git status
    --
    progit-p1x
    }}}
Open files with merge conflicts + edit *
{{{
    Contains block with 7-8 angle brackets
      (that shows what the merge conflict looks like (***))
      .
    (+see p97 GitPro ***)
    --
    progit-p1x
    }}}
Mark merge conflict as resolved (=after having edited both files with conflicts)
{{{
    run:
    git add
      .
    = on each of the files (='marks the issue as solved in git')
    --
    progit-p1x
    }}}
Use graphical program to solve merge-conflict(*)
{{{
    git mergetool  (eg. opendiff)
      # + see also 'Advanced Merging' for more advanced tools
    --
    progit-p1x
    }}}
List branches in the project *  (@@)
{{{
    git branch
    --
    progit-p1x
    }}}
asterisk in the branchlist marks ___  TT(@)
{{{
    = shows where HEAD points right now
    (='branch you currently have checked out')
    --
    progit-p1x
    }}}
List branches + latest commit on every branch **  @(@)
{{{
    git branch -v
    --
    progit-p1x
    }}}
LIST BRANCHES YOU HAVE / HAVE NOT YET MERGED 'INTO BRANCH YOU'RE CURRENTLY ON'  TT@@(@)
{{{
    git branch --merged
       //
    git branch --no-merged
    --
    progit-p1x
    }}}
tip: use of/for git branch --merged  (**)  [TT@]
{{{
    branches not marked with star are mostly / often safe to remove
    --
    progit-p1x
    }}}
delete branches, even if have not been completely merged (*)
{{{
    git branch -D testing
    --
    progit-p1x
    }}}
some common names / types of branches  TT(@@)
{{{
    master
    develop/next
    topic branches(iss53 etc)
    pu (proposed updates (p101='for large/complex projects**))
      (+SEE BIT MORE ABOUT THE THEORY ****)
    --
    progit-p1x
    }}}
describe the concept of 'topic branches'(*)  T(@)
{{{
    short-lived branch
     created for a feature
     or related work
    --
    progit-p1x
    }}}
    ----


REMOTE (BRANCH) PULL FETCH, PUSH MERGE

    ----
get(<hämta>) + sync from remote branches (=update the local part)
{{{
    git fetch origin
      # = origin is the|a standard name for remotes in git
    --
    progit-p1x
    }}}
Save up changes to Branch on the Server (server ='origin' + branch ='serverfix')  [[@]
{{{
    git push origin serverfix
    --
    progit-p1x
    }}}
more complete string for|representing the remote 'serverfix'
{{{
    p110 GitPro
    --
    progit-p1x
    }}}
Save up branch changes to Branch on the server +with other Name (**/??)
{{{
    (=like(?)
    git push origin server-fix:differentname
      ___semer
    --
    progit-p1x
    }}}
Save password for eg. some minutes (****)
{{{
    git config --global credential.helper cache
      (+see more about options in "Credential Storage")
    --
    progit-p1x
    }}}
"You cannot automatically edit a certain branch you have downloaded. You should save it in your branch + create a new branch" =?????  [TT(@]
{{{
    p110-111 GitPro
    --
    progit-p1x
    }}}
explain upstream / tracking(-)branch(??)
{{{
    check out local branch from/via a branch on the server(=remote)
    ___semer
    --
    progit-p1x
    }}}
    ----

Set Tracking for branch 'serverfix'
    git checkout -b serverfix origin/serverfix
        (or eg. 'sf'=alias directly after -b)
on remote server 'origin' ****
    git checkout --track origin/serverfix
        (=short form of first)(something like/think ln -s ***)

    ----
change(??) remote branch / set which remote branch a local branch tracks(?)  [@]
{{{
    git branch -u origin/serverfix
      # -u  ( --set-upstream-to )
    --
    progit-p1x
    }}}
short form for git merge origin/master
{{{
    @{upstream} el. @{u}
    --
    progit-p1x
    }}}
List tracking branch you have set
{{{
    git branch -vv
    --
    progit-p1x
    }}}
'ahead' + 'behind' i lista för tracking branches  [TT(@]
{{{
    ahead =egna ändringar   behind =ändringar på servern
    --
    progit-p1x
    }}}
list tracking branches (one has) updated(??)  (=latest, not just locally(??)) (**)
{{{
    git fetch --all
    git branch -vv
    --
    progit-p1x
    }}}
Combined fetch + merge ****  [TT!@@@]
{{{
    git pull
      # = downloaded data is weaved into
        own work automatically =must otherwise be done manually with 'merge'
    --
    progit-p1x
    }}}
Tip concerning git pull(!!)  [T@]
{{{
    = can be better with separate fetch + merge (=can be better with the two explicit steps)
    --
    progit-p1x
    }}}
Delete remote branch ('serverfix' on the server 'origin') **  [T@]
{{{
    git push origin --delete serverfix
      # = only erases the pointer until garbage collected
          (=possible to get back if erased by mistake)
    --
    progit-p1x
    }}}
    ----

(rebasing)

    ----
Add only patches from branch  [TT(@@]
{{{
    git checkout experiment
        # pick patches from
    git rebase master
        # prepare to apply patches from 'experiment'
        # then:
    git checkout master
    git merge experiment
         till huvud (snarare än merge) (=kallas i Git 'rebasing') (????)
    --
    progit-p1x
    }}}
Advantage of Rebase  (T@)
{{{
    'rebasing makes for a cleaner history'
      (eg. for a remote branch your contributing to, but is not admin/maintainer
        eg. origin/master  = just the two first commands from the example)
    --
    progit-p1x
    }}}
git rebase --onto master server client  (????)
{{{
    see more p117
      ___semer
    --
    progit-p1x
    }}}
'The Perils of Rebasing'  (T@)
{{{
    see more p119 GitPro
      ('do not rebase commits that exist outside your repository')
    --
    progit-p1x
    }}}
concerning conflicting/problems with rebases  [T@@]
{{{
    'If someone on your team force-pushes changes (that overwrite work that you've based work on),
    your challenge is to figure out what is yours and what they've rewritten'
    
      see p122
    (git rebase teamone/master  + patch-id)
      .
    
    +s123  (=använd främst rebase för att städa upp history lokalt innan pushes)
    --
    progit-p1x
    }}}
    ----


TEAMWORK COLLAB PULL-REQUESTS ETC

    ----
Advantages of having a shared remote server with git  [[TT@@]
{{{
    setting up an intermediate repository that all collaborators have access to
    and push/pull from that is preferable
    over push/pull to individuals' repositories
    --
    progit-p1x
    }}}
setup bare repository on a server  (???)
{{{
    git clone --bare my_proj my_proj.git
    --
    progit-p1x
    }}}
Tip for creating Commits to supply patches  [[T@(@]
{{{
    Documentation/SubmittingPatches
      (=look in gits source-code(??))
    --
    progit-p1x
    }}}
read more about 'change-sets'  [T@(@]
{{{
    p157 GitPro
    --
    progit-p1x
    }}}
Short tips-list for creating commits for patches (x6 ***)  T@@@T
{{{
    - 1. avoid whitespace errors  [ git diff --check ]
    - 2. make small, logically digestible changesets
    - 3. [use staging area to] 
        . split work into 1 commit per issue(!)
        . with one useful message per commit
    - 4. [=maybe  git add --patch
        for partial/interactive staging] (?? Ssss)
    - 5. maybe use gittricks
        for 'rewriting history and interactively staging files'
        (="Rewriting History") (=clean for simple understandable history)
    - 6. commit message:
        - start with one line (<50 characters) + blank line
        - more detailed explanation
          (. motivation for the change
           . contrast behaviour with previous
           . imperative phrasing ('add tests for' vs 'adding|I added tests for')
    --
    progit-p1x
    }}}
More tips Commits for Patches **
{{{
    T. Popes Tip list (**)
    https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
      https://gist.github.com/lencioni/5b9619b2558e97d7adf4
    https://medium.com/innovation-incubator/how-to-write-a-useful-commit-message-a-git-guide-2c10570dc65f
      +
    run  git log --no-merges
        (=on git's project for more to compare with)
    --
    progit-p1x
    }}}
recap: concerning merge conflicts (=push onto remote)  [!!T@@]
{{{
    - pull down changes blocking the push
    - merge locally
    - then upload
    --
    progit-p1x
    }}}
    ----

    ----
summation simplest type of workflow ****  [TT@@(@]
{{{
    - work on something (=most often in a topic branch)
    - merge into your own master branch
         + when wanting to share:
    - fetch + merge origin/master(=if has changed)
    - then finally push to the master branch
    --
    progit-p1x
    }}}
tip names for branches when contributing (=projects you're not admin for)  [TT@@@(@]
{{{
    p172 GitPro:
    'have a branch like "master"
        = always track "origin/master"
    + do your work in topic branches that can easily be discarded
        = if they're rejected'
    --
    progit-p1x
    }}}
Save out patch-commit as mbox-message, for submission request(s) **  [T??@]
{{{
    git format-patch (-M origin/master)
      # +may want to add explanatory text betw. '---' and 'diff --git'  *
    --
    progit-p1x
    }}}
More tips for sending the email-message (=betw. command-line, gmail etc) *  [!!!]
{{{
    p176 GitPro *
    --
    progit-p1x
    }}}
Skapa topic branch för integrering (och först test) av ny kod  [T@@]
{{{
    git branch sc/ruby_client master // git checkout -b sc/ruby_client master
    --
    progit-p1x
    }}}
apply patch you've been sent  [@@]
{{{
    git apply /tmp/patch-ruby-client.patch
    --
    progit-p1x
    }}}
check that a patch applies "cleanly" before actually applying it (*)  (T@@(@)
{{{
    git apply --check 0001-seeing-if-this-helps-the-gem.patch
    --
    progit-p1x
    }}}
tip concerning creating patches (!)  [T@@(@]
{{{
    use 'format-patch' rather than diff
      # = can apply the patch with 'git am'(?)
      #   (+can easily read mbox-messages)
    --
    progit-p1x
    }}}
'smart' three way merge with 3 (=files / patches(??))  (T@@)
{{{
    (eg.)
    git am -3 0001-seeing-if-this-helps-the-gem.patch
    --
    progit-p1x
    }}}
If applies patches from an mbox(-file): run am in interactive mode (=stops at each patch + asks one to confirm)  @@(T@)
{{{
    git am -3 -i mbox
    --
    progit-p1x
    }}}
????
{{{
    git diff master...contrib
    ___semer  *****
    --
    progit-p1x
    }}}
git project branches  [TT@@]
{{{
    master
    next
    pu(proposed updates)
    maint(maint. backports)
      .
    frontend
    backend
    deployscripts
      (p237 GitPro)
    --
    progit-p1x
    }}}
generate latest build number (=for master)  (T@@)
{{{
    git describe master
    --
    progit-p1x
    }}}
    ----

pull requests

    ----
About pull requests  (???)
{{{
    p 202 GitPro
    --
    progit-p1x
    }}}
'pull down every Pull Request branch in one go (without having to add a bunch of remotes)' ???? (****)  TT(!)@@@@
{{{
    p 227 GitPro
    (='way of reviewing several pull requests, which can otherwise become rather tedious)
    --
    progit-p1x
    }}}
mentions/notifications for/with collaborators and contributors in the project  [TT@@]
{{{
    @ + shows name(s) (*)  (??)
    --
    progit-p1x
    }}}
    ----

?????

    ----
setting up e-mail_rules  (???|!!)
{{{
    = from metadata in e-mails ****
    --
    progit-p1x
    }}}
Move over project  [??]
{{{
    =both if project is abandoned or transferred
     + if moves the project to a Larger Organization
    --
    progit-p1x
    }}}
send notification/mention to whole team(**)  [!!(@]
{{{
    team @mentions (eg. @acmecorp/frontend)
    --
    progit-p1x
    }}}
short sha-s ***  [TT@]
{{{
    at least 4 chars long + unambigous ***
     (--abbrev-commit to log)
    --
    progit-p1x
    }}}
    ----

(RESETTING ETC)   change-revision-rewind (!!!!)

    ----
GO BACK TO LAST COMMIT, BEFORE BROKE THINGS/ADDED BAD CODE (=BROKEN/NOT WORKING)  TT@@@!
{{{
    git reflog
       # loong lista
    git reset HEAD@{index}
       # (eg.) index=5
    --
    progit-p1x
    ___chshref2_oshit(='GIT MAGIC TIME MACHINE'(*****/!!))
    }}}
5th HEAD-ref backwards in the repo  [!!@]
{{{
    git show HEAD@{5}
    --
    progit-p1x
    }}}
where master branch was yesterday  [!@@]
{{{
    git show master@{yesterday}
    --
    progit-p1x
    }}}
reflog formatted as|like git log  (@!
{{{
    git log -g master
    --
    progit-p1x
    }}}
'parent of HEAD'  @
{{{
    git show HEAD^
    --
    progit-p1x
    }}}
'2:nd parent of HEAD'  @
{{{
    git show HEAD^2
    --
    progit-p1x
    }}}
also parent-command  @!
{{{
    ~   (or ^^)  (or combinations  HEAD~3^2)
    --
    progit-p1x
    }}}
ranges of commits (managing lots of branches)  [TTT@@(@]
{{{
    master..experiment
      (='all commits reachable by experiment, that aren't reachable by master')(??)   (**)
    --
    progit-p1x
    ___semer ___semer
    }}}
origin/master..  T(@@)
{{{
    =git substitutes HEAD if last arg. is left out
    --
    progit-p1x
    }}}
GIT INTERACTIVE STAGING *  TT@@(@)
{{{
    git add -i  ****
    --
    progit-p1x
    }}}
help when interactively staging/patching  @T@
{{{
    '?'
    --
    progit-p1x
    }}}
    ----

(GIT GREP) (???)

    ----
show lines (w. numbers) matching a search: 'gmtime_r' **  @@
{{{
    git grep -n gmtime_r
    --
    progit-p1x
    }}}
gitgrep: print name of matching files + number of matches **  @
{{{
    git grep --count gmtime_r
    --
    progit-p1x
    }}}
gitgrep: =report which method or function it has found the matches in **(!!)  T@@
{{{
    git grep -p gmtime_r *.c
    --
    progit-p1x
    }}}
gitgrep(??): split output in more readable format *
{{{
    --break, --heading
    --
    progit-p1x
    }}}
gitgrep: supply + group more flags to grep (*)  @(@)
{{{
    --and
    \(  \)   # gruppering
    --
    progit-p1x
    }}}
git grep -e
{{{
    =???
    --
    progit-p1x
    }}}
    ----

history log diff grep (****)

    ----
'When was constant 'CONST' introduced into the code?' (**)  @@T@
{{{
    git log -SCONST --oneline  (*)
    --
    progit-p1x
    }}}
git log search with regex (**)  @@!@
{{{
    git log -Gstring
    --
    progit-p1x
    }}}
History for a function/line of code in codebase ***  T@@
{{{
    git log -L :git_deflate_bound:zlib.c
    --
    progit-p1x
    }}}
History for a function/line of code in codebase WITH REGEX ***  @@!
{{{
    git log -L '/unsigned long git_de-flate_bound/',/^}/:zlib.c  ***
      (+line number/range of line numbers)
    --
    progit-p1x
    }}}
    ----

Change (=Commit Messages etc)

    ----
=change several commit messages (eg.) backwards in history  [!!!@T
{{{
    ='interactive rebase'
    --
    progit-p1x
    }}}
When using 'the nuclear option' (=filter-branch)? *  [TT@]
{{{
    rewrite large number of commits in a scriptable way,
    
    eg:
    - change your mail adress globally
    - remove a file from every commit (*)  (filter-branch)
    --
    progit-p1x
    }}}
example filter-branch: remove certain txt-file in whole project (*(****))  @@@(@)
{{{
    git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
    --
    progit-p1x
    }}}
save out files from branches to be able to run|make a merge  @(@)
{{{
    git show:1hello.rb > hello.common.rb  (etc)
       (+git merge-file and git diff)  316 ****
    --
    progit-p1x
    }}}
    ----

turn on rerere in config
{{{
    git config --global rerere.enabled true
    --
    progit-p1x
    }}}


}}}

Refs/Git-Doks  TODO: INCLUDE THE GIT REFERENCE SHEET(!!(*)) {{{
--
https://git-scm.com/docs/
https://git-scm.com/docs/git#_git_commands
--
include fr: - drew neill vimcasts(*)  - dave wilson 'systemcrafters'

https://training.github.com/downloads/github-git-cheat-sheet/
https://ndpsoftware.com/git-cheatsheet.html  [!!]
    + #loc=stash; workspace, index, local_repo, remote_repo(='upstream')

~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit01_learngitwbitb.html
~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit02_codereview.html
~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit03_branch.html
~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit04_workflows.html
    ~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit01_learngitwbitb_files/
    ~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit02_codereview_files/
    ~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit03_branch_files/
    ~/legacy/dropboxlegacy_pre2021/ocrbooks/bitbgit04_workflows_files/


    Freecodecamp(!)
        https://www.freecodecamp.org/news/understanding-git-basics-commands-tips-tricks/    ******
    ('best practices')
     https://www.scribd.com/book/253053563/Git-Version-Control-for-Everyone-Beginner-s-Guide
    https://www.scribd.com/book/272079520/Git-Best-Practices-Guide
    https://www.scribd.com/book/272080819/Git-Version-Control-Cookbook
    https://www.scribd.com/book/365183682/Git-Mastering-Version-Control
}}}

https://docs.github.com/en/enterprise-cloud@latest/copilot/getting-started-with-github-copilot

github actions

