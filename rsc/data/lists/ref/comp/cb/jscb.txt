set foldmethod=indent foldlevel=2
vim: fdm=indent:fdl=2:

https://blog.logrocket.com/javascript-package-managers-compared/

+INCLUDE LISTINGS FROM MDN DOCS (=CLASSES|OBJECTS + METHODS)

    ~/Empire/Doks/Comp/lang/webdev/js/jseffective.pdf
    ~/Empire/Doks/Comp/lang/webdev/js/js-efficient.pdf

NEW: REASONML/RESCRIPT[!!]

https://marketplace.visualstudio.com/items?itemName=vscodevim.vim  #vs code, vimkeys
            install: cmd-palette + ext install vscodevim.vim

            Settings

            The settings documented here are a subset of the supported settings; the full list is described in the Contributions tab of VSCodeVim's extension details page, which can be found in the extensions view of VS Code.
            Quick Example

            Below is an example of a settings.json file with settings relevant to VSCodeVim:

            {
              "vim.easymotion": true,
              "vim.incsearch": true,
              "vim.useSystemClipboard": true,
              "vim.useCtrlKeys": true,
              "vim.hlsearch": true,
              "vim.insertModeKeyBindings": [
                {
                  "before": ["j", "j"],
                  "after": ["<Esc>"]
                }
              ],
              "vim.normalModeKeyBindingsNonRecursive": [
                {
                  "before": ["<leader>", "d"],
                  "after": ["d", "d"]
                },
                {
                  "before": ["<C-n>"],
                  "commands": [":nohl"]
                },
                {
                  "before": ["K"],
                  "commands": ["lineBreakInsert"],
                  "silent": true
                }
              ],
              "vim.leader": "<space>",
              "vim.handleKeys": {
                "<C-a>": false,
                "<C-f>": false
              },

              "// To improve performance",
              "extensions.experimental.affinity": {
                "vscodevim.vim": 1
              }
            }

            VSCodeVim settings

            These settings are specific to VSCodeVim.
            Setting 	Description 	Type 	Default Value
            vim.changeWordIncludesWhitespace 	Include trailing whitespace when changing word. This configures the cw action to act consistently as its siblings (yw and dw) instead of acting as ce. 	Boolean 	false
            vim.cursorStylePerMode.{Mode} 	Configure a specific cursor style for {Mode}. Omitted modes will use default cursor type Supported cursors: line, block, underline, line-thin, block-outline, and underline-thin. 	String 	None
            vim.digraphs.{shorthand} 	Set custom digraph shorthands that can override the default ones. Entries should map a two-character shorthand to a descriptive string and one or more UTF16 code points. Example: "R!": ["🚀", [55357, 56960]] 	Object 	{"R!": ["🚀", [0xD83D, 0xDE80]]
            vim.disableExtension 	Disable VSCodeVim extension. This setting can also be toggled using toggleVim command in the Command Palette 	Boolean 	false
            vim.handleKeys 	Delegate configured keys to be handled by VS Code instead of by the VSCodeVim extension. Any key in keybindings section of the package.json that has a vim.use<C-...> in the when argument can be delegated back to VS Code by setting "<C-...>": false. Example: to use ctrl+f for find (native VS Code behavior): "vim.handleKeys": { "<C-f>": false }. 	String 	"<C-d>": true
            "<C-s>": false
            "<C-z>": false
            vim.overrideCopy 	Override VS Code's copy command with our own, which works correctly with VSCodeVim. If cmd-c/ctrl-c is giving you issues, set this to false and complain here. 	Boolean 	false
            vim.useSystemClipboard 	Use the system clipboard register (*) as the default register 	Boolean 	false
            vim.searchHighlightColor 	Background color of non-current search matches 	String 	findMatchHighlightBackground ThemeColor
            vim.searchHighlightTextColor 	Foreground color of non-current search matches 	String 	None
            vim.searchMatchColor 	Background color of current search match 	String 	findMatchBackground ThemeColor
            vim.searchMatchTextColor 	Foreground color of current search match 	String 	None
            vim.substitutionColor 	Background color of substitution text when vim.inccommand is enabled 	String 	"#50f01080"
            vim.substitutionTextColor 	Foreground color of substitution text when vim.inccommand is enabled 	String 	None
            vim.startInInsertMode 	Start in Insert mode instead of Normal Mode 	Boolean 	false
            vim.useCtrlKeys 	Enable Vim ctrl keys overriding common VS Code operations such as copy, paste, find, etc. 	Boolean 	true
            vim.visualstar 	In visual mode, start a search with * or # using the current selection 	Boolean 	false
            vim.highlightedyank.enable 	Enable highlighting when yanking 	Boolean 	false
            vim.highlightedyank.color 	Set the color of yank highlights 	String 	rgba(250, 240, 170, 0.5)
            vim.highlightedyank.duration 	Set the duration of yank highlights 	Number 	200
            Neovim Integration

                :warning: Experimental feature. Please leave feedback on neovim integration here.

            To leverage neovim for Ex-commands,

                Install neovim
                Modify the following configurations:

            Setting 	Description 	Type 	Default Value
            vim.enableNeovim 	Enable Neovim 	Boolean 	false
            vim.neovimPath 	Full path to neovim executable. If left empty, PATH environment variable will be automatically checked for neovim path. 	String 	
            vim.neovimUseConfigFile 	If true, Neovim will load a config file specified by vim.neovimConfigPath. This is necessary if you want Neovim to be able to use its own plugins. 	Boolean 	false
            vim.neovimConfigPath 	Path that Neovim will load as config file. If left blank, Neovim will search in its default location. 	String 	

            Here's some ideas on what you can do with neovim integration:

                The power of g
                The :normal command
                Faster search and replace!

            Key Remapping

            Custom remappings are defined on a per-mode basis.
            "vim.insertModeKeyBindings"/"vim.normalModeKeyBindings"/"vim.visualModeKeyBindings"/"vim.operatorPendingModeKeyBindings"

                Keybinding overrides to use for insert, normal, operatorPending and visual modes.
                Keybinding overrides can include "before", "after", "commands", and "silent".
                Bind jj to <Esc> in insert mode:

                "vim.insertModeKeyBindings": [
                    {
                        "before": ["j", "j"],
                        "after": ["<Esc>"]
                    }
                ]

                Bind £ to goto previous whole word under cursor:

                "vim.normalModeKeyBindings": [
                    {
                        "before": ["£"],
                        "after": ["#"]
                    }
                ]

                Bind : to show the command palette, and don't show the message on the status bar:

                "vim.normalModeKeyBindings": [
                    {
                        "before": [":"],
                        "commands": [
                            "workbench.action.showCommands",
                        ],
                        "silent": true
                    }
                ]

                Bind <leader>m to add a bookmark and <leader>b to open the list of all bookmarks (using the Bookmarks extension):

                "vim.normalModeKeyBindings": [
                    {
                        "before": ["<leader>", "m"],
                        "commands": [
                            "bookmarks.toggle"
                        ]
                    },
                    {
                        "before": ["<leader>", "b"],
                        "commands": [
                            "bookmarks.list"
                        ]
                    }
                ]

                Bind ctrl+n to turn off search highlighting and <leader>w to save the current file:

                "vim.normalModeKeyBindings": [
                    {
                        "before":["<C-n>"],
                        "commands": [
                            ":nohl",
                        ]
                    },
                    {
                        "before": ["leader", "w"],
                        "commands": [
                            "workbench.action.files.save",
                        ]
                    }
                ]

                Bind { to w in operator pending mode makes y{ and d{ work like yw and dw respectively:

                "vim.operatorPendingModeKeyBindings": [
                    {
                        "before": ["{"],
                        "after": ["w"]
                    }
                ]

                Bind L to $ and H to ^ in operator pending mode makes yL and dH work like y$ and d^ respectively:

                "vim.operatorPendingModeKeyBindings": [
                    {
                        "before": ["L"],
                        "after": ["$"]
                    },
                    {
                        "before": ["H"],
                        "after": ["^"]
                    }
                ]

                Bind > and < in visual mode to indent/outdent lines (repeatable):

                "vim.visualModeKeyBindings": [
                    {
                        "before": [
                            ">"
                        ],
                        "commands": [
                            "editor.action.indentLines"
                        ]
                    },
                    {
                        "before": [
                            "<"
                        ],
                        "commands": [
                            "editor.action.outdentLines"
                        ]
                    },
                ]

                Bind <leader>vim to clone this repository to the selected location:

                "vim.visualModeKeyBindings": [
                    {
                        "before": [
                            "<leader>", "v", "i", "m"
                        ],
                        "commands": [
                            {
                                "command": "git.clone",
                                "args": [ "https://github.com/VSCodeVim/Vim.git" ]
                            }
                        ]
                    }
                ]

            "vim.insertModeKeyBindingsNonRecursive"/"normalModeKeyBindingsNonRecursive"/"visualModeKeyBindingsNonRecursive"/"operatorPendingModeKeyBindingsNonRecursive"

                Non-recursive keybinding overrides to use for insert, normal, and visual modes
                Example: Exchange the meaning of two keys like j to k and k to j to exchange the cursor up and down commands. Notice that if you attempted this binding normally, the j would be replaced with k and the k would be replaced with j, on and on forever. When this happens 'maxmapdepth' times (default 1000) the error message 'E223 Recursive Mapping' will be thrown. Stop this recursive expansion using the NonRecursive variation of the keybindings:

                "vim.normalModeKeyBindingsNonRecursive": [
                    {
                        "before": ["j"],
                        "after": ["k"]
                    },
                    {
                        "before": ["k"],
                        "after": ["j"]
                    }
                ]

                Bind ( to 'i(' in operator pending mode makes 'y(' and 'c(' work like 'yi(' and 'ci(' respectively:

                "vim.operatorPendingModeKeyBindingsNonRecursive": [
                    {
                        "before": ["("],
                        "after": ["i("]
                    }
                ]

                Bind p in visual mode to paste without overriding the current register:

                "vim.visualModeKeyBindingsNonRecursive": [
                    {
                        "before": [
                            "p",
                        ],
                        "after": [
                            "p",
                            "g",
                            "v",
                            "y"
                        ]
                    }
                ],

            Debugging Remappings

                Adjust the extension's logging level to 'debug' and open the Output window:
                    Run Developer: Set Log Level from the command palette.
                    Select Vim, then Debug
                    Run Developer: Reload window
                    In the bottom panel, open the Output tab and select Vim from the dropdown selection.

                Are your configurations correct?

                As each remapped configuration is loaded, it is logged to the Vim Output panel. Do you see any errors?

                debug: Remapper: normalModeKeyBindingsNonRecursive. before=0. after=^.
                debug: Remapper: insertModeKeyBindings. before=j,j. after=<Esc>.
                error: Remapper: insertModeKeyBindings. Invalid configuration. Missing 'after' key or 'commands'. before=j,k.

                Misconfigured configurations are ignored.

                Does the extension handle the keys you are trying to remap?

                VSCodeVim explicitly instructs VS Code which key events we care about through the package.json. If the key you are trying to remap is a key in which vim/vscodevim generally does not handle, then it's most likely that this extension does not receive those key events from VS Code. In the Vim Output panel, you should see:

                debug: ModeHandler: handling key=A.
                debug: ModeHandler: handling key=l.
                debug: ModeHandler: handling key=<BS>.
                debug: ModeHandler: handling key=<C-a>.

                As you press the key that you are trying to remap, do you see it outputted here? If not, it means we don't subscribe to those key events. It is still possible to remap those keys by using VSCode's keybindings.json (see next section: Remapping more complex key combinations).

            Remapping more complex key combinations

            It is highly recommended to remap keys using vim commands like "vim.normalModeKeyBindings" (see here). But sometimes the usual remapping commands are not enough as they do not support every key combinations possible (for example Alt+key or Ctrl+Shift+key). In this case it is possible to create new keybindings inside keybindings.json. To do so: open up keybindings.json in VSCode using CTRL+SHIFT+P and select Open keyboard shortcuts (JSON).

            You can then add a new entry to the keybindings like so:

            {
              "key": "YOUR_KEY_COMBINATION",
              "command": "vim.remap",
              "when": "inputFocus && vim.mode == 'VIM_MODE_YOU_WANT_TO_REBIND'",
              "args": {
                "after": ["YOUR_VIM_ACTION"]
              }
            }

            For example, to rebind ctrl+shift+y to VSCodeVim's yy (yank line) in normal mode, add this to your keybindings.json:

            {
              "key": "ctrl+shift+y",
              "command": "vim.remap",
              "when": "inputFocus && vim.mode == 'Normal'",
              "args": {
                "after": ["y", "y"]
              }
            }

            If keybindings.json is empty the first time you open it, make sure to add opening [ and closing ] square brackets to the file as the keybindings should be inside a JSON Array.
            Vim modes

            Here are all the modes used by VSCodeVim:
            Mode
            Normal
            Insert
            Visual
            VisualBlock
            VisualLine
            SearchInProgressMode
            CommandlineInProgress
            Replace
            EasyMotionMode
            EasyMotionInputMode
            SurroundInputMode
            OperatorPendingMode
            Disabled

            When rebinding keys in keybindings.json using "when clause context", it can be useful to know in which mode vim currently is. For example to write a "when clause" that checks if vim is currently in normal mode or visual mode it is possible to write the following:

            "when": "vim.mode == 'Normal' || vim.mode == 'Visual'",

            Vim settings

            Configuration settings that have been copied from vim. Vim settings are loaded in the following sequence:

                :set {setting}
                vim.{setting} from user/workspace settings.
                VS Code settings
                VSCodeVim default values

            Setting 	Description 	Type 	Default Value
            vim.autoindent 	Copy indent from current line when starting a new line 	Boolean 	true
            vim.gdefault 	When on, the :substitute flag g is default on. This means that all matches in a line are substituted instead of one. When a g flag is given to a :substitute command, this will toggle the substitution of all or one match. 	Boolean 	false
            vim.hlsearch 	Highlights all text matching current search 	Boolean 	false
            vim.ignorecase 	Ignore case in search patterns 	Boolean 	true
            vim.incsearch 	Show the next match while entering a search 	Boolean 	true
            vim.inccommand 	Show the effects of the :substitute command while typing 	String 	replace
            vim.joinspaces 	Add two spaces after '.', '?', and '!' when joining or reformatting 	Boolean 	true
            vim.leader 	Defines key for <leader> to be used in key remappings 	String 	\
            vim.maxmapdepth 	Maximum number of times a mapping is done without resulting in a character to be used. This normally catches endless mappings, like ":map x y" with ":map y x". It still does not catch ":map g wg", because the 'w' is used before the next mapping is done. 	Number 	1000
            vim.report 	Threshold for reporting number of lines changed. 	Number 	2
            vim.shell 	Path to the shell to use for ! and :! commands. 	String 	/bin/sh on Unix, %COMSPEC% environment variable on Windows
            vim.showcmd 	Show (partial) command in status bar 	Boolean 	true
            vim.showmodename 	Show name of current mode in status bar 	Boolean 	true
            vim.smartcase 	Override the 'ignorecase' setting if search pattern contains uppercase characters 	Boolean 	true
            vim.textwidth 	Width to word-wrap when using gq 	Number 	80
            vim.timeout 	Timeout in milliseconds for remapped commands 	Number 	1000
            vim.whichwrap 	Allow specified keys that move the cursor left/right to move to the previous/next line when the cursor is on the first/last character in the line. See :help whichwrap. 	String 	b,s
            .vimrc support

                :warning: .vimrc support is currently experimental. Only remaps are supported, and you may experience bugs. Please report them!

            Set vim.vimrc.enable to true and set vim.vimrc.path appropriately.
            🖱️ Multi-Cursor Mode

                :warning: Multi-Cursor mode is experimental. Please report issues in our feedback thread.

            Enter multi-cursor mode by:

                On OSX, cmd-d. On Windows, ctrl-d.
                gb, a new shortcut we added which is equivalent to cmd-d (OSX) or ctrl-d (Windows). It adds another cursor at the next word that matches the word the cursor is currently on.
                Running "Add Cursor Above/Below" or the shortcut on any platform.

            Once you have multiple cursors, you should be able to use Vim commands as you see fit. Most should work; some are unsupported (ref PR#587).

                Each cursor has its own clipboard.
                Pressing Escape in Multi-Cursor Visual Mode will bring you to Multi-Cursor Normal mode. Pressing it again will return you to Normal mode.

            🔌 Emulated Plugins
            vim-airline

                :warning: There are performance implications to using this plugin. In order to change the status bar, we override the configurations in your workspace settings.json which results in increased latency and a constant changing diff in your working directory (see issue#2124).

            Change the color of the status bar based on the current mode. Once enabled, configure "vim.statusBarColors". Colors can be defined for each mode either as string (background only), or string[] (background, foreground).

                "vim.statusBarColorControl": true,
                "vim.statusBarColors.normal": ["#8FBCBB", "#434C5E"],
                "vim.statusBarColors.insert": "#BF616A",
                "vim.statusBarColors.visual": "#B48EAD",
                "vim.statusBarColors.visualline": "#B48EAD",
                "vim.statusBarColors.visualblock": "#A3BE8C",
                "vim.statusBarColors.replace": "#D08770",
                "vim.statusBarColors.commandlineinprogress": "#007ACC",
                "vim.statusBarColors.searchinprogressmode": "#007ACC",
                "vim.statusBarColors.easymotionmode": "#007ACC",
                "vim.statusBarColors.easymotioninputmode": "#007ACC",
                "vim.statusBarColors.surroundinputmode": "#007ACC",

            vim-easymotion

            Based on vim-easymotion and configured through the following settings:
            Setting 	Description 	Type 	Default Value
            vim.easymotion 	Enable/disable easymotion plugin 	Boolean 	false
            vim.easymotionMarkerBackgroundColor 	The background color of the marker box. 	String 	'#0000'
            vim.easymotionMarkerForegroundColorOneChar 	The font color for one-character markers. 	String 	'#ff0000'
            vim.easymotionMarkerForegroundColorTwoCharFirst 	The font color for the first of two-character markers, used to differentiate from one-character markers. 	String 	'#ffb400'
            vim.easymotionMarkerForegroundColorTwoCharSecond 	The font color for the second of two-character markers, used to differentiate consecutive markers. 	String 	'#b98300'
            vim.easymotionIncSearchForegroundColor 	The font color for the search n-character command, used to highlight the matches. 	String 	'#7fbf00'
            vim.easymotionDimColor 	The font color for the dimmed characters, used when #vim.easymotionDimBackground# is set to true. 	String 	'#777777'
            vim.easymotionDimBackground 	Whether to dim other text while markers are visible. 	Boolean 	true
            vim.easymotionMarkerFontWeight 	The font weight used for the marker text. 	String 	'bold'
            vim.easymotionKeys 	The characters used for jump marker name 	String 	'hklyuiopnm,qwertzxcvbasdgjf;'
            vim.easymotionJumpToAnywhereRegex 	Custom regex to match for JumpToAnywhere motion (analogous to Easymotion_re_anywhere) 	String 	\b[A-Za-z0-9]\|[A-Za-z0-9]\b\|_.\|#.\|[a-z][A-Z]

            Once easymotion is active, initiate motions using the following commands. After you initiate the motion, text decorators/markers will be displayed and you can press the keys displayed to jump to that position. leader is configurable and is \ by default.
            Motion Command 	Description
            <leader><leader> s <char> 	Search character
            <leader><leader> f <char> 	Find character forwards
            <leader><leader> F <char> 	Find character backwards
            <leader><leader> t <char> 	Til character forwards
            <leader><leader> T <char> 	Til character backwards
            <leader><leader> w 	Start of word forwards
            <leader><leader> b 	Start of word backwards
            <leader><leader> l 	Matches beginning & ending of word, camelCase, after _, and after # forwards
            <leader><leader> h 	Matches beginning & ending of word, camelCase, after _, and after # backwards
            <leader><leader> e 	End of word forwards
            <leader><leader> ge 	End of word backwards
            <leader><leader> j 	Start of line forwards
            <leader><leader> k 	Start of line backwards
            <leader><leader> / <char>... <CR> 	Search n-character
            <leader><leader><leader> bdt 	Til character
            <leader><leader><leader> bdw 	Start of word
            <leader><leader><leader> bde 	End of word
            <leader><leader><leader> bdjk 	Start of line
            <leader><leader><leader> j 	JumpToAnywhere motion; default behavior matches beginning & ending of word, camelCase, after _ and after #

            <leader><leader> (2s|2f|2F|2t|2T) <char><char> and <leader><leader><leader> bd2t <char>char> are also available. The difference is character count required for search. For example, <leader><leader> 2s <char><char> requires two characters, and search by two characters. This mapping is not a standard mapping, so it is recommended to use your custom mapping.
            vim-surround

            Based on surround.vim, the plugin is used to work with surrounding characters like parentheses, brackets, quotes, and XML tags.
            Setting 	Description 	Type 	Default Value
            vim.surround 	Enable/disable vim-surround 	Boolean 	true

            t or < as <desired> or <existing> will enter tag entry mode. Using <CR> instead of > to finish changing a tag will preserve any existing attributes.
            Surround Command 	Description
            y s <motion> <desired> 	Add desired surround around text defined by <motion>
            d s <existing> 	Delete existing surround
            c s <existing> <desired> 	Change existing surround to desired
            S <desired> 	Surround when in visual modes (surrounds full selection)

            Some examples:

                "test" with cursor inside quotes type cs"' to end up with 'test'
                "test" with cursor inside quotes type ds" to end up with test
                "test" with cursor inside quotes type cs"t and enter 123> to end up with <123>test</123>

            vim-commentary

            Similar to vim-commentary, but uses the VS Code native Toggle Line Comment and Toggle Block Comment features.

            Usage examples:

                gc - toggles line comment. For example gcc to toggle line comment for current line and gc2j to toggle line comments for the current line and the next two lines.
                gC - toggles block comment. For example gCi) to comment out everything within parentheses.

            vim-indent-object

            Based on vim-indent-object, it allows for treating blocks of code at the current indentation level as text objects. Useful in languages that don't use braces around statements (e.g. Python).

            Provided there is a new line between the opening and closing braces / tag, it can be considered an agnostic cib/ci{/ci[/cit.
            Command 	Description
            <operator>ii 	This indentation level
            <operator>ai 	This indentation level and the line above (think if statements in Python)
            <operator>aI 	This indentation level, the line above, and the line after (think if statements in C/C++/Java/etc)
            vim-sneak

            Based on vim-sneak, it allows for jumping to any location specified by two characters.
            Setting 	Description 	Type 	Default Value
            vim.sneak 	Enable/disable vim-sneak 	Boolean 	false
            vim.sneakUseIgnorecaseAndSmartcase 	Respect vim.ignorecase and vim.smartcase while sneaking 	Boolean 	false

            Once sneak is active, initiate motions using the following commands. For operators sneak uses z instead of s because s is already taken by the surround plugin.
            Motion Command 	Description
            s<char><char> 	Move forward to the first occurrence of <char><char>
            S<char><char> 	Move backward to the first occurrence of <char><char>
            <operator>z<char><char> 	Perform <operator> forward to the first occurrence of <char><char>
            <operator>Z<char><char> 	Perform <operator> backward to the first occurrence of <char><char>
            CamelCaseMotion

            Based on CamelCaseMotion, though not an exact emulation. This plugin provides an easier way to move through camelCase and snake_case words.
            Setting 	Description 	Type 	Default Value
            vim.camelCaseMotion.enable 	Enable/disable CamelCaseMotion 	Boolean 	false

            Once CamelCaseMotion is enabled, the following motions are available:
            Motion Command 	Description
            <leader>w 	Move forward to the start of the next camelCase or snake_case word segment
            <leader>e 	Move forward to the next end of a camelCase or snake_case word segment
            <leader>b 	Move back to the prior beginning of a camelCase or snake_case word segment
            <operator>i<leader>w 	Select/change/delete/etc. the current camelCase or snake_case word segment

            By default, <leader> is mapped to \, so for example, d2i\w would delete the current and next camelCase word segment.
            Input Method

            Disable input method when exiting Insert Mode.
            Setting 	Description
            vim.autoSwitchInputMethod.enable 	Boolean denoting whether autoSwitchInputMethod is on/off.
            vim.autoSwitchInputMethod.defaultIM 	Default input method.
            vim.autoSwitchInputMethod.obtainIMCmd 	The full path to command to retrieve the current input method key.
            vim.autoSwitchInputMethod.switchIMCmd 	The full path to command to switch input method, with {im} a placeholder for input method key.

            Any third-party program can be used to switch input methods. The following will walkthrough the configuration using im-select.

                Install im-select (see installation guide)

                Find your default input method key

                    Mac:

                    Switch your input method to English, and run the following in your terminal: /<path-to-im-select-installation>/im-select to output your default input method. The table below lists the common English key layouts for MacOS.
                    Key 	Description
                    com.apple.keylayout.US 	U.S.
                    com.apple.keylayout.ABC 	ABC
                    com.apple.keylayout.British 	British
                    com.apple.keylayout.Irish 	Irish
                    com.apple.keylayout.Australian 	Australian
                    com.apple.keylayout.Dvorak 	Dvorak
                    com.apple.keylayout.Colemak 	Colemak

                    Windows:

                    Refer to the im-select guide on how to discover your input method key. Generally, if your keyboard layout is en_US the input method key is 1033 (the locale ID of en_US). You can also find your locale ID from this page, where the LCID Decimal column is the locale ID.

                Configure vim.autoSwitchInputMethod.

                    MacOS:

                    Given the input method key of com.apple.keylayout.US and im-select located at /usr/local/bin. The configuration is:

                    "vim.autoSwitchInputMethod.enable": true,
                    "vim.autoSwitchInputMethod.defaultIM": "com.apple.keylayout.US",
                    "vim.autoSwitchInputMethod.obtainIMCmd": "/usr/local/bin/im-select",
                    "vim.autoSwitchInputMethod.switchIMCmd": "/usr/local/bin/im-select {im}"

                    Windows:

                    Given the input method key of 1033 (en_US) and im-select.exe located at D:/bin. The configuration is:

                    "vim.autoSwitchInputMethod.enable": true,
                    "vim.autoSwitchInputMethod.defaultIM": "1033",
                    "vim.autoSwitchInputMethod.obtainIMCmd": "D:\\bin\\im-select.exe",
                    "vim.autoSwitchInputMethod.switchIMCmd": "D:\\bin\\im-select.exe {im}"

            The {im} argument above is a command-line option that will be passed to im-select denoting the input method to switch to. If using an alternative program to switch input methods, you should add a similar option to the configuration. For example, if the program's usage is my-program -s imKey to switch input method, the vim.autoSwitchInputMethod.switchIMCmd should be /path/to/my-program -s {im}.
            ReplaceWithRegister

            Based on ReplaceWithRegister, an easy way to replace existing text with the contents of a register.
            Setting 	Description 	Type 	Default Value
            vim.replaceWithRegister 	Enable/disable ReplaceWithRegister 	Boolean 	false

            Once active, type gr (say "go replace") followed by a motion to describe the text you want replaced by the contents of the register.
            Motion Command 	Description
            [count]["a]gr<motion> 	Replace the text described by the motion with the contents of the specified register
            [count]["a]grr 	Replace the [count] lines or current line with the contents of the specified register
            {Visual}["a]gr 	Replace the selection with the contents of the specified register
            vim-textobj-entire

            Similar to vim-textobj-entire.

            Adds two useful text-objects:

                ae which represents the entire content of a buffer.
                ie which represents the entire content of a buffer without the leading and trailing spaces.

            Usage examples:

                dae - delete the whole buffer content.
                yie - will yank the buffer content except leading and trailing blank lines.
                gUae - transform the whole buffer to uppercase.

            vim-textobj-arguments

            Similar to the argument text object in targets.vim. It is an easy way to deal with arguments inside functions in most programming languages.
            Motion Command 	Description
            <operator>ia 	The argument excluding separators.
            <operator>aa 	The argument including separators.

            Usage examples:

                cia - change the argument under the cursor while preserving separators like comma ,.
                daa - will delete the whole argument under the cursor and the separators if applicable.

            Setting 	Description 	Type 	Default Value
            vim.argumentObjectOpeningDelimiters 	A list of opening delimiters 	String list 	["(", "["]
            vim.argumentObjectClosingDelimiters 	A list of closing delimiters 	String list 	[")", "]"]
            vim.argumentObjectSeparators 	A list of object separators 	String list 	[","]
            🎩 VSCodeVim tricks!

            VS Code has a lot of nifty tricks and we try to preserve some of them:

                gd - jump to definition.
                gq - on a visual selection reflow and wordwrap blocks of text, preserving commenting style. Great for formatting documentation comments.
                gb - adds another cursor on the next word it finds which is the same as the word under the cursor.
                af - visual mode command which selects increasingly large blocks of text. For example, if you had "blah (foo [bar 'ba|z'])" then it would select 'baz' first. If you pressed af again, it'd then select [bar 'baz'], and if you did it a third time it would select "(foo [bar 'baz'])".
                gh - equivalent to hovering your mouse over wherever the cursor is. Handy for seeing types and error messages without reaching for the mouse!

            📚 F.A.Q.

                None of the native Visual Studio Code ctrl (e.g. ctrl+f, ctrl+v) commands work

                Set the useCtrlKeys setting to false.

                Moving j/k over folds opens up the folds

                Try setting vim.foldfix to true. This is a hack; it works fine, but there are side effects (see issue#22276).

                Key repeat doesn't work

                Are you on a Mac? Did you go through our mac-setup instructions?

                There are annoying intellisense/notifications/popups that I can't close with <esc>! Or I'm in a snippet and I want to close intellisense

                Press shift+<esc> to close all of those boxes.

                How can I use the commandline when in Zen mode or when the status bar is disabled?

                This extension exposes a remappable command to show a VS Code style quick-pick version of the commandline, with more limited functionality. This can be remapped as follows in VS Code's keybindings.json settings file.

                {
                  "key": "shift+;",
                  "command": "vim.showQuickpickCmdLine",
                  "when": "editorTextFocus && vim.mode != 'Insert'"
                }

                Or for Zen mode only:

                {
                  "key": "shift+;",
                  "command": "vim.showQuickpickCmdLine",
                  "when": "inZenMode && vim.mode != 'Insert'"
                }

                How can I move the cursor by each display line with word wrapping?

                If you have word wrap on and would like the cursor to enter each wrapped line when using j, k, ↓ or ↑, set the following in VS Code's keybindings.json settings file.

                {
                  "key": "up",
                  "command": "cursorUp",
                  "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
                },
                {
                  "key": "down",
                  "command": "cursorDown",
                  "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
                },
                {
                  "key": "k",
                  "command": "cursorUp",
                  "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
                },
                {
                  "key": "j",
                  "command": "cursorDown",
                  "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
                }

                Caveats: This solution restores the default VS Code behavior for the j and k keys, so motions like 10j will not work. If you need these motions to work, other, less performant options exist.

                I've swapped Escape and Caps Lock with setxkbmap and VSCodeVim isn't respecting the swap

                This is a known issue in VS Code, as a workaround you can set "keyboard.dispatch": "keyCode" and restart VS Code.

                VSCodeVim is too slow!

                You can try adding the following setting, and reload/restart VSCode:

                "extensions.experimental.affinity": {
                  "vscodevim.vim": 1
                }

                Caveats: One issue with using the affinity setting is that each time you update your settings file, the Vim plugin will reload, which can take a few seconds.
VS Code Common  (=command palette, etc)
                Basic Editing
                Ctrl X 	Cut line (empty selection)
                Ctrl C 	Copy line (empty selection)
                Ctrl Shift K 	Delete Line
                Ctrl Enter 	Insert Line Below
                Ctrl Shift Enter 	Insert Line Above
                Alt Down 	Move Line Down
                Alt Up 	Move Line Up
                Shift Alt Down 	Copy Line Down
                Shift Alt Up 	Copy Line Up
                Ctrl D 	Add Selection To Next Find Match
                Ctrl K, Ctrl D 	Move Last Selection To Next Find Match
                Ctrl U 	Undo last cursor operation
                Ctrl Shift L 	Select all occurrences of current selection
                Ctrl F2 	Select all occurrences of current word
                Ctrl I 	Select current line
                Ctrl Alt Down 	Insert Cursor Below
                Ctrl Alt Up 	Insert Cursor Above
                Ctrl Shift \ 	Jump to matching bracket
                Ctrl ] 	Indent Line
                Ctrl [ 	Outdent Line
                Home 	Go to Beginning of Line
                End 	Go to End of Line
                Ctrl End 	Go to End of File
                Ctrl Home 	Go to Beginning of File
                Ctrl Down 	Scroll Line Down
                Ctrl Up 	Scroll Line Up
                Ctrl PageDown 	Scroll Page Down
                Ctrl PageUp 	Scroll Page Up
                Ctrl Shift [ 	Fold (collapse) region
                Ctrl Shift ] 	Unfold (uncollapse) region
                Ctrl Shift Alt [ 	Fold (collapse) all regions
                Ctrl Shift Alt ] 	Unfold (uncollapse) all regions
                Ctrl K, Ctrl C 	Add Line Comment
                Ctrl K, Ctrl U 	Remove Line Comment
                Ctrl / 	Toggle Line Comment
                Shift Alt A 	Toggle Block Comment
                Ctrl F 	Find
                Ctrl H 	Replace
                F3 	Find Next
                Shift F3 	Find Previous
                Alt C 	Toggle Find Case Sensitive
                Alt R 	Toggle Find Regex
                Alt W 	Toggle Find Whole Word
                Ctrl M 	Toggle Use of Tab Key for Setting Focus
                Rich Languages Editing
                Ctrl Space 	Trigger Suggest
                Ctrl Shift Space 	Trigger Parameter Hints
                Shift Alt F 	Format Code
                F12 	Go to Definition
                Alt F12 	Peek Definition
                Ctrl K, F12 	Open Definition to the Side
                Ctrl . 	Quick Fix
                Shift F12 	Show References
                F2 	Rename Symbol
                Ctrl Shift . 	Replace with Next Value
                Ctrl Shift , 	Replace with Previous Value
                Shift Alt Right 	Expand AST Select
                Shift Alt Left 	Shrink AST Select
                Ctrl Shift X 	Trim Trailing Whitespace
                Ctrl K, M 	Change Language Mode
                Navigation
                Ctrl T 	Show All Symbols
                Ctrl G 	Go to Line...
                Ctrl P 	Go to File..., Quick Open
                Ctrl Shift O 	Go to Symbol...
                Ctrl Shift M 	Show Errors and Warnings
                F8 	Go to Next Error or Warning
                Shift F8 	Go to Previous Error or Warning
                F1 	Show All Commands
                Ctrl Tab 	Navigate History
                Alt Left 	Go Back
                Alt Right 	Go Forward
                Editor/Window Management
                Ctrl Shift N 	New Window
                Ctrl Shift W 	Close Window
                Ctrl F4 	Close Editor
                Ctrl K, F 	Close Folder
                Ctrl ` 	Cycle Between Opened Editors
                Ctrl \ 	Split Editor
                Ctrl 1 	Focus into Left Hand Editor
                Ctrl 2 	Focus into Side Editor
                Ctrl 3 	Focus into Right Hand Editor
                Ctrl Alt Left 	Focus into Next Editor on the Left
                Ctrl Alt Right 	Focus into Next Editor on the Right
                Ctrl K, Left 	Move Active Editor Left
                Ctrl K, Right 	Move Active Editor Right
                File Management
                Ctrl N 	New File
                Ctrl O 	Open File...
                Ctrl S 	Save
                Ctrl Shift S 	Save As...
                Ctrl K, W 	Close File
                Ctrl K, Ctrl W 	Close All Files
                Ctrl K, Ctrl Shift W 	Close Other Files
                Ctrl K, Enter 	Add to Working Files
                Ctrl K, Down 	Open Next Working File
                Ctrl K, Up 	Open Previous Working File
                Ctrl K, P 	Copy Path of Active File
                Ctrl K, R 	Reveal Active File in Windows
                Ctrl K, O 	Show Opened File in New Window
                Display
                F11 	Toggle Full Screen
                Ctrl = 	Zoom in
                Ctrl - 	Zoom out
                Ctrl B 	Toggle Sidebar Visibility
                Ctrl Shift D 	Show Debug
                Ctrl Shift E 	Show Explorer
                Ctrl Shift G 	Show Git
                Ctrl Shift F 	Show Search
                Ctrl Shift J 	Toggle Search Details
                Ctrl Shift C 	Open New Command Prompt
                Ctrl Shift U 	Show Output
                Ctrl Shift V 	Toggle Markdown Preview
                Ctrl K, V 	Open Preview to the Side
                Debug
                F9 	Toggle Breakpoint
                F5 	Continue
                F5 	Pause
                F11 	Step Into
                Shift F11 	Step Out
                F10 	Step Over
                Shift F5 	Stop
                Ctrl K, Ctrl I 	Show Hover
                Tasks
                Ctrl Shift B 	Run Build Task
                Ctrl Shift T 	Run Test Task
                Show Less More at Visual Studio Code 
--
https://souravsarkaremon16.medium.com/most-used-methods-in-javascript-7742b6df1844
            Javascript Most Popular Programming Language
            Almost every programmer used javascript in their daily life. It was the most popular programming language in 2019. Javascript is used by 67.8% developers.
            Javascript methods are action that can be used with js all data types. There are hundreds of methods available for each data type. In all of these methods I am gonna talk about some of most used methods in Javascript.
            String
            Strings methods will help you to work with strings.
            1. toUpperCase()
            If you need to upper case the whole string. Just use this method and you will be done. The toUpperCase() method returns the string value with upper case. Here’s an example:
            const str = "uppercase method";       // String
            const example = str.toUpperCase();  // result: UPPERCASE METHOD
            2. toLowerCase()
            It is just reverse of toUpperCase() method. The toLowerCase() method returns the string value with lower case.
            const str = "LOWERCASE METHOD";       // String
            const example = str.toLowerCase();  // result: lowercase method
            3. split()
            split() method divides a string into substrings. This method convert a string into a array. We have to separate string using separator. This separator can be comma, spaces, pipe, etc.
            const str = 'quick brown fox jump over the lazy dog' // String
            const splits = myString.split() // return 'quick', 'brown', 'fox', 'jump', 'over', 'the', 'lazy', 'dog'.
            4. trim()
            the trim() method remove all whitespace from start and from end. It does not harm to the string.
            const str = '     Hello world!      ';     // String
            const example = str.trim();  // result: 'Hello world!';
            5. includes()
            The includes() method check that one word or sentences can be found on the existing string or not. This method returns the result as true or false. If the such thing can be found on the string the method returns true. Otherwise it returns false.
            const str = 'quick brown fox jumps over the lazy dog';  //String
            const exp1 = str.includes('brown');   //true
            const exp2 = str.includes('red');     //false
            const exp3 = str.includes('fox');     //true
            const exp4 = str.includes('elephant') //false
            6. indexOf()
            The indexOf() method returns the index of first occurrence of specified text in a string.
            const str = 'quick brown fox jumps over the lazy dog';  //String
            const example = str.indexOf('lazy');  // result: 31;
            const example = str.indexOf('b');  // result: 5;
            Numbers
            Numbers can be with or without decimal.
            1. isNan()
            The isNan() method determines wether the passed value is number or not. The result will true if returns Nan otherwise returns false.
            const example = 'hello world'; 
            const result1 = example.isNaN();   //true
            const example2 = 420; 
            const result2 = example2.isNaN();   //false
            2. isFinite()
            The isFinite() method determines if the passed value is finite or not.
            Number.isFinite(123)  //true
            Number.isFinite(1/0)  //false
            Number.isFinite(50/5) //true
            Number.isFinite(0/0)  //false
            3. parseFloat()
            The parseFloat() method parses a passed string and returns a floating point number. If the first index is letter it will return NaN.
            const exmp1 = parseFloat("420")       // return 420
            const exmp2 = parseFloat("42.15)     // return 42.15
            const exmp3 = parseFloat("20 year")  // return 20
            const exmp1 = parseFloat("year 20")  // NaN
            4. parseInt()
            The parseInt() method parses a passed string and returns a integer of specified base. If the first index is letter it will return NaN.
            const exmp1 = parseInt("420")       // return 420
            const exmp2 = parseInt("42.15)     // return 42
            const exmp3 = parseInt("20.2 year")  // return 20
            const exmp1 = parseInt("year 20")  // NaN
            Math
            Math is a built in object in Javascript. Math is not a function object.
            1. Math.abs()
            The Math.abs() methods returns the absolute value of an number.
            const exmp1 = Math.abs('-10');     // 10
            const exmp2 = Math.abs(-42);       // 42
            const exmp3 = Math.abs(null);      // 0
            const exmp4 = Math.abs('');        // 0
            2. Math.ceil()
            The Math.ceil() methods rounds number up to the largest integar.
            const exmp1 = Math.ceil(.95)         // 1
            const exmp2 = Math.ceil(42.00054);   // 42
            const exmp3 = Math.ceil(-7.004)      // -7
            3. Math.floor()
            The Math.floor() methods returns the nearest downwards integar. If the passed value is integar the value will be the same.
            const exmp1 = Math.floor(10.95)      // 10
            const exmp2 = Math.floor(42.0085);   // 42
            const exmp3 = Math.floor(-7.05)      // -6
            4. Math.min()
            The Math.min() method returns the lowest value number passed into it. If there are no number then it will return NaN.
            const exmp1 = Math.min(2, 3, 1);       // 1
            const exmp2 = Math.min(-2, -3, -1);   // -3
            5. Math.max()
            The Math.max() is opposite method of Math.min(). This method returns the biggest value number passed into it.
            const exmp1 = Math.max(2, 3, 1);       // 3
            const exmp2 = Math.max(-2, -3, -1);   // -1
            6. Math.sqrt()
            The Math.sqrt() method returns the square root of a number that passed in.
            const exmp1 = Math.sqrt(9); // 3
            const exmp2 = Math.sqrt(-1); // NaN
            const exmp3 = Math.sqrt(16); // 4
            Array
            Arrays are used to store multiple data in a single variable. Array is a global object.
            1. concat()
            The method concat() used to add two or more array into one. This method returns a new array.
            const array1 = ['how', 'are', 'you'];
            const array2 = ['I', 'am', 'fine'];
            const exmp1 = array1.concat(array2);  // expected output: Array ["how", "are", "you", "I", "am", "fine"]
            2. every()
            The every() method executes once for each element present in the array. It returns a boolean value.
            const isUnder18 = (currentValue) => currentValue < 18;
            const old= [1, 30, 39, 29, 10, 13];
            const result = array1.every(isUnder18);  //return false
            3. filter()
            The filter() method create a new array that matched with the passed arguments requirement.
            const words = ['red', 'blue', 'golden', 'yellow', 'pink'];
            const result = words.filter(word => word.length > 4);  // return ["golden", "yellow"]
            4. find()
            The find() method returns the value of the first element in an array that passed as an arguments.
            const array1 = [5, 4, 18, 42, 44];
            const result = array1.find(element => element > 20);  // return 42
            5. forEach()
            The forEach() method executes a provided function once for each array element.
            const array1 = ['x', 'y', 'z'];
            const result = array1.forEach(e => console.log(e));
            // output: "x"
            // output: "y"
            // output: "z"
            6. indexOf()
            This method returns the first index of specified item after searches the array. It returns -1 if the item is not found. The indexOf method returns the position of the first occurence.
            const avaengers = ["ironMan", "Hulk", "SpiderMan", "cAmerica"];
            const result1 = avengers.indexOf('aquaman');  // output: -1
            const result2 = avengers.indexOf('Hulk');  // output: 1
            7. join()
            This method creates and returns a new string by concatenating all of the elements in an array. The elements will be separated by a specified separator. The default separator is comma (,).
            const messages = ['I', 'Love', 'You'];
            const result1 = messages.join();    // output: "I,Love,You"
            const result1 = messages.join(" "); // output: "I Love You"
            const result1 = messages.join("-");    // output: "I-Love-You"
            8. map()
            The map() method creates a new array with the results of calling a function for every array element.
            const numbers = [4, 9, 16, 25];
            const result = numbers.map(Math.sqrt);  // returns [2, 3, 4, 5]
            These are some very used methods in JavaScript. These example are based on the es6 features. Who is a beginner programmer must should known all these method to be a Javascript developer.
            JavaScript
            Methods
            Js
            Javascriptexample
            Javascript Development




            Written by Sourav Sarkar Emon
            16 Followers
            Junior Web & App Developer
            Follow

            More from Sourav Sarkar Emon


            Sourav Sarkar Emon
            All About Flutter Architecture: MVP, MVC, MVVM
            Whenever we create applications like apps, web, or backend it needs two important factors scalability and maintainability.
            4 min read
            ·
            Nov 4, 2022
            118

            5


            Sourav Sarkar Emon
            Create a simple todo app with Flutter provider
            Learning state management with a real example to-do app is a great choice for it. I will show you how to create a very simple to-do app…
            5 min read
            ·
            Feb 27, 2022
            57



            Sourav Sarkar Emon
            Top 10 Interesting Things In JavaScript
            JavaScript is the world’s most popular programming language. JavaScript was invented by Brendan Eich in 1995 and became an ECMA standard…
            4 min read
            ·
            Aug 19, 2020
            16



            Sourav Sarkar Emon
            in
            The Startup
            Some Common Concepts in React
            React is a open-source javascript library for building awesome user interfaces or UI components. React was first designed by Jordan Walke…
            4 min read
            ·
            Nov 6, 2020
            97

            1
            See all from Sourav Sarkar Emon
            Recommended from Medium


            FullStackTips
            20 Javascript interview questions with code answers.
            I am going to start a series for the JavaScript interview questions which may help junior to mid level developers.

            ·
            6 min read
            ·
            Jan 31
            76

            4


            Andreas Sujono
            Top 10 Tricky Javascript Questions often asked by Interviewers
            Top 10 tricky Javascript questions often asked by interviewers. Make sure you know all of them!

            ·
            8 min read
            ·
            Dec 17, 2022
            514

            6
            Lists


            Stories to Help You Grow as a Software Developer
            19 stories
            ·
            94 saves



            Staff Picks
            340 stories
            ·
            95 saves


            Melih Yumak
            in
            JavaScript in Plain English
            Nodejs Developer Roadmap 2023
            Explore nodejs developer roadmap for 2023. A step-by-step guide to how to become nodejs developer, increase knowledge as nodejs developer

            ·
            7 min read
            ·
            Jan 30
            683

            14


            The PyCoach
            in
            Artificial Corner
            You’re Using ChatGPT Wrong! Here’s How to Be Ahead of 99% of ChatGPT Users
            Master ChatGPT by learning prompt engineering.

            ·
            7 min read
            ·
            Mar 17
            23K

            385


            Reed Barger
            in
            Web Dev Hero
            7 React Projects for Beginners in 2023 (+ Code)
            You’re ready to start making simple projects with React, but you don’t know what to make. Where should you start?

            ·
            6 min read
            ·
            Jan 11
            278

            5


            React Dojo
            Interview Questions CheatSheet for Junior React Developers
            Hi there, I’m Saya, In this blog post, I’ll provide you with a cheat sheet that covers some of the essential interview questions that a…

            ·
            3 min read
            ·
            Mar 2
            101

            1
            See more recommendations
            Help
            Status
            Writers
            Blog
            Careers
            Privacy
            Terms
            About
            Text to speech
            Teams
https://dev.to/zahab/top-40-javascript-methods-you-must-know-fj5
            Top 40 JavaScript Methods You Must Know!!
            javascript
            beginners
            programming
            webdev
            JavaScript is a programming language used to create web pages and mobile apps. If you have been studying Javascript for so long and still it looks scary to you, probably you haven't learnt these methods yet. This article is for all javascript developers at any level. If you are looking for a specific method, feel free to jump and skip others. If you are familiar with javascript, I recommend you to read ES6 The modern Javascript to explore more about JS.

            Array
            String
            Objects
            Numbers
            ES6
            If you are already familiar with the definition of the above topics, feel free to explore their methods only.

            Array
            You may know that a variable can store only a value at a time, for example 
            var student = "jack", this is totally fine and we may use it many times while building a project, however, sometimes it is required to collect many values in a single variable like a list of students names, this is where we can use the Array concept.
            Array is a single variable that store a list of values and each element is specified by a single index.

            Array methods:

            pop()
            The pop() method removes the last element of an array.

            var students = [ 'Jack', 'James', 'Robert', 'John'];
             console.log(students);
             students.pop();
             console.log(students)
            Output: 
            [ 'Jack', 'James', 'Robert', 'John' ]
            [ 'Jack', 'James', 'Robert' ]

            shift()
            The shift() method removes the first element from an array.


             var students = [ 'Jack', 'James', 'Robert', 'John'];
               console.log(students);
               students.shift();
               console.log(students)

            Output:
            [ 'Jack', 'James', 'Robert', 'John' ]
            [ 'James', 'Robert', 'John' ]

            push()
            The push() method adds one or more elements to the end of an array.

             var students = [ 'Jack', 'James', 'Robert', 'John'];
               console.log(students);
               students.push('Zahab', 'Kakar');
               console.log(students)

            Output: 
            [ 'Jack', 'James', 'Robert', 'John' ]
            [ 'Jack', 'James', 'Robert', 'John', 'Zahab', 'Kakar' ]

            unshift()
            The unshift method adds one or more elements to the beginning of an array.

            var students = [ 'Jack', 'James', 'Robert', 'John'];
               console.log(students);
               students.unshift('Zahab', 'Kakar');
               console.log(students);
            Output:
            [ 'Jack', 'James', 'Robert', 'John' ]
            [ 'Zahab', 'Kakar', 'Jack', 'James', 'Robert', 'John' ]
            length
            The length returns the number of elements in an array.

            var students = [ 'Jack', 'James', 'Robert', 'John'];
               console.log(students);
            var length = students.length;
               console.log(length)
            [ 'Jack', 'James', 'Robert', 'John' ]
            4
            splice()
            The splice() method is used to add new elements to an array.

            var students = [ 'Jack', 'James', 'Robert', 'John'];
               console.log(students);
            students.splice(2, 1, "Zahab", "Kakar");
              console.log(students);
            Output:
            [ 'Jack', 'James', 'Robert', 'John' ]
            [ 'Jack', 'James', 'Zahab', 'Kakar', 'John' ]

            As we said before, this method is used to add elements into an array, however, we must indicate that where the new elements should be added. In the above example, 2 indicates the index number where the new elements should be placed and 1 shows the number of elements that should be deleted, as we mentioned 1 element should be deleted, we do not have the 'Robert' in the second array.

            concat()
            The contact method is used to creates a new array by concatenating or merging existing arrays.


            var students = [ 'Jack', 'James', 'Rober', 'John'];
               console.log(students);
            var myFriends = ['Jennifer','Mary','Patricia']
              console.log(myFriends);

              var allNames =  students.concat(myFriends);  
              console.log(allNames)

            Output:
            [ 'Jack', 'James', 'Rober', 'John' ]
            [ 'Jennifer', 'Mary', 'Patricia' ]
            [ 'Jack', 'James', 'Rober', 'John', 'Jennifer', 'Mary', 'Patricia' ]

            slice()
            This method slices out a part of an array starting from mentioned array element index.
            Slice can have two arguments, which indicate the starting and up to (but not including) the end argument.
            This method also accept negative numbers.
            var students = [ 'Jack', 'James', 'Rober', 'John'];
               console.log(students);

             var newStudent  = students.slice(3);  
              console.log(newStudent);
            Output:
            [ 'Jack', 'James', 'Rober', 'John' ]
            [ 'John' ]

            var students = [ 'Jack', 'James', 'Rober', 'John'];
               console.log(students);

             var newStudent  = students.slice(1,3);  
              console.log(newStudent);

            Output:
            [ 'Jack', 'James', 'Rober', 'John' ]
            [ 'James', 'Rober' ]
            var students = [ 'Jack', 'James', 'Rober', 'John'];
               console.log(students);

             var newStudent  = students.slice(-1);  
              console.log(newStudent);

            [ 'Jack', 'James', 'Rober', 'John' ]
            [ 'John' ]
            String
            A JavaScript string stores a series of characters or a string is a collection of characters. A string can be any text inside double or single quotes.

            toUpperCase()
            The toUpperCase method is used to convert a string to upper case.

            var str = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
             var newStr = str.toUpperCase()
             console.log(newStr)
            Output: 

            LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY. 
            toLowerCase()
            The to Lowercase is used to convert a string to lower case.

            var str = "LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY. "
             var newStr = str.toLowerCase()
             console.log(newStr)
            Output:
            lorem ipsum is simply dummy text of the printing and typesetting industry. 
            slice()
            This method is used to return the sliced part of a string, it takes one or two arguments that indicate the initial and end of the slice. The arguments can also be negative.

            var str = "lorem ipsum is simply dummy text of the printing and typesetting industry"
            var newStr = str.slice(-8, -1)
            console.log(newStr);

            Output:

            industr

            substring()
            This method is used to return the sliced part of a string, however, it doesn't accept negative numbers as an argument.

            var str = "lorem ipsum is simply dummy text of the printing and typesetting industry"
            var newStr = str.substring(1, 6)
            console.log(newStr);

            Output:

            orem 
            substr()
            This method is similar to slice, however, the second parameter indicates the length of the part that should be extracted.


            var str = "lorem ipsum is simply dummy text of the printing and typesetting industry"
            var newStr = str.substr(8, 13)
            console.log(newStr);
            Output:

            sum is simply

            replace()
            The replace method is used to replace a part of a string with another string.
            This method is case sensitive.

            var str = "lorem ipsum is simply dummy text of the printing and typesetting industry"
            var newStr = str.replace("is", "are")
            console.log(newStr);

            Output:

            lorem ipsum are simply dummy text of the printing and typesetting industry
            concat()
            This method is used to concatenate two or more strings.


            var str1 = "Java";
            var str2 = "Script";

            var str = str1.concat(str2);
            console.log(str)
            Output:
            JavaScript

            trim()
            This method is used to remove the spaces from both sides of the string.

            var str1 = "       JavaScript        ";
            str2 = str1.trim();
            console.log(str2);
            Output:

            JavaScript
            split()
            The split is used to convert a string to an array.

            var str = "JavaScript, is, nice"
            var newStr = str.split(",")
            console.log(newStr[0]);
            Output:

            JavaScript
            charCodeAt
            The charCodeAt returns the unicode of the character at a specified index in a string.

            var str = "JavaScript is nice"
            var newStr = str.charCodeAt(str[1])
            console.log(newStr);
            Output:

            74
            charAt()
            This method returns the character of a specific index in a string.

            var str = "JavaScript is nice"
            var newStr = str.charAt(1)
            console.log(newStr);
            Output:

            a
            padStart
            This method is used to add padding at the starting of a string.

            var str = "15"
            var newStr = str.padStart(4, "3")
            console.log(newStr);
            Output:

            3315

            padEnd
            It adds padding at the end of the string.


            var str = "15"
            var newStr = str.padEnd(4, "3")
            console.log(newStr);
            Output:

            1533

            length
            This method is used to return the length of a string.

            var str = "JavaScript is nice."
            var newStr = str.length
            console.log(newStr);
            Output:

            19
            Objects
            The Object is the JavaScript data type. It is used to store various keyed collections and each key can have a value.

            keys()
            This method returns the keys of an object.

            const object1 = {
              name: 'John',
              age: 20,

            };

            console.log(Object.keys(object1));
            Output:

            [ 'name', 'age' ]
            values()
            This method returns the values of an object.

            const object1 = {
              name: 'John',
              age: 20,

            };

            console.log(Object.values(object1));
            Output:

            [ 'John', 20 ]
            create()
            This method is used to create an new object from existing object.

            const person = {
              name: "John",
              introduction: function() {
                console.log(`My name is ${this.name}`);
              }
            };

            const me = Object.create(person);

            me.name = 'Robert'; 

            me.introduction();

            Output:

            My name is Robert

            freeze()
            The Object.freeze() method freezes an object. This method will allow an object to be changed, freezing an object prevents changing, for example, adding new properties to it, removing existing properties from it.

            const person = {
              name: "John",

            };


            Object.freeze(person);

            person.name = "Robert";


            console.log(person.name);
            Output:

            John

            assign()
            This method is used to copy the properties of one object to another object.

            const person = {
              name: "John",
              age : 20
            };

            const obj = {
              ishuman : true
            }
            Object.assign(person, obj);

            console.log(person);
            Output:

            { name: 'John', age: 20, ishuman: true }

            Numbers
            The number is the numeric data type of Javascript that stores a normal integer, floating-point values.

            toFixed()
            This method writes the number with a specified number of decimals and return its value as a string.


            var x = 9.656;
            var newX = x.toFixed(0);
            console.log(newX)
            var newX = x.toFixed(2); 
            console.log(newX)
            var newX = x.toFixed(4);  
            console.log(newX)
            var newX = x.toFixed(6);  
            console.log(newX)
            console.log(typeof(newX))
            Output:
            10
            9.66
            9.6560
            9.656000
            string
            toPrecision()
            This method is used to convert a number to a specified precision and return its value as a string.

            var x = 9.656;
            var newX = x.toPrecision(2);
            console.log(newX)
            var newX = x.toPrecision(4);  
            console.log(newX)
            var newX = x.toPrecision(6);  
            console.log(newX)
            console.log(typeof(newX))
            Output:
            9.7
            9.656
            9.65600
            string

            parseFloat()
            This method converts the function argument to a string first and returns a floating-point number.


            function addition(r) {
              return parseFloat(r) * 2.0;
            }

            console.log(addition(2))
            console.log(addition("2"))
            console.log(addition("3.3"))
            outPut:
            4
            4
            6.6

            Number()
            This method is used to convert the value of other data types to numbers.

            var x = true;
            console.log(Number(x))
            var x = false;
            console.log(Number(x))
            var x = "999";
            console.log(Number(x))

            1
            0
            999

            parseInt()
            This method converts the function argument to a string first and returns an integer.

            function addition(r) {
              return parseInt(r) * 2.0;
            }

            console.log(addition(2))
            console.log(addition("2"))
            console.log(addition("3.3"))
            Output:
            4
            4
            6

            ES6
            ES6 introduced many important methods in javascript that we will discuss in this article.
            If you don't know the ES6 yet, I recommend you to have a look at this article because, in the below paragraphs, we used a few topics which might look tough, however, they include their definition and example.

            map()
            This method takes an array, and performs a particular function on each of the elements of the array, and returns a new array.

            var arr=[2.1,3.5,4.7]; 

            var result= arr.map((num) => 2*num );  
            console.log(result)
            Output:

            [ 4.2, 7, 9.4 ]
            every()
            This method is used to check whether elements in a given array satisfy a particular given condition or not. It returns true if all of the array elements satisfy the condition, otherwise, it return false

            const ages = [32, 33, 16, 40];


            function checkAge(age) {
              return age > 18;
            }

            console.log(ages.every(checkAge))
            Output:

            false
            includes()
            This method is used to check a particular element exists in an array or not. it returns true if the element includes in the array.

            const ages = [32, 33, 16, 40];

            console.log(ages.includes(33))
            Output:

            true
            for…of iterator
            The for ...of creates a loop over object and array.


            const ages = [33, 32, 16];

            for (const element of ages) {
              console.log(element + "b");
            }


            Output:

            33b
            32b
            16b
            Spread operator
            The spread operator is used to )take an array and expands it into individual elements. The ... indicates the spread operator.

            const ages = [33, 32, 16];

            console.log(...ages)
            Output:

            33 32 16
            filter()
            This method creates a new array with all elements that pass the provided condition.

            const ages = [33, 32, 16];

            console.log(ages.filter((age)=> age>20))

            Output:

            [ 33, 32 ]

            reduce()
            This method is used to reduces an array to a value.

            const ages = [33, 32, 16];

            const reducer = (first, second) => first + second;


            console.log(ages.reduce(reducer))


            Output:

            81

            That's all for now.
            Thanks for reading, I hope you found this article useful.

            Feel free to connect with me on Twitter :)
            Top comments (0)

            Subscribe


            Code of Conduct • Report abuse
            Read next

            Building the Quote Generator Web App with HTML, CSS, and JavaScript
            Akhil Mahesh - May 24

            Dockerfile Optimization using Multistage Builds, Caching, and Lightweight images
            Internet Explorer - May 30

            Conquering the Villains: A Journey of Setting Up Node.js with Express and TypeScript
            Harendra Bhujel - May 5

            React CheatSheet
            Arjun Porwal - May 30

            Zahab Kakar
            Follow
#React, #JavaScript, #ReactNative, #PHP
            JOINED
            Aug 4, 2021
            More from Zahab Kakar
            Learn Javascript Functions
#javascript #beginners #programming #tutorial
            Learn Javascript __part1
#javascript #beginners #programming #tutorial
            Top 6 JavaScript Chart Libraries
#javascript #webdev #opensource
            DEV Community — A constructive and inclusive social network for software developers. With you every step of your journey.
            Home
            Listings
            Podcasts
            Videos
            Tags
            FAQ
            Forem Shop
            Sponsors
            About
            Contact
            Guides
            Software comparisons
            Code of Conduct
            Privacy Policy
            Terms of use
            Built on Forem — the open source software that powers DEV and other inclusive communities.
            Made with love and Ruby on Rails. DEV Community © 2016 - 2023.

~/Empire/Doks/Comp/lang/webdev/js/cheatsh-qref/js-cheatsheet-pdf.pdf
                evince -p 1 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            {

            2 Basic Vocabulary
            Variable
            A named reference to
            a value is a variable.

            1. String

            "Any text"

            2. Number

            123.45

            3. Boolean

            true or false

            4. Null

            null

            5. Undefined

            undefined

            6. Symbol

            Symbol('something')

            7. Object

            { key: 'value'}

            - Array

            [1, "text", false]

            - Function

            function name() { }

            3 Object
            An object is a data type in
            JavaScript that is used to store
            a combination of data in a
            simple key-value pair. Thats it.

            var a = 7 + "2";
            Keyword / reserved word
            Any word that is part of the
            vocabulary of the programming
            language is called a keyword
            (a.k.a reserved word).
            Examples: var = + if for...

            var user = {
            name: "Aziz Ali",
            yearOfBirth: 1988,
            calculateAge: function(){

            Key
            These are the
            keys in user object.

            Operator
            Operators are reserved-words that
            perform action on values and variables.
            Examples: + - = * in === typeof != ...

            {

            Six Primitive Types

            1 Seven (7) Types

            Page 1

            https://ilovecoding.org/courses/js2

            {

            ♥

            // some code to calculate age
            }
            }

            {

            < > iLoveCoding

            Statement
            A group of words,
            numbers and
            operators that do a
            task is a statement.

            Expression
            A reference, value or a group
            of reference(s) and value(s)
            combined with operator(s),
            which result in a single value.

            Value
            These are the
            values of the
            respective keys
            in user object.

            Method
            If a key has a
            function as a
            value, its called
            a method.

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 2 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            https://ilovecoding.org/courses/js2

            4 Function
            A function is simply a bunch of code bundled in a section. This bunch of code ONLY runs when the
            function is called. Functions allow for organizing code into sections and code reusability.
            Using a function has ONLY two parts. (1) Declaring/defining a function, and (2) using/running a function.
            Name of function
            Thats it, its just a name
            you give to your function.
            Tip: Make your function
            names descriptive to what
            the function does.

            Return (optional)
            A function can optionally
            spit-out or "return" a value
            once its invoked. Once a
            function returns, no further
            lines of code within the
            function run.

            Page 2

            // Function declaration / Function statement
            function someName(param1, param2){
            // bunch of code as needed...
            var a = param1 + "love" +

            param2;

            return a;
            }
            // Invoke (run / call) a function
            someName("Me", "You")

            Invoke a function
            Invoking, calling or running a function all mean the same
            thing. When we write the function name, in this case
            someName, followed by the brackets symbol () like this
            someName(), the code inside the function gets executed.

            Parameters / Arguments
            (optional)
            A function can optionally
            take parameters (a.k.a
            arguments). The
            function can then use
            this information within
            the code it has.

            Code block
            Any code within the curly
            braces { ... } is called a
            "block of code", "code
            block" or simply "block".
            This concept is not just
            limited to functions. "if
            statements", "for loops"
            and other statements
            use code blocks as well.

            Passing parameter(s) to a function (optional)
            At the time of invoking a function, parameter(s)
            may be passed to the function code.

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 3 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            Page 3

            https://ilovecoding.org/courses/js2

            5 Vocabulary around variables and scope
            var a;

            a = 12;

            a = "me";

            console.log(a);
            var a = "me";

            Variable Declaration
            The creation of the
            variable.

            Variable Initialization
            The initial
            assignment of value
            to a variable.

            Variable Assignment
            Assigning value to a
            variable.

            Hoisting
            Variables are
            declared at the top
            of the function
            automatically, and
            initialized at the time
            they are run.

            Scope
            The limits in which a variable exists.

            Global scope
            The outer most scope is called the Global
            scope.

            var a = "global";
            function first(){
            var a = "fresh";
            function second(){

            Functional scope
            Any variables inside a function is in scope
            of the function.

            Lexical Environment (Lexical scope)
            The physical location (scope) where a
            variable or function is declared is its lexical
            environment (lexical scope).
            Rule:
            (1) Variables in the outer scope can be
            accessed in a nested scope; But variables
            inside a nested scope CANNOT be accessed
            by the outer scope. (a.k.a private variables.)

            console.log(a);
            }
            }
            Scope chain
            The nested hierarchy of scope is
            called the scope chain. The JS
            engine looks for variables in the
            scope chain upwards (it its
            ancestors, until found)

            (2) Variables are picked up from the lexical
            environment.

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 4 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding

            JavaScript Cheatsheet

            ♥

            Learn JavaScript Correctly (Video course)

            6 Operators

            Page 4

            https://ilovecoding.org/courses/js2

            Full list of JavaScript operators https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators

            Operators are reserved-words that perform action on values and variables.
            Arithmetic
            .. + .. Add
            .. - .. Subtract
            .. * .. Multiply
            .. / .. Divide
            .. % .. Remainder
            .. ** .. Exponential
            Assignment
            .. = .. Assign value
            .. += .. Add then assign
            .. -= .. Subtract then assign
            .. *= .. Multiply then assign
            Logical
            .. || .. Or
            .. && .. And
            Equality
            .. === .. Equality
            .. == .. Equality with coercion

            Relational / Comparison
            .. >= .. Greater than or equal to
            .. <= .. Less than or equal to
            .. != .. Not equal after coercion
            .. !== .. Not equal
            Increment / Decrement
            ..++ Postfix increment
            ..-- Postfix decrement

            Operator Precedence
            Given multiple operators are used in an expression, the "Operator
            Precedence" determines which operator will be executed first. The
            higher the precedence, the earlier it will get executed.
            Operator Associativity
            Given multiple operators have the same precedence, "Associativity"
            determines in which direction the code will be parsed.
            See the Operator Precedence and Associativity table here:

            ++.. Prefix increment
            --.. Prefix increment
            Others
            typeof ..
            .. instanceof ..
            (..)
            ...spread-operator
            .
            ..[..]
            new ..
            delete ..
            ( .. ? .. : .. )

            Conversion
            + .. Convert to number
            - .. Convert to number then negate it
            ! .. Convert to boolean then inverse it

            http://bit.ly/operatortable

            7 Coercion
            When trying to compare different "types", the JavaScript engine
            attempts to convert one type into another so it can compare the two
            values.
            Type coercion priority order:
            1. String
            2. Number
            3. Boolean

            2 + "7";

            // "27"

            true - 5

            // -4

            Coercion in action
            Does this make sense?

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 5 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            https://ilovecoding.org/courses/js2

            8 Conditional Statements

            9 Truthy / Falsy

            Conditional statements allow our program to run specific code only if certain conditions are
            met. For instance, lets say we have a shopping app. We can tell our program to hide the
            "checkout" button if the shopping cart is empty.
            If -else Statement: Run certain code, "if" a
            condition is met. If the condition is not met,
            the code in the "else" block is run (if
            available.)

            Switch Statement: Takes a single
            expression, and runs the code of the "case"
            where the expression matches. The "break"
            keyword is used to end the switch
            statement.

            There are certain values in JavaScript that
            return true when coerced into boolean. Such
            values are called truthy values. On the other
            hand, there are certain values that return
            false when coerced to boolean. These
            values are knows as falsy values.
            Truthy Values

            Falsy Values

            true

            false

            "text"

            ""

            72

            0

            // run this code

            -72

            -0

            break;

            Infinity

            NaN

            -Infinity

            null

            {}

            undefined

            if (a > 0) {
            switch (expression) {

            // run this code

            Page 5

            case choice1:

            } else if (a < 0) {
            // run this code
            } else {
            // run this code

            case choice1:

            }

            // run this code

            []

            break;

            Ternary Operator: A ternary operator returns
            the first value if the expression is truthy, or
            else returns the second value.

            default:
            // run this code

            (expression)? ifTrue: ifFalse;

            }

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 6 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            Page 6

            https://ilovecoding.org/courses/js2

            10 Loop Statements
            Loops are used to do something repeatedly. For instance lets say we get a list of 50
            blog posts from the database and we want to print their titles on our page. Instead of
            writing the code 50 times, we would instead use a loop to make this happen.
            For loop
            for (initial-expression; condition; second-expression){
            // run this code in block
            }

            Step 1: Run the initial expression.
            Step 2: Check if condition meets. If
            condition meets, proceed; or else end the
            loop.
            Step 3: Run the code in block.
            Step 4: Run the second-expression.
            Step 5: Go to Step 2.

            While loop

            Step 1: If the condition is true, proceed; or
            else end the loop.

            while (i<3){
            // run this code in block
            i++;

            Step 2: Run the code in block.
            Step 3: Go to Step 1.

            }
            Do while loop

            Step 1: Run the code in block.

            do {
            // run this code in block
            i++;

            Step 2: If the condition is true, proceed; or
            else end the loop.
            Step 3: Go to Step 1.

            } while (i<3);

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 7 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            Page 7

            https://ilovecoding.org/courses/js2

            11 Ways to create a variable
            There are 3 ways to create variables in JavaScript:
            var, let and const. Variables created with var are
            in scope of the function (or global if declared in the
            global scope); let variables are block scoped; and
            const variables are like let plus their values
            cannot be re-assigned.

            var a = "some value";

            // functional or global scoped

            let b = "some value";

            // block scoped

            const c = "some value"; // block scoped + cannot get new value

            12 Event Loop
            t Lo
            n
            e
            Ev

            op

            JavaScript Engine
            Message Queue
            Task

            Task

            Third-Party
            Process

            Task
            HTTP Process

            Execution Context
            Execution Context

            Timer Process

            Global Ex. Context

            DOM Events

            Call Stack
            Last-in - first-out

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 8 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            Page 8

            https://ilovecoding.org/courses/js2

            13 Browser
            A web browser is a pretty advance piece of software which contains a lot of components. Many of these components are accessible to a
            web developer, so we can create complex web apps. At the same time a lot of components are kept out of reach of the web developer for
            security purposes. For instance, we as web developers can get access to the user's location, but we cannot get access to the user's saved
            passwords or browsing history. Let's see below how a browser is structured:

            The browser contains a
            lot of components that a
            Front-End Developer may
            need, such as Navigator,
            JavaScript Engine and
            Dev Tools.

            Window
            Each tab of a browser is
            considered the window.
            This is the outer most
            container that a web-app
            can access.
            Notice: A website opened
            in one tab CANNOT
            access the window
            object of another tab.
            Pretty cool right?

            https://...

            Navigator
            Document
            The viewport or the section
            where the website is displayed is
            called the document of the page.

            HTML / CSS Processor

            JavaScript Engine

            Dev Tools

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 9 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding

            JavaScript Cheatsheet

            ♥

            Learn JavaScript Correctly (Video course)

            https://ilovecoding.org/courses/js2

            14 DOM - Document Object Model
            Query/Get Elements

            Modify Element

            // Preferred way:

            node.style.color = 'red'

            document.querySelector('css-selectors')

            node.style.padding = '10px',

            document.querySelectorAll('css-selectors', ...)

            node.style.fontSize = '200%'

            // Old ways, and still work:

            node.setAttribute('attr-name', 'attr-value')

            document.getElementsByTagName('element-name')

            node.removeAttribute('attr-name')

            document.getElementsByClassName('class-name')
            document.getElementById('id')

            Get and Modify Element Class
            node.classList

            Create / clone Element

            node.classList.add('class-name', ...)

            document.createElement('div')

            node.classList.remove('class-name', ...)

            document.createTextNode('some text here')

            node.classList.toggle('class-name')

            node.cloneNode()

            node.classList.contains('class-name')

            node.textContent = 'some text here'

            node.classList.replace('old', 'new')

            Add node to document

            Remove Node

            parentNode.appendChild(nodeToAdd)

            parentNode.removeChild(nodeToRemove)

            parentNode.insertBefore(nodeToAdd, childNode)

            // Hack to remove self
            nodeToRemove.parentNode.removeChild(nodeToRemove)

            Get Element Details
            node.nextSibling
            node.firstChild
            node.lastChild
            node.parentNode
            node.childNodes
            node.children

            Page 9

            Events
            node.addEventListener('event-name', callback-function)
            node.removeEventListener('event-name', callback-function)

            What is a "Node"?
            (in the context of DOM)
            Node: Every item in the DOM
            tree is called a node. There
            are two types of node - A text
            node, and an element node:
            Text Node: Node that has text.
            Element Node: Node that has
            an element.

            Child Node: A node which is a
            child of another node.
            Parent Node: A node which
            has one or more child.
            Descendent Node: A node
            which is nested deep in the
            tree.
            Sibling Node: A node that
            share the same parent node.

            List of Events: https://developer.mozilla.org/en-US/docs/Web/Events
            or google "Mozilla event reference"
            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            iLoveCoding

            https://iLoveCoding.org


                evince -p 10 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            Page 10

            https://ilovecoding.org/courses/js2

            15 Auto Inherited Properties
            When you create a value in
            JavaScript, certain properties are
            automatically inherited by this value.
            This magic happens because every
            type has a constructor with a special
            property called prototype. All
            methods on the prototype gets
            automatically inherited by the new
            value created for that type.
            Take a look at some of of these
            methods on the right.

            16 Built-in Objects
            JavaScript gives us a ton of useful
            built-in objects to make our lives
            easier. The Date and Math objects
            are very useful on a regular basis.
            Take a look at some of their
            features on the right.

            const thing = "some text";

            const num = 123.45;

            Array
            Google 'Mozilla Array' to find the docs
            .filter()

            String

            Number

            .map()

            Google 'Mozilla String' to find the docs

            Google 'Mozilla Number' to find the docs

            .find()

            .concat()

            .toFixed()

            .every()

            .charAt()

            .toPrecision()

            .some()

            .indexOf()

            .toString()

            .sort()

            .startsWith()

            .slice()

            .endsWith()

            Boolean

            .splice()

            .split()

            Google 'Mozilla Boolean' to find the docs

            .reduce()

            .slice()

            .toString()

            .forEach()

            Full list of builtin objects in JavaScript visit https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects

            Math

            Date

            Google 'Mozilla Math' to find the docs

            Google 'Mozilla Date' to find the docs

            Math.pow(2, 3)

            // 8

            const d = new Date('9/17/1988');

            Math.sqrt(16)

            // 4

            d.getDay()

            Math.min(7, 8, 6)

            // 6

            d.getFullYear()

            Math.max(7, 8, 6)

            // 8

            d.getMonth()

            Math.floor(123.45)

            // 123

            Math.ceil(123.45)

            // 124

            Date.now()

            Math.round(123.45)

            // 123

            Milliseconds since Jan 1, 1970

            Math.random()

            // 0.45..

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 11 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            Page 11

            https://ilovecoding.org/courses/js2

            17 Promise
            What is a Promise?
            Promise is an object that provides a useful construct when dealing
            with asynchronous tasks. A promise is called a "Promise" because it
            guarantees it will run upon success or failure of that task.
            Working with a promise consists of two parts; (A) Creating a promise,
            and (B) Using a promise.

            What is an Async task?
            An async task is one in which a third-party process is
            doing the task.
            Examples:
            - Requesting/sending data to a database
            - Requesting/sending data via HTTP protocol
            - Working with the file system of the computer

            // (A) Create a promise

            // (B) Using a promise

            const p = new Promise((resolve, reject)=>{

            p.then((res)=>{

            // Do some async task

            console.log(res)

            setTimeout(()=>{

            })

            if(condition){

            .catch((err)=>{

            resolve('Successful login');
            } else {

            console.log(err)
            })

            reject('Login failed');
            }
            }, 2000)
            })

            Note: 90% of the time you will be working with pre-existing
            promises. The step of "Creating a promise" would be done for
            you either by a library, framework or environment you are
            using. Examples of promises: fetch

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 12 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            Page 12

            https://ilovecoding.org/courses/js2

            18 'this' keyword
            The this keyword is used inside a function. The this
            keyword is merely a reference to another object.
            What the this keyword refers to depends on the
            scenario or the way the function is implemented.
            Here are the 3 scenarios to remember:

            var name = "Fatema";
            function fun(){
            // some code here
            console.log(this.name);
            }

            Scenario #1: this inside a function
            The this keyword points to global object.

            const user = {
            name: "Marium",

            Scenario #2: this inside a method

            yearOfBirth: 1999,

            The this keyword points to the object the
            method is in.

            calcAge: function(){
            const currentYear = (new Date()).getFullYear();
            return currentYear - this.yearOfBirth;

            Scenario #3: When function is run with

            call, bind or apply
            When a function is called using the
            .call(param) .bind(param) or .apply(param)
            method, the first param become the object
            that the this keyword refers to.

            }
            }
            fun();

            // 'this' is global. Logs "Fatema"

            user.calcAge(); // 'this' is the user object
            fun.call(user); // 'this' is the user object. Logs "Marium"

            Important Note:
            In the browser, global is the window object.
            In Node.js, global is the global object.

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org


                evince -p 13 ~/Empire/Doks/Comp/lang/webdev/js/406388593-js-cheatsheet-pdf.pdf &

            < > iLoveCoding
            ♥

            JavaScript Cheatsheet

            Learn JavaScript Correctly (Video course)

            19 Constructor
            What is a constructor?
            In JavaScript, a constructor is a special
            function that acts as a mold to create
            new objects.

            We can create our own custom
            constructors if need be.
            A great place to use a constructor is
            when you are creating multiple objects of
            the same kind.
            There are two parts to working with a
            constructor:
            (1) Defining a constructor
            When creating a custom constructor
            (2) Using a constructor
            with the "new" keyword

            https://ilovecoding.org/courses/js2

            // Defining a Constructor
            function Car(make, model, year){
            this.make = make;
            this.model = model;
            this.year = year;

            There are numerous built-in constructors
            in JavaScript, such as String, Number,
            Promise, Date, Array, Object, and many
            more.

            Page 13

            Rule of thumb:
            A) Set properties
            inside a constructor.
            B) Set methods inside
            the prototype
            property.

            this.setMiles = function(miles){
            this.miles = miles
            return miles;
            }
            }

            "new" keyword
            The new keyword is
            used to create a new
            object (instance) from
            the constructor.

            // Using a constructor
            const car1 = new Car('Toyota', 'Prius', 2016);
            const car2 = new Car('Hyundai', 'Sonata', 2018);
            // Adding method to the constructor prototype
            Car.prototype.age = function(){
            return (new Date()).getFullYear() - this.year;
            }

            "prototype" property
            prototype is a special
            property on every
            object. Properties
            (methods or values)
            attached to the
            prototype property
            get inherited to every
            instance of the
            constructor.

            car1.age(); // 2

            iLoveCoding

            "Don't just learn JavaScript - Become a Full-Stack JavaScript Developer"

            https://iLoveCoding.org

~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/js/js4.cheatsh.pdf
            Beginner’s Essential

            Javascript Cheat Sheet

            The language of the web.

            Table of Contents
            Javascript Basics

            2

            Variables

            2

            Arrays

            3

            Operators

            4

            Functions

            5

            Loops

            7

            If - Else Statements

            7

            Strings

            7

            Regular Expressions

            9

            Numbers and Math

            10

            Dealing with Dates

            12

            DOM Node

            14

            Working with the Browser

            18

            Events

            21

            Errors

            27

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            1

            Javascript Basics
            Including JavaScript in an HTML Page
            <script type="text/javascript">
            //JS code goes here
            </script>

            Call an External JavaScript File
            <script src="myscript.js"></script><code></code>

            Including Comments
            //
            Single line comments
            /* comment here */
            Multi-line comments

            Variables
            var, const, let
            var
            The most common variable. Can be reassigned but only accessed within a function. Variables
            defined with var move to the top when code is executed.
            const
            Cannot be reassigned and not accessible before they appear within the code.
            let
            Similar to const, however, let variable can be reassigned but not re-declared.

            Data Types
            var age = 23
            Numbers
            var x
            Variables

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            2

            var a = "init"
            Text (strings)
            var b = 1 + 2 + 3
            Operations
            var c = true
            True or false statements
            const PI = 3.14
            Constant numbers
            var name = {firstName:"John", lastName:”Doe"}
            Objects

            Objects
            var person = {
            firstName:"John",
            lastName:"Doe",
            age:20,
            nationality:"German"
            };

            Arrays
            var fruit = ["Banana", "Apple", "Pear"];

            Array Methods
            concat()
            Join several arrays into one
            indexOf()
            Returns the first position at which a given element appears in an array
            join()
            Combine elements of an array into a single string and return the string
            lastIndexOf()
            Gives the last position at which a given element appears in an array

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            3

            pop()
            Removes the last element of an array
            push()
            Add a new element at the end
            reverse()
            Reverse the order of the elements in an array
            shift()
            Remove the first element of an array
            slice()
            Pulls a copy of a portion of an array into a new array of
            ​ 4 24
            sort()
            Sorts elements alphabetically
            splice()
            Adds elements in a specified way and position
            toString()
            Converts elements to strings
            unshift()
            Adds a new element to the beginning
            valueOf()
            Returns the primitive value of the specified object

            Operators
            Basic Operators
            +
            *
            /
            (..)
            %
            ++
            --

            Addition
            Subtraction
            Multiplication
            Division
            Grouping operator
            Modulus (remainder)
            Increment numbers
            Decrement numbers

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            4

            Comparison Operators
            ==
            ===
            !=
            !==
            >
            <
            >=
            <=
            ?

            Equal to
            Equal value and equal type
            Not equal
            Not equal value or not equal type
            Greater than
            Less than
            Greater than or equal to
            Less than or equal to
            Ternary operator

            Logical Operators
            &&
            ||
            !

            Logical and
            Logical or
            Logical not

            Bitwise Operators
            &
            |
            ~
            ^
            <<
            >>
            >>>

            AND statement
            OR statement
            NOT
            XOR
            Left shift
            Right shift
            Zero fill right shift

            Functions
            function name(parameter1, parameter2, parameter3) {
            // what the function does
            }

            Outputting Data
            alert()
            Output data in an alert box in the browser window
            confirm()
            Opens up a yes/no dialog and returns true/false depending on user click
            console.log()
            Writes information to the browser console, good for debugging purposes

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            5

            document.write()
            Write directly to the HTML document
            prompt()
            Creates an dialogue for user input

            Global Functions
            decodeURI()
            Decodes a Uniform Resource Identifier (URI) created by encodeURI or similar
            decodeURIComponent()
            Decodes a URI component
            encodeURI()
            Encodes a URI into UTF-8
            encodeURIComponent()
            Same but for URI components
            eval()
            Evaluates JavaScript code represented as a string
            isFinite()
            Determines whether a passed value is a finite number
            isNaN()
            Determines whether a value is NaN or not
            Number()
            Returns a number converted from its argument
            parseFloat()
            Parses an argument and returns a floating point number
            parseInt()
            Parses its argument and returns an integer

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            6

            Loops
            for (before loop; condition for loop; execute after loop) {
            // what to do during the loop
            }
            for
            The most common way to create a loop in Javascript
            while
            Sets up conditions under which a loop executes
            do while
            Similar to the while loop, however, it executes at least once and performs a check at the end to
            see if the condition is met to execute again
            break
            Used to stop and exit the cycle at certain conditions
            continue
            Skip parts of the cycle if certain conditions are met ​of 7 24

            If - Else Statements
            if (condition) {
            // what to do if condition is met
            } else {
            // what to do if condition is not met
            }

            Strings
            var person = "John Doe";

            Escape Characters
            \'
            \"
            \\
            \b
            \f
            \n
            \r
            \t

            — Single quote
            — Double quote
            — Backslash
            — Backspace
            — Form feed
            — New line
            — Carriage return
            — Horizontal tabulator

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            7

            \v

            — Vertical tabulator

            String Methods
            charAt()
            Returns a character at a specified position inside a string
            charCodeAt()
            Gives you the unicode of character at that position
            concat()
            Concatenates (joins) two or more strings into one
            fromCharCode()
            Returns a string created from the specified sequence of UTF-16 code units
            indexOf()
            Provides the position of the first occurrence of a specified text within a string
            lastIndexOf()
            Same as indexOf() but with the last occurrence, searching backwards
            match()
            Retrieves the matches of a string against a search pattern
            replace()
            Find and replace specific text in a string
            search()
            Executes a search for a matching text and returns its position
            slice()
            Extracts a section of a string and returns it as a new string
            split()
            Splits a string object into an array of strings at a specified position
            substr()
            Similar to slice() but extracts a substring depended on a specified number of characters
            substring()
            Also similar to slice() but can’t accept negative indices
            toLowerCase()

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            8

            Convert strings to lowercase
            toUpperCase()
            Convert strings to uppercase
            valueOf()
            Returns the primitive value (that has no properties or methods) of a string object

            Regular Expressions
            Pattern Modifiers
            e — Evaluate replacement
            i — Perform case-insensitive matching
            g — Perform global matching
            m — Perform multiple line matching
            s — Treat strings as single line
            x — Allow comments and whitespace in pattern
            U — Non Greedy pattern

            Brackets
            [abc]
            [^abc]
            [0-9]
            [A-z]
            (a|b|c)

            Find any of the characters between the brackets
            Find any character not in the brackets
            Used to find any digit from 0 to 9
            Find any character from uppercase A to lowercase z
            Find any of the alternatives separated with |

            Metacharacters
            .
            \w
            \W
            \d
            \D
            \s
            \S
            \b
            \B
            \0
            \n
            \f
            \r
            \t
            \v

            — Find a single character, except newline or line terminator
            — Word character
            — Non-word character
            — A digit
            — A non-digit character
            — Whitespace character
            — Non-whitespace character
            — Find a match at the beginning/end of a word
            — A match not at the beginning/end of a word
            — NUL character
            — A new line character
            — Form feed character
            — Carriage return character
            — Tab character
            — Vertical tab character

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            9

            \xxx — The character specified by an octal number xxx
            \xdd — Character specified by a hexadecimal number dd
            \uxxxx — The Unicode character specified by a hexadecimal number xxxx

            Quantifiers
            n+
            — Matches any string that contains at least one n
            n*
            — Any string that contains zero or more occurrences of n
            n?
            — A string that contains zero or one occurrences of n
            n{X} — String that contains a sequence of X n’s
            n{X,Y} — Strings that contains a sequence of X to Y n’s
            n{X,} — Matches any string that contains a sequence of at least X n’s
            n$
            — Any string with n at the end of it
            ^n
            — String with n at the beginning of it
            ?=n — Any string that is followed by a specific string n
            ?!n — String that is not followed by a specific string n

            Numbers and Math
            Number Properties
            MAX_VALUE
            The maximum numeric value representable in JavaScript
            MIN_VALUE
            Smallest positive numeric value representable in JavaScript
            NaN
            The “Not-a-Number” value
            NEGATIVE_INFINITY
            The negative Infinity value
            POSITIVE_INFINITY
            Positive Infinity value

            Number Methods
            toExponential()
            Returns a string with a rounded number written as exponential notation
            toFixed()
            Returns the string of a number with a specified number of decimals

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            10

            toPrecision()
            String of a number written with a specified length
            toString()
            Returns a number as a string
            valueOf()
            Returns a number as a number

            Math Properties
            E
            LN2
            LN10
            LOG2E
            LOG10E
            PI
            SQRT1_2
            SQRT2

            Euler’s number
            The natural logarithm of 2
            Natural logarithm of 10
            Base 2 logarithm of E
            Base 10 logarithm of E
            The number PI
            Square root of 1/2
            The square root of 2

            Math Methods
            abs(x)
            Returns the absolute (positive) value of x
            acos(x)
            The arccosine of x, in radians
            asin(x)
            Arcsine of x, in radians
            atan(x)
            The arctangent of x as a numeric value
            atan2(y,x)
            Arctangent of the quotient of its arguments
            ceil(x)
            Value of x rounded up to its nearest integer
            cos(x)
            The cosine of x (x is in radians)

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            11

            exp(x)
            Value of Ex
            floor(x)
            The value of x rounded down to its nearest integer
            log(x)
            The natural logarithm (base E) of x
            max(x,y,z,...,n)
            Returns the number with the highest value
            min(x,y,z,...,n)
            Same for the number with the lowest value
            pow(x,y)
            X to the power of y
            random()
            Returns a random number between 0 and 1
            round(x)
            The value of x rounded to its nearest integer
            sin(x)
            The sine of x (x is in radians)
            sqrt(x)
            Square root of x
            tan(x)
            The tangent of an angle

            Dealing with Dates
            Setting Dates
            Date()
            Creates a new date object with the current date and time

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            12

            Date(2017, 5, 21, 3, 23, 10, 0)
            Create a custom date object. The numbers represent year, month, day, hour, minutes, seconds,
            milliseconds. You can omit anything you want except for year and month.
            Date("2017-06-23")
            Date declaration as a string

            Pulling Date and Time Values
            getDate()
            Get the day of the month as a number (1-31)
            getDay()
            The weekday as a number (0-6)
            getFullYear()
            Year as a four digit number (yyyy)
            getHours()
            Get the hour (0-23)
            getMilliseconds()
            The millisecond (0-999)
            getMinutes()
            Get the minute (0-59)
            getMonth()
            Month as a number (0-11)
            getSeconds()
            Get the second (0-59)
            getTime()
            Get the milliseconds since January 1, 1970
            getUTCDate()
            The day (date) of the month in the specified date according to universal time (also available for
            day, month, fullyear, hours, minutes etc.)
            parse
            Parses a string representation of a date, and returns the number of milliseconds since January
            1, 1970

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            13

            Set Part of a Date
            setDate()
            Set the day as a number (1-31)
            setFullYear()
            Sets the year (optionally month and day)
            setHours()
            Set the hour (0-23)
            setMilliseconds()
            Set milliseconds (0-999)
            setMinutes()
            Sets the minutes (0-59)
            setMonth()
            Set the month (0-11)
            setSeconds()
            Sets the seconds (0-59)
            setTime()
            Set the time (milliseconds since January 1, 1970)
            setUTCDate()
            Sets the day of the month for a specified date according to universal time (also available for
            day, month, fullyear, hours, minutes etc.)

            DOM Node
            Node Properties
            attributes
            Returns a live collection of all attributes registered to and element
            baseURI
            Provides the absolute base URL of an HTML element
            childNodes
            Gives a collection of an element’s child nodes

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            14

            firstChild
            Returns the first child node of an element
            lastChild
            The last child node of an element
            nextSibling
            Gives you the next node at the same node tree level
            nodeName
            Returns the name of a node
            nodeType
            Returns the type of a node
            nodeValue
            Sets or returns the value of a node
            ownerDocument
            The top-level document object for this node
            parentNode
            Returns the parent node of an element
            previousSibling
            Returns the node immediately preceding the current one
            textContent
            Sets or returns the textual content of a node and its descendants

            Node Methods
            appendChild()
            Adds a new child node to an element as the last child node
            cloneNode()
            Clones an HTML element
            compareDocumentPosition()
            Compares the document position of two elements
            getFeature()
            Returns an object which implements the APIs of a specified feature

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            15

            hasAttributes()
            Returns true if an element has any attributes, otherwise false
            hasChildNodes()
            Returns true if an element has any child nodes, otherwise false
            insertBefore()
            Inserts a new child node before a specified, existing child node
            isDefaultNamespace()
            Returns true if a specified namespaceURI is the default, otherwise false
            isEqualNode()
            Checks if two elements are equal
            isSameNode()
            Checks if two elements are the same node
            isSupported()
            Returns true if a specified feature is supported on the element
            lookupNamespaceURI()
            Returns the namespaceURI associated with a given node
            lookupPrefix()
            Returns a DOMString containing the prefix for a given namespaceURI, if present
            normalize()
            Joins adjacent text nodes and removes empty text nodes in an element
            removeChild()
            Removes a child node from an element
            replaceChild()
            Replaces a child node in an element

            Element Methods
            getAttribute()
            Returns the specified attribute value of an element node
            getAttributeNS()
            Returns string value of the attribute with the specified namespace and name

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            16

            getAttributeNode()
            Gets the specified attribute node
            getAttributeNodeNS()
            Returns the attribute node for the attribute with the given namespace and name
            getElementsByTagName()
            Provides a collection of all child elements with the specified tag name
            getElementsByTagNameNS()
            Returns a live HTMLCollection of elements with a certain tag name belonging to the given
            namespace
            hasAttribute()
            Returns true if an element has any attributes, otherwise false
            hasAttributeNS()
            Provides a true/false value indicating whether the current element in a given namespace has the
            specified attribute
            removeAttribute()
            Removes a specified attribute from an element
            removeAttributeNS()
            Removes the specified attribute from an element within a certain namespace
            removeAttributeNode()
            Takes away a specified attribute node and returns the removed node
            setAttribute()
            Sets or changes the specified attribute to a specified value
            setAttributeNS()
            Adds a new attribute or changes the value of an attribute with the given namespace and name
            setAttributeNode()
            Sets or changes the specified attribute node
            setAttributeNodeNS()
            Adds a new namespaced attribute node to an element

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            17

            Working with the Browser
            Window Properties
            closed
            Checks whether a window has been closed or not and returns true or false
            defaultStatus
            Sets or returns the default text in the statusbar of a window
            document
            Returns the document object for the window
            frames
            Returns all <iframe> elements in the current window
            history
            Provides the History object for the window
            innerHeight
            The inner height of a window’s content area
            innerWidth
            The inner width of the content area
            length
            Find out the number of <iframe> elements in the window
            location
            Returns the location object for the window
            name
            Sets or returns the name of a window
            navigator
            Returns the Navigator object for the window
            opener
            Returns a reference to the window that created the window
            outerHeight
            The outer height of a window, including toolbars/ scrollbars

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            18

            outerWidth
            The outer width of a window, including toolbars/ scrollbars
            pageXOffset
            Number of pixels the current document has been scrolled horizontally
            pageYOffset
            Number of pixels the document has been scrolled vertically
            parent
            The parent window of the current window
            screen
            Returns the Screen object for the window
            screenLeft
            The horizontal coordinate of the window (relative to screen)
            screenTop
            The vertical coordinate of the window
            screenX
            Same as screenLeft but needed for some browsers
            screenY
            Same as screenTop but needed for some browsers
            self
            Returns the current window
            status
            Sets or returns the text in the statusbar of a window
            top
            Returns the topmost browser window

            Window Methods
            alert()
            Displays an alert box with a message and an OK button
            blur()
            Removes focus from the current window

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            19

            clearInterval()
            Clears a timer set with setInterval()
            clearTimeout()
            Clears a timer set with setTimeout()
            close()
            Closes the current window
            confirm()
            Displays a dialogue box with a message and an OK and Cancel button
            focus()
            Sets focus to the current window
            moveBy()
            Moves a window relative to its current position
            moveTo()
            Moves a window to a specified position
            open()
            Opens a new browser window
            print()
            Prints the content of the current window
            prompt()
            Displays a dialogue box that prompts the visitor for input
            resizeBy()
            Resizes the window by the specified number of pixels
            resizeTo()
            Resizes the window to a specified width and height
            scrollBy()
            Scrolls the document by a specified number of pixels
            scrollTo()
            Scrolls the document to specific coordinates

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            20

            setInterval()
            Calls a function or evaluates an expression at specified intervals
            setTimeout()
            Calls a function or evaluates an expression after a specified interval
            stop()
            Stops the window from loading

            Screen Properties
            availHeight
            Returns the height of the screen (excluding the Windows Taskbar)
            availWidth
            Returns the width of the screen (excluding the Windows Taskbar)
            colorDepth
            Returns the bit depth of the color palette for displaying images
            height
            The total height of the screen
            pixelDepth
            The color resolution of the screen in bits per pixel
            width
            The total width of the screen

            Events
            Mouse
            onclick
            The event occurs when the user clicks on an element
            oncontextmenu
            User right-clicks on an element to open a context menu
            ondblclick
            The user double-clicks on an element

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            21

            onmousedown
            User presses a mouse button over an element
            onmouseenter
            The pointer moves onto an element
            onmouseleave
            Pointer moves out of an element
            onmousemove
            The pointer is moving while it is over an element
            onmouseover
            When the pointer is moved onto an element or one of its children
            onmouseout
            User moves the mouse pointer out of an element or one of its children
            onmouseup
            The user releases a mouse button while over an element

            Keyboard
            onkeydown
            When the user is pressing a key down
            onkeypress
            The moment the user starts pressing a key
            onkeyup
            The user releases a key

            Frame
            onabort
            The loading of a media is aborted
            onbeforeunload
            Event occurs before the document is about to be unloaded
            onerror
            An error occurs while loading an external file

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            22

            onhashchange
            There have been changes to the anchor part of a URL
            onload
            When an object has loaded
            onpagehide
            The user navigates away from a webpage
            onpageshow
            When the user navigates to a webpage
            onresize
            The document view is resized
            onscroll
            An element’s scrollbar is being scrolled
            onunload
            Event occurs when a page has unloaded

            Form
            onblur
            When an element loses focus
            onchange
            The content of a form element changes (for <input>, <select>and <textarea>)
            onfocus
            An element gets focus
            onfocusin
            When an element is about to get focus
            onfocusout
            The element is about to lose focus
            oninput
            User input on an element
            oninvalid
            An element is invalid

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            23

            onreset
            A form is reset
            onsearch
            The user writes something in a search field (for <input="search">)
            onselect
            The user selects some text (for <input> and <textarea>)
            onsubmit
            A form is submitted

            Drag
            ondrag
            An element is dragged
            ondragend
            The user has finished dragging the element
            ondragenter
            The dragged element enters a drop target
            ondragleave
            A dragged element leaves the drop target
            ondragover
            The dragged element is on top of the drop target
            ondragstart
            User starts to drag an element
            ondrop
            Dragged element is dropped on the drop target

            Clipboard
            oncopy
            User copies the content of an element
            oncut
            The user cuts an element’s content

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            24

            onpaste
            A user pastes content in an element

            Media
            onabort
            Media loading is aborted
            oncanplay
            The browser can start playing media (e.g. a file has buffered enough)
            oncanplaythrough
            When browser can play through media without stopping
            ondurationchange
            The duration of the media changes
            onended
            The media has reached its end
            onerror
            Happens when an error occurs while loading an external file
            onloadeddata
            Media data is loaded
            onloadedmetadata
            Meta Metadata (like dimensions and duration) are loaded
            onloadstart
            Browser starts looking for specified media
            onpause
            Media is paused either by the user or automatically
            onplay
            The media has been started or is no longer paused
            onplaying
            Media is playing after having been paused or stopped for buffering
            onprogress
            Browser is in the process of downloading the media

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            25

            onratechange
            The playing speed of the media changes
            onseeked
            User is finished moving/skipping to a new position in the media
            onseeking
            The user starts moving/skipping
            onstalled
            The browser is trying to load the media but it is not available
            onsuspend
            Browser is intentionally not loading media
            ontimeupdate
            The playing position has changed (e.g. because of fast forward)
            onvolumechange
            Media volume has changed (including mute)
            onwaiting
            Media paused but expected to resume (for example, buffering)

            Animation
            animationend
            A CSS animation is complete
            animationiteration
            CSS animation is repeated
            animationstart
            CSS animation has started

            Other
            transitionend
            Fired when a CSS transition has completed
            onmessage
            A message is received through the event source

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            26

            onoffline
            Browser starts to work offline
            ononline
            The browser starts to work online
            onpopstate
            When the window’s history changes
            onshow
            A <menu> element is shown as a context menu
            onstorage
            A Web Storage area is updated
            ontoggle
            The user opens or closes the <details> element
            onwheel
            Mouse wheel rolls up or down over an element
            ontouchcancel
            Screen touch is interrupted
            ontouchend
            User finger is removed from a touch screen
            ontouchmove
            A finger is dragged across the screen
            ontouchstart
            Finger is placed on touch screen

            Errors
            try
            Lets you define a block of code to test for errors
            catch
            Set up a block of code to execute in case of an error

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            27

            throw
            Create custom error messages instead of the standard JavaScript errors
            finally
            Lets you execute code, after try and catch, regardless of the result

            Error Name Values
            name
            Sets or returns the error name
            message
            Sets or returns an error message in string from
            EvalError
            An error has occurred in the eval() function
            RangeError
            A number is “out of range”
            ReferenceError
            An illegal reference has occurred
            SyntaxError
            A syntax error has occurred
            TypeError
            A type error has occurred
            URIError
            An encodeURI() error has occurred

            WebsiteSetup.org - Beginner’s Javascript Cheat Sheet

            28
~/Empire/Doks/Comp/lang/webdev/js/cheatsh-qref/notes4pros-js.pdf
~/Empire/Doks/Comp/lang/webdev/js/cheatsh-qref/notes4pros-js.txt
            Chapter 1: Getting started with JavaScript  2
            Section 1.1: Using console.log()  2
            Section 1.2: Using the DOM API  4
            Section 1.3: Using window.alert()  5
            Section 1.4: Using window.prompt()  6
            Section 1.5: Using window.confirm()  7
            Section 1.6: Using the DOM API (with graphical text: Canvas, SVG, or image file)  8
            Chapter 2: JavaScript Variables  10
            Section 2.1: Defining a Variable  10
            Section 2.2: Using a Variable  10
            Section 2.3: Types of Variables  10
            Section 2.4: Arrays and Objects  11
            Chapter 3: Built-in Constants  12
            Section 3.1: null  12
            Section 3.2: Testing for NaN using isNaN()  12
            Section 3.3: NaN  13
            Section 3.4: undefined and null  14
            Section 3.5: Infinity and -Infinity  15
            Section 3.6: Number constants  15
            Section 3.7: Operations that return NaN  16
            Section 3.8: Math library functions that return NaN  16
            Chapter 4: Datatypes in Javascript  17
            Section 4.1: typeof  17
            Section 4.2: Finding an object's class  18
            Section 4.3: Getting object type by constructor name  18
            Chapter 5: Bitwise operators  21
            Section 5.1: Bitwise operators  21
            Section 5.2: Shift Operators  23
            Chapter 6: Arithmetic (Math)  24
            Section 6.1: Constants  24
            Section 6.2: Remainder / Modulus (%)  24
            Section 6.3: Rounding  25
            Section 6.4: Trigonometry  27
            Section 6.5: Bitwise operators  28
            Section 6.6: Incrementing (++)  30
            Section 6.7: Exponentiation (Math.pow() or **)  30
            Section 6.8: Random Integers and Floats  31
            Section 6.9: Addition (+)  31
            Section 6.10: Little / Big endian for typed arrays when using bitwise operators  32
            Section 6.11: Get Random Between Two Numbers  33
            Section 6.12: Simulating events with dierent probabilities  34
            Section 6.13: Subtraction (-)  35
            Section 6.14: Multiplication (*)  35
            Section 6.15: Getting maximum and minimum  35
            Section 6.16: Restrict Number to Min/Max Range  36
            Section 6.17: Ceiling and Floor  36
            Section 6.18: Getting roots of a number  36
            Section 6.19: Random with gaussian distribution  37
            Section 6.20: Math.atan2 to find direction  38
            Section 6.21: Sin & Cos to create a vector given direction & distance  38
            Section 6.22: Math.hypot  39
            Section 6.23: Periodic functions using Math.sin  39
            Section 6.24: Division (/)  41
            Section 6.25: Decrementing (--)  41
            Chapter 7: Strings  43
            Section 7.1: Basic Info and String Concatenation  43
            Section 7.2: Reverse String  44
            Section 7.3: Comparing Strings Lexicographically  45
            Section 7.4: Access character at index in string  46
            Section 7.5: Escaping quotes  46
            Section 7.6: Word Counter  47
            Section 7.7: Trim whitespace  47
            Section 7.8: Splitting a string into an array  47
            Section 7.9: Strings are unicode  48
            Section 7.10: Detecting a string  48
            Section 7.11: Substrings with slice  49
            Section 7.12: Character code  49
            Section 7.13: String Representations of Numbers  49
            Section 7.14: String Find and Replace Functions  50
            Section 7.15: Find the index of a substring inside a string  51
            Section 7.16: String to Upper Case  51
            Section 7.17: String to Lower Case  51
            Section 7.18: Repeat a String  52
            Chapter 8: Date  53
            Section 8.1: Create a new Date object  53
            Section 8.2: Convert to a string format  55
            Section 8.3: Creating a Date from UTC  56
            Section 8.4: Formatting a JavaScript date  59
            Section 8.5: Get the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC  60
            Section 8.6: Get the current time and date  61
            Section 8.7: Increment a Date Object  62
            Section 8.8: Convert to JSON  63
            Chapter 9: Date Comparison  64
            Section 9.1: Comparing Date values  64
            Section 9.2: Date Dierence Calculation  65
            Chapter 10: Comparison Operations  66
            Section 10.1: Abstract equality / inequality and type conversion  66
            Section 10.2: NaN Property of the Global Object  67
            Section 10.3: Short-circuiting in boolean operators  69
            Section 10.4: Null and Undefined  71
            Section 10.5: Abstract Equality (==)  71
            Section 10.6: Logic Operators with Booleans  72
            Section 10.7: Automatic Type Conversions  73
            Section 10.8: Logic Operators with Non-boolean values (boolean coercion)  73
            Section 10.9: Empty Array  74
            Section 10.10: Equality comparison operations  74
            Section 10.11: Relational operators (<, <=, >, >=)  76
            Section 10.12: Inequality  77
            Section 10.13: List of Comparison Operators  77
            Section 10.14: Grouping multiple logic statements  78
            Section 10.15: Bit fields to optimise comparison of multi state data  78
            Chapter 11: Constructor functions  80
            Section 11.1: Declaring a constructor function  80
            Chapter 12: Conditions  81
            Section 12.1: Ternary operators  81
            Section 12.2: Switch statement  82
            Section 12.3: If / Else If / Else Control  84
            Section 12.4: Strategy  85
            Section 12.5: Using || and && short circuiting  86
            Chapter 13: Comments  87
            Section 13.1: Using Comments  87
            Section 13.2: Using HTML comments in JavaScript (Bad practice)  87
            Chapter 14: Arrays  89
            Section 14.1: Converting Array-like Objects to Arrays  89
            Section 14.2: Reducing values  91
            Section 14.3: Mapping values  93
            Section 14.4: Filtering Object Arrays  93
            Section 14.5: Sorting Arrays  95
            Section 14.6: Iteration  97
            Section 14.7: Destructuring an array  101
            Section 14.8: Removing duplicate elements  102
            Section 14.9: Array comparison  102
            Section 14.10: Reversing arrays  103
            Section 14.11: Shallow cloning an array  103
            Section 14.12: Concatenating Arrays  104
            Section 14.13: Merge two array as key value pair  106
            Section 14.14: Array spread / rest  106
            Section 14.15: Filtering values  107
            Section 14.16: Searching an Array  108
            Section 14.17: Convert a String to an Array  108
            Section 14.18: Removing items from an array  109
            Section 14.19: Removing all elements  110
            Section 14.20: Finding the minimum or maximum element  111
            Section 14.21: Standard array initialization  112
            Section 14.22: Joining array elements in a string  113
            Section 14.23: Removing/Adding elements using splice()  113
            Section 14.24: The entries() method  114
            Section 14.25: Remove value from array  114
            Section 14.26: Flattening Arrays  115
            Section 14.27: Append / Prepend items to Array  115
            Section 14.28: Object keys and values to array  116
            Section 14.29: Logical connective of values  116
            Section 14.30: Checking if an object is an Array  117
            Section 14.31: Insert an item into an array at a specific index  117
            Section 14.32: Sorting multidimensional array  118
            Section 14.33: Test all array items for equality  119
            Section 14.34: Copy part of an Array  119
            Chapter 15: Objects  120
            Section 15.1: Shallow cloning  120
            Section 15.2: Object.freeze  120
            Section 15.3: Object cloning  121
            Section 15.4: Object properties iteration  122
            Section 15.5: Object.assign  123
            Section 15.6: Object rest/spread (...)  124
            Section 15.7: Object.defineProperty  124
            Section 15.8: Accesor properties (get and set)  125
            Section 15.9: Dynamic / variable property names  125
            Section 15.10: Arrays are Objects  126
            Section 15.11: Object.seal  127
            Section 15.12: Convert object's values to array  128
            Section 15.13: Retrieving properties from an object  128
            Section 15.14: Read-Only property  131
            Section 15.15: Non enumerable property  131
            Section 15.16: Lock property description  131
            Section 15.17: Object.getOwnPropertyDescriptor  132
            Section 15.18: Descriptors and Named Properties  132
            Section 15.19: Object.keys  134
            Section 15.20: Properties with special characters or reserved words  134
            Section 15.21: Creating an Iterable object  135
            Section 15.22: Iterating over Object entries - Object.entries()  135
            Section 15.23: Object.values()  136
            Chapter 16: Declarations and Assignments  137
            Section 16.1: Modifying constants  137
            Section 16.2: Declaring and initializing constants  137
            Section 16.3: Declaration  137
            Section 16.4: Undefined  138
            Section 16.5: Data Types  138
            Section 16.6: Mathematic operations and assignment  138
            Section 16.7: Assignment  139
            Chapter 17: Loops  141
            Section 17.1: Standard "for" loops  141
            Section 17.2: "for ... of" loop  142
            Section 17.3: "for ... in" loop  144
            Section 17.4: "while" Loops  144
            Section 17.5: "continue" a loop  145
            Section 17.6: Break specific nested loops  146
            Section 17.7: "do ... while" loop  146
            Section 17.8: Break and continue labels  146
            Chapter 18: Functions  148
            Section 18.1: Function Scoping  148
            Section 18.2: Currying  149
            Section 18.3: Immediately Invoked Function Expressions  150
            Section 18.4: Named Functions  151
            Section 18.5: Binding `this` and arguments  154
            Section 18.6: Functions with an Unknown Number of Arguments (variadic functions)  155
            Section 18.7: Anonymous Function  157
            Section 18.8: Default parameters  159
            Section 18.9: Call and apply  161
            Section 18.10: Partial Application  162
            Section 18.11: Passing arguments by reference or value  163
            Section 18.12: Function Arguments, "arguments" object, rest and spread parameters  164
            Section 18.13: Function Composition  164
            Section 18.14: Get the name of a function object  165
            Section 18.15: Recursive Function  165
            Section 18.16: Using the Return Statement  166
            Section 18.17: Functions as a variable  167
            Chapter 19: Functional JavaScript  170
            Section 19.1: Higher-Order Functions  170
            Section 19.2: Identity Monad  170
            Section 19.3: Pure Functions  172
            Section 19.4: Accepting Functions as Arguments  173
            Chapter 20: Prototypes, objects  174
            Section 20.1: Creation and initialising Prototype  174
            Chapter 21: Classes  176
            Section 21.1: Class Constructor  176
            Section 21.2: Class Inheritance  176
            Section 21.3: Static Methods  177
            Section 21.4: Getters and Setters  177
            Section 21.5: Private Members  178
            Section 21.6: Methods  179
            Section 21.7: Dynamic Method Names  179
            Section 21.8: Managing Private Data with Classes  180
            Section 21.9: Class Name binding  182
            Chapter 22: Namespacing  183
            Section 22.1: Namespace by direct assignment  183
            Section 22.2: Nested Namespaces  183
            Chapter 23: Callbacks  184
            Section 23.1: Simple Callback Usage Examples  184
            Section 23.2: Continuation (synchronous and asynchronous)  185
            Section 23.3: What is a callback?  186
            Section 23.4: Callbacks and `this`  187
            Section 23.5: Callback using Arrow function  188
            Section 23.6: Error handling and control-ﬂow branching  189
            Chapter 24: Context (this)  190
            Section 24.1: this with simple objects  190
            Section 24.2: Saving this for use in nested functions / objects  190
            Section 24.3: Binding function context  191
            Section 24.4: this in constructor functions  192
            Chapter 25: Setters and Getters  193
            Section 25.1: Defining a Setter/Getter Using Object.defineProperty  193
            Section 25.2: Defining an Setter/Getter in a Newly Created Object  193
            Section 25.3: Defining getters and setters in ES6 class  193
            Chapter 26: Events  195
            Section 26.1: Page, DOM and Browser loading  195
            Chapter 27: Inheritance  196
            Section 27.1: Standard function prototype  196
            Section 27.2: Dierence between Object.key and Object.prototype.key  196
            Section 27.3: Prototypal inheritance  196
            Section 27.4: Pseudo-classical inheritance  197
            Section 27.5: Setting an Object's prototype  198
            Chapter 28: Method Chaining  200
            Section 28.1: Chainable object design and chaining  200
            Section 28.2: Method Chaining  202
            Chapter 29: Intervals and Timeouts  203
            Section 29.1: Recursive setTimeout  203
            Section 29.2: Intervals  203
            Section 29.3: Intervals  203
            Section 29.4: Removing intervals  204
            Section 29.5: Removing timeouts  204
            Section 29.6: setTimeout, order of operations, clearTimeout  204
            Chapter 30: Console  206
            Section 30.1: Measuring time - console.time()  206
            Section 30.2: Formatting console output  206
            Section 30.3: Printing to a browser's debugging console  208
            Section 30.4: Including a stack trace when logging - console.trace()  210
            Section 30.5: Tabulating values - console.table()  210
            Section 30.6: Counting - console.count()  212
            Section 30.7: Clearing the console - console.clear()  213
            Section 30.8: Displaying objects and XML interactively - console.dir(), console.dirxml()  214
            Section 30.9: Debugging with assertions - console.assert()  215
            Chapter 31: Regular expressions  217
            Section 31.1: Creating a RegExp Object  217
            Section 31.2: RegExp Flags  217
            Section 31.3: Check if string contains pattern using .test()  218
            Section 31.4: Matching With .exec()  218
            Section 31.5: Using RegExp With Strings  218
            Section 31.6: RegExp Groups  219
            Section 31.7: Replacing string match with a callback function  220
            Section 31.8: Using Regex.exec() with parentheses regex to extract matches of a string  221
            Chapter 32: Cookies  223
            Section 32.1: Test if cookies are enabled  223
            Section 32.2: Adding and Setting Cookies  223
            Section 32.3: Reading cookies  223
            Section 32.4: Removing cookies  223
            Chapter 33: Data attributes  224
            Section 33.1: Accessing data attributes  224
            Chapter 34: JSON  225
            Section 34.1: JSON versus JavaScript literals  225
            Section 34.2: Parsing with a reviver function  226
            Section 34.3: Serializing a value  227
            Section 34.4: Serializing and restoring class instances  228
            Section 34.5: Serializing with a replacer function  229
            Section 34.6: Parsing a simple JSON string  230
            Section 34.7: Cyclic object values  230
            Chapter 35: AJAX  231
            Section 35.1: Sending and Receiving JSON Data via POST  231
            Section 35.2: Add an AJAX preloader  231
            Section 35.3: Displaying the top JavaScript questions of the month from Stack Overﬂow's API  232
            Section 35.4: Using GET with parameters  233
            Section 35.5: Check if a file exists via a HEAD request  234
            Section 35.6: Using GET and no parameters  234
            Section 35.7: Listening to AJAX events at a global level  234
            Chapter 36: Enumerations  235
            Section 36.1: Enum definition using Object.freeze()  235
            Section 36.2: Alternate definition  235
            Section 36.3: Printing an enum variable  235
            Section 36.4: Implementing Enums Using Symbols  236
            Section 36.5: Automatic Enumeration Value  236
            Chapter 37: Map  238
            Section 37.1: Creating a Map  238
            Section 37.2: Clearing a Map  238
            Section 37.3: Removing an element from a Map  238
            Section 37.4: Checking if a key exists in a Map  239
            Section 37.5: Iterating Maps  239
            Section 37.6: Getting and setting elements  239
            Section 37.7: Getting the number of elements of a Map  240
            Chapter 38: Timestamps  241
            Section 38.1: High-resolution timestamps  241
            Section 38.2: Get Timestamp in Seconds  241
            Section 38.3: Low-resolution timestamps  241
            Section 38.4: Support for legacy browsers  241
            Chapter 39: Unary Operators  242
            Section 39.1: Overview  242
            Section 39.2: The typeof operator  242
            Section 39.3: The delete operator  243
            Section 39.4: The unary plus operator (+)  244
            Section 39.5: The void operator  245
            Section 39.6: The unary negation operator (-)  246
            Section 39.7: The bitwise NOT operator (~)  246
            Section 39.8: The logical NOT operator (!)  247
            Chapter 40: Error Handling  249
            Section 40.1: Error objects  249
            Section 40.2: Interaction with Promises  249
            Section 40.3: Error types  250
            Section 40.4: Order of operations plus advanced thoughts  250
            Chapter 41: Generators  253
            Section 41.1: Generator Functions  253
            Section 41.2: Sending Values to Generator  254
            Section 41.3: Delegating to other Generator  254
            Section 41.4: Iteration  254
            Section 41.5: Async ﬂow with generators  255
            Section 41.6: Iterator-Observer interface  256
            Chapter 42: Promises  258
            Section 42.1: Introduction  258
            Section 42.2: Promise chaining  259
            Section 42.3: Waiting for multiple concurrent promises  260
            Section 42.4: Reduce an array to chained promises  261
            Section 42.5: Waiting for the first of multiple concurrent promises  262
            Section 42.6: "Promisifying" functions with callbacks  263
            Section 42.7: Error Handling  263
            Section 42.8: Reconciling synchronous and asynchronous operations  267
            Section 42.9: Delay function call  268
            Section 42.10: "Promisifying" values  268
            Section 42.11: Using ES2017 async/await  269
            Section 42.12: Performing cleanup with finally()  269
            Section 42.13: forEach with promises  270
            Section 42.14: Asynchronous API request  270
            Chapter 43: Async functions (async/await)  272
            Section 43.1: Introduction  272
            Section 43.2: Await and operator precedence  272
            Section 43.3: Async functions compared to Promises  273
            Section 43.4: Looping with async await  274
            Section 43.5: Less indentation  275
            Section 43.6: Simultaneous async (parallel) operations  276
            Chapter 44: Set  277
            Section 44.1: Creating a Set  277
            Section 44.2: Adding a value to a Set  277
            Section 44.3: Removing value from a set  277
            Section 44.4: Checking if a value exist in a set  278
            Section 44.5: Clearing a Set  278
            Section 44.6: Getting set length  278
            Section 44.7: Converting Sets to arrays  278
            Section 44.8: Intersection and dierence in Sets  279
            Section 44.9: Iterating Sets  279
            Chapter 45: Modals - Prompts  280
            Section 45.1: About User Prompts  280
            Section 45.2: Persistent Prompt Modal  280
            Section 45.3: Confirm to Delete element  281
            Section 45.4: Usage of alert()  281
            Section 45.5: Usage of prompt()  282
            Chapter 46: execCommand and contenteditable  283
            Section 46.1: Listening to Changes of contenteditable  283
            Section 46.2: Getting started  284
            Section 46.3: Copy to clipboard from textarea using execCommand("copy")  285
            Section 46.4: Formatting  285
            Chapter 47: History  286
            Section 47.1: history.pushState()  286
            Section 47.2: history.replaceState()  286
            Section 47.3: Load a specific URL from the history list  286
            Chapter 48: Navigator Object  288
            Section 48.1: Get some basic browser data and return it as a JSON object  288
            Chapter 49: BOM (Browser Object Model)  289
            Section 49.1: Introduction  289
            Section 49.2: Window Object Properties  289
            Section 49.3: Window Object Methods  290
            Chapter 50: The Event Loop  291
            Section 50.1: The event loop in a web browser  291
            Section 50.2: Asynchronous operations and the event loop  292
            Chapter 51: Strict mode  293
            Section 51.1: For entire scripts  293
            Section 51.2: For functions  293
            Section 51.3: Changes to properties  293
            Section 51.4: Changes to global properties  294
            Section 51.5: Duplicate Parameters  295
            Section 51.6: Function scoping in strict mode  295
            Section 51.7: Behaviour of a function's arguments list  295
            Section 51.8: Non-Simple parameter lists  296
            Chapter 52: Custom Elements  298
            Section 52.1: Extending Native Elements  298
            Section 52.2: Registering New Elements  298
            Chapter 53: Data Manipulation  299
            Section 53.1: Format numbers as money  299
            Section 53.2: Extract extension from file name  299
            Section 53.3: Set object property given its string name  300
            Chapter 54: Binary Data  301
            Section 54.1: Getting binary representation of an image file  301
            Section 54.2: Converting between Blobs and ArrayBuers  301
            Section 54.3: Manipulating ArrayBuers with DataViews  302
            Section 54.4: Creating a TypedArray from a Base64 string  302
            Section 54.5: Using TypedArrays  303
            Section 54.6: Iterating through an arrayBuer  303
            Chapter 55: Template Literals  305
            Section 55.1: Basic interpolation and multiline strings  305
            Section 55.2: Tagged strings  305
            Section 55.3: Raw strings  306
            Section 55.4: Templating HTML With Template Strings  306
            Section 55.5: Introduction  307
            Chapter 56: Fetch  308
            Section 56.1: Getting JSON data  308
            Section 56.2: Set Request Headers  308
            Section 56.3: POST Data  308
            Section 56.4: Send cookies  308
            Section 56.5: GlobalFetch  309
            Section 56.6: Using Fetch to Display Questions from the Stack Overﬂow API  309
            Chapter 57: Scope  310
            Section 57.1: Closures  310
            Section 57.2: Hoisting  311
            Section 57.3: Dierence between var and let  314
            Section 57.4: Apply and Call syntax and invocation  316
            Section 57.5: Arrow function invocation  317
            Section 57.6: Bound invocation  318
            Section 57.7: Method invocation  318
            Section 57.8: Anonymous invocation  319
            Section 57.9: Constructor invocation  319
            Section 57.10: Using let in loops instead of var (click handlers example)  319
            Chapter 58: Modules  321
            Section 58.1: Defining a module  321
            Section 58.2: Default exports  321
            Section 58.3: Importing named members from another module  322
            Section 58.4: Importing an entire module  322
            Section 58.5: Importing named members with aliases  323
            Section 58.6: Importing with side eects  323
            Section 58.7: Exporting multiple named members  323
            Chapter 59: Screen  324
            Section 59.1: Getting the screen resolution  324
            Section 59.2: Getting the “available” area of the screen  324
            Section 59.3: Page width and height  324
            Section 59.4: Window innerWidth and innerHeight Properties  324
            Section 59.5: Getting color information about the screen  324
            Chapter 60: Variable coercion/conversion  325
            Section 60.1: Double Negation (!!x)  325
            Section 60.2: Implicit conversion  325
            Section 60.3: Converting to boolean  325
            Section 60.4: Converting a string to a number  326
            Section 60.5: Converting a number to a string  327
            Section 60.6: Primitive to Primitive conversion table  327
            Section 60.7: Convert an array to a string  327
            Section 60.8: Array to String using array methods  328
            Section 60.9: Converting a number to a boolean  328
            Section 60.10: Converting a string to a boolean  328
            Section 60.11: Integer to Float  328
            Section 60.12: Float to Integer  328
            Section 60.13: Convert string to ﬂoat  329
            Chapter 61: Destructuring assignment  330
            Section 61.1: Destructuring Objects  330
            Section 61.2: Destructuring function arguments  331
            Section 61.3: Nested Destructuring  331
            Section 61.4: Destructuring Arrays  332
            Section 61.5: Destructuring inside variables  332
            Section 61.6: Default Value While Destructuring  333
            Section 61.7: Renaming Variables While Destructuring  333
            Chapter 62: Web Storage  334
            Section 62.1: Using localStorage  334
            Section 62.2: Simpler way of handling Storage  334
            Section 62.3: Storage events  335
            Section 62.4: sessionStorage  336
            Section 62.5: localStorage length  336
            Section 62.6: Error conditions  337
            Section 62.7: Clearing storage  337
            Section 62.8: Remove Storage Item  337
            Chapter 63: WebSockets  338
            Section 63.1: Working with string messages  338
            Section 63.2: Establish a web socket connection  338
            Section 63.3: Working with binary messages  338
            Section 63.4: Making a secure web socket connection  339
            Chapter 64: Arrow Functions  340
            Section 64.1: Introduction  340
            Section 64.2: Lexical Scoping & Binding (Value of "this")  340
            Section 64.3: Arguments Object  341
            Section 64.4: Implicit Return  341
            Section 64.5: Arrow functions as a constructor  342
            Section 64.6: Explicit Return  342
            Chapter 65: Workers  343
            Section 65.1: Web Worker  343
            Section 65.2: A simple service worker  343
            Section 65.3: Register a service worker  344
            Section 65.4: Communicating with a Web Worker  344
            Section 65.5: Terminate a worker  345
            Section 65.6: Populating your cache  345
            Section 65.7: Dedicated Workers and Shared Workers  346
            Chapter 66: Creational Design Patterns  348
            Section 66.1: Factory Functions  348
            Section 66.2: Factory with Composition  349
            Section 66.3: Module and Revealing Module Patterns  350
            Section 66.4: Prototype Pattern  352
            Section 66.5: Singleton Pattern  353
            Section 66.6: Abstract Factory Pattern  354
            Chapter 67: requestAnimationFrame  355
            Section 67.1: Use requestAnimationFrame to fade in element  355
            Section 67.2: Keeping Compatibility  356
            Section 67.3: Cancelling an Animation  356
            Chapter 68: Global error handling in browsers  357
            Section 68.1: Handling window.onerror to report all errors back to the server-side  357
            Chapter 69: Tail Call Optimization  359
            Section 69.1: What is Tail Call Optimization (TCO)  359
            Section 69.2: Recursive loops  359
            Chapter 70: Detecting browser  360
            Section 70.1: Feature Detection Method  360
            Section 70.2: User Agent Detection  360
            Section 70.3: Library Method  361
            Chapter 71: Symbols  362
            Section 71.1: Basics of symbol primitive type  362
            Section 71.2: Using Symbol.for() to create global, shared symbols  362
            Section 71.3: Converting a symbol into a string  362
            Chapter 72: Transpiling  364
            Section 72.1: Introduction to Transpiling  364
            Section 72.2: Start using ES6/7 with Babel  365
            Chapter 73: Unit Testing Javascript  366
            Section 73.1: Unit Testing Promises with Mocha, Sinon, Chai and Proxyquire  366
            Section 73.2: Basic Assertion  368
            Chapter 74: Debugging  370
            Section 74.1: Interactive interpreter variables  370
            Section 74.2: Breakpoints  370
            Section 74.3: Using setters and getters to find what changed a property  371
            Section 74.4: Using the console  372
            Section 74.5: Automatically pausing execution  373
            Section 74.6: Elements inspector  373
            Section 74.7: Break when a function is called  373
            Section 74.8: Stepping through code  374
            Chapter 75: Automatic Semicolon Insertion - ASI  375
            Section 75.1: Avoid semicolon insertion on return statements  375
            Section 75.2: Rules of Automatic Semicolon Insertion  375
            Section 75.3: Statements aected by automatic semicolon insertion  376
            Chapter 76: Localization  378
            Section 76.1: Number formatting  378
            Section 76.2: Currency formatting  378
            Section 76.3: Date and time formatting  378
            Chapter 77: Geolocation  379
            Section 77.1: Get updates when a user's location changes  379
            Section 77.2: Get a user's latitude and longitude  379
            Section 77.3: More descriptive error codes  379
            Chapter 78: IndexedDB  381
            Section 78.1: Opening a database  381
            Section 78.2: Adding objects  381
            Section 78.3: Retrieving data  382
            Section 78.4: Testing for IndexedDB availability  383
            Chapter 79: Modularization Techniques  384
            Section 79.1: ES6 Modules  384
            Section 79.2: Universal Module Definition (UMD)  384
            Section 79.3: Immediately invoked function expressions (IIFE)  385
            Section 79.4: Asynchronous Module Definition (AMD)  385
            Section 79.5: CommonJS - Node.js  386
            Chapter 80: Proxy  388
            Section 80.1: Proxying property lookup  388
            Section 80.2: Very simple proxy (using the set trap)  388
            Chapter 81: .postMessage() and MessageEvent  390
            Section 81.1: Getting Started  390
            Chapter 82: WeakMap  392
            Section 82.1: Creating a WeakMap object  392
            Section 82.2: Getting a value associated to the key  392
            Section 82.3: Assigning a value to the key  392
            Section 82.4: Checking if an element with the key exists  392
            Section 82.5: Removing an element with the key  393
            Section 82.6: Weak reference demo  393
            Chapter 83: WeakSet  395
            Section 83.1: Creating a WeakSet object  395
            Section 83.2: Adding a value  395
            Section 83.3: Checking if a value exists  395
            Section 83.4: Removing a value  395
            Chapter 84: Escape Sequences  396
            Section 84.1: Entering special characters in strings and regular expressions  396
            Section 84.2: Escape sequence types  396
            Chapter 85: Behavioral Design Patterns  399
            Section 85.1: Observer pattern  399
            Section 85.2: Mediator Pattern  400
            Section 85.3: Command  401
            Section 85.4: Iterator  402
            Chapter 86: Server-sent events  404
            Section 86.1: Setting up a basic event stream to the server  404
            Section 86.2: Closing an event stream  404
            Section 86.3: Binding event listeners to EventSource  404
            Chapter 87: Async Iterators  406
            Section 87.1: Basics  406
            Chapter 88: How to make iterator usable inside async callback function  407
            Section 88.1: Erroneous code, can you spot why this usage of key will lead to bugs?  407
            Section 88.2: Correct Writing  407
            Chapter 89: Tilde ~  408
            Section 89.1: ~ Integer  408
            Section 89.2: ~~ Operator  408
            Section 89.3: Converting Non-numeric values to Numbers  409
            Section 89.4: Shorthands  409
            Section 89.5: ~ Decimal  409
            Chapter 90: Bitwise Operators - Real World Examples (snippets)  411
            Section 90.1: Swapping Two Integers with Bitwise XOR (without additional memory allocation)  411
            Section 90.2: Faster multiplication or division by powers of 2  411
            Section 90.3: Number's Parity Detection with Bitwise AND  411
            Chapter 91: Using javascript to get/set CSS custom variables  413
            Section 91.1: How to get and set CSS variable property values  413
            Chapter 92: Selection API  414
            Section 92.1: Get the text of the selection  414
            Section 92.2: Deselect everything that is selected  414
            Section 92.3: Select the contents of an element  414
            Chapter 93: File API, Blobs and FileReaders  415
            Section 93.1: Read file as string  415
            Section 93.2: Read file as dataURL  415
            Section 93.3: Slice a file  416
            Section 93.4: Get the properties of the file  416
            Section 93.5: Selecting multiple files and restricting file types  417
            Section 93.6: Client side csv download using Blob  417
            Chapter 94: Notifications API  418
            Section 94.1: Requesting Permission to send notifications  418
            Section 94.2: Sending Notifications  418
            Section 94.3: Closing a notification  418
            Section 94.4: Notification events  419
            Chapter 95: Vibration API  420
            Section 95.1: Single vibration  420
            Section 95.2: Check for support  420
            Section 95.3: Vibration patterns  420
            Chapter 96: Battery Status API  421
            Section 96.1: Battery Events  421
            Section 96.2: Getting current battery level  421
            Section 96.3: Is battery charging?  421
            Section 96.4: Get time left until battery is empty  421
            Section 96.5: Get time left until battery is fully charged  421
            Chapter 97: Fluent API  422
            Section 97.1: Fluent API capturing construction of HTML articles with JS  422
            Chapter 98: Web Cryptography API  424
            Section 98.1: Creating digests (e.g. SHA-256)  424
            Section 98.2: Cryptographically random data  424
            Section 98.3: Generating RSA key pair and converting to PEM format  425
            Section 98.4: Converting PEM key pair to CryptoKey  426
            Chapter 99: Security issues  427
            Section 99.1: Reﬂected Cross-site scripting (XSS)  427
            Section 99.2: Persistent Cross-site scripting (XSS)  428
            Section 99.3: Persistent Cross-site scripting from JavaScript string literals  429
            Section 99.4: Why scripts from other people can harm your website and its visitors  429
            Section 99.5: Evaled JSON injection  430
            Chapter 100: Same Origin Policy & Cross-Origin Communication  432
            Section 100.1: Safe cross-origin communication with messages  432
            Section 100.2: Ways to circumvent Same-Origin Policy  433
            Chapter 101: Evaluating JavaScript  435
            Section 101.1: Evaluate a string of JavaScript statements  435
            Section 101.2: Introduction  435
            Section 101.3: Evaluation and Math  435
            Chapter 102: Linters - Ensuring code quality  436
            Section 102.1: JSHint  436
            Section 102.2: ESLint / JSCS  437
            Section 102.3: JSLint  437
            Chapter 103: Anti-patterns  438
            Section 103.1: Chaining assignments in var declarations  438
            Chapter 104: Performance Tips  439
            Section 104.1: Avoid try/catch in performance-critical functions  439
            Section 104.2: Limit DOM Updates  439
            Section 104.3: Benchmarking your code - measuring execution time  440
            Section 104.4: Use a memoizer for heavy-computing functions  442
            Section 104.5: Initializing object properties with null  444
            Section 104.6: Reuse objects rather than recreate  445
            Section 104.7: Prefer local variables to globals, attributes, and indexed values  446
            Section 104.8: Be consistent in use of Numbers  447
            Chapter 105: Memory eciency  449
            Section 105.1: Drawback of creating true private method  449
            Appendix A: Reserved Keywords  450
            Section A.1: Reserved Keywords  450
            Section A.2: Identifiers & Identifier Names  452
~/Empire/Doks/Comp/lang/webdev/js/cheatsh-qref/phraseb-js.pdf
            1 JavaScript Basics 5 --
            Understanding JavaScript (and Its History) 5
            Setting Up a Test System 7
            Configuring Web Browsers 9
            Including JavaScript Code 1
            Using External JavaScript Files 12
            Dynamically Loading JavaScript Files 13
            Using JavaScript Pseudo URLs 14
            Executing JavaScript with Event Handlers 15
            Coping with Browsers without JavaScript 16
            2 Common Phrases 19 --
            Detecting the Browser Type 19
            Checking Browser Capabilities 22
            Preventing Caching 23
            Redirecting the Browser . 23
            Reloading the Page 24
            Creating a Random Number 25
            Date and Time Information 25
            Searching with Regular Expressions 28
            Replacing Text 29
            Navigating within the Browser's History 30
            Displaying the Modification Date of the Page 30
            Retrieving GET Parameters 31
            Asking for User Confirmation 32
            Asking for User Data 32
            3 Images and Animations 35 --
            Creating Mouseover Buttons 36
            Preloading Images 38
            Animating Graphics 40
            Stretching Graphics 42
            Visualizing the Page Loading State with a Progress Bar 44
            4 CSS 47 --
            Accessing CSS Styles 48
            Accessing CSS Classes 50
            Accessing Individual Style Sheets 51
            Accessing Individual CSS Rules 52
            Letting the Contents of a Website Disappear 55
            Applying JavaScript to CSS Selectors 58
            Changing the Mouse Cursor 60
            5 DOM and DHTML 63 --
            Understanding DOM 63
            Understanding DHTML 65
            Accessing Specific Elements 65
            Accessing Tags 66
            Determining Node Information 68
            Removing Elements 70
            Adding Elements 71
            Creating Text Elements 73
            Working with Attributes 74
            Cloning Elements 76
            Replacing Elements 77
            Creating a Bulleted List from JavaScript Data 78
            Creating a Table from JavaScript Data 80
            Changing HTML Fragments 82
            Positioning Elements 83
            Moving Elements 85
            Creating a Sticky Navigation 86
            Creating a Flash Pop-Up Ad 88
            6 OOP and Events 93 --
            Creating a Class 93
            Accessing Class Members 94
            Inheriting Classes 96
            Extending Built-In JavaScript Objects 99
            Reacting Upon JavaScript Events 100
            Using Keyboard Events 103
            Submitting a Form with the Enter Key 105
            Using Mouse Events 106
            7 Cookies 109 --
            Understanding Cookies 110
            Setting Cookies 112
            Reading Out Cookies 113
            Setting an Expiration Date 116
            Using Other Cookie Options 117
            Deleting Cookies 119
            Checking for Cookie Support 119
            Saving Multiple Information in One Cookie 120
            8 Forms 123 --
            Understanding HTML Forms with JavaScript 123
            Accessing Text Fields 125
            Contents
            Accessing Check Boxes 126
            Accessing Radio Buttons 127
            Accessing Selection Lists 129
            Accessing a Multiple Selection List 131
            Disabling Form Elements 134
            Submitting a Form 136
            Preventing Form Submission 137
            Preventing Repeated Form Submissions 138
            Giving a Field the Focus 140
            Selecting Text in a Field 141
            Emptying Text Fields When Clicked Upon 143
            Validating Text Fields 145
            Validating Check Boxes 146
            Validating Radio Buttons 147
            Validating Selection Lists 148
            Automatically Validating a Form 151
            Implementing Navigation with a Selection List 154
            Implementing a Hierarchical Navigation with a Selection List 155
            Emptying a Set of Radio Buttons 158
            Creating Prefilled Date Selection Lists 159
            Creating Validating Date Selection Lists 160
            9 Windows and Frames 163 --
            Using Window Options 164
            Opening a Moda! Window 167
            Determining Screen Size 169
            Determining the Window Size 170
            Resizing a Window 172
            Repositioning a Window 173
            Contents
            Opening a Centered Pop-Up Window 174
            Opening a Full-Screen Window 176
            Opening a New Window in a Corner of the Screen 177
            Creating a Sitemap 178
            Closing a Window 179
            Checking for the Presence of a Pop-Up
            Blocker 181
            Changing the Contents of Two Frames at Once 185
            Using Iframes 187
            10 Web Services 189 --
            Creating a Web Service with PHP 192
            Creating a Web Service with ASP.NET 193
            Calling a Web Service from Internet Explorer 195
            Calling a Web Service from a Mozilla Browser 198
            Calltng an ASP.NET Web Service from a Mozilla Browser 201
            11 AJAX (and Related Topics) 203 --
            Initializing an AJAX Application 205
            Sending a GET Request 206
            Sending a POST Request 208
            Sending a Synchronous Request 210
            Receiving Multiple Data from the Server 211
            Aborting an HTTP Request 213
            Retrieving HTTP Headers 215
            Receiving XML from the Server 216
            Using JSON for Data (De)Serialization 220
            Creating a Waiting Screen 221
            Solving the Bookmark Problem 224
            Solving the Back Button Problem 225
            Using XSLT 228
            Using an XML Library 230
            Using the Yahoo! Web Service 233
            12 Embedded Media 237 --
            Accessing Embedded Media 237
            Checking for Plug-ins 238
            Coping with Recent Internet Explorer Versions 240
            Accessing Multimedia Content 241
            Accessing Java Content 242
            Accessing Flash Content 244
 --
~/Empire/Doks/Comp/lang/webdev/js/jspocketref-peach_2010.pdf
~/Empire/Doks/Comp/lang/webdev/js/jspromises.pdf
 --
~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/js/jsdom.qref.pdf
~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/js/jsdom.qref.txt
            The most common DOM methods at a glance
            Reaching Elements in a Document

            Creating New Nodes

            document.getElementById('id'): Retrieves the element with
            the given id as an object

            document.createElement(element): Creates a new element
            node with the name element. You provide the name as a string.

            document.getElementsByTagName('tagname'): Retrieves all
            elements with the tag name tagname and stores them in an arraylike list

            document.createTextNode(string): Creates a new text node
            with the node value of string.

            Reading Element Attributes, Node Values and Other Data
            node.getAttribute('attribute'): Retrieves the value of the
            attribute with the name attribute
            node.setAttribute('attribute', 'value'): Sets the value
            of the attribute with the name attribute to value
            node.nodeType: Reads the type of the node (1 = element, 3 = text
            node)
            node.nodeName: Reads the name of the node (either element
            name or #textNode)
            node.nodeValue: Reads or sets the value of the node (the text
            content in the case of text nodes)

            Navigating Between Nodes
            node.previousSibling: Retrieves the previous sibling node and
            stores it as an object.
            node.nextSibling: Retrieves the next sibling node and stores it
            as an object.
            node.childNodes: Retrieves all child nodes of the object and
            stores them in an list. here are shortcuts for the first and last child
            node, named node.firstChild and node.lastChild.
            node.parentNode: Retrieves the node containing node.

            newNode = node.cloneNode(bool): Creates newNode as a copy
            (clone) of node. If bool is true, the clone includes clones of all the
            child nodes of the original.
            node.appendChild(newNode): Adds newNode as a new (last) child
            node to node.
            node.insertBefore(newNode,oldNode): Inserts newNode as a
            new child node of node before oldNode.
            node.removeChild(oldNode): Removes the child oldNode from
            node.
            node.replaceChild(newNode, oldNode): Replaces the child
            node oldNode of node with newNode.
            element.innerHTML: Reads or writes the HTML content of the given
            element as a string—including all child nodes with their attributes and
            text content.

            Known browser quirks:
            getAttribute and setAttribute are not reliable. Instead, assign
            the property of the element object directly: obj.property = value.
            Furthermore, some attributes are actually reserved words, so instead
            of class use className and instead of for use HTMLfor.
            Real DOM compliant browsers will return linebreaks as text nodes in
            the childNodes collection, make sure to either remove them or test
            for the nodeType.

            Assembled by Christian Heilmann (http://wait-till-i.com), licensed Creative Commons Attribution (http://creativecommons.org/licenses/by/3.0/). Enjoy.
~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/js/jsdom2.cheatsh.pdf
~/Dropbox/rsc/data/lists/ref/comp/lang/webdev/js/jsdom2.cheatsh.txt
            Javascript
            HTML DOM

            The HTML DOM
            Every element on an HTML page is accessible in JavaScript through the DOM: Document Object Model
            -

            The DOM is the tree of nodes
            corresponding to HTML elements on a
            page.
            Can modify, add and remove nodes on
            the DOM, which will modify, add, or
            remove the corresponding element on
            the page.

            The HTML DOM
            With the object model, JavaScript gets all the power it needs to create dynamic
            HTML:
            JavaScript can change all the HTML elements in the page
            JavaScript can change all the HTML attributes in the page
            JavaScript can change all the CSS styles in the page
            JavaScript can remove existing HTML elements and attributes
            JavaScript can add new HTML elements and attributes
            JavaScript can react to all existing HTML events in the page
            JavaScript can create new HTML events in the page

            The HTML DOM Document Object
            The document object represents your web page.
            If you want to access any element in an HTML page, you always start with accessing the
            document object.
            Then you can do a lot of things with the document object:
            Action

            Example

            Finding HTML Elements

            document.querySelector(CSS selector);

            Adding and Deleting Elements

            document.createElement(element);

            Changing HTML Elements

            element.innerHTML = new html content;

            Adding Events Handlers

            element.addEventListener('event', handler);

            Finding HTML Elements
            If you want to find the first HTML elements that matches a specified CSS selector
            (id, class names, types, attributes, values of attributes, etc), use the querySelector()
            method.
            For example this javascript statement will return the first paragraph element of
            class main:

            document.querySelector("p.main");

            <body>
            <p>my first paragraph</p>
            <p class="main">my first main paragraph</p>
            <p class="main">my second main paragraph</p>
            <a href="http://www.google.com">google</a>
            </body>

            Finding HTML Elements
            If you want to find all HTML elements that match a specified CSS selector (id, class
            names, types, attributes, values of attributes, etc), use the querySelectorAll()
            method.
            For example this javascript statement will return all paragraph elements of class
            main:

            document.querySelectorAll("p.main");

            <body>
            <p>my first paragraph</p>
            <p class="main">my first main paragraph</p>
            <p class="main">my second main paragraph</p>
            <a href="http://www.google.com">google</a>
            </body>

            Finding HTML Elements
            querySelectorAll() method will return a list of all HTML elements that match the
            specified CSS query.

            const pars = document.querySelectorAll("p.main");

            pars[1]

            <body>
            <p>my first paragraph</p>
            <p class="main">my first main paragraph</p>
            <p class="main">my second main paragraph</p>
            <a href="http://www.google.com">google</a>
            </body>

            pars[0]

            Changing HTML Elements
            The HTML DOM allows JavaScript to change the content of HTML elements.
            The easiest way to modify the content of an HTML element is by using the
            innerHTML property.
            To change the content of an HTML element, use this syntax:

            This is the element you
            want to change the html
            inside of it

            element.innerHTML = new HTML

            this is the new html code
            or text you want to put
            inside the element

            Changing HTML Elements
            For example this javascript code changes the text inside the h1 element:
            let header = document.querySelector("h1");
            header.innerHTML = "My new heading";

            <h1>My old heading</h1>

            <h1>My new heading</h1>

            Changing HTML Elements
            You can also change the value of an HTML attribute.

            This is the element you
            want to change an
            attribute of

            element.attribute = new value
            This is the attribute you
            want to change

            this is the new value you
            want to assign to the
            specified attribute of
            the given element

            Changing HTML Elements
            For example this javascript code changes the href attribute of an <a> element with
            id myLink:
            let myLink = document.querySelector("#myLink");
            myLink.href = "http://www.newwebsite.com";

            <a href="http://www.oldwebsite.com" id="myLink">A link to my website</a>

            <a href="http://www.newwebsite.com" id="myLink">A link to my website</a>

            Changing CSS properties
            To change the style of an HTML element, use this syntax:
            this is the style property
            you want to change like
            font-size
            This is the element you
            want to change the style
            of it

            element.style.property = new style

            complete list of Object style properties

            this is the new value for
            the style property you
            want to change

            Changing CSS properties
            For example this javascript code changes the font size of the second <p> element
            with class par to twice it's default value:
            let pars = document.querySelectorAll("p.par");
            pars[1].style.fontSize = "2em";

            <a href="http://www.oldwebsite.com" id="myLink">A link to my website</a>

            <a href="http://www.newwebsite.com" id="myLink">A link to my website</a>

            Changing CSS properties
            Did you notice?
            p.par {
            font-size: 2em;
            }

            pars[1].style.fontSize = "2em";

            As a general rule of thumb, in order to get the style property name in javascript, you
            should change the CSS property name to camelCase!
            CSS property

            Javascript property

            color

            color

            background-color

            backgroundColor

            margin-top

            marginTop

            Adding HTML Elements
            To add a new element to the HTML DOM, you must create the element (element
            node) first, and then append it to an existing element.

            This creates the text that
            can go inside an html
            element. e.g. some text
            inside a <p> or <h1>

            document.createElement(element);

            This is the name of the
            element you want to
            create e.g. "p"

            document.createTextNode(some text);
            parentElement.appendChild(childElement);

            This is the element you
            want to append the
            child element to

            This is the child element
            you want to nest inside
            the parent element

            Adding HTML Elements
            <div id="div1">
            <p id="p1">This is a paragraph.</p>
            <p id="p2">This is another paragraph.</p>
            </div>

            let para = document.createElement("p");
            let node = document.createTextNode("This is new.");
            para.appendChild(node);
            let element = document.querySelector("#div1");
            element.appendChild(para);

            Adding HTML Elements
            <div id="div1">
            <p id="p1">This is a paragraph.</p>
            <p id="p2">This is another paragraph.</p>
            <p>This is new.</p>
            </div>

            let para = document.createElement("p");
            let node = document.createTextNode("This is new.");
            para.appendChild(node);
            let element = document.querySelector("#div1");
            element.appendChild(para);

            Adding HTML Elements
            The appendChild() method in the previous example, appended the new element as
            the last child of the parent.
            If you don't want that you can use the insertBefore() method:

            parentElement.insertBefore(newElement, existingElement)

            This is the parent
            element you want to
            insert the new element
            inside it

            This is the new element
            you want to insert inside
            the parent element and
            before the existing
            element

            This is the existing
            element inside parent
            element, for which you
            want to insert the new
            element before it

            Adding HTML Elements
            <div id="div1">
            <p id="p1">This is a paragraph.</p>
            <p id="p2">This is another paragraph.</p>
            </div>

            let para = document.createElement("p");
            let node = document.createTextNode("This is new.");
            para.appendChild(node);
            let element = document.querySelector("#div1");
            let child = document.querySelector("#p1");
            element.insertBefore(para, child);

            Adding HTML Elements
            <div id="div1">
            <p>This is new.</p>
            <p id="p1">This is a paragraph.</p>
            <p id="p2">This is another paragraph.</p>
            </div>

            let para = document.createElement("p");
            let node = document.createTextNode("This is new.");
            para.appendChild(node);
            let element = document.querySelector("#div1");
            let child = document.querySelector("#p1");
            element.insertBefore(para, child);

            Removing Existing HTML Elements
            To remove an HTML element, you must know the parent of the element
            Then you can use this syntax to remove the element you want:

            parentElement.removeChild(childElement)

            This is the parent
            element you want to
            remove one of its
            children elements

            This is the child element
            you want to remove

            Removing Existing HTML Elements
            <div id="div1">
            <p id="p1">This is a paragraph.</p>
            <p id="p2">This is another paragraph.</p>
            </div>

            let parent = document.querySelector("#div1");
            let child = document.querySelector("#p1");
            parent.removeChild(child);

            Removing Existing HTML Elements
            <div id="div1">
            <p id="p1">This is a paragraph.</p>
            <p id="p2">This is another paragraph.</p>
            </div>

            let parent = document.querySelector("#div1");
            let child = document.querySelector("#p1");
            parent.removeChild(child);

            Replacing HTML Elements
            To replace an element, use the replaceChild() method:

            parentElement.replaceChild(newElement, oldElement)

            This is the parent
            element you want to
            replace one of its
            children elements

            This is the new child
            element you want to
            add to the parent
            element by replacing
            the old one

            This is the child element
            you want to replace

            Replacing HTML Elements
            <div id="div1">
            <p id="p1">This is a paragraph.</p>
            <p id="p2">This is another paragraph.</p>
            </div>

            let newPar = document.createElement("p");
            let node = document.createTextNode("This is new.");
            newPar.appendChild(node);
            let parent = document.querySelector("#div1");
            let oldPar = document.querySelector("#p1");
            parent.replaceChild(newPar, oldPar);

            Replacing HTML Elements
            <div id="div1">
            <p>This is new.</p>
            <p id="p2">This is another paragraph.</p>
            </div>

            let newPar = document.createElement("p");
            let node = document.createTextNode("This is new.");
            newPar.appendChild(node);
            let parent = document.querySelector("#div1");
            let oldPar = document.querySelector("#p1");
            parent.replaceChild(newPar, oldPar);

            Javascript DOM Events
            Javascript can react to HTML DOM events
            To achieve this we have to add an event listener that fires when a user causes any
            event e.g. clicks a button

            element.addEventListener(event, eventHandler)

            This is the element you
            want to capture the
            events on

            This is the event you
            want to capture e.g.
            'click' or 'mouseover'

            This is the name of the
            function you want to call
            when the event is fired

            Javascript DOM Events
            You can add many eventHandlers for the same or different events to the same
            element:

            const element = document.querySelector("button");
            element.addEventListener('click', function1);
            element.addEventListener('click', function2);
            element.addEventListener('keyup', function3);

            Javascript DOM Events
            You can also remove event handlers that have been attached with the
            addEventListener() method:

            element.removeEventListener(event, eventHandler)

            This is the element you
            want to remove the
            eventListener from

            This is the event name
            you want to remove the
            eventListener for

            This is the name of the
            function you have used
            as the eventHandler for
            the eventListener you
            want to remove

            Javascript DOM Events
            const element = document.querySelector("button");
            element.addEventListener('click', function1);
            element.addEventListener('click', function2);
            element.addEventListener('keyup', function3);
            //This removes the second eventListener for 'click'
            element.removeEventListener('click', function2);
--
--
https://cheatography.com/chuck/cheat-sheets/typescript/
            Basic Types
            number
            bool
            string
            any
            Declar­ations
            var x: any
                
            Basic declar­ation
            var x: {a:any; b:any;};
                
            x is an object
            var x: Foo;
                
            x is instance of class Foo
            Parameters
            x:any
                
            Basic parameter
            x:() => string
                
            Function that returns string.
            x:{a:a­ny;­b:any;}
                
            Object that contains a and b
            x:Foo
                
            Object that is a class of Foo
            x?:any
                
            Optional parameter
                    
            Function
            function a(x:bool);
            function a(x:nu­mber);
            function a(x:an­y):­bool{
               return x%2 == 0;
            }

            a(2);
            Basic Class
            class Goose{
               a:n­umber;
               private b:bool;
               con­str­uct­or(x: number, y:bool = true){
                  ­this.a = x;
                  ­this.b = y;
               }
            }

            var x: Goose = new Goose(50);
            Class Inheri­tance
            class Suzy extends Goose{
               con­str­uct­or(­public c: string){
                  ­sup­er(0, true);
               }
            }

            var y: Suzy = new Suzy("f­oo");
            consol­e.l­og(y.c + " | " + y.a);

            var z: Goose = new Suzy("b­ar")
            Interface Example
            interface Foo{
               a(b­:nu­mbe­r):­bool;
            }

            class Bar implements Foo{
               a(b­:nu­mber){
                  ­return false;
               }
            }

            var x:Foo = new Bar();
                    
            Function Explin­ation
            Overload functions with bool and number.

            Create new function that takes a number x and returns a bool.


            Execute function.
            Class Explin­ation
            Create a new class.
            Public attribute.
            Private attribute.
            constr­uctor with attributes x and y
            y is optional and defaulted to true.




            Instan­tiate with x as 50 and use default for y
            Inheri­tance Explin­ation
            New class that extends Goose
            constr­uctor. creates a public var c
            calls inherited constr­uctor.



            New instance of the class.
            Accessing public attribute c and a.

            Making a new Goose using class Suzy.
            Interface Explin­ation
            Create a new Interface
               Which much have function a


            Create a new class that implement Foo
               Imp­lement everything in Foo




            Create a new instance of type Foo
https://hackr.io/blog/typescript-cheat-sheet  #React Typescript
            Setting up TypeScript

            You’ll need the following tools to install TypeScript:

                Node.js: the environment where you’ll run the TypeScript compiler – no technical knowledge needed! 
                TypeScript compiler: module that converts TypeScript code into JavaScript.
                Visual Studio Code or VS code: code editor to write TypeScript code. VS Code is preferred over other options because it allows you to use the Live Server extension to speed up the development process. 

            Let’s get started:

            1.  Install Node.js’s latest version of Node.js. Complete the installation process. You can verify it by executing the “node -v” command on your terminal. 

            2.  After that, execute the following command: 

            npm install -g TypeScript

            3.  Check the installed version using the following command:

            tsc --v

            4.  Add the following path to the PATH variable. 

             “C:\Users\<user>\AppData\Roaming\npm”

            Note: for this cheat sheet, we are using Version 4.0.2. 

            5.  Install the “ts-node” module globally using the following command:

            npm install -g ts-node

            6.  Install VS Code and download the latest version as per your required platform. After the installation process finishes, launch the VS Code. 

            7.  To install the live Server extension, go to the Extensions tab, search for liver Server and click the install button. 

            All set up? Now, let’s get into coding. 
            Basic TypeScript Example

            Here’s how we can create a basic TypeScript example. 

            1.  Create a folder to store the code, named “helloworld.”

            2.  Now, to write code, open the folder in the VS Code editor. After that, create a TypeScript file named “app.ts.” The file app.ts will have the following code.

            let message: string = 'Hello, User!';

            console.log(message);

            3.  Launch the terminal from the VS Code using the keyboard shortcut “Ctrl+”` or go to the terminal tab on the VS Code and select “new terminal:”

            4.  Now, compile the “app.ts” file using the following command on the terminal: 

            tsc app.ts

            5.  The “app.js” file has been created and is listed below the helloworld folder. Execute the app.js file by using the belo command:

            node app.js

            Here's your basic TypeScript example. Now, let’s look at how to run a TypeScript program in a web browser!
            Running TypeScript program in a web browser.

            1.  Create the index.html file and include the app.js file:

            <!DOCTYPE html>

            <html lang="en">

            <head>

            <meta charset="UTF-8">

            <meta name="viewport" content="width=device-width, initial-scale=1.0">

            <title>TypeScript: Hello User!</title>

            </head>

            <body>

            <script src="app.js"></script>

            </body>

            </html>

            2.  Change the app.ts code:

            let message: string = 'Hello user!';

            // create a new heading 1 element

            let heading = document.createElement('h1');

            heading.textContent = message;

            // add the heading the document

            document.body.appendChild(heading);

            3.  Compile the app.ts file, using the following code:

            tsc app.ts

            4.  Right-click the index.html code and open with Live server:

            5.  The following will be the output.

            Understanding TypeScript - 2023 Edition
            TypeScript Cheat Sheet
            1. Basic Types 

            Type helps you refer to the different properties and functions of a value. The value refers to anything you can assign to a variable, such as a number, string, array, object, and function. For example, “Sam,” specifies the value is a string type and thus will have the properties of a string.

            Suppose, the “Sam” value has a property called length that will return the number of characters present in the value. 

            console.log(“Sam”.length); // 5

            Code language: JavaScript (javascript)

            In addition to characters, it can also have many methods like match(), indexOf(), and toLocaleUpperCase(). 

            For example:

            console.log(‘Sam’.toLocaleUpperCase()); // SAM

            Code language: JavaScript (javascript)

            So, a type is a label describing a value’s different properties and methods, and each value has a type. There are two different types of TypeScript type:

                Primitive types: string, number, boolean, null, undefined, symbol.
                Object types: functions, arrays, classes, etc.

            Type Annotations in TypeScript

            Annotations in TypeScript specify the types for various identifiers explicitly. These identifiers include variables, functions, objects, etc. 

            Syntax: 

            :Type 

            Use it after the identifier name.

            Once you annotate an identifier with a type, you can use it only with that type. If you use that identifier as a different type, the TypeScript compiler will display an error.
            Variables and Constants 

            You can use the following syntax to specify the annotation type for variables and constants.

            let variableName: type;

            let variableName: type = value;

            const constantName: type = value;

            The following example specifies the number annotation for a variable:

            let counter: number;

            Code language: JavaScript (javascript)

            Keep in mind you can only assign a number to the counter variable:

            counter = 1;

            If you try to assign a string to the counter variable, you might encounter the following error:

            let counter: number;

            counter = 'Hello'; // compile error

            You can use the following syntax for both types to annotate and initialize the variable:

            let counter: number = 1;

            Arrays 

            You can annotate the array type like the variables and constants and add square brackets as a suffix. 

            :type[]

            let arrayName: type[];

            Code language: JavaScript (javascript)

            This next example helps you declare an array of strings:

            let names: string[] = ['Jolly', 'Jam', 'Pam', 'Dam', 'Sam'];

            Objects 

            Use annotation to define the type of an object. 

            let person: {

            name: string;

            age: number

            };

            person = {

            name: 'John',

            age: 25

            }; // valid

            Here, we have creates an object ‘person’ with two properties: name (String) and age (Number)
            Function Arguments & Return Types

            Here we shall discuss annotations with function arguments and return types:

            let greeting : (name: string) => string;

            For the return type, assign a function that only accepts and return to the specified variable.

            greeting = function (name: string) {

            return `Hi ${name}`;

            };

            In the following code, the function we assigned to ‘greeting’ does not match the function type. Hence, it results in an error. 

            greeting = function () {

            console.log('Hello');

            };

            TypeScript Number

            To declare a variable with a floating-point value, you can use the following syntax:

            let price: number;

            You can also initialize the variable to a number:

            let price = 9.95;

            Like any other language, TypeScript also supports the number literals for decimal, hexadecimal, binary, and octal literals.
            Decimal Numbers

            let counter: number = 0;

            let x: number = 150, 

            y: number = 240;

            Binary Numbers

            let bin = 0b100;

            let anotherBin: number = 0B010;

            Use 0 or 1 after 0b or 0B must be 0 or 1.
            Hexadecimal Numbers

            They begin with a zero, followed by a lowercase or uppercase letter X. (0x or 0X). The digits following the 0x should fall in the range (0123456789ABCDEF). 

            For example:

            let hexadecimal: number = 0XA;

            Code language: JavaScript (javascript)

            Big Integers

            With big integers, you can represent whole numbers larger than 253. You must specify the “n” character at the end of the Big integer literal. 

            For example:

            let big: bigint = 9007199254740991n;

            TypeScript String

            We can leverage the double quotes (") or single quotes (') to represent string literals. 

            let firstName: string = 'Linda';

            let title: string = "Web Developer";

            Code language: JavaScript (javascript)

            To represent characters, TypeScript employs the backtick ('). Leveraging the template strings, we can create multi-line strings. 

            The following example shows how to use the backtick (') to create a multi-line string.

            let description = `Welcome to Hackr.io

            Get tutorials you need 

            and master`;

            Code language: JavaScript (javascript)

            To incorporate variables into Strings, you need to leverage String. 

            For example:

            let firstName: string = `Sam`;

            let title: string = `Content Writer`;

            let profile: string = `I'm ${firstName}. 

            I'm a ${title}`;

            console.log(profile);

            TypeScript Boolean

            The TypeScript boolean, a primitive type, allows you to use two values: true and false. 

            For example:

            let pending: boolean;

            pending = true;

            // after a while

            // ..

            pending = false;

            Code language: JavaScript (javascript)

            The Boolean type has the letter B in uppercase, making it different from the boolean type. Our recommendation? Avoid using the Boolean type.

            For example:

            let pending: boolean;

            pending = true;

            // after a while

            // ..

            pending = false;

            Code language: JavaScript (javascript)

            JavaScript comes with a Boolean type which we call non-primitive boxed objects. The Boolean type is different from the boolean type, as the former one has the capital B. 
            TypeScript Object Type

            The TypeScript object type represents all primitive type values. 

            Primitive types in TypeScript:

                number
                bigint
                string
                boolean
                null
                undefined
                symbol

            The following example specifies how to declare a variable that holds an object. 

            For example:

            let employee: object;

            employee = {

            firstName: 'Sam',

            lastName: 'Will',

            age: 25,

            jobTitle: 'Writer'

            };

            console.log(employee);

            If you want to reassign a primitive value to the employee object, you will receive an error:

            employee = "Jimmy";

            Code language: JavaScript (javascript)

            Here ‘employee’ is an object type having a fixed set of properties. You may encounter an error if you access a property out of the scope of “employee.”

            console.log(employee.hireDate);

            Code language: CSS (css)

            The following syntax lets you define the employee object properties explicitly: 

            let employee: {

            firstName: string;

            lastName: string;

            age: number;

            jobTitle: string;

            };

            Assign the employee object to a literal object:

            employee = {

            firstName: ‘Jimmy’,

            lastName: ‘Will’,

            age: 30,

            jobTitle: 'Writer'

            };

            Or you can use the combined syntax in the same statement:

            let employee: {

            firstName: string;

            lastName: string;

            age: number;

            jobTitle: string;

            } = {

            firstName: ‘Jimmy’,

            lastName: ‘Will’,

            age: 30,

            jobTitle: 'Writer'

            };

            Object vs. object

            TypeScript supports another type called Object having the letter O in uppercase. 

            We know that the object type indicates all non-primitive values. Meanwhile, the Object type represents the functionality of all objects.
            The Empty Type {}

            Similar to the object type, TypeScript has an empty type specified by the empty type {}. It describes an object that has no properties. If you try to access any property using such an object, you will receive the following compile-time error:

            let vacant: {};

            vacant.firstName = 'John';

            But, you can easily access all the properties and methods declared on the Object type. For example:

            let vacant: {} = {};

            console.log(vacant.toString());

            TypeScript Array Type

            A TypeScript array is referred to as an ordered list of data. 

            The following syntax declares an array with values of a specific type:

            let arrayName: type[];

            For example, you can use this syntax to declare an array of strings:

            let skills: string[];

            Also, you can add more than one string value to the above array:

            skills[0] = "Game";

            skills[1] = "Study";

            Or you can use the push() method to enter new values to the existing array:

            skills.push('Science');

            Define an array within one line:

            let skills = ['Games','Study','Dance'];

            Once you define an array of a specific type, you cannot add any incompatible values to the array, or you’ll receive an error message:

            skills.push(100);

            Now, let us extract the first element of our array:

            let skill = skills[0];

            console.log(typeof(skill));

            Type inference takes place. 

            We have extracted the first element of the ‘skill’ array. Later, we assigned it to the variable ‘skill’. 
            Storing Values of Mixed Types

            Let us now discuss how to add values of different types to an array.

            let scores = ['Programming', 5, 'Software Design', 4];

            The above array is array of mixed types, i.e., string | number:

            let scores : (string | number)[];

            scores = ['Programming', 5, 'Software Design', 4];

             
            TypeScript Tuple

            A tuple works like an array but with some additional considerations. A tuple has a fixed number of elements, none of which have to be the same. For example, you can use a tuple to specify a value as a pair of a string and a number:

            let skill: [string, number];

            skill = [‘Sam’, 25];

            Always take care of the order in which you have your values stored. If you mistakenly change the order, you will get an error:

            let skill: [string, number];

            skill = [5, 'Programming'];

            TypeScript Enum

            An enum (enumerated type) refers to a group of named constant values. The enum keyword is used to define enum as a prefix to the enum name. Then, define constant values for the enum.

            Here’s the syntax:

            enum name {constant1, constant2, ...};

            Here, the constant1, constant2, etc., are the enum members. 

            Example:

            enum Month { Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep, Oct,Nov,Dec};

            In this example, the enum name is Month and constant values are Jan, Feb, Mar, and so on. 

            Now, we will declare a function using the Month enum as the parameter.

            function WhatMonth(month: Month) {

            let SummerMon: boolean;

            switch (month) {

            case Month.Jun:

            case Month.Jul:

            case Month.Aug:

            SummerMon = true;

            break;

            default:

            SummerMon = false;

            break;

            }

            return SummerMon;

            }

            console.log(SummerMon(Month.Jun)); 

            TypeScript Any Type

            In some scenarios, you may need to store a value in a variable without knowing its type. A third party API or user input may provide that value. In that case, type checking may be required, and the value may pass through the compile-time check. 

            To do so, we use the “any” type. 

            The “any” type let you assign a value to a variable with any type.

            // json may come from a third-party API

            const json = `{"latitude": 10.11, "longitude":12.12}`;

            // parse JSON to find location

            const currentLocation = JSON.parse(json);

            console.log(currentLocation);

            In this example, the JSON.parse() function returns an object to which we assign the currentLocation variable. However, when you use the currentLocation to access object properties, TypeScript will not perform any check:

            console.log(currentLocation.x);

            There will be no issue while compiling.

            If you declare a variable without mentioning a type, TypeScript assumes it as any type, known as type inference. It means that TypeScript will guess the variable type. 
            TypeScript Void Type

            The void type specifies that there is no specific type. It is somehow opposite to “any” type. 

            For example:

            function log(message): void {

            console.log(message);

            }

            When any function does not require you to return a value, use the void type. It will improve the code’s clarity and ensure type-safeness. Also, there is no need to navigate the entire function body to check if it returns anything. 

            Suppose you use the void type for a variable and assign “undefined.” Such a void type is of no use. For example:

            let useless: void = undefined;

            useless = 1; // error

            If the --strictNullChecks flag is not specified, you can assign the useless to null:

            useless = null; 

            TypeScript Never Type

            The never type means containing no values, thus you cannot assign any value to a variable with a never type. When the return type of a function throws errors, use the never type. 

            For example:

            function raiseError(message: string): never {

            throw new Error(message);

            }

            In this next example, the return type of the never type.

            function reject() { 

            return raiseError('Rejected');

            }

            A function with an expression containing indefinite loop has the never type. 

            For example:

            let loop = function forever() {

            while (true) {

            console.log(‘Bye’);

            }

            }

            TypeScript Union Type

            Many times, you may encounter a function that may either require a number or string type parameter. 

            For example:

            function add(x: any, y: any) {

            if (typeof x === 'number' && typeof y === 'number') {

            return x+y;

            }

            if (typeof x === 'string' && typeof y === 'string') {

            return x.concat(y);

            }

            throw new Error('Parameters must be numbers or strings');

            }

            We have not specified the type of parameters in the function ‘add()’. Therefore, if the parameters are numbers, add() performs addition. If they are strings, add() concatenate those strings.

            But, if the parameters are not numbers as well as string, add() will throw an error. 

            add(true, false);

            This is where the TypeScript union type comes into the picture. With Union type, you can merge various types into one.

            For example, the following variable is of type number or string:

            let result: number | string;

            result = 20; // OK

            result = 'Bye'; // also OK

            result = true; // a boolean value, not OK

            A union type describes a value that can be one of several types.
            TypeScript Type Aliases

            Type aliases let you create a new name for an existing type. However, the existing type should be valid. 

            type alias = existingType;

            Let’s examine an example of type alias below. 

            Here, we assign the type String to chars. 

            type chars = string;

            let message: chars; // same as string type

            TypeScript String Literal Types

            With the help of string literal types, you can define a type that accepts only one specified string literal. 

            In the below code, we have defined a string literal type that accepts a literal string “click:”

            let click: 'click';

            Here, the click is a string literal type that accepts only the string literal “click.”

            If you assign ‘click’ to the click, it will be valid:

            click = 'click'; // valid

            If you assign another string literal ‘dbclick’ to the click, it gives a compile-time error:

            click = 'dblclick'; 

            When you wish to restrict a possible string value in a variable, the string literal type comes in handy. 
            TypeScript Type Inference

            Type inference describes where and how TypeScript infers types without explicitly annotating them. Geneally, we use annotations to explicitly define a type of a variable. 

            For example:

            let counter: number;

            From the above code, TypeScript considers the counter type as a number. 

            For example:

            let counter = 0;

            Or 

            let counter: number = 0;

            Also, whenever you set the value of a parameter of any function, TypeScript considers its type as the default value type.

            For example:

            function setCounter(max=100) {

            // ...

            }

            In this example, TypeScript infers the type max parameter type to be a number.
            2. Control Flow Statements 
            If..else

            An if statement executes a piece of code based on a condition. In the following syntax, the body inside ‘if’ executes only if the given condition evaluates to true:

            if(condition) {

            // if-statement

            }

            Example:

            const max = 20;

            let counter = 0;

            if (counter < max) {

            counter++;

            }

            console.log(counter); 

            In the above code, the value of counter increases only if its value is less than max. 
            TypeScript if…else statement

            If the condition in ‘if’ is false, the control moves to executing the body inside ‘else’. 

            if(condition) {

            // if-statements

            } else {

            // else statements;

            }

            For example:

            const max = 20;

            let counter = 10;

            if (counter < max) {

            counter++;

            } else {

            counter = 1;

            }

            console.log(counter);

            Ternary Operator ?:

            The ternary operator (?:) is used to make the code shorter. It is a substitute for if-else In the case of simple conditions. 

            For example:

            const max = 100;

            let counter = 100;

            counter < max ? counter++ : counter = 1;

            console.log(counter);

            TypeScript if…else if…else statement

            The if...else if...else statement is ideal when you want to check multiple conditions. 

            Example:

            let dis: number;

            let n = 11;

            if (n > 0 && n <= 5) {

            dis = 5; // 5% dis

            } else if (n > 5 && n <= 10) {

            dis = 10; // 10% dis 

            } else {

            dis = 15; // 15%

            }

            console.log(`You got ${dis}% dis. `);

            TypeScript Switch Case

            The switch case is useful when you want to check the value of expression against multiple values and execute code on the match found. 

            Syntax: 

            switch ( expression ) {

            case value1:

            // statement 1

            break;

            case value2:

            // statement 2

            break;

            case valueN:

            // statement N

            break;

            default: 

            // 

            break;

            }

            Example:

            let tId = 'btnDelete';

            switch (tId) {

            case 'btnUpdate':

            console.log('Update');

            break;

            case 'btnDelete':

            console.log('Delete');

            break;

            case 'btnNew':

            console.log('New');

            break;

            }

            TypeScript For

            Below is the syntax for using the “for” loop statements.

            for(initialization; condition; expression) {

            // statement

            }

            In the for loop, there are three optional expressions separated by semicolons (;) and enclosed in parentheses.

                Initialization
                Condition
                Expression

            All these three expressions are optional, meaning you can use the for loop statement:

            for(;;) {

            // do something

            }

            For example:

            for (let i = 0; i < 10; i++) {

            console.log(i);

            }

            TypeScript While

            Using the while statement, you can create a loop that will execute a block of code as long as a condition states true.

            Below is the syntax for the while loop.

            while(condition) {

            // do something

            }

            To break the loop immaturely based on another condition, you need to use the break statement:

            while(condition) {

            // do something

            // ...

            if(anotherCondition) 

            break;

            }

            For example:

            let counter = 0;

            while (counter < 5) {

            console.log(counter);

            counter++;

            }

            TypeScript Do..While

            The following shows the syntax of the do...while statement.

            do {

            // do something

            } while(condition);

            This runs the code block till the condition evaluates to false. This statement always executes its loop body at least once, as the condition will be executed at the end of the code.

            For example:

            let i = 0;

            do {

            console.log(i);

            i++

            } while (i < 10);

            TypeScript Break

            The break statement is used to terminate any loop and pass the program flow to the next immediate statement. The for, while, and do...while statements support the use of the break statement. 

            For example:

            let products = [

            { name: ‘car’, price: 70000 },

            { name: ‘scooter’, price: 9000 },

            { name: ‘cycle’, price: 1200 }

            ];

            for (var i = 0; i < products.length; i++) {

            if (products[i].price == 9000)

            break;

            }

            // show the products

            console.log(products[i]);

            TypeScript Continue

            This statement helps you control loops, such as a for loop, a while loop, or a do...while loop. It skips to the end of the loop and continues the next iteration.

            For example, you can apply the continue statement in the for loop:

            for (let index = 0; index < 10; index++) {




            // if index is odd, skip it

            if (index % 2)

            continue;

            // the following code will be skipped for odd numbers

            console.log(index);

            }

            3. Functions 

            A TypeScript function is any block of code that executes a specific task. To declare a function, use the keyword “function.”

            function name(parameter: type, parameter:type,...): returnType {

            // do something

            }

            You can also use type annotations in the function parameters return value of a function. 

            For example:

            function add(a: number, b: number): number {

            return a + b;

            }

            In the above example, the add() function will take two parameters with the number type. 

            Whenever you call the add() function in your program, the TypeScript compiler verifies each argument whether they are numbers or not. If you pass any other type of clothes numbers, it throws an error:

            let sum = add('10', '20');

            The return type is indicated by the :number that follows the parentheses. In this scenario, the add() function will return a value of the number type. The compiler will examine each return statement to ensure the return value is compatible with the function's return type if it exists. 

            You can specify void type if a function returns null. The function doesn't return any value, as indicated by the keyword void.

            For example:

            function echo(message: string): void {

            console.log(message.toUpperCase());

            }

            In the below example, the TypeScript compiler tries to infer the return type of the add() function to the number type, which is expected.

            function add(a: number, b: number) {

            return a + b;

            }

            Optional Parameters

            Unlike JavaScript, in TypeScript, every function call will be examined by the compiler, and if the number of arguments differs from the number of parameters listed in the function, an error will be produced. Additionally, if the types of the arguments and the types of the function parameters are incompatible, an error will be returned. 

            You must annotate optional parameters to instruct the compiler not to produce an error whenever you miss any arguments because the compiler will carefully inspect the passing arguments. Use the? symbol after the parameter name to make a function parameter optional. 

            For example:

            function multiply(a: number, b: number, c?: number): number {

            if (typeof c !== 'undefined') {

            return a * b * c;

            }

            return a * b;

            }

            You need to use the ? after the c parameter. Then, you need to check if the argument is passed to the function by using the expression typeof c !== 'undefined'.

            The list of required parameters follows the list of the optional parameters. 

            For example, if you make the b parameter optional, and c parameter required, you wil get an error:

            function multiply(a: number, b?: number, c: number): number {

            if (typeof c !== 'undefined') {

            return a * b * c;

            }

            return a * b;

            }

            Default Parameters 

            JavaScript has supported the default parameters since ES2015 (or ES6) with the following syntax:

            function name(parameter1=defaultValue1,...) {

            // do something

            }

            While calling the function, it takes the default initialized values if you don’t pass any arguments or pass undefined arguments. 

            For example:

            function applyDiscount(price, discount = 0.05) {

            return price * (1 - discount);

            }

            console.log(applyDiscount(230)); 

            Here, the discount parameter is the default parameter. The applyDiscount() function uses a default value of 0.05 if you don’t pass the discount argument while calling it. 

            You will get an error if you pass the default parameters in function type definitions. 

            let promotion: (price: number, discount: number = 0.05) => number.

             
            Function Overloading

            With function overloading, you can create the relationship between a function’s parameter types and result types. 

            For example:

            function addNumbers(a: number, b: number): number {

            return a + b;

            }

            function addStrings(a: string, b: string): string {

            return a + b;

            }

            The first function returns the sum of two numbers, whereas the later function concatenates two strings. 
            4. Class 
            TypeScript Class 

            A constructor function and prototype inheritance lets you create a “class.”

            For example, we have created a Person class with three properties using the constructor function:

            function Person( firstName, lastName) {

            this.firstName = firstName;

            this.lastName = lastName;

            }

            To access a person’s details, define a prototype method:

            Person.prototype.getFullName = function () {

            return `${this.firstName} ${this.lastName}`;

            }

            Then, create an object for the ‘person’ class and use it. 

            let person = new Person('Jimmy','Dwell');

            console.log(person.getFullName());

            But, in ES6, you can define a class for creating constructor function and prototypal inheritance:

            class Person {

            firstName;

            lastName;

            constructor( firstName, lastName) {

            this.firstName = firstName;

            this.lastName = lastName;

            }

            }

            Here, we have defined the constructor inside the class. Now, let us add the getFullName() method to the same class

            class Person {

            firstName;

            lastName;

            constructor(firstName, lastName) {

            this.firstName = firstName;

            this.lastName = lastName;

            }

            getFullName() {

            return `${this.firstName} ${this.lastName}`;

            }

            }

            The Person constructor function functions the same as the ‘Person’ class:

            let person = new Person('Jimmy','Dwell');

            console.log(person.getFullName());

            The following code adds type annotations to the class’s properties and methods:

            class Person {

            firstName: string;

            lastName: string;

            constructor( firstName: string, lastName: string) {

            this.firstName = firstName;

            this.lastName = lastName;

            }

            getFullName(): string {

            return `${this.firstName} ${this.lastName}`;

            }

            }

            The TypeScript compiler will carry out the type checks after annotating the types to properties, constructors, and methods.
            TypeScript Access Modifiers 

            The visibility of a class's properties and methods is determined by access modifiers. Private, protected, and public are the three categories. The access is logically controlled by TypeScript during compilation rather than runtime.
            The Private Modifier

            When you use the private modifier for any property or method in a class, you can access them within the same class but not outside the class. 

            For example:

            class Person {

            private firstName: string;

            private lastName: string;

            // ...

            }

            The Public Modifier

            It is the default access modifier for all methods and properties. It lets you access properties and methods of a class from any location in a program. 

            Example:

            class Person {

            // ...

            public getFullName(): string {

            return `${this.firstName} ${this.lastName}`; 

            }

            // ...

            }

            The Protected Modifier

            When you define the properties and methods as protected, they are accessible only within the same class and its subclasses. If you try to access protected properties or methods from other locations, you get an error. 

            class Person {

            protected ssn: string;




            // other code

            }

            TypeScript Readonly

            TypeScript supports the readonly modifier, which marks the properties of a class immutable. You can declare the readonly property in the property declaration or in the constructor of the same class.

            For example:

            class Person {

            readonly birthDate: Date;

            constructor(birthDate: Date) {

            this.birthDate = birthDate;

            }

            }

            In this example, we have initialised the birthdate property as a readonly property in the Person class constructor.

            If you reassign the birthDate property, you will get an error:

            let person = new Person(new Date(1993, 11, 22));

            person.birthDate = new Date(1994, 02, 21); 

            Getters and Setters

            Consider the following code, where the user inputs the age of a person.

            class Person {

            public age: number;

            }

            person.age = inputAge;

            The inputAge can take any valid number. However, we will apply a condition for age:

            if( inputAge > 0 && inputAge < 50 ) {

            person.age = inputAge;

            }

            It is pretty daunting to apply the checks everywhere in the code. This is where getters and setters come into the picture. They allow you to control the access to the properties of a class.

            class Person {

            private _age: number;

            public get age() {

            return this._age;

            }

            public set age(theAge: number) {

            if (theAge <= 0 || theAge >= 50) {

            throw new Error('The age is invalid');

            }

            this._age = theAge;

            }

            public getFullName(): string {

            return `${this._age}`;

            }

            }

            TypeScript Inheritance

            A class can use the properties of its parent class through inheritance. The child class must inherit the parent class in order to do that. The term "child class" refers to the class that will inherit another class, whereas "parent class" refers to the other class. 

            For example:

            class Person {

            constructor(private firstName: string, private lastName: string) {

            this.firstName = firstName;

            this.lastName = lastName;

            }

            getFullName(): string {

            return `${this.firstName} ${this.lastName}`;

            }

            describe(): string {

            return `This is ${this.firstName} ${this.lastName}.`;

            }

            }

            If you want a child class to inherit the parent class, you need to use the extends keyword as any other programming language:

            class Employee extends Person {

            //..code

            }

            Constructor

            In the previous section’s example, you can see that the person class comes with a constructor initializing the properties, such as firstName and lastName properties. 

            After that, initialize these properties in the constructor of the Employee class. This class calls the constructor of the person class to extend it. 

            Use super() to access the parent class’s constructor.

            class Employee extends Person {

            constructor(

            firstName: string,

            lastName: string,

            ) {




            // calling person’s class constructor

            super(firstName, lastName);

            }

            }

            The below code will create the instance for the employee class:

            let employee = new Employee('Jimmy','Dwell');

            With the instance of the employee class, you can access the persons class methods:

            let employee = new Employee('Jimmy', 'Dwell');

            console.log(employee.getFullName());

            console.log(employee.describe());

            Static Properties

            Static properties are shared among all the classes, requiring you to use a static keyword. Also, if you want to access the static property, you must mention the classname or Propertyname:

            class Employee {

            static headcount: number = 0;

            constructor(

            private firstName: string,

            private lastName: string,

            ) {

            Employee.headcount++;

            }

            }

            In the above example, we have mentioned the headcount as static initialized to zero. Whenever the object is created the headcount gets increased by one.

            Now, we will create two employee objects:

            let john = new Employee('Jam', 'Dam');

            let jane = new Employee('Sam', 'Gam');

            console.log(Employee.headcount);

            The output will be 2. 

            Static Methods

            Static methods are similar to a static property, as it is also shared across class instances. To specify a static method, you again have to use the static keyword before the method name. 

            For example:

            class Employee {

            private static headcount: number = 0;

            constructor(

            private firstName: string,

            private lastName: string,

            ) {

            Employee.headcount++;

            }

            public static getHeadcount() {

            return Employee.headcount;

            }

            }

            Abstract Class

            The abstract class defines the common behaviors for derived classes to extend. The abstract keyword is used to declare the abstract classes. 

            abstract class Employee {

            //...

            }

            More interestingly, abstract classes contain methods with no implementation. The classes that extend the abstract class contain the implementation of those methods. 

            The following code has ‘Employee’ as abstract class and ‘getSum’ as the abstract method:

            abstract class Employee {

            constructor(private firstName: string, private lastName: string) {

            }

            abstract getSum(): number

            get fullName(): string {

            return `${this.firstName} ${this.lastName}`;

            }

            compensationStatement(): string {

            return `${this.fullName} makes ${this.getSum()} a month.`;

            }

            }

            You cannot create the object of the ‘Employee’ class as it is an abstract class.

            let employee = new Employee('Jimmy','Dwell');

            You will get an error. 

            The Emp class is inheriting the Employee class:

            class Emp extends Employee {

            constructor(firstName: string, lastName: string, private salary: number) {

            super(firstName, lastName);

            }

            getSum(): number {

            return this.salary;

            }

            }

            let jim = new FullTimeEmployee('Jim', 'Dim', 3400);

            console.log(john.compensationStatement());

            5. Interfaces 
            Interfaces 

            If you want to define contracts within your TypeScript code, you can use the interfaces. It lets you use the explicit names for type checking. For example:

            function getFullName(person: {

            firstName: string;

            lastName: string

            }) {

            return `${person.firstName} ${person.lastName}`;

            }

            let person = {

            firstName: 'Jam',

            lastName: 'Dam'

            };

            console.log(getFullName(person));

            The compiler will check the passed arguments for the getFullName function. As mentioned, the passed arguments should be string. 

            If any of them don’t match, it results in an error. But, as you see due to type annotation, the code has become complex and difficult to read. Thus, we use interfaces to overcome this readability issue.

            We have created an interface named ‘Person’ with two properties:

            interface Person {

            firstName: string;

            lastName: string;

            }

            You can use the above interface to define other classes or methods. 
            Optional Properties

            With interface, you can also have optional properties. An optional property is specified by the question mark (?) at the end of the property name within the declaration part:

            interface Person {

            firstName: string;

            middleName?: string;

            lastName: string;

            }

            In the above example, the middle name is declared as the optional parameter. If the user does not pass the argument for this variable, there will be no compilation error. 

            function getFullName(person: Person) {

            if (person.middleName) {

            return `${person.firstName} ${person.middleName} ${person.lastName}`;

            }

            return `${person.firstName} ${person.lastName}`;

            }

            Interfaces Extending One Interface

            For this concept, we are using an interface called person containing two methods called male()and female():

            interface Person {

            male(g: string): boolean

            female(g: string): boolean

            }

            Suppose this interface has already been implemented by several classes. Perhaps we want to add a method girl to the ‘Person’ interface.

            girl(g: string): void

            But, it will break the current code. To avoid that, we will create a new interface and extend it to the ‘Person’ interface:

            interface family extends Person {

            girl(g: string): boolean

            }

            We use the extend keyword to extend one interface to another:

            interface A {

            a(): void

            }

            interface B extends A {

            b(): void

            }

            6. Advanced Types
            TypeScript Intersection Types

            If you want to create a new type by combining several existing types, you can use intersection types in TypeScript. The newly created type will have the features of the existing one. To combine the types, you need to use the & operator:

            type typeAB = typeA & typeB;

            The new typeAB will have the features of both A and B. Also, the union type (|) assures the variable can have a value of either type A or B.

            let varName = typeA | typeB; // union type

            To explain this concept, we use three interfaces: BusinessPartner, Identity, and Contact.

            interface BusinessPartner {

            name: string;

            credit: number;

            }

            interface Identity {

            id: number;

            name: string;

            }

            interface Contact {

            email: string;

            phone: string;

            }

            Below are the two different intersection types:

            type Employee = Identity & Contact; //containing the properties of both Identity and Contact type. For example:

            let e: Employee = {

            id: 10,

            name: 'ping pong',

            email: 'ping.pong@example.com',

            phone: '(408)-897-5684'

            };

            type Customer = BusinessPartner & Contact; // containing all the properties of the BusinessPartner and Contact type. For example:

            type Customer = BusinessPartner & Contact;

            let c: Customer = {

            name: 'ABC Inc.',

            credit: 10000,

            email:’hello@abcinc.com',

            phone: '(408)-897-5735'

            };

            TypeScript Type Guard

            If you want to narrow down the types of variables within a conditional block, you can use Type guards. 
            Typeof

            type alphanumeric = string | number;

            function add(a: alphanumeric, b: alphanumeric) {

            if (typeof a === 'number' && typeof b === 'number') {

            return a + b;

            }

            if (typeof a === 'string' && typeof b === 'string') {

            return a.concat(b);

            }

            throw new Error('Invalid arguments. Both arguments must be either numbers or strings.');

            }

            The above function checks if both the argument types are numbers and are using the typeof operator. It computes the sum of both the arguments if they use typeof. 

            The same is for the string type argument. However, it will concatenate two arguments rather than performing the sum.

            If the arguments are neither numbers nor strings, you will get an error. 
            7. Generics 

            To create reusable and generalised forms of functions, classes, and interfaces, TypeScript offers generics. 

            Below is the example of a generic function returning the random element from the R type array:

            function getRandomElement<R>(items: R[]): R {

            let randomIndex = Math.floor(Math.random() * items.length);

            return items[randomIndex];

            }

            The above function will use the R type array that captures the type provided while calling the function. Also, the function has a return type of R. The getRandomElement() function works as a generic as it can work with any data type. You can use any letter rather than R.
            Calling a Generic Function

            The getRandomElement() can also work with arrays:

            let numbers = [1, 5, 7, 4, 2, 9];

            let randomEle = getRandomElement<number>(numbers); 

            console.log(randomEle);

            The above code passes the numbers to the getRandomElement() function as the R type. 

            Here, we are using the type inference for the argument, so the TypeScript compiler can set the value of R automatically depending on the type of argument you will pass.

            let numbers = [1, 5, 7, 4, 2, 9];

            let randomEle = getRandomElement(numbers); 

            console.log(randomEle);

            Here, we have not specified the return type of the function, it will be done by the compiler by looking at the arguments passed. The function getRandomElement() is now type-safe as well. However, if you assign a string variable, an error will occur.

            let numbers = [1, 5, 7, 4, 2, 9];

            let returnElem: string;

            returnElem = getRandomElement(numbers);

            TypeScript Generic Classes

            A generic class consists of a generic type parameter list. The class name follows the parameter list enclosed within the angle brackets <>.

            class className<T>{

            //... 

            }

            It is possible to have multiple generic types in a parameter list. 

            For example:

            class className<K,T>{

            //...

            }

            TypeScript Generic Interface

            You can also create a generic interface just like we did with the classes. A generic interface consists of a generic type parameter list. The interface name follows the parameter list enclosed within the angle brackets <>.

            interface interfaceName<R> {

            // ...

            }

            All the members of the interface can see the type parameter R. There can be more types in the type parameter list. 

            For example:

            interface interfaceName<U,V> {

            // ...

            }

            8. TypeScript Modules
            Creating Modules

            You can create modules in TypeScript. Below we create Check.ts with an declared interface Check:

            export interface Check {

            isValid(s: string): boolean

            }

            We have used the export keyword before the interface so other modules can use this interface. Otherwise, the check interface will be private to the Check.ts module.
            Export Statements

            To export declaration from a module, you can use the export statement:

            interface Check {

            isValid(s: string): boolean

            }

            export { Check };

            You can also rename the declarations for the module:

            interface Check {

            isValid(s: string): boolean

            }

            export { Check as StringCheck };

            Another module can use the Check interface as the StringCheck interface.
            Importing a New Module

            Use the import statement within your code to use a new module. In the following code, we have created a new module CheckSum using the Check.ts module:

            import { Check } from './Check';

            class CheckSum implements Check {

            isValid(s: string): boolean {

            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

            return emailRegex.test(s);

            }

            }

            export { CheckSum };

            While importing the module, you can rename it:

            import { Check as StringCheck } from './Check';

            Inside the CheckSum module, you use the Check interface as the StringCheck interface instead:

            import { Check as StringCheck } from './Check';

            class CheckSum implements StringCheck {

            isValid(s: string): boolean {

            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

            return emailRegex.test(s);

            }

            }

            export { CheckSum };

            Importing Everything from a Module

            To import everything from a module, you can use the following syntax:

            import * from 'module_name';

            Re-Exports

            Below, we are creating a new module called CheckSal.ts using the Check.ts module:

            import { Check } from './Check';

            class CheckSal implements Check {

            isValid(s: string): boolean {

            const numberRegexp = /^[0-9]+$/;

            return s.length === 5 && numberRegexp.test(s);

            }

            }

            export { CheckSal };

            TypeScript React Cheatsheet

            In this react TypeScript cheatsheet we will learn react TypeScript types. To import React, use the following commands:

            import * as React from "react";

            import * as ReactDOM from "react-dom";

            Function Components

            You can use them as the normal functions that take a props argument and return a JSX element:

            // Declaring type of props

            type AppProps = {

            message: string;

            }; 

            // Declare a Function Component; return type is inferred.

            const App = ({ message }: AppProps) => <div>{message}</div>;

            // Annotate the return type 

            const App = ({ message }: AppProps): JSX.Element => <div>{message}</div>;

            // Inline the type declaration

            const App = ({ message }: { message: string }) => <div>{message}</div>;

            Conclusion

            In this React TypeScript cheat sheet, we have covered every aspect with simple syntax and examples with running outputs from VS Code editor. 

            TypeScript is a simple and interactive language like any other object-oriented programming language that allows you to work with objects, classes, modules, interfaces, inheritance, and more. You can keep this TypeScript cheat sheet handy to prepare for your upcoming interview. 

            Interested in learning TypeScript with React?
https://react-typescript-cheatsheet.netlify.app/docs/basic/setup/

~/Empire/Doks/Comp/lang/webdev/js/ts/cheatsh-qref/notes4pros-ts.cheatsh.pdf
~/Empire/Doks/Comp/lang/webdev/js/ts/cheatsh-qref/ts.cheatsh.pdf
~/Empire/Doks/Comp/lang/webdev/js/ts/notes4pros-ts_2017.pdf


(+ev:   Squirr(!)   eloq(**), learning, jsdefguid, jssam )
FREEC-JSALGOS PRE 2022 [****]  [=clean for indent-check +Hoist to Top]
            https://www.w3schools.com/jsref/jsref_splice.asp
                https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
                https://devdocs.io/javascript/
                https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference
                https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions
                https://www.w3schools.com/js/js_object_methods.asp
            .
                https://www.freecodecamp.org/learn/
                https://www.freecodecamp.org/learn/coding-interview-prep/
                https://www.freecodecamp.org/learn/back-end-development-and-apis/#basic-node-and-express
                https://www.freecodecamp.org/learn/front-end-development-libraries/
                https://www.freecodecamp.org/learn/data-visualization/#data-visualization-with-d3
                https://www.freecodecamp.org/learn/quality-assurance/#quality-assurance-and-testing-with-chai
                https://www.freecodecamp.org/learn/scientific-computing-with-python/
                https://www.freecodecamp.org/learn/data-analysis-with-python/
                https://www.freecodecamp.org/learn/information-security/#information-security-with-helmetjs
                https://www.freecodecamp.org/learn/relational-database/
                https://www.freecodecamp.org/learn/2022/responsive-web-design/
                    https://forum.freecodecamp.org/t/free-code-camp-hotkeys/59467
            +VERY GOOD BASE TIP FOR TESTING(!!!!!)
                eg. testing the countdown function (=for the 'contdown with recursion'-example) ******
                console.log(countdown(5))
                --
                freec02_jsalgodstruct-p309
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-countdown
            While HTML and CSS control the content and styling of a page, JavaScript is used to make it ____
                interactive
                --
                freec02_jsalgodstruct-p__
            tip: if your scripts are blocked by your browser (*)
                disable extensions that modify or block content of pages (=ad- and script-blockers)
                --
                freec02_jsalgodstruct-p__


                ----
            comment your javascript code
                // in-line comment
                  .
                /* multi-line
                     comment */
                (=help communicate the intent of your code)
                --
                freec02_jsalgodstruct-p2
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comment-your-javascript-code
            'data' (in computer science)
                = anything that is meaningful to the computer
                --
                freec02_jsalgodstruct-p5
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-javascript-variables
            the javascript data types
                 undefined
                 null
                boolean
                string
                symbol
                bigint
                number
                object
                  (=all these may be stored in var.s)
                --
                freec02_jsalgodstruct-p5
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-javascript-variables
            Create a Javascript Variable (!)
                var ourName;
                  // can contain numbers, letters, $, _
                --
                freec02_jsalgodstruct-p5
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-javascript-variables
            store a value in a variable
                myVariable = 5;
                           ^
                ('the assignment operator)
                --
                freec02_jsalgodstruct-p8
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator
            'if there are any calculations to the right of the = operator', then ____
                = those are performed before the value is assigned to the variable on the left of the operator
                --
                freec02_jsalgodstruct-p8
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator
            assign the value of one variable to another
                var myVar;
                myVar = 5;
                var myNum;
                myNum = myVar;
                --
                freec02_jsalgodstruct-p_
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/assigning-the-value-of-one-variable-to-another
            initialize and assign variable (at the same time) (!!) (***)
                var myVar = 0;
                --
                freec02_jsalgodstruct-p11
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/initializing-variables-with-the-assignment-operator
            Declare String Variables (**)
                var myName = "your name";
                  (= is called a 'string literal')
                  .
                [string literals are enclosed in " or ']
                --
                freec02_jsalgodstruct-p__
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-string-variables
                ----

                ----
            a declared variable (that has not been assigned a value) has the initial value of ___
                undefined
                --
                freec02_jsalgodstruct-p13
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables
            if you do a mathematical operation on an undefined variable your result will be ___
                NaN  (=Not a Number)
                --
                freec02_jsalgodstruct-p13
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables
            if you concatenate a string with an undefined variable, you will get ___
                a string of undefined
                --
                freec02_jsalgodstruct-p13
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables
            Case sensitivity for JS Variables (*!)
                = All variables and function names are Case Sensitivity
                (eg. capitalization matters(!))
                    [tip: do not use this to construct var.s like 'myvar' and(!) 'myVar']
                --
                freec02_jsalgodstruct-p13
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-case-sensitivity-in-variables
            best practice casing for variable (and function) names (***)
                camelCasing
                --
                freec02_jsalgodstruct-p13
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-case-sensitivity-in-variables
            Tip: An important problem with declaring Variables with the var Keyword (**T)
                = that one can easily overwrite variable declarations
                var camper = "James";
                var camper = "David";
                console.log(camper);
                  .
                (+in larger applications this can be a problem, because accidental overriding of variables will not throw an error)
                --
                freec02_jsalgodstruct-p15
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/explore-differences-between-the-var-and-let-keywords
            Solving the problem (=that accidental overriding of variables declared with 'var' don't throw an error) **(**)
                let camper = "James";
                let camper = "David";
                  .
                eg. with let, a variable can be declared only once(!!)
                  (introduced in ES6)
                + the error can be seen in your browser console
                --
                freec02_jsalgodstruct-p__
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/explore-differences-between-the-var-and-let-keywords
            Declaring a Read-Only Variable (***)
                =using the ES6 const keyword (**)
                  .
                const FAV_PET = "Cats";
                FAV_PET = "Dogs";
                  (=will display an error in the console)
                [+tip: common to name constants in UPPERCASE]
                --
                freec02_jsalgodstruct-p__
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-a-read-only-variable-with-the-const-keyword
            tip: mutable values + and naming
                objects and arrays
                  + name in camelCase
                --
                freec02_jsalgodstruct-p__
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-a-read-only-variable-with-the-const-keyword
            example: changing var-declarations (**)
                var fCC = "freeCodeCamp"; // Change this line
                var fact = "is cool!";    // Change this line
                fact = "is awesome!";
                console.log(fCC, fact);   // Change this line   
                  (=using let for var.s that can change, and const that cannot)
                --
                ronst FCC = "freeCodeCamp";
                let fact = "is cool!";
                fact = "is awesome!";
                console.log(FCC, fact);
                --
                freec02_jsalgodstruct-p__
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-a-read-only-variable-with-the-const-keyword
                ----


                ----
            Add Two Numbers with JavaScript [**(!)]
                const myVar = 5 + 10;
                  (= has the data-type 'Number' (which has double precision))
                --
                freec02_jsalgodstruct-p18
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/add-two-numbers-with-javascript
            subtract one number from another
                const myVar = 12 - 6;
                --
                freec02_jsalgodstruct-p20
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/subtract-one-number-from-another-with-javascript
            multiply two numbers
                const product = 13 * 13;
                var product = 8 * 13;
                --
                freec02_jsalgodstruct-p22
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/multiply-two-numbers-with-javascript
            divide one number by another
                const quotient = 16 / 2;
                --
                freec02_jsalgodstruct-p24
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/divide-one-number-by-another-with-javascript
            Increment a number (!)**
                i = i + 1;
                  .
                i++;
                  .
                myVar++;
                --
                freec02_jsalgodstruct-p26
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/increment-a-number-with-javascript
            decrement a number(!)
                i--;
                  .
                myVar--;
                --
                freec02_jsalgodstruct-p29
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/decrement-a-number-with-javascript
                ----

                ----
            storing decimal numbers (=floating point numbers / floats) in variables
                (+note: not all real numbers can accurately be represented in floating point, which can lead to rounding errors)
                const myDecimal = 5.7;
                --
                freec02_jsalgodstruct-p32
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/create-decimal-numbers-with-javascript
            multiple two (float) decimals (!)
                const product = 2.0 * 2.5;
                --
                freec02_jsalgodstruct-p34
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/multiply-two-decimals-with-javascript
            divide one decimal (=float) by another
                const quotient = 4.4 / 2.0;
                --
                freec02_jsalgodstruct-p36
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/divide-one-decimal-by-another-with-javascript
            Finding a Remainder in JS
                (+'is sometimes incorrectly referred to as the modulus operator')
                const remainder = 11%3;
                --
                freec02_jsalgodstruct-p38
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/finding-a-remainder-in-javascript
            compound assignment (=with augmented addition)
                let myVar = 1;
                myVar += 5;
                console.log(myVar);
                --
                freec02_jsalgodstruct-p41
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/compound-assignment-with-augmented-addition
            augmented subtraction
                myVar -= 5;
                --
                freec02_jsalgodstruct-p44
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/compound-assignment-with-augmented-subtraction
            augmented multiplication
                myVar *= 5;
                --
                freec02_jsalgodstruct-p47
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/compound-assignment-with-augmented-multiplication
            augmented division
                myVar /= 5;
                --
                freec02_jsalgodstruct-p50
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/compound-assignment-with-augmented-division
                ----

                ----
            escaping quotes in strings (*!)
                I am a "double quoted" string inside "double quotes".
                "I am a \"double quoted\" string inside \"double quotes\"."
                --
                freec02_jsalgodstruct-p56
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/escaping-literal-quotes-in-strings
            single quote strings in js
                both double and single quotes can be used for strings(!)
                  .
                const doubleQuoteStr = "This is a string"; 
                const singleQuoteStr = 'This is also a string';
                  (+bash-type mixed quoting)
                const conversation = 'Finn exclaims to Jake, "Algebraic!"';
                  .
                const myStr = '<a href="http://www.example.com" target="_blank">Link</a>';
                --
                freec02_jsalgodstruct-p59
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/quoting-strings-with-single-quotes
            Escape Sequences in Strings
                \'	  single quote
                \"	  double quote
                \\	  backslash
                \n	  newline
                \r	  carriage return
                \t	  tab
                \b	  word boundary
                \f	  form feed
                --
                "FirstLine\n\t\\SecondLine\nThirdLine"
                --
                freec02_jsalgodstruct-p62
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/escape-sequences-in-strings
            Concatenating Strings **(**)
                'My name is Alan,' + ' I concatenate.'
                const ourStr = "I come first. " + "I come second.";
                --
                freec02_jsalgodstruct-p66
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/concatenating-strings-with-plus-operator
            Concatenating Strings 2 =adding up several strings to an existing etc ****
                let ourStr = "I come first. ";
                ourStr += "I come second.";
                --
                freec02_jsalgodstruct-p69
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/concatenating-strings-with-the-plus-equals-operator
            Constructing Strings with Variables (**(*))
                const ourName = "freeCodeCamp";
                const ourStr = "Hello, our name is " + ourName + ", how are you?";
                  .
                const myName = "Dan";
                const myStr = "My name is " + myName + ", and I am well!";
                --
                freec02_jsalgodstruct-p72
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/constructing-strings-with-variables
            Appending Variables to Strings
                const anAdjective = "awesome!";
                let ourStr = "freeCodeCamp is ";
                ourStr += anAdjective;
                --
                freec02_jsalgodstruct-p74
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/appending-variables-to-strings
                ----

                ----
            Find the Length of a String ****(*!)
                console.log("Alan Peter".length);
                  .
                lastNameLength = lastName.length;
                --
                freec02_jsalgodstruct-p76
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/find-the-length-of-a-string
            Find the First Character in a String (***(*))
                = using bracket notation (!)
                  .
                const firstName = "Charles";
                const firstLetter = firstName[0];
                --
                // Setup
                let firstLetterOfLastName = "";
                const lastName = "Lovelace";
                  .
                // Only change code below this line
                firstLetterOfLastName = lastName[0];
                --
                freec02_jsalgodstruct-p79
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-bracket-notation-to-find-the-first-character-in-a-string
            string immutability
                let myStr = "Bob";
                myStr[0] = "J";
                  (=will fail)
                   .
                let myStr = "Bob";
                myStr = "Job";
                  (=will succede)
                --
                freec02_jsalgodstruct-p82
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understand-string-immutability
            Get n:th character of a string (***(!))
                const thirdLetterOfLastName = lastName[2];
                --
                freec02_jsalgodstruct-p85
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-bracket-notation-to-find-the-nth-character-in-a-string
            Get Last Character in a String *(*)
                firstName[firstName.length - 1];
                  .
                const firstName = "Ada";
                const lastLetter = firstName[firstName.length - 1];
                --
                freec02_jsalgodstruct-p88
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-bracket-notation-to-find-the-last-character-in-a-string
            Find the Nth-to-Last Character in a String (!(!))  @@@
                const firstName = "Augusta";
                const thirdToLastLetter = firstName[firstName.length - 3]
                --
                freec02_jsalgodstruct-p91
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-bracket-notation-to-find-the-nth-to-last-character-in-a-string
                ----

                ----
            Word Blanks (=combining collected words, with blanks between)
                const myNoun = "dog";
                const myAdjective = "big";
                const myVerb = "ran";
                const myAdverb = "quickly";
                  .
                // Only change code below this line
                const wordBlanks = myNoun + " " + myAdjective + " " + myVerb + " " + myAdverb;
                --
                freec02_jsalgodstruct-p93
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/word-blanks
            Store Multiple Values in one Variable (=using Arrays) ****(*)
                const sandwich = ["peanut butter", "jelly", "bread", 5];
                --
                freec02_jsalgodstruct-p96
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/store-multiple-values-in-one-variable-using-javascript-arrays
            Nested Arrays **(!!)  (+are called ___)
                =is called a multi-dimensional array:
                const teams = [["Bulls", 23], ["White Sox", 45]];
                --
                freec02_jsalgodstruct-p99
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/nest-one-array-within-another-array
            Access Array Data with Indexes (!!)
                const array = [50, 60, 70];
                console.log(array[0]);
                const data = array[1];
                --
                freec02_jsalgodstruct-p102
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/access-array-data-with-indexes
            Modify Array Data (=via indexes) **(!!)  (+difference of changing arrays vs strings) *
                arrays are mutable and its values can be changed (=even if the array was declared with const(!))
                  .
                const ourArray = [50, 40, 30];
                ourArray[0] = 15;
                --
                freec02_jsalgodstruct-p105
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/modify-array-data-with-indexes
            Access Multi-Dimensional Arrays With Indexes (**)
                (+=can be thought of as an array of arrays)
                const arr = [
                  [1, 2, 3],
                  [4, 5, 6],
                  [7, 8, 9],
                  [[10, 11, 12], 13, 14]
                ];
                  .
                arr[3];
                arr[3][0];
                arr[3][0][1];
                --
                const myArray = [
                  [1, 2, 3],
                  [4, 5, 6],
                  [7, 8, 9],
                  [[10, 11, 12], 13, 14],
                ];
                  .
                const myData = myArray[2][1];
                --
                freec02_jsalgodstruct-p108
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/access-multi-dimensional-arrays-with-indexes
                ----

                ----
            Append Data to End of an Array  (****(!))
                push()
                  .
                const arr1 = [1, 2, 3];
                arr1.push(4);
                  .
                const arr2 = ["Stimpson", "J", "cat"];
                arr2.push(["happy", "joy"]);
                --
                freec02_jsalgodstruct-p111
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulate-arrays-with-push
            Remove (+Return) last element of an Array (***!)
                pop()
                  .
                const threeArr = [1, 4, 6];
                const oneDown = threeArr.pop();
                console.log(oneDown);  (= 6)
                console.log(threeArr); (= [1, 4])
                --
                // Setup
                const myArray = [["John", 23], ["cat", 2]];
                  .
                // Only change code below this line
                const removedFromMyArray = myArray.pop()
                --
                freec02_jsalgodstruct-p113
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulate-arrays-with-pop
            Remove (+Return) first element of an Array (***!)
                shift()
                  .
                const ourArray = ["Stimpson", "J", ["cat"]];
                const removedFromOurArray = ourArray.shift();
                --
                freec02_jsalgodstruct-p116
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulate-arrays-with-shift
            Add Element to start of Array (***)
                unshift()
                  .
                const ourArray = ["Stimpson", "J", "cat"];
                ourArray.shift();
                ourArray.unshift("Happy");
                --
                // Setup
                const myArray = [["John", 23], ["dog", 3]];
                myArray.shift();
                  .
                // Only change code below this line
                myArray.unshift(["Paul", 35]);
                --
                freec02_jsalgodstruct-p118
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulate-arrays-with-unshift
            ex: create a shopping list (=2-dim. array)
                const myList = [["Book 1", 50], ["Book 2", 150], ["Book 3", 300], ["Book 4", 250], ["Book 5", 175]];
                --
                freec02_jsalgodstruct-p120
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/shopping-list
                ----

                ----
            Write Reusable Code with Functions *****
                function functionName() {
                  console.log("Hello World");
                }
                  .
                  .
                function reusableFunction() {
                  console.log("Hi World");
                }
                  .
                reusableFunction();
                  .
                  (=invoking or 'calling' the function)
                (+ at which point all code inside it's curly brackets will be run)
                --
                freec02_jsalgodstruct-p122
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/write-reusable-javascript-with-functions
            function parameters  vs  function arguments (!!T)
                Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters.
                  --
                The actual values that are input (or "passed") into a function when it is called are known as arguments.
                --
                freec02_jsalgodstruct-p125
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments
            Create a Function with param1 and param2 (**) (+writing the result on the console)
                function testFun(param1, param2) {
                  console.log(param1, param2);
                }
                --
                function functionWithArgs(num1, num2) {
                  console.log(num1 + num2);
                }
                  .
                functionWithArgs(10, 30);
                --
                freec02_jsalgodstruct-p125
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments
            Return a Value From a Function (** ****)
                function plusThree(num) {
                  return num + 3;
                }
                  .
                const answer = plusThree(5);
                --
                function timesFive(num) {
                  return num * 5;
                }
                --
                freec02_jsalgodstruct-p136
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/return-a-value-from-a-function-with-return
            the scope of variables refers to ____
                = the visibility of variables
                --
                freec02_jsalgodstruct-p128
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions
            variables defined outside of a function block have ___ scope
                global (=they can be seen everywhere in your javascript code)
                --
                freec02_jsalgodstruct-p128
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions
            Tip: Keywords to use when defining variables in js *****(*)
                let or const (****)
                --
                freec02_jsalgodstruct-p128
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions
            [ex: testing setting a global value, and setting an implicitly global variable]
                // Declare the myGlobal variable below this line
                const myGlobal = 10;
                  .
                function fun1() {
                  // Assign 5 to oopsGlobal Here
                  oopsGlobal = 5;
                }
                  .
                // Only change code above this line
                  .
                function fun2() {
                  var output = "";
                  if (typeof myGlobal != "undefined") {
                    output += "myGlobal: " + myGlobal;
                  }
                  if (typeof oopsGlobal != "undefined") {
                    output += " oopsGlobal: " + oopsGlobal;
                  }
                  console.log(output);
                }   
                --
                freec02_jsalgodstruct-p128
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions
            Local Scope (**)
                = variables which are declared within a function (as well as the function parameters)
                (+ie. they are only visible within that function)
                --
                function myTest() {
                  const loc = "foo";
                  console.log(loc);
                }
                  .
                myTest();
                console.log(loc);
                --
                freec02_jsalgodstruct-p130
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/local-scope-and-functions
            global vs local scope in functions: if both a global and local functions are defined, which takes precedence when called from inside the function? (*!)
                const someVar = "Hat";
                  .
                function myFun() {
                  const someVar = "Head";
                  return someVar;
                }
                --
                freec02_jsalgodstruct-p133
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/global-vs--local-scope-in-functions
                ----

                ----
            return from functions (+functions without returns) (**!!)
                functions can include return statements, but doesn't have to
                  .
                if functions don't have a return statement, the code within the function processes
                +the value returned from the function has the value 'undefined'
                --
                let sum = 0;
                  .
                function addSum(num) {
                  sum = sum + num;
                }
                  .
                addSum(3);
                --
                freec02_jsalgodstruct-p139
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-undefined-value-returned-from-a-function
            Assignment with a Returned Value ****(!!)
                (tip: everything to the right of an equal sign is resolved before the value is assigned)
                --
                // Setup
                let processed = 0;
                  .
                function processArg(num) {
                  return (num + 3) / 5;
                }
                  .
                // Only change code below this line
                processed = processArg(7);
                --
                freec02_jsalgodstruct-p142
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/assignment-with-a-returned-value
            making a queue-function ***(*): convert an array (etc?) to corresponding string value (**(??(!!)))
                JSON.stringify(var)
                --
                freec02_jsalgodstruct-p144
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/stand-in-line
            Writing the queue-function ='nextInLine': 1. take an array(='arr') + a number(='item')  2. add the num to end of array  3. remove first element of the array + return it as 'item'
                function nextInLine(arr, item) {
                  // Only change code below this line
                  arr.push(item);
                  item = arr.shift();
                  return item;
                  // Only change code above this line
                }
                  .
                // Setup
                const testArr = [1, 2, 3, 4, 5];
                  .
                // Display code
                console.log("Before: " + JSON.stringify(testArr));
                console.log(nextInLine(testArr, 6));
                console.log("After: " + JSON.stringify(testArr));
                --
                freec02_jsalgodstruct-p144
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/stand-in-line
            True and False in Js (**(!!))
                true
                false
                  eg.  return false;
                --
                freec02_jsalgodstruct-p147
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-boolean-values
                ----

                ----
            js If Statements ****(**!!)
                = execute the code in the curly braces under the conditions in the parentheses (**)
                These conditions are known as Boolean conditions and they may only be true or false
                (+if the condition evaluates to true, the program executes the statement inside the block (and if the condition evaluates to false the statement in the block will not execute))
                  .
                if (condition is true) {
                  statement is executed
                }
                --
                function test (myCondition) {
                  if (myCondition) {
                    return "It was true";
                  }
                  return "It was false";
                }
                  .
                test(true);
                test(false);
                --
                freec02_jsalgodstruct-p150
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-conditional-logic-with-if-statements
            in order for js to compare two different data types (eg. numbers and string), js must ____
                = convert one type to another
                (which is known as Type Coercion)
                  .
                1   ==  1  // true
                1   ==  2  // false
                1   == '1' // true
                "3" ==  3  // true
                --
                freec02_jsalgodstruct-p153
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator
            Comparison with the Equality Operator (***(!))
                function equalityTest(myVal) {
                  if (myVal == 10) {
                    return "Equal";
                  }
                  return "Not Equal";
                }
                --
                freec02_jsalgodstruct-p153
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator
            The Strict Equality Operator **  ('===')
                = unlike the normal equality operator, the s.e. operator does not(!!!) perform any type conversion  before doing the comparison
                  .
                If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.
                (eg. will compare both the data type and value(!!))
                3 ===  3  // true
                3 === '3' // false
                --
                // Setup
                function testStrict(val) {
                  if (val === 7) { // Change this line
                    return "Equal";
                  }
                  return "Not Equal";
                }
                  .
                testStrict(10);
                --
                freec02_jsalgodstruct-p156
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-strict-equality-operator
            Testing the Type of 3 and '3' [**]!  ??? 
                typeof 3
                typeof '3'
                --
                freec02_jsalgodstruct-p159
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/practice-comparing-different-values
            (example: strict equality)
                // Setup
                function compareEquality(a, b) {
                  if (a === b) {  // Change this line
                    return "Equal";
                  }
                  return "Not Equal";
                }
                  .
                compareEquality(10, "10");   
                --
                freec02_jsalgodstruct-p159
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/practice-comparing-different-values
                ----

                ----
            Comparing Inequality (***(!))
                !=
                --
                1 !=  2    // true
                1 != "1"   // false
                1 != '1'   // false
                  .
                1 != true  // false
                0 != false // false
                   (= will also convert types, like '==')
                --
                // Setup
                function testNotEqual(val) {
                  if (val != 99) { // Change this line
                    return "Not Equal";
                  }
                  return "Equal";
                }
                  .
                testNotEqual(10);
                --
                freec02_jsalgodstruct-p162
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-inequality-operator
            Comparing with Strict Inequality (***(!!))
                3 !==  3  // false
                3 !== '3' // true
                4 !==  3  // true
                --
                // Setup
                function testStrictNotEqual(val) {
                  if (val !== 17) { // Change this line
                    return "Not Equal";
                  }
                  return "Equal";
                }
                  .
                testStrictNotEqual(10);
                --
                freec02_jsalgodstruct-p165
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-strict-inequality-operator
            Comparison with Greater Than (**)
                5   >  3  // true
                7   > '3' // true
                2   >  3  // false
                '1' >  9  // false
                  Note: Does type conversion
                --
                function testGreaterThan(val) {
                  if (val > 100) {  // Change this line
                    return "Over 100";
                  }

                  if (val > 10) {  // Change this line
                    return "Over 10";
                  }

                  return "10 or Under";
                }
                  .
                testGreaterThan(10);
                --
                freec02_jsalgodstruct-p168
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-greater-than-operator
            Comparison with Greater Than or Equal
                6   >=  6  // true
                7   >= '3' // true
                2   >=  3  // false
                '7' >=  9  // false
                  Note: Does type conversion
                --
                function testGreaterOrEqual(val) {
                  if (val >= 20) {  // Change this line
                    return "20 or Over";
                  }

                  if (val >= 10) {  // Change this line
                    return "10 or Over";
                  }
                    .
                  return "Less than 10";
                }
                    .
                testGreaterOrEqual(10);
                --
                freec02_jsalgodstruct-p171
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-greater-than-or-equal-to-operator
            Comparison with Less Than
                2   <  5  // true
                '3' <  7  // true
                5   <  5  // false
                3   <  2  // false
                '8' <  4  // false
                  Note: Does type conversion
                --
                freec02_jsalgodstruct-p174
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-less-than-operator
            Comparison with Less Than or Equal
                4   <= 5 // true
                '7' <= 7 // true
                5   <= 5 // true
                3   <= 2 // false
                '8' <= 4 // false
                  Note: Does type conversion
                --
                freec02_jsalgodstruct-p177
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-less-than-or-equal-to-operator
            Comparisons with Logical And  (=more than one comparison at a time) ****(!!)
                &&
                  (=only returns true if the operands to the left and right are both(!) true)
                  . (+can also be achieved with:
                  .
                if (num > 5) {
                  if (num < 10) {
                    return "Yes";
                  }
                }
                return "No";
                -- **(!)
                if (num > 5 && num < 10) {
                  return "Yes";
                }
                return "No";
                -- --
                between (+including) 25 and 50:
                function testLogicalAnd(val) {
                  // Only change code below this line

                  if (val >= 25 && val <= 50) {
                    return "Yes";
                  }
                  // Only change code above this line
                  return "No";
                }
                  .
                testLogicalAnd(10);
                --
                freec02_jsalgodstruct-p180
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparisons-with-the-logical-and-operator
            Comparisons with Logical Or ****(*!!)
                ||
                  = returns true if either of the operands are true (+otherwise returns false)
                   .
                if (num > 10) {
                  return "No";
                }
                if (num < 5) {
                  return "No";
                }
                return "Yes";
                 --  (=corresponds to)
                if (num > 10 || num < 5) {
                  return "No";
                }
                return "Yes";
                --
                function testLogicalOr(val) {
                  // Only change code below this line

                  if (val < 10 || val > 20) {
                    return "Outside";
                  }

                  // Only change code above this line
                  return "Inside";
                }
                testLogicalOr(15);
                --
                freec02_jsalgodstruct-p183
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/comparisons-with-the-logical-or-operator
                ----

                ----
            if + Else Statements **(!!!!)  (if larger than 10, +else ...)
                if (num > 10) {
                  return "Bigger than 10";
                } else {
                  return "10 or Less";
                }
                --
                function testElse(val) {
                  let result = "";
                  // Only change code below this line
                    .
                  if (val > 5) {
                    result = "Bigger than 5";
                  }
                    .
                  if (val <= 5) {
                    result = "5 or Smaller";
                  }
                    .
                  // Only change code above this line
                  return result;
                }
                  .
                testElse(4);
                  --
                function testElse(val) {
                  let result = "";
                  // Only change code below this line
                    .
                  if (val > 5) {
                    result = "Bigger than 5";
                  } else {
                    result = "5 or Smaller";
                  }
                    .
                  // Only change code above this line
                  return result;
                }
                  .
                testElse(4);
                --
                freec02_jsalgodstruct-p186
            https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/introducing-else-statements
            Else If Statements (**(!!))
                if (num > 15) {
                  return "Bigger than 15";
                } else if (num < 5) {
                  return "Smaller than 5";
                } else {
                  return "Between 5 and 15";
                }
                --
                freec02_jsalgodstruct-p189
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/introducing-else-if-statements
            (tip: =order matters in if-else statements(!))
                if (val < 5)
                  less than 5
                else if (val < 10 .....
                --
                freec02_jsalgodstruct-p192
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/logical-order-in-if-else-statements
            chaining if else statements
                if (condition1) {
                  statement1
                } else if (condition2) {
                  statement2
                } else if (condition3) {
                  statement3
                . . .
                } else {
                  statementN
                }
                --
                function testSize(num) {
                  // Only change code below this line
                  if (num < 5) {
                    return "Tiny";
                  } else if (num < 10) {
                    return "Small";
                  } else if (num < 15) {
                    return "Medium";
                  } else if (num < 20) {
                    return "Large";
                  } else {
                    return "Huge";
                  }
                  // Only change code above this line
                }
                  .
                testSize(7);
                --
                freec02_jsalgodstruct-p195
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/chaining-if-else-statements
            function 'Golf Code'  (=using else-ifs) (!! ****)
                const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
                    .
                function golfScore(par, strokes) {
                  // Only change code below this line
                  if (strokes == 1) {
                    return names[0];
                  } else if (strokes > 0 && strokes <= par -2) {
                    return names[1];
                  } else if (strokes > 0 && strokes == par - 1) {
                    return names[2];
                  } else if (strokes == par) {
                    return names[3];
                  } else if (strokes > 0 && strokes == par + 1) {
                    return names[4];
                  } else if (strokes > 0 && strokes == par + 2) {
                    return names[5];
                  } else if (strokes > 0 && strokes >= par + 3) {
                    return names[6];
                  }
                  // Only change code above this line
                }
                  .
                + Solution with ternary expressions ***** @@@ @@@
                https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-golf-code/18195
                    .
                golfScore(5, 4);
                --
                freec02_jsalgodstruct-p198
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/golf-code
                ----

                ----
            Selecting from Many Options with Switch Statements (**(**)) (!!!!!)
                = uses case-statements (and breaks)
                NOTE(!!): CASE VALUES ARE TESTED WITH '===' (=STRICT EQUALITY)
                  .
                switch(lowercaseLetter) {
                  case "a":
                    console.log("A");
                    break;
                  case "b":
                    console.log("B");
                    break;
                }
                --
                function caseInSwitch(val) {
                  let answer = "";
                  // Only change code below this line
                  switch(val) {
                    case 1:
                      answer = "alpha";
                      break;
                    case 2:
                      answer = "beta";
                      break;
                    case 3:
                      answer = "gamma";
                      break;
                    case 4:
                      answer = "delta";
                      break;      
                  }
                  // Only change code above this line
                  return answer;
                }
                  .
                caseInSwitch(1);
                   .
                (+ the 'return + break'-solution
                    https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-selecting-from-many-options-with-switch-statements/18277
                --
                freec02_jsalgodstruct-p201
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/selecting-from-many-options-with-switch-statements
            Adding a Default Option in Switch Statements (*)
                switch (num) {
                  case value1:
                    statement1;
                    break;
                  case value2:
                    statement2;
                    break;
                ...
                  default:
                    defaultStatement;
                    break;
                }
                --
                function switchOfStuff(val) {
                  let answer = "";
                  // Only change code below this line
                  switch(val) {
                    case "a":
                      answer = "apple";
                      break;
                    case "b":
                      answer = "bird";
                      break;
                    case "c":
                      answer = "cat";
                      break;
                    default:
                      answer = "stuff";
                      break;
                  }
                  // Only change code above this line
                  return answer;
                }
                  .
                switchOfStuff(1);
                --
                freec02_jsalgodstruct-p204
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/adding-a-default-option-in-switch-statements
            Multiple Identical Options in Switch Statements (***(!!))
                let result = "";
                switch(val) {
                  case 1:
                  case 2:
                  case 3:
                    result = "1, 2, or 3";
                    break;
                // = 1/2/3 produces the
                // same result
                  case 4:
                    result = "4 alone";
                }
                --
                function sequentialSizes(val) {
                  let answer = "";
                  // Only change code below this line
                  switch(val) {
                    case 1:
                    case 2:
                    case 3:
                      answer = "Low";
                      break;
                    case 4:
                    case 5:
                    case 6:
                      answer = "Mid";
                      break;
                    case 7:
                    case 8:
                    case 9:
                      answer = "High";
                      break;
                  }
                  // Only change code above this line
                  return answer;
                }
                  .
                sequentialSizes(1);
                --
                freec02_jsalgodstruct-p207
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/adding-a-default-option-in-switch-statements
            Replacing If Else Chains with Switch (**(!!))
                function chainToSwitch(val) {
                  let answer = "";
                  // Only change code below this line

                  if (val === "bob") {
                    answer = "Marley";
                  } else if (val === 42) {
                    answer = "The Answer";
                  } else if (val === 1) {
                    answer = "There is no #1";
                  } else if (val === 99) {
                    answer = "Missed me by this much!";
                  } else if (val === 7) {
                    answer = "Ate Nine";
                  }

                  // Only change code above this line
                  return answer;
                }
                  .
                chainToSwitch(7);
                --
                function chainToSwitch(val) {
                  let answer = "";
                  // Only change code below this line
                  switch(val) {
                    case "bob":
                      answer = "Marley";
                      break;
                    case 42:
                      answer = "The Answer";
                      break;
                    case 1:
                      answer = "There is no #1";
                      break;
                    case 99:
                      answer = "Missed me by this much!";
                      break;
                    case 7:
                      answer = "Ate Nine";
                      break;
                  }
                  // Only change code above this line
                  return answer;
                }
                  .
                chainToSwitch(7);
                --
                freec02_jsalgodstruct-p210
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/replacing-if-else-chains-with-switch
            Returning Boolean Values from Functions (!! ***)  (=a or b is true or false) ((****(!!!!)))  [EH, OK???? 8)8)8)8) ]  ___TIP ___SEEMORE*****
                function isEqual(a, b) {
                  if (a === b) {
                    return true;
                  } else {
                    return false;
                  }
                }
                  --
                can be replaced by:
                function isEqual(a, b) {
                  return a === b;
                }
                (=because '===' returns true or false)
                --
                function isLess(a, b) {
                  // Only change code below this line
                  if (a < b) {
                    return true;
                  } else {
                    return false;
                  }
                  // Only change code above this line
                }
                  .
                isLess(10, 15);
                      --
                function isLess(a, b) {
                  // Only change code below this line
                  return a < b;
                  // Only change code above this line
                }
                  .
                isLess(10, 15);
                --
                freec02_jsalgodstruct-p213
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/returning-boolean-values-from-functions
            Return Early-Pattern (for functions) ((!!!!! (*****)))
                = When a return statement is reached, the execution of the current function stops and control returns to the calling location.
                --
                // Setup
                function abTest(a, b) {
                  // Only change code below this line
                  if (a < 0 || b < 0) {
                    return undefined;
                  }
                  // Only change code above this line
                  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
                }
                  .
                abTest(2,2);
                --
                freec02_jsalgodstruct-p216
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/return-early-pattern-for-functions
            function: BJ Count Cards (!!!!) (**)  ___SEEMORE ****  T@@@@
                let count = 0;
                  .
                function cc(card) {
                  // Only change code below this line
                  switch(card) {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                      count += 1;
                      break;
                    case 10:
                    case "J":
                    case "Q":
                    case "K":
                    case "A":
                      count -= 1;
                      break;
                  }
                  if (count < 1) {
                    return count + " " + "Hold"
                  } else {
                    return count + " " + "Bet"
                  }
                  // Only change code above this line
                }
                  .
                cc(2); cc(3); cc(7); cc('K'); cc('A');   
                    .
                +SHORTER MORE CONCISE SOLUTION (=with Compound Logical Tests) *****
                https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-counting-cards/16809
                --
                freec02_jsalgodstruct-p219
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/counting-cards
                ----

                ----
            Objects are similar to arrays, except that _____
                instead of using indexes to access and modify their data, you access the data in objects through what are called properties.
                --
                freec02_jsalgodstruct-p222
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects
            Objects are useful for _____  @@@@
                storing data in a structured way, and can represent real world objects, like a cat
                  .
                const cat = {
                  "name": "Whiskers",
                  "legs": 4,
                  "tails": 1,
                  "enemies": ["Water", "Dogs"]
                    ^^
                    ||
                    properties
                };
                --
                freec02_jsalgodstruct-p222
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects
            'you can also use numbers as properties (+also omit quotes for single-word string properties), but(!!!!) _______
                const anotherObject = {
                  make: "Ford",
                  5: "five",
                  "model": "focus"
                };
                  .
                = if your object has any non-string properties, JavaScript will automatically typecast them as strings.  (????(!!!!))
                --
                freec02_jsalgodstruct-p222
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects
            Make Object that represents a dog 'const myDog' (which contains the properties name (string), legs (num), tails (num) and friends (an array) (****)
                const myDog = {
                  // Only change code below this line
                  name: "Rufus",
                  legs: 3,
                  tails: 6,
                  friends: ["Adolph", "Misse", "Snuttan"]
                  // Only change code above this line
                };
                --
                freec02_jsalgodstruct-p222
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects
            Accessing Object Properties (=with dot notation)
                = what you use when you know the name of the property you're trying to access ahead of time
                  .
                const myObj = {
                  prop1: "val1",
                  prop2: "val2"
                };
                  .
                const prop1val = myObj.prop1;
                const prop2val = myObj.prop2;
                --
                // Setup
                const testObj = {
                  "hat": "ballcap",
                  "shirt": "jersey",
                  "shoes": "cleats"
                };
                  .
                // Only change code below this line
                const hatValue = testObj.hat;      // Change this line
                const shirtValue = testObj.shirt;    // Change this line
                --
                freec02_jsalgodstruct-p225
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-dot-notation
            Accessing Object Properties (=with bracket notation)
                =Tip: Have to use, if the object you're trying to access(=the property names) has a space in its name(!!)  (+can be used with other objects also)
                +property names with spaces must be quoted(!!)
                  .
                const myObj = {
                  "Space Name": "Kirk",
                  "More Space": "Spock",
                  "NoSpace": "USS Enterprise"
                };
                  .
                myObj["Space Name"];
                myObj['More Space'];
                myObj["NoSpace"];
                --
                // Setup
                const testObj = {
                  "an entree": "hamburger",
                  "my side": "veggies",
                  "the drink": "water"
                };
                  .
                // Only change code below this line
                const entreeValue = testObj["an entree"];   // Change this line
                const drinkValue = testObj["the drink"];    // Change this line
                --
                freec02_jsalgodstruct-p228
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-bracket-notation
            Accessing Object Properties (with Variables)
                access a property stored as the value of a variable (=very useful for iterating through an object's properties / accessing a lookup table)
                  .
                1.
                const dogs = {
                  Fido: "Mutt",
                  Hunter: "Doberman",
                  Snoopie: "Beagle"
                };
                  .
                const myDog = "Hunter";
                const myBreed = dogs[myDog];
                console.log(myBreed);
                   --
                2.
                const someObj = {
                  propName: "John"
                };
                  .
                function propPrefix(str) {
                  const s = "prop";
                  return s + str;
                }
                  .
                const someProp = propPrefix("Name");
                console.log(someObj[someProp]);
                --
                // Setup
                const testObj = {
                  12: "Namath",
                  16: "Montana",
                  19: "Unitas"
                };
                  .
                // Only change code below this line
                const playerNumber = 16;  // Change this line
                const player = testObj[playerNumber];   // Change this line
                --
                freec02_jsalgodstruct-p231
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables
                ----

                ----
            Updating Object Properties (***(!))
                = can be updated both by:
                - dot notation
                - bracket notation
                  .
                const ourDog = {
                  "name": "Camper",
                  "legs": 4,
                  "tails": 1,
                  "friends": ["everything!"]
                };
                  .
                ourDog.name = "Happy Camper";
                ourDog["name"] = "Happy Camper";
                --
                // Setup
                const myDog = {
                  "name": "Coder",
                  "legs": 4,
                  "tails": 1,
                  "friends": ["freeCodeCamp Campers"]
                };
                  .
                // Only change code below this line
                myDog.name = "Happy Coder";
                --
                freec02_jsalgodstruct-p234
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/updating-object-properties
            Add New Properties to a JavaScript Object (**(!!))
                tip: you can add new properties to objects =same syntax as modifying one(!!)
                ourDog.bark = "bow-wow";
                ourDog["bark"] = "bow-wow";
                --
                const myDog = {
                  "name": "Happy Coder",
                  "legs": 4,
                  "tails": 1,
                  "friends": ["freeCodeCamp Campers"]
                };
                  .
                myDog.bark = "woof";
                --
                freec02_jsalgodstruct-p237
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/add-new-properties-to-a-javascript-object
            Delete Properties from a JavaScript Object (**!!)
                const ourDog = {
                  "name": "Camper",
                  "legs": 4,
                  "tails": 1,
                  "friends": ["everything!"],
                  "bark": "bow-wow"
                };
                  .
                delete ourDog.bark;
                --
                // Setup
                const myDog = {
                  "name": "Happy Coder",
                  "legs": 4,
                  "tails": 1,
                  "friends": ["freeCodeCamp Campers"],
                  "bark": "woof"
                };
                  .
                delete myDog.tails;
                --
                freec02_jsalgodstruct-p240
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/delete-properties-from-a-javascript-object
            Using Objects for Lookups (=using objects as key/value-storage / dictionaries) **(!!)
                = as an alternative to switch statements / if/else-chains
                (+'most useful when you know you input data is limited to a certain range' (??(!!)))
                --
                const alpha = {
                  1:"Z",
                  2:"Y",
                  3:"X",
                  4:"W",
                  ...
                  24:"C",
                  25:"B",
                  26:"A"
                };
                  .
                alpha[2];
                alpha[24];
                  .
                const value = 2;
                alpha[value];
                -- --
                // Setup
                function phoneticLookup(val) {
                  let result = "";
                    .
                  // Only change code below this line
                  switch(val) {
                    case "alpha":
                      result = "Adams";
                      break;
                    case "bravo":
                      result = "Boston";
                      break;
                    case "charlie":
                      result = "Chicago";
                      break;
                    case "delta":
                      result = "Denver";
                      break;
                    case "echo":
                      result = "Easy";
                      break;
                    case "foxtrot":
                      result = "Frank";
                  }
                    .
                  // Only change code above this line
                  return result;
                }
                  .
                phoneticLookup("charlie");
                --
                // Setup
                function phoneticLookup(val) {
                  let result = "";
                    .
                  // Only change code below this line
                  const callCodes = {
                    "alpha": "Adams",
                    "bravo": "Boston",
                    "charlie": "Chicago",
                    "delta": "Denver",
                    "echo": "Easy",
                    "foxtrot": "Frank"
                  }
                  result = callCodes[val]
                  // Only change code above this line
                  return result;
                }
                  .
                phoneticLookup("charlie");
                --
                freec02_jsalgodstruct-p242
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/using-objects-for-lookups
            Check if an Object has a Property (****!!!*****) *****
                .hasOwnProperty(propname)
                  (=returns true or false if the property is found or not)
                  .
                const myObj = {
                  top: "hat",
                  bottom: "pants"
                };
                  .
                myObj.hasOwnProperty("top");
                myObj.hasOwnProperty("middle");
                --
                (=test if an object passed to the function (obj) contains a specific property (checkProp).
                If the property is found, return that property's value.
                If not, return "Not Found")
                  .
                function checkObj(obj, checkProp) {
                  // Only change code below this line
                  if (obj.hasOwnProperty("checkProp")) {
                    return obj[checkProp];  //Phew! 8)8)
                  } else {
                    return "Not Found";
                  }
                  // Only change code above this line
                }
                --
                freec02_jsalgodstruct-p246
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/testing-objects-for-properties
            Manipulating Complex Objects (=Flexible Data Structures) ***** (=JSON??)
                = allow for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects
                const ourMusic = [
                  {
                    "artist": "Daft Punk",
                    "title": "Homework",
                    "release_year": 1997,
                    "formats": [ 
                      "CD", 
                      "Cassette", 
                      "LP"
                    ],
                    "gold": true
                  }
                ];
                  = An array, which contains one(!) object inside(!!)
                +'If you want to add more album records, you can do this by adding records to the top level array.' (**)
                (+with comma after every object in the array, but not after the last object(!!))
                --
                const myMusic = [
                  {
                    "artist": "Billy Joel",
                    "title": "Piano Man",
                    "release_year": 1973,
                    "formats": [
                      "CD",
                      "8T",
                      "LP"
                    ],
                    "gold": true
                  },
                  {
                    "artist": "Dr Strang",
                    "title": "Hallo Daer",
                    "release_year": 2008,
                    "formats": [
                      "CD",
                      "vinyl",
                      "stone tablet"
                    ],
                    "platinum": true
                  }
                ];
                --
                freec02_jsalgodstruct-p249
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects
            Accessing Nested Objects (**(**))
                The sub-properties of objects can be accessed by chaining together the dot or bracket notation.
                const ourStorage = {
                  "desk": {
                    "drawer": "stapler"
                  },
                  "cabinet": {
                    "top drawer": { 
                      "folder1": "a file",
                      "folder2": "secrets"
                    },
                    "bottom drawer": "soda"
                  }
                };
                    .
                ourStorage.cabinet["top drawer"].folder2;
                ourStorage.desk.drawer;
                --
                const myStorage = {
                  "car": {
                    "inside": {
                      "glove box": "maps",
                      "passenger seat": "crumbs"
                     },
                    "outside": {
                      "trunk": "jack"
                    }
                  }
                };
                  .
                const gloveBoxContents = myStorage.car.inside["glove box"];
                --
                freec02_jsalgodstruct-p253
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects
            Accessing Nested Arrays
                [as seen earlier, objects can contain both nested objects and nested arrays(!!)]
                = Use array bracket notation with numbers for access (!! =specifically the arrays (****))
                  .
                const ourPets = [
                  {
                    animalType: "cat",
                    names: [
                      "Meowzer",
                      "Fluffy",
                      "Kit-Cat"
                    ]
                  },
                  {
                    animalType: "dog",
                    names: [
                      "Spot",
                      "Bowser",
                      "Frankie"
                    ]
                  }
                ];
                  .
                ourPets[0].names[1];
                ourPets[1].names[0];
                --
                const myPlants = [
                  {
                    type: "flowers",
                    list: [
                      "rose",
                      "tulip",
                      "dandelion"
                    ]
                  },
                  {
                    type: "trees",
                    list: [
                      "fir",
                      "pine",
                      "birch"
                    ]
                  }
                ];
                  .
                const secondTree = myPlants[1].list[1];
                --
                freec02_jsalgodstruct-p256
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays
            js Object as a Record Collection (**!!)  ******** (hosOwnProperty(!!))  +___SEEMORE (=Study the Shortcut Solution (!!))
                (=using an object literal)
                --
                // Setup
                const recordCollection = {
                  2548: {
                    albumTitle: 'Slippery When Wet',
                    artist: 'Bon Jovi',
                    tracks: ['Let It Rock', 'You Give Love a Bad Name']
                  },
                  2468: {
                    albumTitle: '1999',
                    artist: 'Prince',
                    tracks: ['1999', 'Little Red Corvette']
                  },
                  1245: {
                    artist: 'Robert Palmer',
                    tracks: []
                  },
                  5439: {
                    albumTitle: 'ABBA Gold'
                  }
                };
                  .
                // Only change code below this line
                function updateRecords(records, id, prop, value) {
                  if (prop !== "tracks" && value !== "") {
                    records[id][prop] = value;
                  } else if (prop === "tracks" && records[id].hasOwnProperty("tracks") === false) {
                    records[id][prop] = [value];
                  } else if (prop === "tracks" && value !== "") {
                    records[id][prop].push(value);
                  } else if (value === "") {
                    delete records[id][prop];
                  }
                  return records;
                }
                  .
                updateRecords(recordCollection, 5439, 'artist', 'ABBA');
                      --
                // Only change code below this line
                function updateRecords(records, id, prop, value) {
                  if (value === '') {
                    delete records[id][prop];
                  } else if (prop === 'tracks') {
                    records[id][prop] = records[id][prop] || []; // this is called shortcircuit evaluation, see below for explanation
                    records[id][prop].push(value);
                  } else {
                    records[id][prop] = value;
                  }
                  return records;
                }
                --
                    https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-record-collection/18261
                freec02_jsalgodstruct-p259
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/record-collection
                ----

                ----
            Iterate with JavaScript While Loops (**)
                = runs while a specified condition is true + stops once that condition is no longer true
                  .
                const ourArray = [];
                let i = 0;
                  .
                while (i < 5) {
                  ourArray.push(i);
                  i++;
                }
                -- add num.s 5-0(inclusive) in descending order to myArray
                const ourArray = [];
                let i = 0;
                  .
                while (i < 5) {
                  ourArray.push(i);
                  i++;
                }
                   (or the '--'-solution
                --
                freec02_jsalgodstruct-p262
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-while-loops
            Iterate with JS For Loops (****)
                = is run a specific number of times
                for (init-statement; condit-statement; final expression)
                  - init: =executed one time before the loop starts
                  - condit-statem: evaluated at beg. of every loop (=if cond. is false, the loop will not execute even once)
                  - final expr: =executed at end of each loop iteration
                  .
                const ourArray = [];
                  .
                for (let i = 0; i < 5; i++) {
                  ourArray.push(i);
                }
                --
                // Setup
                const myArray = [];
                  .
                // Only change code below this line
                for (let i = 1; i <= 5; i++) {
                  myArray.push(i);
                }
                --
                freec02_jsalgodstruct-p265
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-for-loops
            Iterate Odd Numbers With a For Loop
                const ourArray = [];
                  .
                for (let i = 0; i < 10; i += 2) {
                  ourArray.push(i);
                }
                --
                // Setup
                const myArray = [];
                  .
                // Only change code below this line
                for (let i = 1; i < 10; i += 2) {
                  myArray.push(i);
                }
                --
                freec02_jsalgodstruct-p268
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-odd-numbers-with-a-for-loop
            Count Backwards With a For Loop
                const ourArray = [];
                  .
                for (let i = 9; i > 0; i -= 2) {
                  ourArray.push(i);
                }
                --
                freec02_jsalgodstruct-p270
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/count-backwards-with-a-for-loop
            Iterate Through an Array with a For Loop (****(!))
                const arr = [10, 9, 8, 7, 6];
                  .
                for (let i = 0; i < arr.length; i++) {
                   console.log(arr[i]);
                }
                --
                // Setup
                const myArr = [2, 3, 4, 5, 6];
                  .
                // Only change code below this line
                let total = 0;
                for (let i = 0; i < myArr.length; i++) {
                  total += myArr[i];
                }
                --
                freec02_jsalgodstruct-p273
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-through-an-array-with-a-for-loop
            Nesting For Loops (**!!)
                eg. if one has a multi-dim_array, one can use nested for-loops to loop through both the array and sub-arrays
                  .
                const arr = [
                  [1, 2], [3, 4], [5, 6]
                ];
                  .
                for (let i = 0; i < arr.length; i++) {
                  for (let j = 0; j < arr[i].length; j++) {
                    console.log(arr[i][j]);
                  }
                }
                --
                function multiplyAll(arr) {
                  let product = 1;
                  // Only change code below this line
                  for (let i = 0; i < arr.length; i++) {
                    for (let j = 0; j < arr[i].length; j++) {
                      product *= arr[i][j];
                    }
                  }
                  // Only change code above this line
                  return product;
                }
                  .
                multiplyAll([[1, 2], [3, 4], [5, 6, 7]]);
                --
                freec02_jsalgodstruct-p276
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops
            Iterate with Do While-Loops
                (=the loop will always run once)
                const myArray = [];
                let i = 10;
                  .
                do {
                  myArray.push(i);
                  i++;
                } while (i < 5);
                --
                freec02_jsalgodstruct-p279
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-do---while-loops
            Replace Loops using Recursion  (!!!!)@@@@
                the concept that a function can be expressed in terms of itself
                  .
                = multiply the first n elements of an array
                function multiply(arr, n) {
                  let product = 1;
                  for (let i = 0; i < n; i++) {
                    product *= arr[i];
                  }
                  return product;
                }
                -- (+the recursive version)
                function multiply(arr, n) {
                    if (n <= 0) {
                      return 0;  (??)
                    } else {
                      return multiply(arr, n - 1) * arr[n - 1];
                    }
                  }
                --
                freec02_jsalgodstruct-p283
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/replace-loops-using-recursion
            Profile Lookup (=an array of objects representing different people in a contact list) (! **)
                // Setup
                const contacts = [
                  {
                    firstName: "Akira",
                    lastName: "Laine",
                    number: "0543236543",
                    likes: ["Pizza", "Coding", "Brownie Points"],
                  },
                  {
                    firstName: "Harry",
                    lastName: "Potter",
                    number: "0994372684",
                    likes: ["Hogwarts", "Magic", "Hagrid"],
                  },
                  {
                    firstName: "Sherlock",
                    lastName: "Holmes",
                    number: "0487345643",
                    likes: ["Intriguing Cases", "Violin"],
                  },
                  {
                    firstName: "Kristian",
                    lastName: "Vos",
                    number: "unknown",
                    likes: ["JavaScript", "Gaming", "Foxes"],
                  },
                ];
                  .
                function lookUpProfile(name, prop) {
                  // Only change code below this line
                  for (let i = 0; i < contacts.length; i++) {
                    if (contacts[i]["firstName"] === name) {
                      if (contacts[i].hasOwnProperty(prop)) {
                        return contacts[i][prop];
                      } else {
                        return "No such property";
                      }
                    }
                  }
                  return "No such contact"
                  // Only change code above this line
                }
                  .
                lookUpProfile("Akira", "likes");
                --  (+second ex: =uses 'in' (=instead of hasOwnProperty))
                function lookUpProfile(name, prop) {
                  for (let i = 0; i < contacts.length; i++) {
                    if (contacts[i].firstName === name) {
                      if (prop in contacts[i]) {
                        return contacts[i][prop];
                      } else {
                        return "No such property";
                      }
                    }
                  }
                  return "No such contact";
                }
                --
                freec02_jsalgodstruct-p287
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/profile-lookup
                ----

                ----
            Generate Random Fractions with js (**)
                Math.random() =generates a random from 0, to (but not including) 1(!!)
                --
                Note: Like Storing Values with the Assignment Operator, all function calls will be resolved before the return executes, so we can return the value of the Math.random() function. (????)
                --
                function randomFraction() {
                  return Math.random();
                }
                --
                freec02_jsalgodstruct-p291
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-fractions-with-javascript
            Generate Random Whole Numbers with js (= 1-9)
                = multiplying by 10 + round down with Math.floor()
                return Math.floor(Math.random() * 10);
                --
                freec02_jsalgodstruct-p293
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-whole-numbers-with-javascript
            Generate Random Whole Numbers within a Range (***(!))
                return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
                --
                freec02_jsalgodstruct-p296
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-whole-numbers-within-a-range
            Convert a String to a Number (**(!!))  (+if the first char. of the string can't be converted to a num, then it will return ___)
                const a = parseInt("007");
                  (=will return NaN, if first char can't be converted)
                --
                function convertToInteger(str) {
                  return parseInt(str);
                }
                  .
                convertToInteger("56");
                --
                freec02_jsalgodstruct-p298
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-parseint-function
            Convert string to Num. with specific Base (**(!))
                radix can be an int, between 2 and 36
                return parseInt(str, 2);
                --
                freec02_jsalgodstruct-p300
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-parseint-function-with-a-radix
            Use the Conditional (Ternary) Operator (!!)
                function findGreater(a, b) {
                  if(a > b) {
                    return "a is greater";
                  }
                  else {
                    return "b is greater or equal";
                  }
                }
                  .
                function findGreater(a, b) {
                  return a > b ? "a is greater" : "b is greater or equal";
                }
                --
                freec02_jsalgodstruct-p303
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-conditional-ternary-operator
            Use Multiple Conditional (Ternary) Operators (!)  @@@(@)
                function findGreaterOrEqual(a, b) {
                  if (a === b) {
                    return "a and b are equal";
                  }
                  else if (a > b) {
                    return "a is greater";
                  }
                  else {
                    return "b is greater";
                  }
                }
                  =  [+format for readability] **
                function findGreaterOrEqual(a, b) {
                  return (a === b) ? "a and b are equal" 
                    : (a > b) ? "a is greater" 
                    : "b is greater";
                }
                --
                function checkSign(num) {
                  return (num > 0) ? "positive"
                    : (num < 0) ? "negative"
                    : "zero";
                }
                  .
                checkSign(10);
                --
                freec02_jsalgodstruct-p306
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-multiple-conditional-ternary-operators
            te recursion: 'base case'
                tells the recursive function when it no longer needs to call itself
                (= the simple case where the return value is already known)
                   [='If the function is written correctly, eventually the base case will be reached.']
                --
                [+(!!) "the counterintuitivity of 'backwards' (=n - 1)"
                --
                freec02_jsalgodstruct-p309
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-countdown
            Use Recursion to Create a Countdown (!!)
                function countup(n) {
                  if (n < 1) {
                    return [];
                  } else {
                    const countArray = countup(n - 1);
                    countArray.push(n);
                    return countArray;
                  }
                }
                console.log(countup(5));
                --
                -- ===vvvv
                function countdown(n) {
                  if (n < 1) {
                    return [];
                  } else {
                    const arr = countdown(n - 1);
                    arr.unshift(n);
                    // =has to be put in backwards(!!)
                    return arr;
                  }
                }
                --
                function countdown(n){
                   return n < 1 ? [] : [n].concat(countdown(n - 1));
                }
                --
                function countdown(n){
                   return n < 1 ? [] : [n, ...countdown(n - 1)];
                }
                --
                freec02_jsalgodstruct-p309
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-countdown
            Use Recursion to Create a Range of Numbers (!!!!! =Apa) ___SEEMORE(!!!!!)
                function rangeOfNumbers(startNum, endNum) {
                  if (endNum - startNum === 0) {
                    return [startNum];
                  } else {
                    var numbers = rangeOfNumbers(startNum, endNum - 1);
                    numbers.push(endNum);
                    return numbers;
                  }
                }
                --
                function rangeOfNumbers(startNum, endNum) {
                  return startNum === endNum
                    ? [startNum]
                    : rangeOfNumbers(startNum, endNum - 1).concat(endNum);
                }
                --
                function rangeOfNumbers(startNum, endNum) {
                  return startNum === endNum
                    ? [startNum]
                    : [...rangeOfNumbers(startNum, endNum - 1), endNum ];
                }
                --
                freec02_jsalgodstruct-p312
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-range-of-numbers
                ----


            ES6 (!!(!!)) ****

                ----
            ES 6 introduces ____ (**)
                - arrow functions
                - classes
                - modules
                - promises
                - generators
                - let and const
                (+if a browser only supports js5: =use a transpiler)
                --
                freec02_jsalgodstruct-p314
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/compare-scopes-of-the-var-and-let-keywords
            rep: differences between var and let (!!)
                var variables: global if declared outside function
                  local if declared inside function
                --
                let: =same as var(!!)
                  + limits the var to inside a
                   - block
                   - statement
                   - expression
                = if declared inside them(!!)
                --
                var numArray = [];
                for (var i = 0; i < 3; i++) {
                  numArray.push(i);
                }
                console.log(numArray);
                console.log(i);
                  .
                This behavior will cause problems if you were to create a function and store it for later use inside a for loop that uses the i variable.
                eg. this will show 3 (instead of two)
                  .
                var printNumTwo;
                for (var i = 0; i < 3; i++) {
                  if (i === 2) {
                    printNumTwo = function() {
                      return i;
                    };
                  }
                }
                console.log(printNumTwo());
                --
                freec02_jsalgodstruct-p315,p318
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/compare-scopes-of-the-var-and-let-keywords
            test-example (=comparing different scopes with let)
                function checkScope() {
                  let i = 'function scope';
                  if (true) {
                    let i = 'block scope';
                    console.log('Block scope i is: ', i);
                  }
                  console.log('Function scope i is: ', i);
                  return i;
                }
                --
                freec02_jsalgodstruct-p315,p318
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/compare-scopes-of-the-var-and-let-keywords
            [for some: =modern use when declaring variables]
                = many use const by default, unless they know they will need to reassign the value (in which case they use let)
                --
                freec02_jsalgodstruct-p326
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/mutate-an-array-declared-with-const
            Note: what const means for objects (=including arrays and functions) (!!!!)  *****(TT)
                (!!) prevents reassignment of the variable identifier for the object (eg. an array), but(!!!!) the object itself can be changed
                  .
                const s = [5, 6, 7];
                s = [1, 2, 3];
                  // will trigger error
                s[2] = 45;
                  // this is fine
                console.log(s);
                  .
                ((=(!!) when const is used, you cannot use the variable identifier s to point to a different array using the assignment operator (!!))
                --
                freec02_jsalgodstruct-p326
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/mutate-an-array-declared-with-const
            change an array declared with const in place(!!)
                const s = [5, 7, 2];
                function editInPlace() {
                  "use strict"
                  s[0] = 2;
                  s[1] = 5;
                  s[2] = 7;
                }
                editInPlace();   
                --
                freec02_jsalgodstruct-p326
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/mutate-an-array-declared-with-const
            Prevent Object Mutation (***(!))
                let obj = {
                  name:"FreeCodeCamp",
                  review:"Awesome"
                };
                Object.freeze(obj);
                obj.review = "bad";
                obj.newProp = "Test";
                console.log(obj); 
                --
                freec02_jsalgodstruct-p329
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/prevent-object-mutation
            Catching an Error (and displaying it on the console **) *****
                function freezeObj() {
                  const MATH_CONSTANTS = {
                    PI: 3.14
                  };
                  // Only change code below this line
                  Object.freeze(MATH_CONSTANTS);
                  // Only change code above this line
                  try {
                    MATH_CONSTANTS.PI = 99;
                  } catch(ex) {
                    console.log(ex);
                  }
                  return MATH_CONSTANTS.PI;
                }
                const PI = freezeObj();
                --
                freec02_jsalgodstruct-p329
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/prevent-object-mutation
                ----

                ----
            Create Concise Anonymous Functions (*****) ****** ___SEEMORE ___SEEMORE *****
                using 'arrow functions'
                [= naming a function may not be necessary (=espec. when passing a function as an argument to another function] **(*)
                  .
                --  (older way):
                const myFunc = function() {
                  const myVar = "value";
                  return myVar;
                }
                -- es6 way (!!)
                const myFunc = () => {
                  const myVar = "value";
                  return myVar;
                }
                // '() =>' instead of 'function()'
                --
                --
                -- +Ex.
                var magic = function() {
                  return new Date();
                };
                   =becomes
                const magic = () => {
                  return new Date();
                };
                freec02_jsalgodstruct-p332
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-arrow-functions-to-write-concise-anonymous-functions
            even simpler arrow function (=no function body, just a return value) ******
                const myFunc = () => "value";
                --
                freec02_jsalgodstruct-p332
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-arrow-functions-to-write-concise-anonymous-functions
            Write Arrow Functions with Parameters (** **)  @@(@)
                const doubler = (item) => item * 2;
                doubler(4);
                  -- (or, if the arrow function has just one parameter:
                
                const doubler = item => item * 2;
                --
                freec02_jsalgodstruct-p335
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters
            Arrow Function with More than One Argument
                const multiplier = (item, multi) => item * multi;
                multiplier(4, 2);
                --
                const myConcat = (arr1, arr2) => arr1.concat(arr2);
                  .
                console.log(myConcat([1, 2], [3, 4, 5]));
                --
                freec02_jsalgodstruct-p335
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters
                ----

                ----
            Default Parameters for Functions (***)  @@@h
                const greeting = (name = "Anonymous") => "Hello " + name;
                  .
                console.log(greeting("John"));
                console.log(greeting());
                // ie. prints "Hello Anonymous"
                  when the argument is not provided
                   (=undefined)
                const increment = (number, value = 1) => number + value;
                --
                freec02_jsalgodstruct-p335
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions
            rest parameters for functions: =how are the extra parameters stored? 
                = in an array(!)
                --
                freec02_jsalgodstruct-p341
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters
            Use the Rest Parameter with Function Parameters (****)  ___SEEMORE(** =reduce arg. nr 2)  @@@@
                function howMany(...args) {
                  return "You have passed " + args.length + " arguments.";
                }
                console.log(howMany(0, 1, 2));
                console.log(howMany("string", null, [1, 2, 3], { }));
                  // =gives '3' and '4'
                -- --
                const sum = (...args) => {
                  return args.reduce((a, b) => a + b, 0);
                }
                console.log(sum(1, 5, 6))
                --
                freec02_jsalgodstruct-p341
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters
            good (=use of) the rest parameter for functions(!)
                = eleminates the need to check the args array (+allows one to apply map(), filter() and reduce() (= on the parameters-array)
                --
                freec02_jsalgodstruct-p341
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters
            Use the Spread Operator to Evaluate Arrays In-Place  !!@@@@! 
                = allows us to expand arrays and other expressions in places where multiple parameters or elements are expected
                  .
                es5:
                var arr = [6, 89, 3, 45];
                var maximus = Math.max.apply(null, arr);
                  .
                = We have to use Math.max.apply(null, arr) because Math.max(arr) returns NaN. Math.max() expects comma-separated arguments, but not an array. 
                --
                es6:
                const arr = [6, 89, 3, 45];
                const maximus = Math.max(...arr);
                 // '...arr' returns un unpacked array (=it spreads it)
                // +note: it only works in place (=to a function / in an array literal)
                // = 'const spreaded = ...arr;' will not work
                --
                const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
                let arr2;
                  .
                arr2 = [...arr1];  // Change this line
                  .
                console.log(arr2);
                --
                freec02_jsalgodstruct-p344
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place
            Use Destructuring Assignment to Extract Values from Objects (****)  @@@@
                classic es5 syntax:
                const user = { name: 'John Doe', age: 34 };
                  .
                const name = user.name;
                const age = user.age;
                    --
                new es6 syntax:
                  .
                const { name, age } = user;
                //allows one to dustruct
                --
                const HIGH_TEMPERATURES = {
                  yesterday: 75,
                  today: 77,
                  tomorrow: 80
                };
                  .
                const { today, tomorrow } = HIGH_TEMPERATURES
                --
                freec02_jsalgodstruct-p347
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-extract-values-from-objects
            Destructuring Assignment (=give new names when extracting values fr. objects with destructuring) (*****(!!!))  @@@(@)
                const user = { name: 'John Doe', age: 34 };
                  .
                const { name: userName, age: userAge } = user;
                --
                const HIGH_TEMPERATURES = {
                  yesterday: 75,
                  today: 77,
                  tomorrow: 80
                };
                  .
                const { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES; 
                --
                freec02_jsalgodstruct-p350
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-objects
                ----

                ----
            Use Destructuring Assignment to Assign Variables from Nested Objects  @@@
                const user = {
                  johnDoe: { 
                    age: 34,
                    email: 'johnDoe@freeCodeCamp.com'
                  }
                };
                  .
                // extract + give new names(!!)
                const { johnDoe: { age: userAge, email: userEmail }} = user;
                --
                const LOCAL_FORECAST = {
                  yesterday: { low: 61, high: 75 },
                  today: { low: 64, high: 77 },
                  tomorrow: { low: 68, high: 80 }
                };
                const { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;
                --
                freec02_jsalgodstruct-p353
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-nested-objects
            Destructuring Assignment to Assign Variables from Arrays (=vs the spread operator(!!))  TT@@(@)
                spread unpacks everything in the array into a comma-separated list
                (=you cannot pick and choose values)
                --
                freec02_jsalgodstruct-p356
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-arrays
            Destructuring Assignment to Assign Variables from Arrays (=access first and second values)  @@@+
                const [a, b] = [1, 2, 3, 4, 5, 6];
                console.log(a, b);
                --
                freec02_jsalgodstruct-p356
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-arrays
            Destructuring Assignment to Assign Variables from Arrays (=access arbitrary values)  @@@+
                const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
                console.log(a, b, c);
                  // =1, 2, 5
                -- (+ex: use destruct. assignm. to swap the variables) (**** !!!!!!)
                let a = 8, b = 6;
                [a, b] = [b, a]
                console.log(a, b);
                --
                freec02_jsalgodstruct-p356
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-arrays
            Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements (=collect rest of elements into a separate array *)  @@@+
                (+is similar to Array.prototype.slice())
                  .
                const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
                console.log(a, b);
                console.log(arr);
                 // = 1, 2  and  [3, 4, 5, 7]
                +Note(!): The rest element only works correctly as the last var. in the list
                -- +Ex: remove first two elements from an array
                const source = [1,2,3,4,5,6,7,8,9,10];
                  .
                function removeFirstTwo(list) {
                  const [a, b, ...arr] = list;
                  return arr;
                }
                  .
                const arr = removeFirstTwo(source);
                --
                freec02_jsalgodstruct-p359
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements
            Destructure the object in a function argument itself (=can be done in some cases) (!!)  @@(@+
                const profileUpdate = (profileData) => {
                  const { name, age, nationality, location } = profileData;
                }
                // =destructures the object sent into the function
                  .
                // (+can also be done in place)
                const profileUpdate = ({ name, age, nationality, location }) => {
                  //=the values are destructured from
                  //  the function parameter for use
                  //  within the function
                }
                --  = pulling out max and min (!!!!)
                const stats = {
                  max: 56.78,
                  standard_deviation: 4.34,
                  median: 34.54,
                  mode: 23.87,
                  min: -0.75,
                  average: 35.85
                };
                  .
                const half = ({ max, min }) => (max + min) / 2.0; 
                --
                freec02_jsalgodstruct-p362
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters
                ----

                ----
            Create Strings using Template Literals (*****(!)*****) (=makes it easier to create complex strings)  (=STUDY (+ ___SEEMORE ))  !!@@@@! 
                const person = {
                  name: "Zodiac Hasbro",
                  age: 56
                };
                  .
                const greeting = `Hello, my name is ${person.name}!
                I am ${person.age} years old.`;
                  .
                console.log(greeting);
                  .
                     --
                = Obviates the classic 'string + string'-syntax ****(!)
                +Note(**): Don't have to insert explicit \n:s (**!)
                + can use ${a + b} etc (****)
                -- --
                const result = {
                  success: ["max-length", "no-amd", "prefer-arrow-functions"],
                  failure: ["no-var", "var-on-top", "linebreak"],
                  skipped: ["no-extra-semi", "no-dup-keys"]
                };
                function makeList(arr) {
                  const failureItems = [];
                  for (let i = 0; i < arr.length; i++) {
                    failureItems.push(`<li class="text-warning">${arr[i]}</li>`);
                  }
                    .
                  return failureItems;
                }
                  .
                const failuresList = makeList(result.failure);
                --
                const result = {
                  success: ["max-length", "no-amd", "prefer-arrow-functions"],
                  failure: ["no-var", "var-on-top", "linebreak"],
                  skipped: ["no-extra-semi", "no-dup-keys"]
                };
                function makeList(arr) {
                  "use strict";
                  // change code below this line
                  const failureItems = arr.map(item => `<li class="text-warning">${item}</li>`);
                  // change code above this line
                  return failureItems;
                }
                const failuresList = makeList(result.failure);
                --
                freec02_jsalgodstruct-p366
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals
            Write Concise Object Literal Declarations Using Object Property Shorthand (****)!!)  ___SEEMORE (**)  @@@(@
                const getMousePosition = (x, y) => ({
                  x: x,
                  y: y
                });
                   = can be converted to:
                const getMousePosition = (x, y) => ({ x, y });
                  --
                const createPerson = (name, age, gender) => {
                  // Only change code below this line
                  return {
                    name,
                    age,
                    gender
                  };
                  // Only change code above this line
                };
                --
                freec02_jsalgodstruct-p369
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-object-property-shorthand
            Write Concise Declarative Functions with ES6 (=not having to use the function-keyword, as in es5) T**  @@@(@)
                = When Defining Functions in Objects (****(!!))
                const person = {
                  name: "Taylor",
                  sayHello: function() {
                    return `Hello! My name is ${this.name}.`;
                  }
                };
                  .
                const person = {
                  name: "Taylor",
                  sayHello() {  //=removing ': function'
                    return `Hello! My name is ${this.name}.`;
                  }
                };
                -- --
                // Only change code below this line
                const bicycle = {
                  gear: 2,
                  setGear(newGear) {
                    this.gear = newGear;
                  }
                };
                // Only change code above this line
                bicycle.setGear(3);
                console.log(bicycle.gear);
                --
                freec02_jsalgodstruct-p372
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6
            about classes in js (**T)
                [ = the class syntax (in js) is just syntax, and not a full-fledged class-based implementation of an object-oriented paradigm, unlike in languages such as Java, Python, Ruby, etc ]
                --
                freec02_jsalgodstruct-p375
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function
            instantiating objects (+and classes(?)) in es5 (*T)  @@(@)
                defining a constructor function + use the 'new' keyword to instantiate an object
                --
                freec02_jsalgodstruct-p375
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function
            Use class Syntax to Define a Constructor Function (=create objects using ____)  (+casing convention for class names in es6 (***TTT))  @@@
                = using the 'class' keyword
                  .
                es5:
                var SpaceShuttle = function(targetPlanet){
                  this.targetPlanet = targetPlanet;
                }
                var zeus = new SpaceShuttle('Jupiter');
                  .
                es6:
                  //+Note: Use PascalCase (!!!!)
                  // for class-names (in ES6)
                class SpaceShuttle {
                  constructor(targetPlanet) {
                    this.targetPlanet = targetPlanet;
                  }
                }
                const zeus = new SpaceShuttle('Jupiter');
                --
                // Only change code below this line
                class Vegetable {
                  constructor(name) {
                    this.name = name;
                  }
                }
                  .
                const carrot = new Vegetable('carrot');
                console.log(carrot.name); // Should display 'carrot'
                --
                freec02_jsalgodstruct-p375
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function
            T: the constructor method is a special method for _____
                = creating and initializing an object created with a class
                --
                freec02_jsalgodstruct-p375
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function
            Use getters and setters to Control Access to an Object (=WTF(########) ___SEEMORE ___SEEMORE (*****!!!!!))
                = obtain values from an object and set the value of a property within an object
                (eg. setter: modify value of an objects private variable, based on the value passed into the setter function)
                + could involve calculations, or even overwriting the previous value completely
                  .
                class Book {
                  constructor(author) {
                    this._author = author;
                  }
                  // getter
                  get writer() {
                    return this._author;
                // note: convention to precede name
                // of private var with '_'
                  }
                  // setter
                  set writer(updatedAuthor) {
                    this._author = updatedAuthor;
                  }
                }
                const novel = new Book('anonymous');
                console.log(novel.writer);
                novel.writer = 'newAuthor';
                console.log(novel.writer);
                -- --
                class Thermostat {
                  constructor(temperature) {
                    this.temperature = temperature;
                  }
                  get celsTemp() {
                    return 5/9 * (this._temperature - 32);
                  }
                  set celsTemp(updatedCelsTemp) {
                    this._temperature = 5/9 * (updatedCelsTemp - 32);
                  }
                }
                  .
                const thermos = new Thermostat(76); // Setting in Fahrenheit scale
                let temp = thermos.temperature; // 24.44 in Celsius
                thermos.temperature = 26;
                temp = thermos.temperature; // 26 in Celsius
                ---
                class Thermostat {
                  constructor(fahrenheit) {
                    this.fahrenheit = fahrenheit;
                  }
                  get temperature() {
                    return 5/9 * (this.fahrenheit - 32);
                  }
                  set temperature(celsius) {
                    this.fahrenheit = (celsius * 9) / 5 + 32;
                  }
                }
                  .
                const thermos = new Thermostat(76); // Setting in Fahrenheit scale
                let temp = thermos.temperature; // 24.44 in Celsius
                thermos.temperature = 26;
                temp = thermos.temperature; // 26 in Celsius
                --
                freec02_jsalgodstruct-p379
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-getters-and-setters-to-control-access-to-an-object
                ----


            Modules, Imports and Reuse (**(!))  (=ES6)
                (+first: named export)

                ----
            Create a Module Script  -->> @@(@)
                <html>
                  <body>
                    <script type="module" src="filename.js"></script>
                = 'A script that uses this module type can now use the import and export features'
                  </body>
                </html>
                --
                freec02_jsalgodstruct-p383
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-a-module-script
            export one single code block (=for use/share with other files) *
                export const add = (x, y) => {
                  return x + y;
                }
                (=a common way to export a single function)
                // or like this
                  .
                const add = (x, y) => {
                  return x + y;
                }
                  .
                export { add };
                --
                freec02_jsalgodstruct-p386
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-export-to-share-a-code-block
            Export Several Variables/Functions (=for use in other code) ***(*!)
                (=several exports, or:)
                export { add, subtract };
                  .
                -- +Ex:
                  .
                const uppercaseString = (string) => {
                  return string.toUpperCase();
                }
                  .
                const lowercaseString = (string) => {
                  return string.toLowerCase()
                }
                  .
                export { uppercaseString, lowercaseString };
                --
                freec02_jsalgodstruct-p386
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-export-to-share-a-code-block
            importing the function 'add' (=from the file 'math_functions.js' (**(!!))  (+importing more than one function) ****
                // './' =look in same file as the current/importing file
                // (=relative path, is required when importing)
                import { add } from './math_functions.js';
                  .
                import { add, subtract } from './math_functions.js';
                --
                import { uppercaseString, lowercaseString } from './string_functions.js';
                  .
                uppercaseString("hello");
                lowercaseString("WORLD!");
                --
                freec02_jsalgodstruct-p389
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/reuse-javascript-code-using-import
            Import Everything from a File (***(!)) [+alias/custom name(??)]
                import * as myMathModule from "./math_functions.js";
                // =will create an object called myMathModule
                (=is just a variable name (=can be named anything))
                  .
                + can then be accessed in this way:
                myMathModule.add(2,3);
                myMathModule.subtract(5,3);
                --
                import * as stringFunctions from "./string_functions.js";
                  .
                stringFunctions.uppercaseString("hello");
                stringFunctions.lowercaseString("WORLD!");
                --
                freec02_jsalgodstruct-p392
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use--to-import-everything-from-a-file
            Create an Export Fallback with 'export default'
                // a named function
                export default function add(x, y) {
                  return x + y;
                }
                  .
                // a named function
                export default function(x, y) {
                  return x + y;
                }
                  .
                Note: Can only have one default export value in each module or file
                (+export default cannot be used with  var, let or const (??))
                --
                freec02_jsalgodstruct-p395
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-an-export-fallback-with-export-default
            Import a Default Export (**)
                import add from "./math_functions.js";
                // (=the imported value 'add'
                // is not surrounded by {})
                [+"any name can be used for add
                 when importing (since it is the default)
                --
                import subtract from "./math_functions.js";  
                  .
                subtract(7,4);
                --
                freec02_jsalgodstruct-p398
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/import-a-default-export
                ----

                ----
            Create a JavaScript Promise (** (??))  (@@@)
                = make a promise to do something (usually asynchronously)
                (+when the task completes, you either fulfill your promise or fail to do so)
                --
                freec02_jsalgodstruct-p401
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-a-javascript-promise
            Syntax for Promises (**)
                'Promise' is a constructor function
                = you need to use the 'new' keyword to create one
                  .
                It takes:
                - a function as its argument +
                - two parameters: resolve and reject
                    (=these are methods used to determine the outcome of the promise)
                    --
                const myPromise = new Promise((resolve, reject) => {
                  .
                });
                -- Ex 1:
                const makeServerRequest = new Promise((resolve, reject) => {
                  .
                });
                --
                freec02_jsalgodstruct-p401
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-a-javascript-promise
            A promise has three states: ____
                - pending
                - fulfilled
                - rejected
                (=last Ex (=1) is stuck in pending, cause we didn't add any way to complete the promise)
                --
                freec02_jsalgodstruct-p403
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/complete-a-promise-with-resolve-and-reject
            Complete a Promise with resolve and reject [!!]
                const myPromise = new Promise((resolve, reject) => {
                  if(condition here) {
                    resolve("Promise was fulfilled");
                  } else {
                    reject("Promise was rejected");
                  }
                });
                // =here strings are used for the argument of these functions, but it can really be anything
                // 'Often, it might be an object, that you would use data from, to put on your website or elsewhere.'
                --
                const makeServerRequest = new Promise((resolve, reject) => {
                  // responseFromServer represents a response from a server
                  let responseFromServer;
                    . 
                  if(responseFromServer) {
                    resolve("We got the data");
                  } else {  
                    reject("Data not recieved");
                  }
                });
                --
                freec02_jsalgodstruct-p403
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/complete-a-promise-with-resolve-and-reject
            handle a fulfilled / rejected promise (!!)
                fulfilled: = then
                rejected: = catch
                --
                freec02_jsalgodstruct-p406
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/handle-a-fulfilled-promise-with-then
            promises are most useful when ____
                you have a process that takes an unknown amount of time in your code (ie. something asynchronous), often a server request  @@(@)
                = can take some time, and when its done you usually want to do something with the response from the server
                [which uses the 'then'-method] **
                 (which is executed immed. after the promise is fulfilled with resolve)
                  .
                myPromise.then(result => {
                  . 
                });
                [=''result' comes from the argument given to the 'resolve' method(??)]
                --
                const makeServerRequest = new Promise((resolve, reject) => {
                  // responseFromServer is set to true to represent a successful response from a server
                  let responseFromServer = true;
                    . 
                  if(responseFromServer) {
                    resolve("We got the data");
                  } else {  
                    reject("Data not received");
                  }
                });
                  .
                makeServerRequest.then(result => {
                  console.log(result);
                })
                --
                freec02_jsalgodstruct-p406
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/handle-a-fulfilled-promise-with-then
            Handle a Rejected Promise (**)  ___seemore
                = with catch
                (=handled immediately after a promise's reject method is called)
                  .
                myPromise.catch(error => {
                  . 
                });
                (=error is the method passed in to the reject method)
                --
                const makeServerRequest = new Promise((resolve, reject) => {
                  // responseFromServer is set to false to represent an unsuccessful response from a server
                  let responseFromServer = false;
                    
                  if(responseFromServer) {
                    resolve("We got the data");
                  } else {  
                    reject("Data not received");
                  }
                });
                  .
                makeServerRequest.then(result => {
                  console.log(result);
                });
                  .
                makeServerRequest.catch(error => {
                  console.log(error);
                });
                --
                freec02_jsalgodstruct-p409
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/handle-a-rejected-promise-with-catch
                ----

            regular expressions

                ----
            Searching a Regex (****!! ****)
                .test()
                  (=common method)
                /the/  //<-quotes not needed
                  .
                let testStr = "freeCodeCamp";
                let testRegex = /Code/;
                testRegex.test(testStr);
                  [ =  /Code/.test("freeCodeCamp");  ]
                --
                let myString = "Hello, World!";
                let myRegex = /Hello/;
                let result = myRegex.test(myString); // Change this line
                --
                freec02_jsalgodstruct-p412
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/using-the-test-method
            Match Literal Strings
                let testStr = "Hello, my name is Kevin.";
                let testRegex = /Kevin/;
                testRegex.test(testStr);
                  ++is Case Sensitive(!!)
                --
                let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
                let waldoRegex = /Waldo/; // Change this line
                let result = waldoRegex.test(waldoIsHiding);
                --
                freec02_jsalgodstruct-p414
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings
            Match a Literal String with Different Possibilities (="alternatives")
                let petString = "James has a pet cat.";
                let petRegex = /dog|cat|bird|fish/;
                let result = petRegex.test(petString);
                --
                freec02_jsalgodstruct-p417
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities
            Ignore Case While Matching **(!!)
                let myString = "freeCodeCamp";
                let fccRegex = /freecodecamp/i;
                let result = fccRegex.test(myString);
                --
                freec02_jsalgodstruct-p420
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching
            Extract Matches (=extracting the actual matching part) **
                .match()
                  .
                "Hello, World!".match(/Hello/);
                let ourStr = "Regular expressions";
                let ourRegex = /expressions/;
                ourStr.match(ourRegex);
                  = returns:
                ["Hello"]
                ["expressions"]
                  .
                [!!]Note that the .match syntax is the "opposite" of the .test method you have been using thus far:
                'string'.match(/regex/);
                /regex/.test('string');
                --
                let extractStr = "Extract the word 'coding' from this string.";
                let codingRegex = /coding/;
                let result = extractStr.match(codingRegex);
                --
                freec02_jsalgodstruct-p423
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/extract-matches
            Find More Than the First Match
                let testStr = "Repeat, Repeat, Repeat";
                let ourRegex = /Repeat/;
                testStr.match(ourRegex);
                  .
                let repeatRegex = /Repeat/g;
                testStr.match(repeatRegex);
                --
                let twinkleStar = "Twinkle, twinkle, little star";
                let starRegex = /twinkle/gi;
                let result = twinkleStar.match(starRegex);
                --
                freec02_jsalgodstruct-p426
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/find-more-than-the-first-match
            Match Anything with Wildcard Period
                . (dot or period)
                  .
                let humStr = "I'll hum a song";
                let hugStr = "Bear hug";
                let huRegex = /hu./;
                huRegex.test(humStr);
                huRegex.test(hugStr);
                --
                let exampleStr = "Let's have fun with regular expressions!";
                let unRegex = /.un/;
                let result = unRegex.test(exampleStr);
                --
                freec02_jsalgodstruct-p429
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-anything-with-wildcard-period
            Match Single Character with Multiple Possibilities (=bracket character-classes) *(*)
                let bigStr = "big";
                let bagStr = "bag";
                let bugStr = "bug";
                let bogStr = "bog";
                let bgRegex = /b[aiu]g/;
                bigStr.match(bgRegex);
                bagStr.match(bgRegex);
                bugStr.match(bgRegex);
                bogStr.match(bgRegex);
                --
                let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
                let vowelRegex = /[aeiou]/gi;
                let result = quoteSample.match(vowelRegex);
                --
                freec02_jsalgodstruct-p432
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-character-with-multiple-possibilities
                ----

                ----
            Match Letters of the Alphabet (=a-z_classes)
                let catStr = "cat";
                let batStr = "bat";
                let matStr = "mat";
                let bgRegex = /[a-e]at/;
                catStr.match(bgRegex);
                batStr.match(bgRegex);
                matStr.match(bgRegex);
                --
                let quoteSample = "The quick brown fox jumps over the lazy dog.";
                let alphabetRegex = /[A-Za-z]/gi;
                let result = quoteSample.match(alphabetRegex);
                --
                freec02_jsalgodstruct-p435
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-letters-of-the-alphabet
            Match Numbers and Letters of the Alphabet
                let jennyStr = "Jenny8675309";
                let myRegex = /[a-z0-9]/ig;
                jennyStr.match(myRegex);
                --
                let quoteSample = "Blueberry 3.141592653s are delicious.";
                let myRegex = /[h-s2-6]/gi;
                let result = quoteSample.match(myRegex);
                --
                freec02_jsalgodstruct-p438
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-numbers-and-letters-of-the-alphabet
            Match all except the specified letters (!!)
                let quoteSample = "3 blind mice.";
                let myRegex = /[^aeiou0-9]/gi;
                let result = quoteSample.match(myRegex);
                --
                freec02_jsalgodstruct-p440
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-characters-not-specified
            Match Characters that Occur One or More Times
                let difficultSpelling = "Mississippi";
                let myRegex = /s+/gi;
                let result = difficultSpelling.match(myRegex);
                --
                freec02_jsalgodstruct-p442
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-one-or-more-times
            Match Characters that Occur Zero or More Times
                let soccerWord = "gooooooooal!";
                let gPhrase = "gut feeling";
                let oPhrase = "over the moon";
                let goRegex = /go*/;
                soccerWord.match(goRegex);
                gPhrase.match(goRegex);
                oPhrase.match(goRegex);
                --
                let chewieRegex = /Aa*/;
                  .
                let result = chewieQuote.match(chewieRegex);
                --
                freec02_jsalgodstruct-p444
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-zero-or-more-times
            returned value when not able to make a match (!)
                null
                --
                freec02_jsalgodstruct-p444
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-zero-or-more-times
            Find Characters with Lazy Matching, eg. non-greedy '*' (****(!!))
                .*?
                /t[a-z]*?i/
                    Note: Parsing HTML with regular expressions should be avoided, but pattern matching an HTML string with regular expressions is completely fine.
                --
                let text = "<h1>Winter is coming</h1>";
                let myRegex = /<.*?>/;
                  // =so matches the h1-tag, not whole line (**(!!))
                let result = text.match(myRegex);
                --
                freec02_jsalgodstruct-p447
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/find-characters-with-lazy-matching
            Find one or more Criminals (=capital letter C + as many as possible)
                let reCriminals = /C+/;
                --
                freec02_jsalgodstruct-p450
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/find-one-or-more-criminals-in-a-hunt
                ----

                ----
            Match Beginning String Patterns
                let firstString = "Ricky is first and can be found.";
                let firstRegex = /^Ricky/;
                firstRegex.test(firstString);
                let notFirst = "You can't find Ricky now.";
                firstRegex.test(notFirst);
                --
                let rickyAndCal = "Cal and Ricky both like racing.";
                let calRegex = /^Cal/; // Change this line
                let result = calRegex.test(rickyAndCal);
                --
                freec02_jsalgodstruct-p453
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-beginning-string-patterns
            Match Ending String Patterns
                let caboose = "The last car on a train is the caboose";
                let lastRegex = /caboose$/;
                let result = lastRegex.test(caboose);
                --
                freec02_jsalgodstruct-p456
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-ending-string-patterns
            Match All Letters and Numbers (+underscore)
                [A-Za-z0-9_]
                \w
                    ='shorthand character class'
                --
                Use the shorthand character class \w to count the number of alphanumeric characters in various quotes and strings.
                  .
                let quoteSample = "The five boxing wizards jump quickly.";
                let alphabetRegexV2 = /\w/g;
                let result = quoteSample.match(alphabetRegexV2).length;
                --
                freec02_jsalgodstruct-p458
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-all-letters-and-numbers
            Match Everything But(!) Letters and Numbers
                [^A-Za-z0-9_]
                \W
                --
                let quoteSample = "The five boxing wizards jump quickly.";
                let nonAlphabetRegex = /\W/g;
                let result = quoteSample.match(nonAlphabetRegex).length;
                --
                freec02_jsalgodstruct-p461
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-everything-but-letters-and-numbers
            Match All Numbers (!)
                \d  ([0-9]
                --
                let movieName = "2001: A Space Odyssey";
                let numRegex = /\d/g;
                let result = movieName.match(numRegex).length;
                --
                freec02_jsalgodstruct-p464
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-all-numbers
            Match All Non-Numbers (!)
                \D   [^0-9]
                --
                let movieName = "2001: A Space Odyssey";
                let noNumRegex = /\D/g; // Change this line
                let result = movieName.match(noNumRegex).length;
                --
                freec02_jsalgodstruct-p467
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-all-non-numbers
            Restrict Possible Usernames  ********  ___SEEMORE(!!)
                - Usernames can only use alpha-numeric characters.
                - The only numbers in the username have to be at the end. There can be zero or more of them at the end. Username cannot start with the number.
                - Username letters can be lowercase and uppercase.
                - Usernames have to be at least two characters long. A two-character username can only use alphabet letters as characters.
                ^[A-Za-z][A-Za-z]*\d*$
                --
                /^[a-z][a-z]+\d*$|^[a-z]\d\d+$/i
                /^[a-z]([0-9]{2,}|[a-z]+\d*)$/i;
                --
                freec02_jsalgodstruct-p470
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/restrict-possible-usernames
            Match Whitespace (**)
                \s    [ \r\t\f\n\v]
                  .
                let whiteSpace = "Whitespace. Whitespace everywhere!"
                let spaceRegex = /\s/g;
                whiteSpace.match(spaceRegex);
                    = This match call would return [" ", " "]
                --
                let sample = "Whitespace is important in separating words";
                let countWhiteSpace = /\s/g; // Change this line
                let result = sample.match(countWhiteSpace);
                --
                freec02_jsalgodstruct-p473
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-whitespace
            Match Non-Whitespace Characters
                \S     [^ \r\t\f\n\v]
                  .
                let whiteSpace = "Whitespace. Whitespace everywhere!"
                let nonSpaceRegex = /\S/g;
                whiteSpace.match(nonSpaceRegex).length;
                --
                let sample = "Whitespace is important in separating words";
                let countNonWhiteSpace = /\S/g; // Change this line
                let result = sample.match(countNonWhiteSpace);
                --
                freec02_jsalgodstruct-p476
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-non-whitespace-characters
            Specify Upper and Lower Number of Matches **
                let A4 = "aaaah";
                let A2 = "aah";
                let multipleA = /a{3,5}h/;
                multipleA.test(A4);
                multipleA.test(A2);
                --
                let ohStr = "Ohhh no";
                let ohRegex = /Oh{3,6} no/; // Change this line
                let result = ohRegex.test(ohStr);
                --
                freec02_jsalgodstruct-p479
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/specify-upper-and-lower-number-of-matches
            Specify Only the Lower Number of Matches
                let A4 = "haaaah";
                let A2 = "haah";
                let A100 = "h" + "a".repeat(100) + "h";  (!!)
                let multipleA = /ha{3,}h/;
                multipleA.test(A4);
                multipleA.test(A2);
                multipleA.test(A100);
                --
                let haStr = "Hazzzzah";
                let haRegex = /Haz{4,}ah/; // Change this line
                let result = haRegex.test(haStr);
                --
                freec02_jsalgodstruct-p482
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/specify-only-the-lower-number-of-matches
            Specify Exact Number of Matches
                let A4 = "haaaah";
                let A3 = "haaah";
                let A100 = "h" + "a".repeat(100) + "h";
                let multipleHA = /ha{3}h/;
                multipleHA.test(A4);
                multipleHA.test(A3);
                multipleHA.test(A100);
                    (would return false, true, false)
                let timStr = "Timmmmber";
                let timRegex = /Tim{4}ber/; // Change this line
                let result = timRegex.test(timStr);
                --
                freec02_jsalgodstruct-p485
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/specify-exact-number-of-matches
                ----

                ----
            Check for All or None  (=0 or 1) **
                let american = "color";
                let british = "colour";
                let rainbowRegex= /colou?r/;
                rainbowRegex.test(american);
                rainbowRegex.test(british);
                --
                let favWord = "favorite";
                let favRegex = /favou?rite/; // Change this line
                let result = favRegex.test(favWord);
                --
                freec02_jsalgodstruct-p488
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-all-or-none
            Positive and Negative Lookahead ****** (!!!!) + ___SEEMORE ***** !!!!! 
                (?=
                    positive lookahead
                    (?=x)
                    \zex
                (?!
                    negative lookahead
                    (?!x)
                    \ze[^x]
                  .
                let quit = "qu";
                let noquit = "qt";
                let quRegex= /q(?=u)/;
                let qRegex = /q(?!u)/;
                quit.match(quRegex);
                noquit.match(qRegex);
                  .
                = a (naively) simple password checker that looks for between 3 and 6 characters and at least one number:
                --
                freec02_jsalgodstruct-p491
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/positive-and-negative-lookahead
            Check For Mixed Grouping of Characters
                let testStr = "Pumpkin";
                let testRegex = /P(engu|umpk)in/;
                testRegex.test(testStr);
                --
                let myString = "Eleanor Roosevelt";
                let myRegex = /(Franklin|Eleanor).*Roosevelt/;
                let result = myRegex.test(myString);
                // After passing the challenge experiment with myString and see how the grouping works
                --
                freec02_jsalgodstruct-p495
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-mixed-grouping-of-characters
            using the match method on a string will return ____ (=if it matches) **(!!)
                = will return an array (with the matched substrings (+along with its captured groups)
                --
                freec02_jsalgodstruct-p498
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/reuse-patterns-using-capture-groups
            Reuse Patterns Using Capture Groups
                let repeatRegex = /(\w+) \1 \1/;
                repeatRegex.test(repeatStr); // Returns true
                repeatStr.match(repeatRegex); // Returns ["row row row", "row"]
                --
                let repeatNum = "42 42 42";
                let reRegex = /^(\d+) \1 \1$/; // Change this line
                let result = reRegex.test(repeatNum);
                --
                freec02_jsalgodstruct-p498
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/reuse-patterns-using-capture-groups
            Use Capture Groups to Search and Replace (********* !!!!!!!)
                .replace()
                parameters to replace():
                - the first regex you want to search for
                - the replace-string / function to do something
                  .
                let wrongText = "The sky is silver.";
                let silverRegex = /silver/;
                wrongText.replace(silverRegex, "blue");
                --
                +Accessing Capture Groups ****(!!!!)
                "Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1');
                    =the replace string will return 'Camp Code'
                --
                let str = "one two three";
                let fixRegex = /(\w+)\s(\w+)\s(\w+)/;
                let replaceText = "$3 $2 $1";
                let result = str.replace(fixRegex, replaceText);
                --
                freec02_jsalgodstruct-p501
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/use-capture-groups-to-search-and-replace
            Remove Whitespace from Start and End  (=using 'and's and 'replace with nothing') (****) !!!!!!!!!!! ************* ___SEEMORE (!!!!!) *********
                (= String.prototype.trim() can also be used)
                  .
                let hello = "   Hello, World!  ";
                let wsRegex = /^\s+|\s+$/g;
                let result = hello.replace(wsRegex, "");
                --
                freec02_jsalgodstruct-p504
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/remove-whitespace-from-start-and-end
                ----


            Debugging (!!!!) **

                ----
            the three typical error categories (!!T)
                - syntax errors
                    [+can generally be caught by modern editors]
                --
                - runtime errors (=the code fails to execute / has unexpected behavior)
                    while (true) (+no false-state to break it)
                - semantic (=or logical) errros (=when code doesn't do what it's meant to)
                    w + h (=instead of w * h)
                    --
                    harder to catch - can cause program to:
                    - crash
                    - run forever
                    - give incorrect output
                --
                freec02_jsalgodstruct-p506
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-the-javascript-console-to-check-the-value-of-a-variable
            general approaches to debugging
                - checking parts of the code + encircling the problem = ensuring each part returns correct values and behaves correctly
                - starting checking from middle of code (=can halve the code to check after that)
                --
                freec02_jsalgodstruct-p506
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-the-javascript-console-to-check-the-value-of-a-variable
            Use the JavaScript Console to Check the Value of a Variable
                both chrome and firefox have js consoles
                   [=cs-i, cs-j, cs-m in ffox]  ****
                (=also known as devtools)
                    +tip: if you're using different browsers / mobile phone:
                    = use desktop ffox or chrome
                --
                freec02_jsalgodstruct-p508
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-the-javascript-console-to-check-the-value-of-a-variable
            Print Output to the Console *****(!!!!!)
                console.log()
                = Placing it at strategic points in your code can show you the intermediate values of variables  (=using it as 'break/check-points')
                --
                let a = 5;
                let b = 1;
                a++;
                // Only change code below this line
                console.log(a);
                  .
                let sumAB = a + b;
                console.log(sumAB);
                --
                freec02_jsalgodstruct-p508
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-the-javascript-console-to-check-the-value-of-a-variable
            Understanding the Differences between the freeCodeCamp and Browser Console
                There are many methods to use with console to output messages.
                log, warn, and clear to name a few.
                  .
                The freeCodeCamp console will only output log messages, while the browser console will output all messages.
                When you make changes to your code, it will automatically run and show the logs. The freeCodeCamp console is then cleared each time your code runs.
                  .
                open the ffox-console:  cs-j
                --
                let output = "Get this to show once in the freeCodeCamp console and not at all in the browser console";
                console.log(output);  ????
                console.clear();
                --
                freec02_jsalgodstruct-p510
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/understanding-the-differences-between-the-freecodecamp-and-browser-console
            JavaScript recognizes seven primitive (immutable) data types: (TT *)
                - Boolean
                - Null
                - Undefined
                - Number
                - String
                - Symbol (new with ES6)
                - BigInt (new with ES2020),
                + one for mutable items: Object.
                (+ Note that in JavaScript, arrays are technically a type of object.)
                --
                freec02_jsalgodstruct-p513
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-typeof-to-check-the-type-of-a-variable
            Check the Type of a Variable
                using 'typeof'
                    = check the data structure / type  of a variable
                    (which is useful in debugging with multiple data types)
                [= type errors can lurk in calculations or function calls (eg. trying to add a number and a string)]
                  .
                +Tip: Be careful especially when you're accessing and working with external data in the form of a JavaScript Object Notation (JSON) object.
                console.log(typeof "");
                console.log(typeof 0);
                console.log(typeof []);
                console.log(typeof {});
                    = will display the strings
                string, number, object, and object.
                  .
                --
                let seven = 7;
                let three = "3";
                console.log(seven + three);
                // Only change code below this line
                console.log(typeof three);
                console.log(typeof seven);
                --
                freec02_jsalgodstruct-p513
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-typeof-to-check-the-type-of-a-variable
            Catch Misspelled Variable and Function Names
                 .
                --
                freec02_jsalgodstruct-p516
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-misspelled-variable-and-function-names
            Catch Unclosed Parentheses, Brackets, Braces and Quotes (!!!!(!))  ___MFR  @@@(@@! 
                let myArray = [1, 2, 3];
                let arraySum = myArray.reduce((previous, current) =>  previous + current);
                console.log(`Sum of array values is: ${arraySum}`);   
                --
                freec02_jsalgodstruct-p519
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-unclosed-parentheses-brackets-braces-and-quotes
                ----

                ----
            Catch Mixed Usage of Single and Double Quotes
                const grouchoContraction = "I've had a perfectly wonderful evening, but this wasn't it.";
                const quoteInString = "Groucho Marx once said 'Quote me as saying I was mis-quoted.'";
             ## const uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';
                --
                let innerHtml = "<p>Click here to <a href=\"#Home\">return home</a></p>";
                console.log(innerHtml);
                --
                freec02_jsalgodstruct-p523
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-mixed-usage-of-single-and-double-quotes
            things that evaluates as false in js(!!TT)  TT@@(@)
                Almost every value on its own in JavaScript evaluates to true,
                except what are known as the "falsy" values:
                - false
                - 0
                - "" (an empty string)
                - NaN
                - undefined
                - null
                --
                freec02_jsalgodstruct-p527
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator
            Catch Use of Assignment Operator Instead of Equality Operator
                let x = 7;
                let y = 9;
                let result = "to come";
                  .
                if(x === y) {
                  result = "Equal!";
                } else {
                  result = "Not equal!";
                }
                  .
                console.log(result);
                --
                freec02_jsalgodstruct-p527
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator
            Catch Missing Open and Closing Parenthesis After a Function Call
                eg. if has forgotten parentheses after a function call
                  .
                = the result of a function call is saved in a variable for other use in your code.
                This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns. (****(!!))
                  .
                function myFunction() {
                  return "You rock!";
                }
                let varOne = myFunction;
                let varTwo = myFunction();
                  .
                Here varOne is the function myFunction, and varTwo is the string 'You rock!'.
                --
                function getNine() {
                  let x = 6;
                  let y = 3;
                  return x + y;
                }
                  .
                let result = getNine();
                console.log(result);
                --
                freec02_jsalgodstruct-p531
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-missing-open-and-closing-parenthesis-after-a-function-call
            Catch Arguments Passed in the Wrong Order When Calling a Function
                If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense.
                  .
                 ...
                --
                freec02_jsalgodstruct-p534
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-arguments-passed-in-the-wrong-order-when-calling-a-function
            Catch Off By One Errors When Using Indexing
                (=OBOE errors)
                eg. last index is always(!!) 'someth.length - 1'
                  .
                'If you try to access an index equal to the length, the program may throw an "index out of range" reference error or print undefined.'
                  .
                +Tip: When using string / array methods that takes index ranges as arguments, read the docs =if the methods are inclusive or not(!!)
                --
                function countToFive() {
                  let firstFive = "12345";
                  let len = firstFive.length;
                  for (let i = 1; i <= len; i++) {
                     // etc
                    console.log(firstFive[i]);
                  }
                }
                  .
                countToFive();
                    --
                function countToFive() {
                  let firstFive = "12345";
                  let len = firstFive.length;
                  // Only change code below this line
                  for (let i = 0; i < len; i++) {
                  // Only change code above this line
                    console.log(firstFive[i]);
                  }
                }
                  .
                countToFive();
                --
                freec02_jsalgodstruct-p534
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-arguments-passed-in-the-wrong-order-when-calling-a-function
            Use Caution When Reinitializing Variables Inside a Loop (!! (??))
                eg. when it's necessary to
                - save information
                - increment counters
                - re-set variables within a loop
                (+issue: should be reinitialized, and aren't, or vice versa)
                --
                function zeroArray(m, n) {
                  // Creates a 2-D array with m rows and n columns of zeroes
                  let newArray = [];
                  for (let i = 0; i < m; i++) {
                    // Adds the m-th row into newArray
                    let row = [];
                 // eg. first put outside loop
                 // which makes it global(!!)
                    for (let j = 0; j < n; j++) {
                      // Pushes n zeroes into the current row to create the columns
                      row.push(0);
                    }
                    // Pushes the current row, which now has n zeroes in it, to the array
                    newArray.push(row);
                  }
                  return newArray;
                }
                  .
                let matrix = zeroArray(3, 2);
                console.log(matrix);
                --
                freec02_jsalgodstruct-p540
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-caution-when-reinitializing-variables-inside-a-loop
            Prevent Infinite Loops with a Valid Terminal Condition (!!)
                // EG, NOT LIKE THIS(!!)
                function loopy() {
                  while(true) {
                    console.log("Hello, world!");
                  }
                }
                  .
                One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.
                -- (
                function myFunc() {
                  for (let i = 1; i <= 4; i += 2) {
                    console.log("Still going!");
                  }
                }
                -- )
                freec02_jsalgodstruct-p543
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/prevent-infinite-loops-with-a-valid-terminal-condition
                ----

            Basic Data Structures (****)  (=arrays and objects)

                ----
            Use an Array to Store a Collection of Data
                let simpleArray = ['one', 2, 'three', true, false, undefined, null];
                  // = a one-dimensional array
                console.log(simpleArray.length);
                --
                freec02_jsalgodstruct-p547
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/use-an-array-to-store-a-collection-of-data
            analyze/describe: (=next ex:) an array w. a 'dictionary' inside (!!)  (+define a simple array)
                let complexArray = [
                  [
                    {
                      one: 1,
                      two: 2
                    },
                    {
                      three: 3,
                      four: 4
                    }
                  ],
                  [
                    {
                      a: "a",
                      b: "b"
                    },
                    {
                      c: "c",
                      d: "d"
                    }
                  ]
                ];
                    =a multi-dim. array, +it contains js objects(!!)
                (= js arrays are capable of storing complex objects(!!))
                --
                let yourArray = ["by", 3, true, 5, 6];
                --
                freec02_jsalgodstruct-p547
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/use-an-array-to-store-a-collection-of-data
            Access an Array's Contents Using Bracket Notation
                let ourArray = ["a", "b", "c"];
                  // first item is the 'zeroth'
                let ourVariable = ourArray[0];
                    // getting an item
                ourArray[1] = "not b anymore";
            // NOTE: =don't use let ;);) ****(!!)
                    // setting an item
                --
                freec02_jsalgodstruct-p551
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/access-an-arrays-contents-using-bracket-notation
            Add Items to an Array (=add element at end / beginning) ******(!!!!)
                push()
                unshift()
                   --
                let twentyThree = 'XXIII';
                let romanNumerals = ['XXI', 'XXII'];
                  .
                romanNumerals.unshift('XIX', 'XX');
                  .
                romanNumerals.push(twentyThree);
                  [+ One can also pass Variables (!!)] **
                --
                function mixedNumbers(arr) {
                  // Only change code below this line
                  arr.push(7, 'VIII', 9);
                  arr.unshift('I', 2, 'three');
                  // Only change code above this line
                  return arr;
                }
                  .
                console.log(mixedNumbers(['IV', 5, 'six']));
                --
                freec02_jsalgodstruct-p555
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-items-to-an-array-with-push-and-unshift
            Remove Items from an Array (=from the end / front) *****(!!!!)
                pop()
                shift()
                   --
                let greetings = ['whats up?', 'hello', 'see ya!'];
                  .
                greetings.pop();
                greetings.shift();
                let popped = greetings.pop();
                --
                function popShift(arr) {
                  let popped = arr.pop(); // Change this line
                  let shifted = arr.shift(); // Change this line
                  return [shifted, popped];
                }
                  .
                console.log(popShift(['challenge', 'is', 'not', 'complete']));
                --
                freec02_jsalgodstruct-p558
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/remove-items-from-an-array-with-pop-and-shift
            Remove Items (=from the middle of an array (+more than one)) ****** (!!) *****
                splice()
                  = takes three arguments:
                - startindex (=0-based)
                - how many elem.s to remove
                (- new elements to be added)
                  .
                let array = ['today', 'was', 'not', 'so', 'great'];
                  .
                array.splice(2, 2);
                     .
                let array = ['I', 'am', 'feeling', 'really', 'happy'];
                  .
                let newArray = array.splice(3, 2);
                  //newArray = ['really', 'happy']
                --
                const arr = [2, 4, 5, 1, 7, 5, 2, 1];
                // Only change code below this line
                arr.splice(0,1);
                arr.splice(3,4);
                // Only change code above this line
                console.log(arr);
                  // =remaining should add up to 10
                  // (eg. 4, 5, 1)
                --
                freec02_jsalgodstruct-p561
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/remove-items-using-splice
            Add Items Using splice()
                    (=Array.splice())
                = using the third parameter(!)
                  .
                const numbers = [10, 11, 12, 12, 15];
                const startIndex = 3;
                const amountToDelete = 1;
                  .
                numbers.splice(startIndex, amountToDelete, 13, 14);
                console.log(numbers);
                 // =any number of elements (separ. by commas) can be added
                --
                function htmlColorNames(arr) {
                  // Only change code below this line
                  arr.splice(0, 2, 'DarkSalmon', 'BlanchedAlmond');
                  // Only change code above this line
                  return arr;
                }
                  .
                console.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));
                --
                freec02_jsalgodstruct-p565
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-items-using-splice
            Copy Array Items  (+note fr. own tests)
                using slice()
                = it copies / extracts a given number of elements to a new array, leaving the array it is called upon untouched.
                2 parameters:
                - index at which to begin extraction
                - index at which to stop extraction (= will occur up to, but not including the element at this index)  eg. same as python slicing(!)
                  .
                let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];
                  .
                let todaysWeather = weatherConditions.slice(1, 3);
                [NOTE (=FR. TESTING): seems to be 'start-index' + 'num. of elements to return'
                --
                freec02_jsalgodstruct-p569
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-items-using-splice
                ----

                ----
            Copy All Elements of an Array (=easily) **(!!)  (=using ES6)
                ='the spread operator'
                let thisArray = [true, true, undefined, false, null];
                let thatArray = [...thisArray];
                --
                function copyMachine(arr, num) {
                  let newArr = [];
                  while (num >= 1) {
                    // Only change code below this line
                    let obj = [...arr];
                    newArr.push(obj);
                    // Only change code above this line
                    num--;
                  }
                  return newArr;
                }
                  .
                console.log(copyMachine([true, false, true], 2));
                --
                freec02_jsalgodstruct-p572
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/copy-an-array-with-the-spread-operator
            Combine Arrays with the Spread Operator (**** (****))
                - can be used to combine arrays, or
                - insert all elements of one array into another (=at any index)
                  .
                let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];
                let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
                // = ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']
                --
                function spreadOut() {
                  let fragment = ['to', 'code'];
                  let sentence = ['learning', ...fragment, 'is', 'fun'];
                  return sentence;
                }
                  .
                console.log(spreadOut());
                --
                freec02_jsalgodstruct-p575
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/combine-arrays-with-the-spread-operator
            Check For The Presence of an Element (**(!))
                = using indexOf()
                returns:
                - position (or index) of the argument element
                - returns '-1' if the elem. doesn't exist in the array
                  .
                let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];
                  .
                fruits.indexOf('dates');
                fruits.indexOf('oranges');
                fruits.indexOf('pears');
                --
                function quickCheck(arr, elem) {
                  // Only change code below this line
                  if (arr.indexOf(elem) > -1) {
                    return true;
                  } else {
                    return false;
                  }
                  // Only change code above this line
                }
                  .
                console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));
                  .
            +Shorter better solution ****
            https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-check-for-the-presence-of-an-element-with-indexof/301154  **
                --
                freec02_jsalgodstruct-p578
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/check-for-the-presence-of-an-element-with-indexof
            Iterate Through All an Array's Items Using For Loops (!!) (=___SEEMORE)
                (+ can also be used: every(), forEach()
                "though(!) oftentimes, for-loops are the most flexible and offers the most amount of control"
                  .
                function greaterThanTen(arr) {
                  let newArr = [];
                  for (let i = 0; i < arr.length; i++) {
                    if (arr[i] > 10) {
                      newArr.push(arr[i]);
                    }
                  }
                  return newArr;
                }
                  .
                greaterThanTen([2, 12, 8, 14, 80, 0, 1]);
                --
                // = filters out all arrays containing the target number
                function filteredArray(arr, elem) {
                  let newArr = [];
                  // Only change code below this line
                  for (let i = 0; i < arr.length; i++) {
                    if (arr[i].indexOf(elem) == -1) {
                      newArr.push(arr[i]);
                    }
                  }
                  // Only change code above this line
                  return newArr;
                }
                  .
                console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));
                --
                freec02_jsalgodstruct-p581
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/iterate-through-all-an-arrays-items-using-for-loops
            Create complex multi-dimensional arrays (!!)
                = arrays can contain an infinite depth of arrays (which can each contain its own arrays etc (=multi-dim. / nested arrays)
                let nestedArray = [
                  ['deep'],
                  [
                    ['deeper'], ['deeper'] 
                  ],
                  [
                    [
                      ['deepest'], ['deepest']
                    ],
                    [
                      [
                        ['deepest-est?']
                      ]
                    ]
                  ]
                ];
                  (=five levels deep)
                console.log(nestedArray[2][1][0][0][0]);
                  .
                nestedArray[2][1][0][0][0] = 'deeper still';
                  .
                console.log(nestedArray[2][1][0][0][0]);
                --
                let myNestedArray = [
                  // Only change code below this line
                  ['unshift',
                    ['deep',
                      ['deeper',
                        ['deepest',
                      ]
                    ]
                  ], false, 1, 2, 3, 'complex', 'nested'],
                  ['loop', 'shift', 6, 7, 1000, 'method'],
                  ['concat', false, true, 'spread', 'array'],
                  ['mutate', 1327.98, 'splice', 'slice', 'push'],
                  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']
                  // Only change code above this line
                ];
                --
                freec02_jsalgodstruct-p585
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/create-complex-multi-dimensional-arrays
                ----

                ----
            Object in js can probably be translated/compared to ____ in many other languages
                dictionaries (hashes / hash-maps)
                  .
                (collections of key-value pairs)
                = pieces of data (eg. values)
                mapped to unique identifiers called properties (=keys)
                    +(!!) have very fast lookup times(!!)
                --
                freec02_jsalgodstruct-p585
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-key-value-pairs-to-javascript-objects
            Add Key-Value Pairs to JavaScript Objects (****(!!!!))
                const tekkenCharacter = {
                  player: 'Hwoarang',
                  fightingStyle: 'Tae Kwon Doe',
                  human: true
                };
                = a videogame character-object called 'tekkenCharacter'
                (with three properties that map to specific values)
                  .
                Add an additional property called 'origin' (eg. "country of origin")
                  .
                tekkenCharacter.origin = 'South Korea';
                tekkenCharacter['hair color'] = 'dyed orange';
                  //note: if no quotes(!!):
                const eyes = 'eye color';
                tekkenCharacter[eyes] = 'brown';
                  .
                   -->  = Now contains:
                {
                  player: 'Hwoarang',
                  fightingStyle: 'Tae Kwon Doe',
                  human: true,
                  origin: 'South Korea',
                  'hair color': 'dyed orange',
                  'eye color': 'brown'
                };
                --
                let foods = {
                  apples: 25,
                  oranges: 32,
                  plums: 28
                };
                  .
                foods.bananas = 13;
                foods.grapes = 35;
                foods['strawberries'] = 27;
                  .
                console.log(foods);
                --
                freec02_jsalgodstruct-p589
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-key-value-pairs-to-javascript-objects
            Modify an Object Nested Within an Object
                let nestedObject = {
                  id: 28802695164,
                  date: 'December 31, 2016',
                  data: {
                    totalUsers: 99,
                    online: 80,
                    onlineStatus: {
                      active: 67,
                      away: 13,
                      busy: 8
                    }
                  }
                };
                  .
                ='nestedObject' has three prop.s:
                - id (value is a number)
                - date (value is a string)
                - data (value is an object with its nested structure)
                   --
                assign 10 (instead of 8) to the property 'busy' **
                  .
                nestedObject.data.onlineStatus.busy = 10;
                --
                let userActivity = {
                  id: 23894201352,
                  date: 'January 1, 2017',
                  data: {
                    totalUsers: 51,
                    online: 42
                  }
                };
                  .
                userActivity.data.online = 45;
                  .
                console.log(userActivity);
                --
                freec02_jsalgodstruct-p592
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/modify-an-object-nested-within-an-object
            Access Property Names with Bracket Notation (+why this is very useful)
                let selectedFood = getCurrentFood(scannedItem);
                let inventory = foods[selectedFood];
                // = return the value of key in the 'foods' object
                // , or 'undefined' if it is not present
                  .
                'Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way' (**(!!))
                --
                let foods = {
                  apples: 25,
                  oranges: 32,
                  plums: 28,
                  bananas: 13,
                  grapes: 35,
                  strawberries: 27
                };
                  .
                function checkInventory(scannedItem) {
                  return foods[scannedItem];
                }
                  .
                console.log(checkInventory("apples"));
                --
                freec02_jsalgodstruct-p595
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation
            Use the delete Keyword to Remove Object Properties
                delete foods.apples;
                --
                let foods = {
                  apples: 25,
                  oranges: 32,
                  plums: 28,
                  bananas: 13,
                  grapes: 35,
                  strawberries: 27
                };
                  .
                delete foods.oranges; delete foods.plums; delete foods.strawberries;
                  .
                console.log(foods);
                --
                freec02_jsalgodstruct-p599
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/use-the-delete-keyword-to-remove-object-properties
            Check if an Object has a Property
                hasOwnProperty()  (=method)
                in  (=a keyword) **
                  .
                users.hasOwnProperty('Alan');
                'Alan' in users;
                --
                let users = {
                  Alan: {
                    age: 27,
                    online: true
                  },
                  Jeff: {
                    age: 32,
                    online: true
                  },
                  Sarah: {
                    age: 48,
                    online: true
                  },
                  Ryan: {
                    age: 19,
                    online: true
                  }
                };
                  .
                function isEveryoneHere(userObj) {
                  // Only change code below this line
                  return ['Alan', 'Jeff', 'Sarah', 'Ryan'].every(name => userObj.hasOwnProperty(name))
                  // Only change code above this line
                }
                  .
                console.log(isEveryoneHere(users));
                --
                freec02_jsalgodstruct-p602
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/check-if-an-object-has-a-property
            ITERATE THROUGH THE KEYS OF AN OBJECT WITH A FOR...IN STATEMENT (phew! very good *****) ___SEEMORE ******  @@@@
                = for our users object:
                for (let user in users) {
                  console.log(user);
                }
                  (=has to be used, since objects don't have a specific key-order (like arrays do))
                --
                const users = {
                  Alan: {
                    online: false
                  },
                  Jeff: {
                    online: true
                  },
                  Sarah: {
                    online: false
                  }
                }
                  .
                function countOnline(usersObj) {
                  let connected = 0;
                  for (let user in usersObj) {
                    if (usersObj[user].online === true) {
                      connected++;
                    }
                  }
                  return connected;
                }
                  .
                console.log(countOnline(users));
                --
                freec02_jsalgodstruct-p606
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/iterate-through-the-keys-of-an-object-with-a-for---in-statement
            Generate an Array of All Object Keys
                Object.keys(obj)
                  = will return an array (with strings representing each property in the object)
                --
                let users = {
                  Alan: {
                    age: 27,
                    online: false
                  },
                  Jeff: {
                    age: 32,
                    online: true
                  },
                  Sarah: {
                    age: 48,
                    online: false
                  },
                  Ryan: {
                    age: 19,
                    online: true
                  }
                };
                  .
                function getArrayOfUsers(obj) {
                  return Object.keys(obj);
                }
                  .
                console.log(getArrayOfUsers(users));
                --
                freec02_jsalgodstruct-p609
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/generate-an-array-of-all-object-keys-with-object-keys
            Modify an Array Stored in an Object
                (+some extra features for objects, using ES6 Map and Set objects in the Coding Interview Prep section)
                --
                let user = {
                  name: 'Kenneth',
                  age: 28,
                  data: {
                    username: 'kennethCodesAllDay',
                    joinDate: 'March 26, 2016',
                    organization: 'freeCodeCamp',
                    friends: [
                      'Sam',
                      'Kira',
                      'Tomo'
                    ],
                    location: {
                      city: 'San Francisco',
                      state: 'CA',
                      country: 'USA'
                    }
                  }
                };

                function addFriend(userObj, friend) {
                  // Only change code below this line
                  userObj.user.friends.push(friend);
                  return userObj.user.friends;
                  // Only change code above this line
                }

                console.log(addFriend(user, 'Pete'));
                --
                freec02_jsalgodstruct-p612
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/modify-an-array-stored-in-an-object
                ----


            Basic Algorithm Scripting (!! **)

                ----
            Convert Celsius to Fahrenheit (*)
                function convertToF(celsius) {
                  let fahrenheit = (celsius * 9) / 5 + 32;
                  return fahrenheit;
                }
                  .
                convertToF(30);
                --
                freec02_jsalgodstruct-p616
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/convert-celsius-to-fahrenheit
            Reverse a String (**(!!))  ___FUNCTIONAL_PIPELINES ___SEEMORE**  ******  @@@@
                function reverseString(str) {
                  let reversed = "";
                  for (let i = str.length - 1; i >= 0; i--) {
                    reversed += str[i];
                  }
                  console.log(reversed);
                  return reversed;
                }
                  .
                reverseString("hello");
            JAVASCRIPT FUNCTIONAL 
                --
                freec02_jsalgodstruct-p618
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/reverse-a-string
            Factorialize a Number (!!)
                https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-factorialize-a-number/16013  (=the hints and solutions (!!))
                function factorialize(num) {
                  if (num === 0) {
                    return 1;
                  }
                  return num * factorialize(num - 1)
                }
                  .
                factorialize(5);
                --
                freec02_jsalgodstruct-p620
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/factorialize-a-number
            Find the Longest Word in a String (****)
                function findLongestWordLength(str) {
                  let words = str.split(' ');
                  let maxlength = 0;
                  for (let i = 0; i < words.length; i++) {
                    if (words[i].length > maxlength) {
                      maxlength = words[i].length;
                    }
                  }
                  // console.log(maxlength);
                  return maxlength;
                }
                  .
                findLongestWordLength("The quick brown fox jumped over the lazy dog");
                --
            https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-find-the-longest-word-in-a-string/16015
                freec02_jsalgodstruct-p622
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/find-the-longest-word-in-a-string
            Return Largest Numbers in Arrays (!!)
                https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-find-the-longest-word-in-a-string/16015
                  .
                function largestOfFour(arr) {
                  const results = [];
                  // let largest = 0;
                  for (let i = 0; i < arr.length; i++) {
                    let largest = arr[i][0];
                    for (let j = 0; j < arr[i].length; j++) {
                      if (arr[i][j] > largest) {
                        largest = arr[i][j];
                      }
                    }
                    results[i] = largest;
                  }
                  console.log(results);
                  return results;
                }
                  .
                largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
                NOTE: PAY CLOSE ATTENTION TO THE TIMING OF STORING OF VARIABLES WHEN WORKING WITH LOOPS(!!) ;);)
                --
                freec02_jsalgodstruct-p624
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays
            Confirm the Ending (=check if a string 'str' ends with the given target string 'target') (=using array.slice, or regex)
                https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-confirm-the-ending/16006
                  .
                function confirmEnding(str, target) {
                  return str.slice(str.length - target.length) === target;
                }
                  .
                confirmEnding("Bastian", "n");
                --
                freec02_jsalgodstruct-p627
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/confirm-the-ending
            Repeat a Given String num Times (+return "" if num is negative) **(!!)  ___SEEMORE (****) !! 
                (+(!!) don't use the builtin repeat()-method)
                  --
                function repeatStringNumTimes(str, num) {
                  let accumulatedStr = "";
                    .
                  for (let i = 0; i < num; i++) {
                    accumulatedStr += str;
                  }
                    .
                  return accumulatedStr;
                }
                  --
                function repeatStringNumTimes(str, num) {
                  if (num < 1) {
                    return "";
                  } else {
                    return str + repeatStringNumTimes(str, num - 1);
                  }
                }
                  --
                function repeatStringNumTimes(str, num) {
                  return num > 0 ? str + repeatStringNumTimes(str, num - 1) : '';
                }
                --
                freec02_jsalgodstruct-p630
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/repeat-a-string-repeat-a-string
            Truncate a String (**)
                function truncateString(str, num) {
                  str = str.replace(/^(.{num})(.*)$/, '$1...');
                  console.log(str);
                  return str;
                }
                  .
                truncateString("A-tisket a-tasket A green and yellow basket", 8);
                  --
                function truncateString(str, num) {
                  if (str.length > num) {
                    let truncd = str.slice(0, num) + '...';
                    return truncd;
                  } else {
                    return str;
                  }
                 }

                truncateString("A-tisket a-tasket A green and yellow basket", 8);
                --
                freec02_jsalgodstruct-p632
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/truncate-a-string
                ----

                ----
            'Finders Keepers' (=return first elem. in an array that passes a "truth test"(!))  (+ ___SEEMORE ___SEEMORE ****** (!!!!!!))  [=VERY INTERESTING TERNARY-STATEMENT(=RECURSIVE) SOLUTION (!!!!!)
                function findElement(arr, func) {
                  let num = 0;
                  for (let i = 0; i < arr.length; i++) {
                    num = arr[i];
                    if (func(num)) {
                      console.log(num);
                      return num;
                    }
                  }
                    .
                  return undefined;
                }
                    .
                findElement([1, 2, 3, 4], num => num % 2 === 0);   
                --
                freec02_jsalgodstruct-p634
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/finders-keepers
            Boo who (='check if a value is classified as a boolean primitive + return true or false')
                function booWho(bool) {
                  if (typeof bool === "boolean") {
                    return true;
                  } else {
                    return false;
                  }
                }
                  .
                booWho(null);
                --
                freec02_jsalgodstruct-p636
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/boo-who
            Title Case a Sentence (*!) (++CHECKOUT THE FUNCTIONAL SOLUTIONS ******* ___SEEMORE ___SEEMORE ******** )
                function titleCase(str) {
                  const splitArr = str.split(' ');
                  const doneTitle = [];
                  for (let st in splitArr) {
                    doneTitle[st] = splitArr[st][0].toUpperCase() + splitArr[st].slice(1).toLowerCase();
                  }
                  return doneTitle.join(' ');
                }

                titleCase("I'm a little tea pot");
                --
            https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-title-case-a-sentence/16088
                --
                function titleCase(str) {
                  return str
                    .toLowerCase()
                    .split(" ")
                    .map(val => val.replace(val.charAt(0), val.charAt(0).toUpperCase()))
                    .join(" ");
                }
                  .
                titleCase("I'm a little tea pot");
                --
                function titleCase(str) {
                  return str
                    .toLowerCase()
                    .replace(/(^|\s)\S/g, L => L.toUpperCase());
                }
                --
                freec02_jsalgodstruct-p639
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/title-case-a-sentence
            Slice and Splice (!)  (+NOTE ABOUT PERSONAL PITFALLS(!!): =DON'T OVERUSE 'LET' (!!!!! (******)))
                function frankenSplice(arr1, arr2, n) {
                  let frankenArr = arr2.slice();
                  frankenArr.splice(n, 0, ...arr1);
                  return frankenArr;
                }
                  .
                frankenSplice([1, 2, 3], [4, 5, 6], 1);
                --
                function frankenSplice(arr1, arr2, n) {
                  // It's alive. It's alive!
                  let localArray = arr2.slice();
                  for (let i = 0; i < arr1.length; i++) {
                    localArray.splice(n, 0, arr1[i]);
                    n++;
                  }
                  return localArray;
                }
                --
                freec02_jsalgodstruct-p641
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/slice-and-splice
            Falsy Bouncer (*)
                convert value to boolean
                    Boolean(value);
                    !!value;
                  .
                function bouncer(arr) {
                  return arr.filter(Boolean);
                }
                --
                function bouncer(arr) {
                  let newArr = [];
                  for (let i = 0; i < arr.length; i++) {
                    if (arr[i]) newArr.push(arr[i]);
                  }
                  // console.log(newArr);
                  return newArr;
                }
                  .
                bouncer([7, "ate", "", false, 9]);
                --
                freec02_jsalgodstruct-p643
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/falsy-bouncer
            Where do I Belong
                https://www.w3schools.com/jsref/jsref_sort.asp
                  .
                function getIndexToIns(arr, num) {
                  arr.sort((a, b) => a - b);
                    . 
                  for (let i = 0; i < arr.length; i++) {
                    if (arr[i] >= num) {
                      console.log(i);
                      return i;
                    }
                  }
                    .
                  return arr.length;
                }
                --
                --
                function getIndexToIns(arr, num) {
                  return arr.filter(val => num > val).length;
                }
                Code Explanation
                - Count the number of entries that are smaller than the new value num
                - The new value would be inserted after these values
                  .
                Solution 3 (Click to Show/Hide)
                Using .findIndex()
                function getIndexToIns(arr, num) {
                  // sort and find right index
                  let index = arr
                    .sort((curr, next) => curr - next)
                    .findIndex(currNum => num <= currNum);
                  // Returns index or total length of arr
                  return index === -1 ? arr.length : index;
                }
                  .
                getIndexToIns([40, 60], 500);
                  .
                Code Explanation
                - First sort the array in ascending order, this is currently done using array functions for minimal footprint.
                - Once the array is sorted, we directly apply the .findIndex() where we are going to compare every element in the array until we find where num <= currNum - where the number we want to insert is less than or equal to the current number in the iteration.
                - Then we use ternary operations to check whether we got an index returned or -1. We only get -1 when the index was not found, meaning when we get a false for all elements in the array, and for such case, it would mean that num should be inserted at the end of the list. Hence, why we use arr.length.
                --
                freec02_jsalgodstruct-p645
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/where-do-i-belong
            Mutations
                procedural:
                  .
                function mutation(arr) {
                  let test = arr[1].toLowerCase();
                  let target = arr[0].toLowerCase();
                  for (let i = 0; i < test.length; i++) {
                    if (target.indexOf(test[i]) < 0) return false;
                  }
                  return true;
                }
                  .
                Code Explanation
                  .
                - First we make the two strings in the array lowercase. test will hold what we are looking for in target.
                - Then we loop through our test characters and if any of them is not found we return false.
                  .
                - If they are all found, the loop will finish without returning anything and we get to return true.
                --
                declarative:
                  .
                function mutation(arr) {
                  return arr[1]
                    .toLowerCase()
                    .split("")
                    .every(function(letter) {
                      return arr[0].toLowerCase().indexOf(letter) !== -1;
                    });
                }
                  .
                Code Explanation
                  .
                - Grab the second string, lowercase and turn it into an array; then make sure every one of its letters is a part of the lowercased first string.
                  .
                - Every will basically give you letter by letter to compare, which we do by using indexOf on the first string. indexOf will give you -1 if the current letter is missing. We check that not to be the case, for if this happens even once every will be false.
                --
                recursive:
                  .
                function mutation([ target, test ], i = 0) {
                  target = target.toLowerCase();
                  test = test.toLowerCase();
                  return i >= test.length
                    ? true
                    : !target.includes(test[i])
                      ? false
                      : mutation([ target, test ], i + 1);
                }
                [!!!!] - Note that nesting ternaries this deeply is typically not recommended in professional code.
                --
                freec02_jsalgodstruct-p649
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/mutations
            Chunky Monkey  (=split an array into groups the length of argum. 'size' + return them as a two-dimensional array) (=?????)
                - split array at pos. size
                  .
                function ChunkyArrayInGroups(arr, size) {
                  let newArr = [];
                  while (arr.length > 0) {
                    newArr.push(arr.splice(0, size));
                  }
                  return newArr;
                }
                  .
                Explanation:
                  .
                - Firstly, we create a variable. newArr is an empty array which we will push to.
                - Our while loop loops until the length of the array in our test is not 0.
                - Inside our loop, we push to the newArr array using arr.splice(0, size).
                - For each iteration of while loop, it deletes size number of elements from the front of arr and push them as an array to newArr.
                - Finally, we return the value of newArr.
                --
                freec02_jsalgodstruct-p652
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/chunky-monkey
                ----


            Classes and Object Oriented Programming **(!!)

                ----
            Object Oriented Programming means ____ (**T)
                organizes code into object definitions (=classes)
                = the classes group together data with related behavior
                   --
                - the data is an object's attributes, and
                - the behavior (or functions) are methods
                --
                freec02_jsalgodstruct-p654
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-basic-javascript-object
            object's (=like cars, birds etc) have ___
                car     wheel
                shop    items
                bird    wings
                 = these qualites (called properties)
                (eg. a car may have 3 wheels)
                --
                freec02_jsalgodstruct-p655
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-basic-javascript-object
            modeling objects in javascript ****(!!)****  (=with properties)
                let duck = {
                  // = two properties(!!)
                  name: "Aflac",
                  numLegs: 2
                };
                --
                let dog = {
                  name: "Rommel",
                  numLegs: 8
                };
                --
                freec02_jsalgodstruct-p655
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-basic-javascript-object
            Access the Properties of an Object (='short(!) notation')
                let duck = {
                  name: "Aflac",
                  numLegs: 2
                };
                console.log(duck.name);
                --
                freec02_jsalgodstruct-p658
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-dot-notation-to-access-the-properties-of-an-object
            Create a Method on an Object (****)!! 
                methods are properties that are functions(!)
                (= adds behavior
                  .
                let duck = {
                  name: "Aflac",
                  numLegs: 2,
                  sayName: function() {return "The name of this duck is " + duck.name + ".";}
                    // + one can use the bracket notation also(??)
                  // (+fr. next ex: why it can be a problem using 'objname.propname'(!!))
                };
                duck.sayName();
                --
                let dog = {
                  name: "Spot",
                  numLegs: 4,
                  sayLegs: function() {
                    return "This dog has " + dog.numLegs + " legs.";
                  }
                };
                  .
                dog.sayLegs();
                --
                freec02_jsalgodstruct-p660
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-method-on-an-object
            Make Code More Reusable with the this Keyword (**)
                sayName: function() {return "The name of this duck is " + duck.name + ".";}
                  // =fr. the last challenge
                --
                +Tip/Note (=why use 'this'): =makes the code still work if(!) the variable name changes(!!)  (+=if an object has many references to its properties)
                  .
                let duck = {
                  name: "Aflac",
                  numLegs: 2,
                  sayName: function() {return "The name of this duck is " + this.name + ".";}
                };
                  [++''this' is a deep topic, and the above example is only one way to use it]
                --
                let dog = {
                  name: "Spot",
                  numLegs: 4,
                  sayLegs: function() {return "This dog has " + this.numLegs + " legs.";}
                };
                  .
                dog.sayLegs();
                --
                freec02_jsalgodstruct-p663
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/make-code-more-reusable-with-the-this-keyword
            Define a Constructor Function (+what it is)  **(***(!!))  (+why constructors are so useful **)
                'Constructors' are functions that create new objects
                (=they define properties and behaviors that will belong to the new object)
                  .
                +useful because: =Group objects together based on shared characteristics and behavor (and share a blueprint that automates their creation)  p672
                  .
                function Bird() {
                  this.name = "Albert";
                  this.color = "blue";
                  this.numLegs = 2;
                }
                  .
                - Constructors are defined with a capitalized name (=to distinguish them from other functions that are not constructors)
                - Constructors use the keyword this to set properties of the object they will create (= Inside the constructor, this refers to the new object it will create(!!(**)) )
                - Constructors define properties and behaviors (=instead of returning a value as other functions might) (!!(*))
                --
                function Dog() {
                  this.name = "Adolph";
                  this.color = "purple";
                  this.numLegs = 6;
                }
                --
                freec02_jsalgodstruct-p666
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/define-a-constructor-function
            Use a Constructor to Create Objects (**(!))
                function Bird() {
                  this.name = "Albert";
                  this.color  = "blue";
                  this.numLegs = 2;
                }
                  .
                let blueBird = new Bird();
                // =the new operator is used when calling a constructor
                  (='create a new instance of Bird called 'bluebird'
                    .
                blueBird.name;
                blueBird.color;
                blueBird.numLegs;
                  .
                blueBird.name = 'Elvira';
                blueBird.name;
                --
                function Dog() {
                  this.name = "Rupert";
                  this.color = "brown";
                  this.numLegs = 4;
                }
                  .
                let hound = new Dog();
                --
                freec02_jsalgodstruct-p669
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-constructor-to-create-objects
            Extend Constructors to Receive Arguments (!!)  (=eg. solving that all new Birds created are named 'Albert')
                // let swan = new Bird();
                // swan.name = "Carlos";
                // swan.color = "white";
                ((manual method =not recommended (ie. if you have many birds(!!))))
                  .
                =Designing the Bird constructor  so it can accept parameters(!!) **
                  .
                function Bird(name, color) {
                  this.name = name;
                  this.color = color;
                  this.numLegs = 2;
                }
                    .
                let cardinal = new Bird("Bruce", "red");
                ( = 
                    cardinal.name
                    cardinal.color
                    cardinal.numLegs  )
                --
                function Dog(name, color) {
                  this.name = name;
                  this.color = color;
                  this.numLegs = 4;
                }
                  .
                let terrier = new Dog("Patrick", "white");
                --
                freec02_jsalgodstruct-p672
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/extend-constructors-to-receive-arguments
            Verify an Object's Constructor with instanceof (**)
                (=was an object created with a certain constructor-function?) **
                  .
                let Bird = function(name, color) {
                  this.name = name;
                  this.color = color;
                  this.numLegs = 2;
                }
                  .
                let crow = new Bird("Alexis", "black");
                  .
                crow instanceof Bird;  (=true)
                  --
                let canary = {
                  name: "Mildred",
                  color: "Yellow",
                  numLegs: 2
                };
                  .
                canary instanceof Bird;  (=false)
                --
                function House(numBedrooms) {
                  this.numBedrooms = numBedrooms;
                }
                  .
                let myHouse = new House(2);
                myHouse instanceof House;
                --
                freec02_jsalgodstruct-p675
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/verify-an-objects-constructor-with-instanceof
                ----

                ----
            Understand Own Properties
                = properties that are defined directly on the instance object
                , eg. 'duck', 'canary' (and every instance of Bird) will have
                its own copy of these properties (!!)
                  .
                function Bird(name) {
                  this.name = name;
                  this.numLegs = 2;
                }
                  .
                let duck = new Bird("Donald");
                let canary = new Bird("Tweety");
                    .
                    .
                let ownProps = [];
                  .
                for (let property in duck) {
                  if(duck.hasOwnProperty(property)) {
                    ownProps.push(property);
                  }
                }
                  .
                console.log(ownProps);
                  ( = ["name", "numLegs"])
                --
                function Bird(name) {
                  this.name = name;
                  this.numLegs = 2;
                }
                  .
                let canary = new Bird("Tweety");
                let ownProps = [];
                // Only change code below this line
                for (let property in canary) {
                  if(canary.hasOwnProperty(property)) {
                    ownProps.push(property);
                  }
                }
                --
                freec02_jsalgodstruct-p678
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-own-properties
            Use Prototype Properties to Reduce Duplicate Code
                (=numLegs will probably have the same value for all instances of Bird)
                Bird.prototype.numLegs = 2;
                  =allows you to add new properties to an object constructor from outside the original code block + adding it to the object's constructor
                  .
                console.log(duck.numLegs);
                console.log(canary.numLegs);
                  .
                'Nearly every object in JavaScript has a prototype property which is part of the constructor function that created it.'
                --
                function Dog(name) {
                  this.name = name;
                }
                  .
                Dog.prototype.numLegs = 2;
                  .
                let beagle = new Dog("Snoopy");
                --
                freec02_jsalgodstruct-p681
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-prototype-properties-to-reduce-duplicate-code
            the two types of properties for objects discussed thus far (****)!!TT
                own properties
                    = defined on the object instance itself
                function Bird(name) {
                  this.name = name;  //own property
                }
                  .
                prototype properties
                    = defined on the prototype
                Bird.prototype.numLegs = 2; // prototype property
                  .
                let duck = new Bird("Donald");
                --
                freec02_jsalgodstruct-p684
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties
            Iterate Over All Properties (=own and prototype (**** **** !!!!))
                let ownProps = [];
                let prototypeProps = [];
                  .
                for (let property in duck) {
                  if(duck.hasOwnProperty(property)) {
                    ownProps.push(property);
                  } else {
                    prototypeProps.push(property);
                  }
                }
                  .
                console.log(ownProps);
                    = ["name"]
                console.log(prototypeProps);
                    = ["numLegs"]
                --
                freec02_jsalgodstruct-p684
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties
            special constructor property located on object instances created (=like duck and beagle created in last challenge) **T
                the constructor property
                  .
                let duck = new Bird();
                let beagle = new Dog();
                  .
                console.log(duck.constructor === Bird); 
                console.log(beagle.constructor === Dog);
                  (=both tests would return true)
                --
                freec02_jsalgodstruct-p687
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property
            what is the 'constructor property'? (**)T  (+advantage and use of it)
                = is a reference to the constructor function that created the instance
                (+'The advantage of the constructor property is that it's possible to check for this property to find out what kind of object it is.' **(!))
                  .
                function joinBirdFraternity(candidate) {
                  if (candidate.constructor === Bird) {
                    return true;
                  } else {
                    return false;
                  }
                }
                  .
                + Note: Since the constructor property can be overwritten (which will be covered in the next two challenges) it’s generally better to use the instanceof method to check the type of an object.
                --
                function Dog(name) {
                  this.name = name;
                }
                  .
                // Only change code below this line
                function joinDogFraternity(candidate) {
                  if (candidate.constructor === Dog) {
                    return true;
                  } else {
                    return false;
                  }
                }
                --
                freec02_jsalgodstruct-p687
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property
            better/more effective way of adding properties to the prototype (=than adding them to the prototypes individually (which becomes tedious))  (**)
                [=this becomes tedious after more than for a few properties]
                Bird.prototype.eat = function() {
                  console.log("nom nom nom");
                }
                Bird.prototype.describe = function() {
                  console.log("My name is " + this.name);
                }
                    -- +better way:
                =set the prototype to a new object that already contains the properties (=this adds all the properties at once):
                  .
                Bird.prototype = {
                  numLegs: 2, 
                  eat: function() {
                    console.log("nom nom nom");
                  },
                  describe: function() {
                    console.log("My name is " + this.name);
                  }
                };
                --
                function Dog(name) {
                  this.name = name;
                }
                  .
                Dog.prototype = {
                  // Only change code below this line
                  numLegs: 4,
                  eat: function() {
                    console.log("Woff woff!");
                  },
                  describe: function() {
                    console.log("My name is " + this.name);
                  }
                };
                --
                freec02_jsalgodstruct-p690
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/change-the-prototype-to-a-new-object
            note: there is one crucial side effect of manually setting the prototype to a new object(??(??))  (** !!)  (+How to fix this Problem) *****
                =it erases the constructor property(!)
                    (ie. checks on this for which constructor function created the instance will give incorrect results)
                  .
                duck.constructor === Bird;
                duck.constructor === Object;
                duck instanceof Bird;
                    -- [+fix this by:
                =Whenever a prototype is manually set to a new object, remember to define the constructor-property:
                  .
                Bird.prototype = {
                  constructor: Bird,
                  numLegs: 2,
                  eat: function() {
                    console.log("nom nom nom");
                  },
                  describe: function() {
                    console.log("My name is " + this.name); 
                  }
                };
                --
                function Dog(name) {
                  this.name = name;
                }
                  .
                // Only change code below this line
                Dog.prototype = {
                  constructor: Dog,
                  numLegs: 4,
                  eat: function() {
                    console.log("nom nom nom");
                  },
                  describe: function() {
                    console.log("My name is " + this.name);
                  }
                };
                --
                freec02_jsalgodstruct-p693
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype
            Understand Where an Object’s Prototype Comes From  (+checking where it comes from) **(!!)
                = an object inherits ins prototype directly from the constructor function that created it
                  .
                function Bird(name) {
                  this.name = name;
                }
                  .
                let duck = new Bird("Donald");
                  [= duck inherits its prototype from the Bird constructor function.]
                     --
                You can show this relationship with the isPrototypeOf method:
                Bird.prototype.isPrototypeOf(duck);
                --
                function Dog(name) {
                  this.name = name;
                }
                  .
                let beagle = new Dog("Snoopy");
                  .
                Dog.prototype.isPrototypeOf(beagle);
                --
                freec02_jsalgodstruct-p695
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-where-an-objects-prototype-comes-from
            Understand the Prototype Chain
                All objects in JavaScript (with a few exceptions) have a prototype.
                Also, an object’s prototype itself is an object.
                  .
                function Bird(name) {
                  this.name = name;
                }
                  .
                typeof Bird.prototype;
                    --
                Because a prototype is an object, a prototype can have its own prototype! In this case, the prototype of Bird.prototype is Object.prototype:
                  .
                Object.prototype.isPrototypeOf(Bird.prototype);
                --
                freec02_jsalgodstruct-p699
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain
            =why its useful to test if an object's prototype = Object.prototype (????)
                Object.prototype.isPrototypeOf(Bird.prototype);
                  .
                =recalling (from the last challenge):
                let duck = new Bird("Donald");
                duck.hasOwnProperty("name");
                  .
                The hasOwnProperty method is defined in Object.prototype, which can be accessed by Bird.prototype, which can then be accessed by duck.
                This is an example of the prototype chain.
                  .
                In this prototype chain, Bird is the supertype for duck, while duck is the subtype.
                Object is a supertype for both Bird and duck.
                Object is a supertype for all objects in JavaScript.
                Therefore, any object can use the hasOwnProperty method.
                --
                function Dog(name) {
                  this.name = name;
                }
                  .
                let beagle = new Dog("Snoopy");
                  .
                Dog.prototype.isPrototypeOf(beagle);  // yields true
                  .
                // Fix the code below so that it evaluates to true
                Object.prototype.isPrototypeOf(Dog.prototype);
                --
                freec02_jsalgodstruct-p699
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain
                ----

                ----
            DRY (=Use Inheritance So You Don't Repeat Yourself)
                (ie. so you don't have to fix code in multiple places)
                Ex = the describe-function is shared by the two objects:
                  .
                Bird.prototype = {
                  constructor: Bird,
                  describe: function() {
                    console.log("My name is " + this.name);
                  }
                };
                Dog.prototype = {
                  constructor: Dog,
                  describe: function() {
                    console.log("My name is " + this.name);
                  }
                };
                    (=this code is NOT DRY(!!))
                    --
                function Animal() { };
                  .
                Animal.prototype = {
                  constructor: Animal, 
                  describe: function() {
                    console.log("My name is " + this.name);
                  }
                };
                  creating a supertype called Animal
                    ++
                Bird.prototype = {
                  constructor: Bird
                };
                Dog.prototype = {
                  constructor: Dog
                };
                   (=we can now remove the describe method from Bird and Dog(!))
                --
                function Cat(name) {
                  this.name = name;
                }
                  .
                Cat.prototype = {
                  constructor: Cat,
                };
                  .
                function Bear(name) {
                  this.name = name;
                }
                  .
                Bear.prototype = {
                  constructor: Bear,
                };
                  .
                function Animal() { }
                  .
                Animal.prototype = {
                  constructor: Animal,
                  eat: function() {
                    console.log("nom nom nom");
                  }
                };
                --
                freec02_jsalgodstruct-p703
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself
            Inherit Behaviors from a Supertype  [=step 1]
                function Animal() { }
                Animal.prototype.eat = function() {
                  console.log("nom nom nom");
                };
                  (=the supertype animal fr. the last challenge called Animal (that defined behaviors shared by all animals))
                   .
                +next: reuse methods of Animal inside Bird and Dog (=without defining them again)  =using inheritance
                - 1. Make an instance of the supertype (or parent)
                    let animal = new Animal();
                  (=the method we already know: creating an instance of Animal, using the 'new' operator, =bit too complex for this challenge)
                   .
                [+better Way:
                let animal = Object.create(Animal.prototype);
                    [=sets obj(=here Animal.prototype) as the new obj.s prototype]
                animal.eat();
                animal instanceof Animal;
                --
                function Animal() { }
                  .
                Animal.prototype = {
                  constructor: Animal,
                  eat: function() {
                    console.log("nom nom nom");
                  }
                };
                  .
                let duck = Object.create(Animal.prototype);
                let beagle = Object.create(Animal.prototype);
                --
                freec02_jsalgodstruct-p707
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype
            [step 2.] Set the Child's Prototype to an Instance of the Parent
                [rep. step 1. (for inheriting behavior from the parent/supertype): making a new instance of Animal]
                  .
                +Step 2: set the prototype of the child/subtype (in this case Bird) to be an instance of Animal
                Bird.prototype = Object.create(Animal.prototype);
                  .
                let duck = new Bird("Donald");
                duck.eat();
                --
                function Animal() { }
                  .
                Animal.prototype = {
                  constructor: Animal,
                  eat: function() {
                    console.log("nom nom nom");
                  }
                };
                  .
                function Dog() { }
                  .
                Dog.prototype = Object.create(Animal.prototype);
                  .
                let beagle = new Dog();
                --
                freec02_jsalgodstruct-p711
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent
            Reset an Inherited Constructor Property
                When an object inherits its prototype from another object, it also inherits the supertype's constructor property.
                  .
                function Bird() { }
                Bird.prototype = Object.create(Animal.prototype);
                let duck = new Bird();
                duck.constructor
                  .
                Bird.prototype.constructor = Bird;
                  //=reset so duck and all instances of Bird shows them as constructed by Bird, and not Animal(!!)
                duck.constructor
                --
                function Animal() { }
                function Bird() { }
                function Dog() { }
                  .
                Bird.prototype = Object.create(Animal.prototype);
                Dog.prototype = Object.create(Animal.prototype);
                  . v
                Bird.prototype.constructor = Bird;
                Dog.prototype.constructor = Dog;
                  .
                let duck = new Bird();
                let beagle = new Dog();
                --
                freec02_jsalgodstruct-p714
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property
            Add Methods After Inheritance (****) ****** !! 
                (='a constructor function that inherits its prototype object from a supertype constructor function can still have its own methods in addition to inherited methods')
                ((eg. Bird is a constructor that inherits its prototype from Animal:)
                function Animal() { }
                Animal.prototype.eat = function() {
                  console.log("nom nom nom");
                };
                function Bird() { }
                Bird.prototype = Object.create(Animal.prototype);
                Bird.prototype.constructor = Bird;
                    --
                =eg. adding behavior unique to the Bird objects (in this case, fly())
                  .
                Bird.prototype.fly = function() {
                  console.log("I'm flying!");
                };
                  .
                let duck = new Bird();
                duck.eat();
                  (= nom nom nom)
                duck.fly();
                  (= I'm flying!)
                --
                function Animal() { }
                Animal.prototype.eat = function() { console.log("nom nom nom"); };
                  .
                function Dog() { }
                  .
                Dog.prototype = Object.create(Animal.prototype);
                Dog.prototype.constructor = Dog;
                  .
                Dog.prototype.bark = function() {
                  console.log("Woof!");
                };
                  .
                let beagle = new Dog();
                --
                freec02_jsalgodstruct-p717
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance
            Override Inherited Methods
                [=rep. previous:
                - an object can inherit its behavior (methods) fr. another object
                    = by referencing its prototype object
                ChildObject.prototype = Object.create(ParentObject.prototype);
                    .
                + the ChildObject recieved its own methods
                    = by chaining them onto its prototype:
                ChildObject.prototype.methodName = function() {...};
                == ==
                Override an inherited method **(**)
                    = adding a method to ChildObject.prototype, using the same method name  as the one to override  (=overriding the eat() method from Animal)
                function Animal() { }
                Animal.prototype.eat = function() {
                  return "nom nom nom";
                };
                function Bird() { }
                  .
                Bird.prototype = Object.create(Animal.prototype);
                  .
                Bird.prototype.eat = function() {
                  return "peck peck peck";
                };
                   --
                - If you have an instance let duck = new Bird(); and you call duck.eat(), this is how JavaScript looks for the method on the prototype chain of duck:
                - 1. duck => Is eat() defined here? No.
                - 2. Bird => Is eat() defined here? => Yes. Execute it and stop searching.  (**)
                - 3. Animal => eat() is also defined, but JavaScript stopped searching before reaching this level.
                - 4. Object => JavaScript stopped searching before reaching this level.
                --
                function Bird() { }
                  .
                Bird.prototype.fly = function() { return "I am flying!"; };
                  .
                function Penguin() { }
                Penguin.prototype = Object.create(Bird.prototype);
                Penguin.prototype.constructor = Penguin;
                  . v
                Penguin.prototype.fly = function() {
                  return "Alas, this is a flightless bird.";
                };
                  .
                let penguin = new Penguin();
                console.log(penguin.fly());
                --
                freec02_jsalgodstruct-p721
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/override-inherited-methods
            Use a Mixin to Add Common Behavior Between Unrelated Objects
                ie, sharing behavior between unrelated objects (ie, when classic inheritance is not the best solution)
                Eg. 'Bird and Airplane can both fly, but Bird is not a type of Airplane (and vice versa)'
                    --
                A mixin allows other objects to use a collection of functions:
                let flyMixin = function(obj) {
                  obj.fly = function() {
                    console.log("Flying, wooosh!");
                  }
                };
                  .
                let bird = {
                  name: "Donald",
                  numLegs: 2
                };
                let plane = {
                  model: "777",
                  numPassengers: 524
                };
                  .
                flyMixin(bird);    // !!
                flyMixin(plane);   // !!
                --
                let bird = {
                  name: "Donald",
                  numLegs: 2
                };
                let boat = {
                  name: "Warrior",
                  type: "race-boat"
                };
                  .
                let glideMixin = function(obj) {
                  obj.glide = function() {
                    console.log("Just gliding along(!)");
                  }
                };
                  .
                glideMixin(bird);
                glideMixin(boat);
                --
                freec02_jsalgodstruct-p725
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-mixin-to-add-common-behavior-between-unrelated-objects
            Use Closure to Protect Properties Within an Object from Being Modified Externally
                (in the previous challenge:
                  bird had a public property name.
                  It is considered public because it can be accessed and changed outside of bird's definition.
                bird.name = "Duffy";
                   --
                +Simplest way to make this public property private, is by creating a variable within the constructor function
                (=changes the scope of that var. to be within the constructor function (eg. not globally available))
                    ie, can only be accessed and changed by the methods also within the constructor function
                  .
                function Bird() {
                  let hatchedEgg = 10;
                    .
                  this.getHatchedEggCount = function() { 
                  // = privileged method (=because it has access to the private variable 'hatchedEgg')
                  // (+this is possib. because hatchedEgg is declared in the same context as the method here)
                    return hatchedEgg;
                  };
                }
                let ducky = new Bird();
                ducky.getHatchedEggCount();
                --
                function Bird() {
                  let weight = 15;
                    .
                  this.getWeight = function() {
                    return weight;
                  };
                }
                --
                freec02_jsalgodstruct-p728
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-closure-to-protect-properties-within-an-object-from-being-modified-externally
            Understand the Immediately Invoked Function Expression (IIFE)
                = 'a common pattern in javascript is to execute as soon as it is declared'
                  .
                (function () {
                  console.log("Chirp, chirp!");
                })();
                  [=the function has no name, and is not stored in a variable]
                  [+the two parentheses at the end of the function-expression  cause it to be immediately executed or invoked]
                --
                  +How to convert a function (and subsequent call) to an IIFE:
                (- remove the subseq. function call)
                - remove the function name
                - wrap the whole function in parentheses
                - add '();' after the function
                  .
                (function () {
                  console.log("A cozy nest is ready");
                })();
                --
                freec02_jsalgodstruct-p731
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-immediately-invoked-function-expression-iife
            Use an IIFE to Create a Module (**)
                =IIFE:s are often used to group related functionality into a single object / module
                (eg. the two mixins created in an earlier challenge)(!!)
                  .
                function glideMixin(obj) {
                  obj.glide = function() {
                    console.log("Gliding on the water");
                  };
                }
                function flyMixin(obj) {
                  obj.fly = function() {
                    console.log("Flying, wooosh!");
                  };
                }
                  (=converted to ==>>
                let motionModule = (function () {
                  return {
                    glideMixin: function(obj) {
                      obj.glide = function() {
                        console.log("Gliding on the water");
                      };
                    },
                    flyMixin: function(obj) {
                      obj.fly = function() {
                        console.log("Flying, wooosh!");
                      };
                    }
                  }
                })();
                  = returns an object ('motionModule')
                This returned obj. contains all of the mixin behaviors, as properties of the object
                ((+the advantage of the module pattern, is that all of the motion behaviors can be packaged object, that can then be used by other parts of your code))
                  .
                motionModule.glideMixin(duck);
                duck.glide();
                --
                let funModule = (function () {
                  return {
                    isCuteMixin: function(obj) {
                      obj.isCute = function() {
                        return true;
                      };
                    },
                    singMixin: function(obj) {
                      obj.sing = function() {
                        console.log("Singing to an awesome tune");
                      };
                    }
                  }
                })();
                --
                freec02_jsalgodstruct-p734
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-an-iife-to-create-a-module
                ----


            Functional Programming **(!)

                ----
            functional programming is ____
                = like functions (in mathematics) map input to output to produce a result
                (+one can combine basic functions in many ways to build more and more complex programs)
                   --
                + core principles of functional programming:
                - functions are indpendent of the state of the program or global variables (=only depend on the arguments passed into them to make a calculation)
                - tries to limit any changes to the state of the program (+avoid changes to the global objects holding data)
                - functions have minimal side effects in the program (=outside the scope of the functions)
                --
                ++ breaks a program into small testable parts
                --
                - no dependency on the state of the program (which include global variables that are subject to change)
                - pure functions (=the same input always give the same output)
                - functions with limited side effects (=changes or mutations to the state of the program outside the function are carefully controlled)
                  .
                  Input -> Process -> Output
                --
                freec02_jsalgodstruct-p737
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/learn-about-functional-programming
            first functional function: ='prepareTea'
                // Function that returns a string representing a cup of green tea
                const prepareTea = () => 'greenTea';
                  .
                /*
                Given a function (representing the tea type) and number of cups needed, the
                following function returns an array of strings (each representing a cup of
                a specific type of tea).
                */
                const getTea = (numOfCups) => {
                  const teaCups = [];
                    .
                  for(let cups = 1; cups <= numOfCups; cups += 1) {
                    const teaCup = prepareTea();
                    teaCups.push(teaCup);
                  }
                  return teaCups;
                };
                  . v
                const tea4TeamFCC = getTea(40);
                --
                freec02_jsalgodstruct-p738
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/learn-about-functional-programming
            funct. termin: 'callbacks'  T
                the functions that are slipped or passed into another function to decide the invocation of that function
                = 'You may have seen them (eg. callbacks) passed to other methods, for example in filter, the callback function tells JavaScript the criteria for how to filter an array.'
                --
                freec02_jsalgodstruct-p741
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology
            funct. termin: 'first class functions'  T
                = Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value.
                In JavaScript, all functions are first class functions.
                --
                freec02_jsalgodstruct-p741
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology
            funct. termin: 'higher order functions'  T
                functions that take a function as an argument, or return a function as a return value
                --
                freec02_jsalgodstruct-p741
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology
            funct. termin: ____, then those functions can be called a 'lambda'  T
                When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a lambda.
                --
                freec02_jsalgodstruct-p741
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology
            get black and green tea (=passing a function as an argument) ((****))
                // Function that returns a string representing a cup of green tea
                const prepareGreenTea = () => 'greenTea';
                  .
                // Function that returns a string representing a cup of black tea
                const prepareBlackTea = () => 'blackTea';
                  .
                /*
                Given a function (representing the tea type) and number of cups needed, the
                following function returns an array of strings (each representing a cup of
                a specific type of tea).
                */
                const getTea = (prepareTea, numOfCups) => {
                  const teaCups = [];
                    .
                  for(let cups = 1; cups <= numOfCups; cups += 1) {
                    const teaCup = prepareTea();
                    teaCups.push(teaCup);
                  }
                  return teaCups;
                };
                  .
                const tea4GreenTeamFCC = getTea(prepareGreenTea, 27);
                const tea4BlackTeamFCC = getTea(prepareBlackTea, 13);
                  .
                console.log(
                  tea4GreenTeamFCC,
                  tea4BlackTeamFCC
                );   
                --
                freec02_jsalgodstruct-p741
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology
            imperative programming (T)
                "giving commands"
                = giving the computer a set of statements  to perform a task
                (+often, this changes the state of the program, like updating global variables)
                +A classic example of this:
                = a for-loop, that gives exact directions to iterate over the indices of an array
                --
                freec02_jsalgodstruct-p745
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-the-hazards-of-using-imperative-code
            +functional programming (in contrast to imperative programming) is ____
                a form of declarative programming
                = you tell the computer what you want done, by calling a method or function
                --
                freec02_jsalgodstruct-p745
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-the-hazards-of-using-imperative-code
                ----

                ----
            alternative to a for-loop in functional/declarative programming (eg. for iterating over an array) (***(T))
                = using the map method
                (+tip: =helps avoid semantic errors (like the 'off by one' errors))
                --
                freec02_jsalgodstruct-p745
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-the-hazards-of-using-imperative-code
            "looping over windows in a browser" (=looping over this "array", +some methods for dealing with this)  (+NOTE(!!): = ___SEEMORE (A LOT(!!)))
                // tabs is an array of titles of each site open within the window
                const Window = function(tabs) {
                  this.tabs = tabs; // We keep a record of the array inside the object
                };
                  .
                // When you join two windows into one window
                Window.prototype.join = function(otherWindow) {
                  this.tabs = this.tabs.concat(otherWindow.tabs);
                  return this;
                };
                  .
                // When you open a new tab at the end
                Window.prototype.tabOpen = function(tab) {
                  this.tabs.push('new tab'); // Let's open a new tab for now
                  return this;
                };
                  .
                // When you close a tab
                Window.prototype.tabClose = function(index) {
                    .
                  // Only change code below this line
                    .
                  const tabsBeforeIndex = this.tabs.splice(0, index); // Get the tabs before the tab
                  const tabsAfterIndex = this.tabs.splice(index + 1); // Get the tabs after the tab
                  ((ie, use slice (=instead of splice))
                  (( because splice changes
                     the original array it was called upon ))
            [[=a function changes a variable or something in an object]]
                    .
                  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together
                    .
                  // Only change code above this line
                    .
                  return this;
                 };
                    .
                // Let's create three browser windows
                const workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites
                const socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites
                const videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); // Entertainment sites
                    .
                // Now perform the tab opening, closing, and other operations
                const finalTabs = socialWindow
                  .tabOpen() // Open a new tab for cat memes
                  .join(videoWindow.tabClose(2)) // Close third tab in video window, and join
                  .join(workWindow.tabClose(1).tabOpen());
                console.log(finalTabs.tabs);
                --
                freec02_jsalgodstruct-p745
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/understand-the-hazards-of-using-imperative-code
            Avoid Mutations and Side Effects Using Functional Programming
                = it's easier to prevent bugs knowing your functions don't change anything (=including the function arguments or any global variable)
                --
                freec02_jsalgodstruct-p749
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/avoid-mutations-and-side-effects-using-functional-programming
            in funct. programming: changing or altering things is called ____, and the outcome is called ____
                mutation
                side effect
                --
                freec02_jsalgodstruct-p749
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/avoid-mutations-and-side-effects-using-functional-programming
            (((non-mutating function 'incrementer')))
                // The global variable
                let fixedValue = 4;
                  .
                function incrementer() {
                  return fixedValue +1;
                }   
                --
                freec02_jsalgodstruct-p749
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/avoid-mutations-and-side-effects-using-functional-programming
            why the internally non-mutating function 'incrementer' is not fully functional/pure  (****(*T))
                = the function would not work without the global variable 'fixedValue'
                  .
                --
                freec02_jsalgodstruct-p752
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/pass-arguments-to-avoid-external-dependence-in-a-function
            solving the 'use no global variables'-problem (+why this is good)
                = ['Another principle of functional programming is to always declare your dependencies explicitly.'
                ie, 'This means if a function depends on a variable or object being present, then pass that variable or object directly into the function as an argument.'
                  .
                There are several good consequences from this principle. The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.
                  .
                This can give you more confidence when you alter, remove, or add new code. You would know what you can or cannot change and you can see where the potential traps are.
                Finally, the function would always produce the same output for the same set of inputs, no matter what part of the code executes it.
                --
                // The global variable
                let fixedValue = 4;
                  .
                function incrementer(val) {
                  return val + 1;
                }
                --
                freec02_jsalgodstruct-p752
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/pass-arguments-to-avoid-external-dependence-in-a-function
            Refactor Global Variables Out of Functions  (+repetition  =two distinct principles for functional programming)
                - perform mutations on copies(!) of originals (= 'const newArr = arrVar' creates a reference, not(!!) a copy)
                - declare function parameters (=not using global objects/variables, ie. that computations inside a function only depends on the arguments passed to it)
                --
                // The global variable
                const bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "Philosophiæ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];
                  .
                function add(list, bookName) {
                  return [...list, bookName];
                }
                  .
                function remove(list, bookName) {
                  return list.filter(book => book !== bookName);
                }
                --
                freec02_jsalgodstruct-p756
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/refactor-global-variables-out-of-functions
            +(!) what it means that functions are first class objects in js
                    = can be saved in variables, stored in an object, and passed as function arguments
                --
                freec02_jsalgodstruct-p760
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-map-method-to-extract-data-from-an-array
            some simple array functions (=iterating over each item in an array + return a new array containing the results of calling the callback function on each element)  [=which does not mutate the orig. array]  *****(!!)
                map()  (= Array.prototype.map())
                  (=methods of the array object prototype)
                --
                when the callback is used, it is passed three arguments:
                - the current element being processed
                - the index of that element
                - the array upon which the map-method is called
                   --
                const users = [
                  { name: 'John', age: 34 },
                  { name: 'Amy', age: 20 },
                  { name: 'camperCat', age: 10 }
                ];
                  .
                const names = users.map(user => user.name);
                console.log(names);
                    .
                    = would return  [ 'John', 'Amy', 'camperCat' ]
                --
                // The global variable
                const watchList = [
                  {
                    "Title": "Inception",
                    "Year": "2010",
                    "Rated": "PG-13",
                    "Released": "16 Jul 2010",
                    "Runtime": "148 min",
                    "Genre": "Action, Adventure, Crime",
                    "Director": "Christopher Nolan",
                    "Writer": "Christopher Nolan",
                    "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
                    "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
                    "Language": "English, Japanese, French",
                    "Country": "USA, UK",
                    "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
                    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
                    "Metascore": "74",
                    "imdbRating": "8.8",
                    "imdbVotes": "1,446,708",
                    "imdbID": "tt1375666",
                    "Type": "movie",
                    "Response": "True"
                  },
                  {
                    "Title": "Interstellar",
                     ...
                     ...
                    "Type": "movie",
                    "Response": "True"
                  }
                ];
                  .
                const ratings = [];
                for (let i = 0; i < watchList.length; i++) {
                  ratings.push({title: watchList[i]["Title"], rating: watchList[i]["imdbRating"]});
                }
                  .
                console.log(JSON.stringify(ratings));
                --
                const ratings = watchList.map(item => ({
                  title: item["Title"],
                  rating: item["imdbRating"]
                }));
                  .
                Using ES6 notation, each item in array is processed to extract title and rating.
                Parantheses are needed to return an object.
                    //
                const ratings = watchList.map(({ Title: title, imdbRating: rating }) => ({title, rating}));
                  .
                Using parameter destructuring, the title and rating are extracted and returned in an object. Parantheses are needed to return an object.
                --
                freec02_jsalgodstruct-p760
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-map-method-to-extract-data-from-an-array
                ----

                ----
            (T: why Array.prototype.map() is a pure function (!!))
                the map method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.
                  .
                In other words, map is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.
                --
                freec02_jsalgodstruct-p769
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/implement-map-on-a-prototype
            Implement map on a Prototype  (== implement your own map-function  =using for or Array.prototype.forEach()) **(*!)  (+Extra Reading (=this and Inheritance/The Object Model  =MDN))  ___SEEMORE *****
                // The global Array
                var s = [23, 65, 98, 5];
                  .
                Array.prototype.myMap = function(callback) {
                  var newArray = [];

                  // Add your code below this line
                  for (let i = 0; i < this.length; i++) {
                    newArray.push(callback(this[i]));
                  }
                  // Add your code above this line
                    .
                  return newArray;
                };
                  .
                var new_s = s.myMap(function(item) {
                  return item * 2;
                });
                    --
                Code Explanation
                - The use of a “for” loop allows us to apply the callback function to every item in the Global array and then push the modified items to the empty new array that is returned in the end.
                --
                // the global Array
                var s = [23, 65, 98, 5];
                  .
                Array.prototype.myMap = function(callback) {
                  var newArray = [];
                  this.forEach(a => newArray.push(callback(a)));
                  return newArray;
                };
                  .
                var new_s = s.myMap(function(item) {
                  return item * 2;
                });
                    --
                Code Explanation
                - Solve this challenge using this and the forEach method
                - The this keyword gives us access to the object we are calling myMap on.
                - From there we can use the forEach method to add elements to already declared empty array as we modify each element with the given callback method.
                --
                // The global Array
                var s = [23, 65, 98, 5];
                  .
                Array.prototype.myMap = function(callback, arr = [], i = 0) {
                  return i < this.length
                    ? this.myMap(callback, arr.concat(callback(this[i])), i + 1)
                    : arr;
                };
                  .
                var new_s = s.myMap(function(item) {
                  return item * 2;
                });
                    (=solving the challenge using recursion(!!))
                --
                freec02_jsalgodstruct-p769
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/implement-map-on-a-prototype
            Use the filter Method to Extract Data from an Array (+=___SEEMORE) *****
                Array.prototype.filter()  (or simply filter() )
                  .
                = calls a function on each element of an array + returns a new array containing only the elements for which that function returns true
                (= filters the array based on the function passed to it)
                    --
                Accepts three arguments:
                - the curr. elem. being processed
                - the index of that element
                - the array upon which the filter method was called
                  .
                const users = [
                  { name: 'John', age: 34 },
                  { name: 'Amy', age: 20 },
                  { name: 'camperCat', age: 10 }
                ];
                  .
                const usersUnder30 = users.filter(user => user.age < 30);
                console.log(usersUnder30); 
                -- --
                const filteredList = watchList
                  .filter(movie => {
                    // return true it will keep the item
                    // return false it will reject the item
                    return parseFloat(movie.imdbRating) >= 8.0;
                  })
                  .map(movie => {
                    return {
                      title: movie.Title,
                      rating: movie.imdbRating
                    };
                  });
                    --
                Code Explanation
                - First we filter through and only return the objects that meet the criteria. In this case the criteria is having an imdbRating of 8.0 or higher.
                - Then we map the objects to the desired format.
                --
                // The global variable
                const watchList = [
                  {
                    "Title": "Inception",
                    "Year": "2010",
                    "Rated": "PG-13",
                    "Released": "16 Jul 2010",
                    "Runtime": "148 min",
                    "Genre": "Action, Adventure, Crime",
                    "Director": "Christopher Nolan",
                    "Writer": "Christopher Nolan",
                    "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
                    "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
                    "Language": "English, Japanese, French",
                    "Country": "USA, UK",
                    "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
                    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
                    "Metascore": "74",
                    "imdbRating": "8.8",
                    "imdbVotes": "1,446,708",
                    "imdbID": "tt1375666",
                    "Type": "movie",
                    "Response": "True"
                  },
                  {
                    "Title": "Interstellar",
                      ....
                    "Type": "movie",
                    "Response": "True"
                  }
                ];
                    .
                    (****)
                const filteredList = watchList
                  .filter(movie => movie.imdbRating >= 8.0)
                  .map(movie => ({ title: movie["Title"], rating: movie["imdbRating"] }));
                // Only change code above this line
                console.log(filteredList);
                --
                // Only change code below this line
                const filteredList = watchList
                  .filter(({ imdbRating }) => imdbRating >= 8.0)
                  .map(({ Title: title, imdbRating: rating }) => ({ title, rating }));
                // Only change code above this line
                  .
                console.log(filteredList);
                --
                freec02_jsalgodstruct-p771
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-filter-method-to-extract-data-from-an-array
            Implement the filter Method on a Prototype
                =using for // Array.prototype.forEach()
                  .
                // The global variable
                let s = [23, 65, 98, 5];  //const in the ex.
                  .
                Array.prototype.myFilter = function(callback){
                  // Only change code below this line
                  let newArray = [];    //const in the ex.
                  this.forEach(function(x) {
                    if (callback(x) == true) {
                      newArray.push(x);
                    }
                  });
                  // Only change code above this line
                  return newArray;
                };
                  .
                let new_s = s.myFilter(function(item){
                  return item % 2 === 1;
                });
                --
                let s = [23,65,98,5];
                  .
                Array.prototype.myFilter = function(callback) {
                  var newArray = [];
                  // Add your code below this line
                  for (let i = 0; i < this.length; i++) {
                    if (callback(this[i]) === true) {
                      newArray.push(this[i]);
                    }
                  }
                  // Add your code above this line
                  return newArray;
                };
                  .
                var new_s = s.myFilter(function(item) {
                  return item % 2 === 1;
                });
                --
                freec02_jsalgodstruct-p775
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/implement-the-filter-method-on-a-prototype
            Return Part of an Array Using the slice Method
                ie, if slice is given two arguments
                = start- and stop-index
                  .
                const arr = ["Cat", "Dog", "Tiger", "Zebra"];
                                   1               3
                const newArray = arr.slice(1, 3);
                --
                function sliceArray(anim, beginSlice, endSlice) {
                  return anim.slice(beginSlice, endSlice);
                }
                  .
                const inputAnim = ["Cat", "Dog", "Tiger", "Zebra", "Ant"];
                sliceArray(inputAnim, 1, 3);
                --
                freec02_jsalgodstruct-p777
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/return-part-of-an-array-using-the-slice-method
            Remove Elements from an Array Using slice Instead of splice  (=not(!) using mutations)
                function nonMutatingSplice(cities) {
                  // return cities.splice(3);
                  return cities.slice(0, 3);
                }

                const inputCities = ["Chicago", "Delhi", "Islamabad", "London", "Berlin"];
                nonMutatingSplice(inputCities);
                --
                freec02_jsalgodstruct-p780
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/remove-elements-from-an-array-using-slice-instead-of-splice
            Combine Two Arrays Using the concat Method
                = can be used both for strings and arrays
                  .
                [1, 2, 3].concat([4, 5, 6]);
                   (= yields  [1, 2, 3, 4, 5, 6] )
                --
                function nonMutatingConcat(original, attach) {
                  return original.concat(attach);
                }
                  .
                const first = [1, 2, 3];
                const second = [4, 5];
                nonMutatingConcat(first, second);
                --
                freec02_jsalgodstruct-p783
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/combine-two-arrays-using-the-concat-method
            Add Elements to the End of an Array Using concat Instead of push
                = non-mutating approach
                  .
                const arr = [1, 2, 3];
                arr.push([4, 5, 6]);
                   ( =  yields  [1, 2, 3, [4, 5, 6]] )
                   (+ 'this result, is not(!) the functional way')
                --
                function nonMutatingPush(original, newItem) {
                  return original.concat(newItem);
                }
                  .
                const first = [1, 2, 3];
                const second = [4, 5];
                nonMutatingPush(first, second);
                --
                freec02_jsalgodstruct-p785
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/add-elements-to-the-end-of-an-array-using-concat-instead-of-push
                ----

                ----
            Use the reduce Method to Analyze Data
                Array.prototype.reduce()   reduce()
                (= 'the most general of all array-operations in js'
                 and can be used to solve almost any array problem)
                [= both filter and map can be derived as special applications of reduce]
                --
                the 'reduce' method: = iterates over each item in an array, and returns a single value (ie. string, number, object, array)
                [This is achieved via a callback function that is called on each iteration] (!!(*))
                  .
                Accepts four arguments:
                - the accumulator (which gets essigned the return value of the callback function from the previous iteration)
                   [+ in addition to the callback function, reduce has an additional parameter which takes an initial value for the accumulator (and if this second param. is not used, then the first iteration is skipped, and the second iterator gets passed the first element of the array as the accumulator)]
                - the current element being processed
                - the index of that element
                - the array upon which reduce is called
                    --
                const users = [
                  { name: 'John', age: 34 },
                  { name: 'Amy', age: 20 },
                  { name: 'camperCat', age: 10 }
                ];
                  .
                const sumOfAges = users.reduce((sum, user) => sum + user.age, 0);
                console.log(sumOfAges);
                    (= would sum all ages, and yield 64)
                --
                const users = [
                  { name: 'John', age: 34 },
                  { name: 'Amy', age: 20 },
                  { name: 'camperCat', age: 10 }
                ];
                  .
                const usersObj = users.reduce((obj, user) => {
                  obj[user.name] = user.age;
                  return obj;
                }, {});
                console.log(usersObj);
                   ( = yields  { John: 34, Amy: 20, camperCat: 10 } )
                --
                // The global variable
                const watchList = [
                  {
                    "Title": "Inception",
                    "Year": "2010",
                    "Rated": "PG-13",
                    "Released": "16 Jul 2010",
                    "Runtime": "148 min",
                    "Genre": "Action, Adventure, Crime",
                    "Director": "Christopher Nolan",
                    "Writer": "Christopher Nolan",
                    "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
                    "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
                    "Language": "English, Japanese, French",
                    "Country": "USA, UK",
                    "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
                    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
                    "Metascore": "74",
                    "imdbRating": "8.8",
                    "imdbVotes": "1,446,708",
                    "imdbID": "tt1375666",
                    "Type": "movie",
                    "Response": "True"
                  },
                  {
                    "Title": "Interstellar",
                    "Year": "2014",
                     ...
                     ...
                    "Type": "movie",
                    "Response": "True"
                  }
                ];
                  .
                function getRating(watchList) {
                    . v
                  let averageRating;
                    .
                    . ^
                  return averageRating;
                }
                  .
                console.log(getRating(watchList));
                --
                function getRating(watchList){
                  // Add your code below this line
                  const averageRating = watchList
                    // Use filter to find films directed by Christopher Nolan
                    .filter(film => film.Director === "Christopher Nolan")
                    // Use map to convert their ratings from strings to numbers
                    .map(film => Number(film.imdbRating))
                    // Use reduce to add together their ratings
                    .reduce((sumOfRatings, rating) => sumOfRatings + rating) /
                  // Divide by the number of Nolan films to get the average rating
                  watchList.filter(film => film.Director === "Christopher Nolan").length;
                  // Add your code above this line
                  return averageRating;
                }
                  .
                console.log(getRating(watchList));
                --
                function getRating(watchList) {
                  // Add your code below this line
                  const nolanData = watchList
                    .reduce((data, { Director: director, imdbRating: rating }) => {
                      if (director === 'Christopher Nolan') {
                        data.count++;
                        data.sum += Number(rating);
                      }
                      return data;
                    }, { sum: 0, count: 0 });
                  const averageRating = nolanData.sum / nolanData.count;
                  // Add your code above this line
                  return averageRating;
                }
                  .
                console.log(getRating(watchList));
                --
                freec02_jsalgodstruct-p788
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-reduce-method-to-analyze-data
            Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem  (=return array of squares of the positive integers from an array)  ****(!!)
                const squareList = (arr) => {
                  // Only change code below this line
                  return arr
                          .filter(num => num > 0 && num % parseInt(num) === 0)
                          .map(num => Math.pow(num, 2));
                  // Only change code above this line
                };
                  .
                const squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);
                console.log(squaredIntegers);
                    --
                Code Explanation
                - Uses the operator filter() and map() functions to square all positive integers in a given array.
                --
                const squareList = arr => {
                  return arr.reduce((sqrIntegers, num) => {
                    return Number.isInteger(num) && num > 0
                      ? sqrIntegers.concat(num * num)
                      : sqrIntegers;
                  }, []);
                };
                    --
                Code Explanation
                - This does basically the same but uses the isInteger() method to check the numbers.
                --
                freec02_jsalgodstruct-p793
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-higher-order-functions-map-filter-or-reduce-to-solve-a-complex-problem
            Sort an Array Alphabetically using the sort Method
                function ascendingOrder(arr) {
                  return arr.sort(function(a, b) {
                    return a - b;
                  });
                }
                  .
                ascendingOrder([1, 5, 2, 3, 4]);
                    (= returns  [1, 2, 3, 4, 5] )
                    --
                function reverseAlpha(arr) {
                  return arr.sort(function(a, b) {
                    return a === b ? 0 : a < b ? 1 : -1;
                  });
                }
                  .
                reverseAlpha(['l', 'h', 'z', 'b', 's']);
                --
                js default sorting method is by string unicode point value (which may return unexpected results
                = therefore it's encouraged to provide a callback function to specify how to sort the array items)
                [+providing this compareFunction(a,b) ]
                   + return greater than 0
                    // equal to 0
                --
                function alphabeticalOrder(arr) {
                  // Add your code below this line
                  return arr.sort(function(a, b) {
                    return a === b ? 0 : a < b ? -1 : 1;
                  });
                  // Add your code above this line
                }
                alphabeticalOrder(["a", "d", "c", "a", "z", "g"]);
                --
                freec02_jsalgodstruct-p797
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/sort-an-array-alphabetically-using-the-sort-method
            Return a Sorted Array Without Changing the Original Array
                (=which sort does(!) as a side effect)
                [One way to avoid this is to first concatenate an empty array to the one being sorted (remember that slice and concat return a new array), then run the sort method.]
                  .
                var globalArray = [5, 6, 3, 2, 9];
                function nonMutatingSort(arr) {
                  // Add your code below this line
                  return [].concat(arr).sort(function(a, b) {
                    return a - b;
                  });
                  // Add your code above this line
                }
                nonMutatingSort(globalArray);
                --
                freec02_jsalgodstruct-p800
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/return-a-sorted-array-without-changing-the-original-array
            Split a String into an Array Using the split Method
                const str = "Hello World";
                const bySpace = str.split(" ");
                  .
                const otherString = "How9are7you2today";
                const byDigits = otherString.split(/\d/);
                  .
                [[+tip: Since strings are immutable, the split method makes it easier to work with them.]]
                --
                function splitify(str) {
                  // Add your code below this line
                  return str.split(/\W/);
                  // Add your code above this line
                }
                splitify("Hello World,I-am code");
                --
                freec02_jsalgodstruct-p802
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/return-a-sorted-array-without-changing-the-original-array
            Combine an Array into a String Using the join Method
                const arr = ["Hello", "World"];
                const str = arr.join(" ");
                --
                function sentensify(str) {
                  return str.split(/\W/).join(" ");
                }
                sentensify("May-the-force-be-with-you");
                --
                freec02_jsalgodstruct-p805
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/combine-an-array-into-a-string-using-the-join-method
            Apply Functional Programming to Convert Strings to URL Slugs
                reduce  = a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it
                  .
                lobal variable
                var globalTitle = "Winter Is Coming";
                  .
                  . v
                function urlSlug(title) {
                  return title
                    .toLowerCase()
                    .trim()
                    .split(/\s+/)
                    .join("-");
                }
                  . ^
                var winterComing = urlSlug(globalTitle); // Should be "winter-is-coming"
                --
                // the global variable
                var globalTitle = "Winter Is Coming";
                  . v
                function urlSlug(title) {
                  return title
                    .split(" ")
                    .filter(substr => substr !== "")
                    .join("-")
                    .toLowerCase();
                }
                  . ^
                var winterComing = urlSlug(globalTitle); // Should be "winter-is-coming"
                --
                freec02_jsalgodstruct-p808
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/apply-functional-programming-to-convert-strings-to-url-slugs
                ----

                ----
            Use the every Method to Check that Every Element in an Array Meets a Criteria
                const numbers = [1, 5, 8, 0, 10, 11];
                  .
                numbers.every(function(currentValue) {
                  return currentValue < 10;
                });
                --
                function checkPositive(arr) {
                  return arr.every(val => val > 0);
                }
                checkPositive([1, 2, 3, -4, 5]);
                    --
                function checkPositive(arr) {
                  return arr.every(function(value) {
                    return value > 0;
                  });
                }
                checkPositive([1, 2, 3, -4, 5]);
                --
                freec02_jsalgodstruct-p811
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-every-method-to-check-that-every-element-in-an-array-meets-a-criteria
            Use the some Method to Check that Any Elements in an Array Meet a Criteria
                const numbers = [10, 50, 8, 220, 110, 11];
                  .
                numbers.some(function(currentValue) {
                  return currentValue < 10;
                });
                --
                function checkPositive(arr) {
                  return arr.some(elem => elem > 0);
                }
                  .
                checkPositive([1, 2, 3, -4, 5]);
                --
                freec02_jsalgodstruct-p814
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-some-method-to-check-that-any-elements-in-an-array-meet-a-criteria
            currying etc: arity of a function (!!T)
                the number of arguments it requires
                --
                freec02_jsalgodstruct-p817
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application
            Introduction to Currying and Partial Application (****)  (+currying is ____)
                currying is  'converting a function of N arity into N functions of arity 1'
                = it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on (!!!!)
                  .
                function unCurried(x, y) {
                  return x + y;
                }
                  .
                function curried(x) {
                  return function(y) {
                    return x + y;
                  }
                }
                  .
                const curried = x => y => x + y
                  .
                curried(1)(2)
                   ( = would return 3)
                --
                freec02_jsalgodstruct-p817
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application
            Why currying is useful *(*!)
                = if you can't supply all the arguments to a function at one time.
                You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available.
                  .
                const funcForY = curried(1);
                console.log(funcForY(2)); // 3
                --
                freec02_jsalgodstruct-p817
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application
            +"partial application" can be described as ____
                applying a few arguments to a function at a time and returning another function that is applied to more arguments
                  .
                function impartial(x, y, z) {
                  return x + y + z;
                }
                  .
                const partialFn = impartial.bind(this, 1, 2);
                partialFn(10); // 13
                --
                function add(x) {
                  // Add your code below this line
                  return function(y) {
                    return function(z) {
                      return x + y + z;
                    };
                  };
                  // Add your code above this line
                }
                add(10)(20)(30);
                --
                function add(x) {
                  // Add your code below this line
                  return y => z => x + y + z;
                  // Add your code above this line
                }
                add(10)(20)(30);
                --
                freec02_jsalgodstruct-p817
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application
                ----


            INTERMEDIATE ALGORITHM SCRIPTING CHALLENGES (******** (!!!!!!!))

                ----
            1
                
                --
                freec02_jsalgodstruct-p822
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range
            2
                
                --
                freec02_jsalgodstruct-p822
                https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range


            kvar i js(!!): 10 st(!!)


            freec code editor shortcuts: **
              comment / uncomment
                line          c-/
              kill line       c-d
              flip lines      a-up/down
              prev./next
                word          c-left/right


            ES6 = p314++
vankilists preliminary listen 1 Freec(**) (=preem gbg fall 2020) -------------
            -> js1-w3c_vanki.txt
                ----
            "find" an HTML element (with id="demo")
                document.get element by id
            Ändra innehåll i ett html element
                inner HTML
            Ändra innehåll i html element med id x
                document.getElementById("demo").innerHTML = "Hello JavaScript"[sk]
            !!!!
                get the right elements by id, and set the right style attributes ***
            Insert JavaScript in HTML
                <script></script>
            Få kod att köra när något händer
                respond to an event, like on click
            Vad är en javascriptfunktion?
                 ett block med javascriptkod som körs när dess namn anropas
            Where place JavaScript?
                in head or body ( bottom of body is a good place, because then the page loads as quickly as possible)***
            Tip for placing code
                put all your code in one place
            FUNKTIONS-EXEMPLET: Gör knapp så stycketext ändras till
                "stycket ändrat" [sk] se JavaScript Where To
            När bra att använda externa skript?
                när flera sidor använder samma skript
            Externt skript
                <script src="myScript.js">
            For JavaScript print and display possibilities
                window.alert(), write, inner HTML, console
            Main use of document.write
                Testing
            Define variables
                var x[sk]
            Assign variable
                x = 7[sk]
            define and assign variable
                var x = 7[sk]
            Strings: add John and Doe to John Doe
                "John" + " " + "Doe"
            Kommentarer
                // el /* */
            Several statements on the same line
                Semicolons between
                ----

                ----
            DEFINE FUNCTION
                function myFunction () {       }
            Vad har en variabel för värde direkt efter att den har definierats?
                undefined
            ( Händer det något med värdet på en variabel vid en omdeklaration?
                nej, det är samma )
            What happens when you add numbers to strings?
                the numbers get converted to strings, and everything is concatenated
            Operators: Increment och Decrement
                ++ och --
            sätt var x till var y
                x = y
            Sätt x till x+y
                x += y
            Jämförelse: Equal to
                ==
            Jämförelse: Equal value and equal type
                ===
            Jämförelse: Not equal ***
                != ***
            Jämförelse: Not equal value, or not equal type
                !==
            Vad är operands?
                talen en operator jobbar med
            FORCE EXPRESSIONPRECEDENCE
                Parenteser
            JAVASCRIPTS TYPER
                STRING, NUMBER, BOOLEAN, ARRAY, OBJECT
            Vilken typ i Pyton motsvarar js Array?****
                List ****
            Vilken typ i Pyton motsvarar js Object?****
                Dictionary
            Resultat av  16 + 4 + "Volvo"
                20Volvo
            SCI. NOTATION: 1.34 upphöjt till 50
                1.34e50
            SCI. NOTATION: 1.34 upphöjt till -35
                1.34e-35
            Ta reda på vilken typ en variabel har ****
                typeof x
                ----

                ----
            Type for variable without a value
                undefined
            Empty a variable
                explicitly set it's value to null, or undefined
            Another name for function as in javascript
                procedure or subroutine
            Three ways to invoke a function
                event, call, or self invocation (??)
            function object vs function result (*)
                Using the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.
            SAVE SEVERAL VALUES IN A VARIABLE
                SAVE AS OBJECT
            What is a valuepair in an object called?
                a property
            Två sätten att komma åt objekt-egenskaper
                car.color // car[color]
            *****DEFINIERA FUNKTIONEN fullName
                function() {return this.firstName + " " + this.lastName[sk]}
            Använda funktion på ställe som var (typ  greeting = "Hi " + getUser(10) + "!"
                var text = "The temperature is " + toCelsius(32) + " Centigrade"[sk]
            A var. defined outside of a function has global scope. Means what = what can access that variable?
                all scripts and functions on a web page
            Vad händer om man tilldelar en variabel inne i en funktion utan att ha deklarerat den först?
                den blir automatiskt global
            When are local variables to deleted?
                When the function has executed
            When is a global variable deleted? ***
                when a page is closed ***
            More examples of objects, like document, from which you can access global variables
                window ,, =window.myGlobal
            ***** what are events, when talking about JavaScript?
                HTML events, which are "things" that happen to HTML elements
            What triggers html-events?
                something the browser does, or something a user does. Some examples: An HTML web page has finished loading, An HTML input field was changed, An HTML button was clicked
            EVENTHANDLER-ATTRIBUTE With JavaScript-Code: Kör funktionen date() när knapp klickas*****
                <button onclick='getElementById("demo").innerHTML=Date()'>The time is?</button>
            "In the next example, the code changes the content of its own element (usingthis.innerHTML)"
                se mer vid 'JSEvents'
            VANLIGASTE SÄTTET FÖR EVENT ATT KÖRA NÅGOT
                Eventattribut anropar funktion som ska köras (<button onclick="displayDate()">The time is?</button>)
                ----

                ----
            NÅGRA VANLIGA HTML-EVENTS
                onchange, onclick, onmouseover, onmouseout, onkeydown, onload
            Var finns kompletta listan för events?****
                HTML-Dom-objekt (w3schools t.ex) **** (=SE MER*****)
            Ändra färg på text i span när drar pekaren över
                onmouseover="this.style.color='red'">Mouse over me!</span>
            LÄNGD FÖR STRÄNGEN I VAR txt ****
                txt.length ****
            Strängen "We are "SO" not" till var x
                var x = "we are \"so\" not"
            Sätt in backslash, newline, carriagereturn, tab m.fl i en sträng
                \\, \n, \r, \t
            Can JavaScript object to be used in comparisons?
                NO
            3 INTRESSANTA STANDARDPROPERTIES FÖR STRÄNGAR
                length, constructor, prototype (se mer JS Strings)
            STRING-METHODS*****
                SE MER*****
            Sök sträng för överensst. med regex***
                match() ***
            VISA POS FÖR STRÄNG I VAR str DÄR 'locate' MATCHAR
                var pos = str.search//indexOf("locate")
            Vad returnerar indexfunktionerna om dom inte hittar något?
                -1
            Substitute för JavaScript *
                replace() =kan innehålla regex
            Konvertera ur var txt till array (vid kommatecken)
                txt.split(",")
            Konv txt till ren bokstavsarray *
                txt.split("")
            Vilken typ har nummer i javascript?
                64bit float
            HEXADECIMALT 255
                0xFF
            Visa numret i myNumber i hex, okt, el binär ****
                myNumber.toString(16)
            Ta reda på om var x innehåller ett nummer
                isNaN(x)[sk]
            Ta reda på vad det högsta värdet i javascript är *
                var x = Number.MAX_VALUE[sk]
                ----

                ----
            Bra sifferfunktion när man arbetar med pengavärden **
                toFixed(2)
            Generera ett slumpmässigt värde (fr.o.m. 0 till 1) *
                Math.random()[sk]
            Returnera högsta värdet i Listan (1, 5, 7)
                Math.max(1, 5, 7)[sk]
            avrunda
                Math.round(5.14)
            avrunda neråt
                Math.floor( )
            Använd floor och random för att returnera ett slumptal mellan 0 och 10
                ******
            8 MATEMATISKA KONSTANTERNA i JavaScript ***
                SE JavaScript Math Object
            RETURNERA VÄRDET FÖR PI i JavaScript ****
                Math.PI
            Absolut värde för x
                abs(x)
            2 UPPHÖJT TILL 8
                pow(2,8)
            Kvadratroten av x
                sqrt(x)
            Skapa ett datumobjekt i var d
                var d = new Date()
            4 SÄTTEN ATT SKAPA ETT DATUMOBJEKT
                tom, millisek(epoch), datestring, lista med tidsvärden
            Datumobjekt: 25 Dec 2015 ***
                var d = new Date(15,11,25)
            ****Visa UTC-värdet för datum i var d
                d.toUTCString()[sk]
            Visa datum sträng i ett mer normalt och enkelt/läsbart format
                toDateString()
            Skapa och visa datumobjekt i det mera enkla formatet
                new Date().toDateString()[sk]
            Iso 8601-datumobj för 2015-03-25
                var d = new Date("2015-03-25")[sk]
            Iso 8601-tidsträng som UTC ****
                =med 'T'
            PLOCKA UT DEL UR TIDSSTRÄNGAR ****
                getDate(), getMinutes() m.fl. [sk]) ****
                ----

                ----
            Antal millisekunder sedan Epoch
                new Date.getTime()
            VISA TID NU:S VECKODAG MED NAMN
                SE MER 'DATE METHODS' **** :D
            Sätt minuter mm i tidsobj till n
                setMinutes()
            ADD DAYS TO A DATE WITH setDate()
                SE MER
            Konvertera datum-obj till millisekunder ***
                Date.parse() ***
            ANVÄND GÄRNA MSEC FÖR DATUM
                =SE MER [sk])
            Lägg första från array cars i var name
                var name = cars[0]
            Sätt första i array cars till Volvo
                cars[0] = "Volvo"[sk]
            Visa datum för nu
                Date.now()[sk]
            Längd för arrays
                if variable fruit contains array of fruits: fruits.length[sk] (=property)
            Add new element Lemon last to array fruits
                fruits.push("Lemon")[sk]    fruits[fruits.length] ="Lemon"[sk]
            Add lemon to index 10 of array
                fruits[10] ="Lemon"[sk]
            Collect text from variable array fruits into variable text with for-loop ;
            Our own isArray()-funktion
                se Arrays
            Convert array to string
                valueOf(), and toString()
            Put together all elements of an array, that is its contents
                join()
            Advantages of join as compared to two string
                with joy and you can specify the separator
            Adding and deleting an object I value at the last position of an array
                push pop
            Useful side effect of push that can be saved to an array of variable
                length of the array that an object is pushed to useful side effects of push that can be to generate a variable,, length of the array the value is pushed to
            Remove first element of an array and push all elements one step back
                shift()
            Add new element to first position of an array
            ----

            ----
                unshift()
            Side effect of shift()
                return the string that was shifted out
            Side effect of unshift()
                returning the new array length
            Delete first element of array fruits
                delete fruits[0][sk]
            What happens if you use the delete method of doing a Delete on an array?
                 you get quote holes of undefined values
            Insert elements lemon and kiwi at position two of array, without removing any element
                fruits.splice(2, 0, "Lemon", "Kiwi")
            REMOVING ELEMENTS FROM AN ARRAY
                pop(), splice(
            Remove third element of an array ****
                splice(2, 1(=how many))****
            Sort array fruits ***
                fruits.sort()
            Reverse array fruits
                fruits.reverse()
            NUMERIC SORT OF ARRAY IN JAVASCRIPT
                SE MER WEB
            SORT ARRAY DESCENDING IN JS
                SE MER WEB
                ----

            Return highest value of an array,,
            Return the lowest value of an array,,

                ----
            slå samman två uppsättningar
                concat()
            Concat a1, a2 och a3 ***
                a1.concat(a2, a3)
            Pull out piece of array
                elem. 2 o 3 = becomes another array ,, fruits.slice(1, 3)
            Skär ut element 2 t.o.m. slut av array
                fruits.slice(1)
            Find out if an expression or variable is true
                boolean(10 < 12),,  (10 < 12),,  10 < 12
            Sant och falskt i JS
                true och false
            Lika med-jämförelse
                ==
            Vilka värden är sanna i JS?
                värden = strängar, tal mm **
            Vilka värden är falska i JS?
                0, -0, ""(tom sträng), undefined, null, NaN, false
            Jämförelser: Inte lika med
                !=
            Jämförelser: Inte lika med i värde, el inte lika med i typ
                !==
            Jämförelser: och
                &&, t.ex (1 < 3 && 3 < 5)
            Jämförelser: eller
                ||,
            Jämförelser: inte
                !, t.ex. !(x == y)
            Testa om någon är för ung med Ternary-test
                var voteable = (age < 18) ?"Too young":"Old enough"[sk]
            Omvandla var age till nummer
                age = Number(age)[sk]
            Vad ger Number() för värde om sträng är tom?
                0
            Vad ger Number() för värde om sträng är text?
                NaN
                    ----


                Testa om age är sträng + skriv då ut "Error"; jämför annars ålder med Ternary-test ,, age = Number(age)[sk]
                if (isNaN(age)) {
                        voteable = "Error in input";
                } else {
                        voteable = (age < 18) ?"Too young" : "Old enough";
                }
            if-test ; if (test) {
                    action;
            } else {
                    action;
            }


            JS Bitwise operators ! ; &ANDx = 5 & |OR ~NOT ^XOR <<  >>
            Visa en Input-ruta i html ; <input type="number" id="age" value="18">


            Switch för visa namn för dag ; switch (new Date().getDay()) {
                case 0:
                    day = "Sunday";
                    break;
                case 1:
                    day = "Monday";
                    break;
                default:
                    text = "Some other day";
            }

                ----
            Common code och Fall-Through i Switch *****
                se Switch *****
            Lägg till Radbryning i text (vid t.ex. forloop-hantering)
                "<br>"
            Olika loopar i JS
                for, for/in(object properties), while, do/while
            Tips om utelämnar statem2 i topp på en while-loop
                Måste inkludera break i loop-kroppen
            Whileloop
                while (cond) { code }
            Do While-loop
                do { code } while (condition)[sk]
            Speciellt med Do While-loop
                Körs minst en gång (=körs en gång, sen kollas villkoret)
            A Whileloop is the same as a for loop without _
                condition 1 and 3
            TIPS GÄLLANDE LOOPAR FÖR SÅ SNABB KOD SOM MÖJLIGT ***
                LÄGG SÅ MYCKET SOM MÖJLIGT AV 'INOM-FÖRSTA-PARENTESERNA' UTANFÖR KODEN (DETTA KÖRS ANNARS VARJE GÅNG OCH SAKTAR NER KODEN)
            The example with break and continue, when counting from 0 to 10
                break beaks at 3 and continue just skips the number 3
            JAVASCRIPT BREAK/CONT-LABELS
                =????  =SE MER  Break/Continue ("Break with a label reference = the break statement can be used to jump out of any code block")
            Convert to number
                Number()
            convert to a String
                String() (=global metod)  String(123),, x.toString() = nummer-metod
            convert to a Boolean
                Boolean()
            Avgör typ och objekt (t.ex. Array och Date) i Javascript
                Kolla constructor-egenskapen: [1,2,3,4].constructor  =ger array
            SKAPA EGNA FUNKTIONEN isArray()
                se Type Conversions
            SKAPA EGNA FUNKTIONEN isDate()
                se Type Conversions
            Nummer till scient.notation
                x.toExponential()
            Nummer till specifikt antal decimaler
                x.toFixed()
            Returnerar sträng, med nummer skrivet till viss precision
                x.toPrecision()
                ----

                ----
            Konvertera boolean false till sträng
                String(false)  =ger "false" ,, false.toString()
            Spara REGEX-sökning 'w3schools'(caseinsensitiv) i var patt *****
                var patt = /w3schools/i[sk] *****
            Sök efter regex w3schools i strängen i var str
                var n = str.search(/w3schools/i)[sk]
            Sök efter strängen(!) w3schools i strängen i var str
                var n = str.search("W3Schools")[sk]
            Ersätt regex microsoft i strängen i var str med W3Schools
                var res = str.replace(/microsoft/i, "W3Schools")[sk]  (=går förstås också att göra med en enkel sträng)
            regexväxlar: case insensitive
                i
            regexväxlar: alla på raden (global)
                g
            regexväxlar: på alla rader
                m
            regex-tecken: alternativ
                (x|y)
            regex-tecken: digit
                \d
            regex-tecken: whitespace
                \s
            regex-tecken: wordending
                \b
            regex-tecken: wordchar + _
                \w
            regex-tecken: NEGERAD KLASS, T.EX. 'INTE ORDKANT'
                \B
            regex-tecken: unicodetecken med hexnummer 1223
                \u1223
            regex-tecken: 1 el fler
                n+
            regex-tecken: 0 el fler
                n*
            regex-tecken: 0 el 1
                n?
            Sök efter regex med strängs test()-regexmetod ****
                var patt = /e/[sk] patt.test("free!")[sk]  ,,  /e/.test("free!")[sk] ****
            Sök efter regex i en sträng + returnera träff (el null om ingen träff)
                /e/.exec("free!")[sk]
                ----

                ----
            Felhantering: Vad heter Pythons 'raise' i JS?
                throw
            Felhantering: Grundläggande utseende try-catch *****
                try { kod }   catch(err) { kod för felhantering(t.ex. skriva ut felmedelanden) }
            Felhantering: DESIGNA KOD MED FELHANTERING *****
                SE MER CATCH/TRY
            Felhantering: Debugger
                F12 + välj Console
            Felhantering: Lägg in en test i din kod, som skriver ut värdet för variabeln c
                console.log(c)[sk]
            Felhantering: Bryt/Stanna körningen av koden på vissa ställen, för att kunna undersöka ***
                Sätt brytpunkt i debuggern ,, eller Sätt in koden  debugger[sk] som stoppar och går till debuggern på stället i koden
            VAD ÄR HOISTING? ****
                Att variablers deklaration (OBS! INTE INITIALIZATION=TILLDELNING) kastas upp till toppen när koden körs = man kan "deklarera variabel efter det ställe i koden där den används"
            Var bör man lägga sina variabeldeklarationer?
                Överst i sin kod ***
            Ange att odeklarerade variabler ska genera felmeddelanden ***
                "use strict"[sk]
            Var måste use-strict läggas för att kunna användas?
                först i koden/en funktion
            JS Codingconventions: Angående semikolon efter statements
                efter enkla statements, men inte efter komplexa (sammansatta=compound)
            JS Codingconventions: Konstanter och Globala variabler (t.ex. pi)
                STORA BOKSTÄVER (PI ,  inte camelCase som vanligt)
            JS Codingconventions: tips variabler
                DEKLARERA ALLA VARIABLER HÖGST UPP I SKRIPTET
            JS Codingconventions: Sätta var y till 0 om odefinierad
                if (y === undefined) { y = 0[sk] }
            JS Codingconventions: Hantera dessa otillförlitliga floats (addera variabler med 0.1 och 0.2) ****
                (x*10+y*10)/10
            JS Codingconventions: Radbryt sträng **
                =måste göras 'som vanligt' = "Hej \(brytn) du"
            JS Codingconventions: se upp med radbrytning när ____
                ett uttryck kan läsas som komplett av JS (t.ex. return ensamt på rad läses av JS som return[sk])
            JS Codingconventions: DOM-tips för snabbare kod
                Mindre storlek på dom-kod, och Access dom vid ett tillfälle och lägg i lokal variabel där det kan kommas åt igen
            JS CODINGCONVENTIONS: JAVASCRIPT (OCH HTML MM) RESERVED WORDS
                KOLLA AV LISTA NÄR KODAR
            JSON: VAD ÄR JSON?
                ETT (PROG.SPRÅKOBEROENDE) FORMAT FÖR ATT SPARA OCH ÖVERFÖRA DATA
                ----

                ----
            JSONS OBJEKT
                ARRAYS OCH OBJEKT
            Konvertera jasonobjektet i var text till vanligt javascript-objekt
                 var obj = JSON.parse(text)[sk]
            Variables by reference or value
                JS: Reference, precis som i Python
            Forms: Sätt så en form-punkt måste fyllas
                ordet required sist inne i ett input-etikettsblock
            Forms: vanliga valideringsuppgifter
                fyllt i fält som krävs? giltig data? text inmatad i nummerfält?
            Forms: Var utförs clientside (validation mm)?
                av webläsaren
            Forms: Constraintvalidation via HTML:  Specifies that the input element should be disabled
                disabled
            Forms: Constraintvalidation via HTML:  Specifies the maximum value of an input element
                max 
            Forms: Constraintvalidation via HTML:  Specifies the minimum value of an input element
                min 
            Forms: Constraintvalidation via HTML:  Specifies the value pattern of an input element
                pattern 
            Forms: Constraintvalidation via HTML:  Specifies that the input field requires a element
                required
            Forms: Constraintvalidation via HTML:  Specifies the type of an input element
                type
            Forms: Constraintvalidation via CSS:  Selects input elements with the "disabled" attribute specified
                :disabled
            Forms: Constraintvalidation via CSS:  Selects input elements with invalid values
                :invalid
            Forms: Constraintvalidation via CSS:  Selects input elements with no "required" attribute specified
                :optional
            Forms: Constraintvalidation via CSS:  Selects input elements with the "required" attribute specified
                :required
            Forms: Constraintvalidation via CSS:  Selects input elements with valid values
                :valid
            Forms - DOM-validation: Returns true if an input element contains valid data.
                checkValidity() 
            Forms - DOM-validation: Sets the validationMessage property of an input element.
                setCustomValidity() 
            Forms - Validation DOM-properties: Contains boolean properties related to the validity of an input element.
                validity
                ----

                ----
            Forms - Validation DOM-properties: Contains the message a browser will display when the validity is false.
                validationMessage
            Forms - Validation DOM-properties: Indicates if an input element will be validated.
                willValidate
            Forms - Validation DOM-properties: Properties i Validity
                =se mer (valueMissing mm)
            VAD ÄR ETT OBJEKT I JAVASKRIPT?
                EN VARIABEL SOM KAN INNEHÅLLA ANDRA VARIABLER (OCH METODER)
            Nytt sätt i js5 att skapa ett objekt
                Object.create()
            BYGG EN OBJEKTSMALL SOM SKAPAR PERSON, MED FÖRNAMN OCH EFTERNAMN****
                function person(first, last) { this.firstName = first[sk] this.lastName = last[sk] }
            SKAPA ETT OBJEKT PERSON FRÅN OBJEKTSMALLEN PERSON
                var myNeighbour = new person("John", "Doe")[sk]
            LÄGG TILL PROPERTY/METHOD NATIONALITY TILL REDAN EXISTERANDE PROTOTYPEN PERSON****
                person.prototype.nationality = "English"[sk]
            Komma åt en av objekts egenskap
                obj.prop el obj["prop"] el obj[x](med namn prop i var)
            Loopa genom ett objekts properties*****
                for (variabel in object) { kod att köras }
            Lägg till nationalitet engelsk till obj person
                person.nationaliy = "English"[sk]
            Sudda ålder från objektet person
                delete person.age[sk]
            Builtin Methods: Sätt sträng till Stora bokstäver**
                var x = message.toUpperCase()[sk]
            Gör anonym funktion i js (=kan användas ändå om sparas i variabel, och kallas med variabelnamnet som funktionsnamn)
                ange som vanligt, utan namn  (function (a, b) { return a * b })
            JAVASCRIPT SELFINVOCING FUNCTIONS
                =OMSLUTS MED EXTRA PARENTESER
            HUR SKAPAR MAN JS-CLOSURES?
                Lägg en selfinvocing function i en var (har tillgång till variabler i enclosing scopes) (t.ex. counter-exemplet med add från w3schools*****)
            interesting places you can use js functions (much like in python, ...)
                as values (in variables), and as expressions
            return a function as a string
                myFunction.toString()[sk]
            What is a function called, that is designed to make new objects?
                an Object Constructor
            what are function parameters?
                the vars listed in parentheses when defining the function
                ----

                ----
            Funktioner: Sätt var y till 0 om icke tilldelad
                if (y === undefined) {\n  y = 0[sk] }
            HUR KOMMER MAN ÅT ARGUMENTEN FÖR EN FUNKTION FRÅN INNE I FUNKTIONEN
                arguments (t.ex. arguments.length[sk])
            om functionarguments och objects (ref/val)
                func.args are passed by value [sk]  obj.s are passed by reference
            Defaultobjektet i js
                html-sidan själv (window.myFunction() ==== går bra som myFunction())
            SE MER OM FUNCTIONS (....)
                JS FUNCTION INVOCATION (call(), apply() mm)
            HUR ÄR ALLA HTML-ELEMENTEN DEFINIERADE I DOM:EN?
                SOM OBJEKT (med prop.s som kan sättas, och metoder som kan anropas)
            DOM:Hitta html-element:  Find elements by tag name
                document.getElementsByTagName() 
            DOM:Hitta html-element:  Find elements by class name
                document.getElementsByClassName()
            DOM:Ändra i ett html-element:  an-element.innerHTML=
                Change the inner HTML of an element
            DOM:Ändra i ett html-element:  an-element.attribute=
                Change the attribute of an HTML element
            DOM:Ändra i ett html-element:  an-element.setAttribute(attribute,value)
                Change the attribute of an HTML element
            DOM:Ändra i ett html-element:  an-element.style.property=
                Change the style of an HTML element
            DOM:Lägg till/Ta bort element:  Create an HTML element
                document.createElement()
            DOM:Lägg till/Ta bort element:  Remove an HTML element
                document.removeChild()
            DOM:Lägg till/Ta bort element:  Add an HTML element
                document.appendChild()
            DOM:Lägg till/Ta bort element:  Replace an HTML element
                document.replaceChild() 
            DOM:Lägg till/Ta bort element:  Write into the HTML output stream
                document.write(text)
            DOM:Eventhandlers:  Adding event handler code to an onclick event
                document.getElementById(id).onclick=function(){code}
            DOM:Hitta html-objekt:  Returns all <a> elements that have a name attribute
                document.anchors
            DOM:Hitta html-objekt:  Returns the absolute base URI of the document
                document.baseURI
                ----

                ----
            DOM:Hitta html-objekt:  Returns the <body> element
                document.body
            DOM:Hitta html-objekt:  Returns the document's cookie
                document.cookie 
            DOM:Hitta html-objekt:  Returns the document's doctype
                document.doctype
            DOM:Hitta html-objekt:  Returns the <html> element
                document.documentElement
            DOM:Hitta html-objekt:  Returns the mode used by the browser
                document.documentMode
            DOM:Hitta html-objekt:  Returns the URI of the document 
                document.documentURI
            DOM:Hitta html-objekt:  Returns the domain name of the document server
                document.domain 
            DOM:Hitta html-objekt:  Returns all <embed> elements
                document.embeds 
            DOM:Hitta html-objekt:  Returns all <form> elements 
                document.forms["frml"]
            DOM:Hitta html-objekt:  Returns the <head> element
                document.head
            DOM:Hitta html-objekt:  Returns all <img> elements
                document.images (+.length t.ex.)
            DOM:Hitta html-objekt:  Returns the DOM implementation
                document.implementation 
            DOM:Hitta html-objekt:  Returns the document's encoding (character set) 
                document.inputEncoding
            DOM:Hitta html-objekt:  Returns the date and time the document was updated
                document.lastModified
            DOM:Hitta html-objekt:  Returns all <area> and <a> elements that have a href attribute
                document.links
            DOM:Hitta html-objekt:  Returns the (loading) status of the document
                document.readyState 
            DOM:Hitta html-objekt:  Returns the URI of the referrer (the linking document)
                document.referrer
            DOM:Hitta html-objekt:  Returns all <script> elements
                document.scripts
            DOM:Hitta html-objekt:  Returns if error checking is enforced
                document.strictErrorChecking
            DOM:Hitta html-objekt:  Returns the <title> element 
                document.title
                ----

                ----
            DOM:Hitta html-objekt:  Returns the complete URL of the document
                document.URL
            DOM:Hitta html-element via css-selector p.intro
                var x = document.querySelectorAll("p.intro")[sk]
            DOM:Ändra source till lanscape.jpg i element m id myImage
                document.getElementById("myImage").src = "landscape.jpg"[sk]
            DOM:Ändra CSS-prop.:  Sätt color till blue för text m id p2
                document.getElementById("p2").style.color = "blue"[sk]
            DOM:Exempel på events
                sidan laddas, element klickas på, inmatningsfält ändras
            DOM:Events: Ändra stil till röd när id1-objekt klickas
                onclick="document.getElementById('id1').style.color = 'red'"
            DOM:Events: sätt visibility
                visibility='visible'  eller hidden
            DOM:Events: Kör displayDate för knapp m id myBtn när klickas på
                document.getElementById("myBtn").onclick = displayDate[sk]
            DOM:Events: Kör checkCookies när sidan laddas
                lt&[sk]body onload="checkCookies()"gt&[sk]
            DOM:Events: event för när sidan lämnas
                onunload
            DOM:Events: Kör upperCase när formulärfält ändras
                inne i input-etikett: onchange="upperCase()"
            DOM:Events: när ett inputfält (eller annat) får fokus
                onfocus
            DOM:Events: när drar muspekare över (ändra färg t.ex.)
                onmousover/onmousout  (även onmousedown/onmouseup)
            DOM:EventListener: Lägg till som kör displayDate vid klick på myBtn
                document.getElementById("myBtn").addEventListener("click", displayDate)[sk]
            DOM:EventListener: hur många eventlisteners kan man fästa vid samma html-objekt?
                flera (flera addEventListener efter varandra) OBS! click, inte onclick
            DOM:EventListener: ta bort en eventlistener
                 removeEventListener()
            DOM:EventListener: förklara element.addEventListener(event, function, useCapture)
                event, funktion som ska köras, använda eventbubbling eller eventcapturing
            DOM:EventListener: add alert Hello World to element
                ett-element.addEventListener("click", function(){ alert("Hello World!") })[sk]  (eller anropa som extern funktion)
            DOM:EventListener: Add eventhandler to window-object***
                window.addEventListener("resize", function(){ document.getElementById("demo").innerHTML = sometext })[sk] 
            DOM:EventListener: "pass parameters with anonymous function"
                =???
                ----

                ----
            DOM:EventListener: VAD INNEBÄR BUBBLING?
                ATT INNERSTA ELEMENTETS EVENT HANTERAS FÖRST
            DOM:EventListener: VAD INNEBÄR CAPTURING?
                ATT YTTERSTA ELEMENTETS EVENT HANTERAS FÖRST
            DOM:Navigate Nodes: Vad är noder i ett html-dok?
                ALLT. text, html-element, id-attrib mm
            DOM:Navigate Nodes: Gå till nod ovanför i hierarkin
                parentNode
            DOM:Navigate Nodes: gå till nod(er) nr n
                childNodes[nodenumber]
            DOM:Navigate Nodes: gå till första barn
                firstChild
            DOM:Navigate Nodes: gå till sista barn
                lastChild
            DOM:Navigate Nodes: gå till nästa syskon
                nextSibling
            DOM:Navigate Nodes: gå till förra syskon
                previousSibling
            DOM:Navigate Nodes: Hämta text i childnode 1, via indexnummer
                var myText = document.getElementById("intro").childNodes[0].nodeValue[sk]
            DOM:Navigate Nodes: Plocka ut innehållet i sidans body
                document.body - The body of the document (t.ex. med .innerHTML)
            DOM:Navigate Nodes: plocka ut hela(!) dokumentets innehåll
                document.documentElement - The full document
            DOM:Navigate Nodes: readonly-property för namn på olika sorters noder (tag-name t.ex.)
                nodeName
            DOM:Navigate Nodes: PROPERTY SOM RETURNERAR TYP FÖR EN NOD (ELEMNT, ATTRIBUT, TEXT, COMMENT EL DOCUMENT)
                nodeType
            DOM:Navigate Nodes: para och Create new HTML-elements
                document.createTextNode("bla") +  existingelementvarname.appendChild(nodevar) (.... SE MER)
            DOM:Navigate Nodes: Skapa ny nod INNAN andra noder
                insertBefore()
            DOM:Navigate Nodes: Ta bort en nod
                måste känna till parent  +  parentvar.removeChild(childvar)  el child.parentNode.removeChild()[sk]
            DOM:Navigate Nodes: Byt ut ett html-elem
                parent.replaceChild(para,child)[sk]
            DOM:Navigate Nodes: Kom åt andra noden efter kört  var x = document.getElementsByTagName("p")[sk]
                y = x[1][sk]
            DOM:Navigate Nodes: nodelist length
                document.getElementsByTagName("p").length[sk]  (används förstås oftast isärbrutet)
                ----

                ----
            DOM:Navigate Nodes: VAD ÄR LENGTHPROPERTY FÖR NODELIST BRA TILL?
                T.EX. ATT LOOPA IGENOM NODERNA FÖR ATT ÄNDRA FÄRG EL LIKN (myNodelist[i].style.background = red[sk])
            BOM: Helt kompletta syntaxen för  document.getElementById("header")[sk]
                window.document.getElementById("header")[sk] 
            BOM: Fönstrets inre storlek för webläsaren
                window.innerHeight(/Width) - the inner height of the browser window  (+heltäckande ex. på w3c)
            BOM: open a new window
                window.open()
            BOM: close the current window
                window.close()
            BOM: move the current window
                window.moveTo()
            BOM: resize the current window
                window.resizeTo()
            BOM: Get width of the visitor's screen in pixels
                document.getElementById("demo").innerHTML = "Screen Width: " + screen.width[sk]
            BOM: Get height of the visitor's screen in pixels
                screen.height[sk]
            BOM: Get visitorscreen available width/height 
                 screen.availWidth(/Height)[sk]
            BOM: get visitorscreen colordepth
                screen.colorDepth[sk]
            BOM: get visitorscreen pixeldepth
                screen.pixelDepth[sk]
            BOM: Användning för window.location
                get the current page address (URL) and to redirect the browser to a new page.
            BOM: open a new window
                window.open()
            BOM: close the current window
                window.close()
            BOM: move the current window
                window.moveTo()
            BOM: resize the current window
                window.resizeTo()
            BOM: returns the URL of the current page
                window.location.href
            BOM: returns the name of the internet host (of the current page)
                window.location.hostname[sk]
            BOM: returns the pathname of the current page
                window.location.pathname
                ----

                ----
            BOM: returns the web protocol of the page
                window.location.protocol
            BOM: Load a new document
                window.location.assign()
            BOM: object contains the browsers history
                window.history
            BOM: same as clicking back/forward in the browser
                history.back(/forward)()
            BOM: Return the name of the browser
                navigator.appName, navigator.appCodeName
            BOM: returns true if cookies are enabled, otherwise false
                navigator.cookieEnabled[sk]
            BOM: returns the engine name of the browser
                navigator.product[sk]
            BOM: returns version information about the browser
                navigator.appVersion//userAgent[sk]  OBS! KAN OFTA VARA VILSELEDANDE [sk]}
            BOM: returns the browser platform (operating system)
                navigator.platform
            BOM: returns the browser's language
                navigator.language[sk]
            BOM: returns true if Java is enabled
                navigator.javaEnabled()[sk]
            BOM: Skriv "hi" i alertbox
                alert("hi")[sk]
            BOM: Skriv "do it" i confirmbox 
                 confirm("do it")  (true om tryckte ok[sk] false om tryckte cancel)
            BOM: LINEBREAK INNE I POPUP-BOX****
                "Hi\nthere"
            JS BOM Popup Alerts !!!!
                window.alert(), window.confirm(), window.prompt()
            Show linebreak in alertbox ****
                "Hello\nWorld"
            JS code can be executed in time-intervals. =Called what?
                timing events
            BOM:timingevents: executes a function, over and over again, at specified time intervals
                setInterval()
            BOM:timingevents: executes a function, once, after waiting a specified number of milliseconds
                setTimeout()
            BOM: wait a specified number of milliseconds, and then execute a specified function, and it will continue to execute the function, once at every given time-interval
                setInterval(     )[sk]
                ----

                ----
            BOM: Alert "hello" every 3 seconds
                setInterval(function () {alert("Hello")}, 3000)[sk]
            BOM: stop further executions of the function specified in the setInterval() method
                clearInterval()[sk]
            BOM: wait the specified number of milliseconds, and then execute the specified function
                button onclick = "setTimeout(function(){alert('Hello')},3000)">Try it</button
            BOM:Cookies: Datapar för användare John Doe
                username=John Doe
            BOM:Cookies: Create basic Cookie for John Doe
                document.cookie="username=John Doe"[sk]
            BOM:Cookies: add expirydate to cookie
                expires=(+datumformat)
            BOM:Cookies: Läs in en cookie (läses in som en sträng)
                var x = document.cookie[sk]
            BOM:Cookies: change a cookie
                same as creating it = overwriting it
            BOM:Cookies: delete a cookie
                set expirydate to a passed date
            Use JavaScript framework library in your web pages (jquery)
                <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
            typer i javascript (5 kan innehålla värden, 2 kan inte innehålla värden)
                string, num, bool, obj, function,, null, undefined
            3 sorternas objekt i javaskript
                null, undefined
            Ta reda på vad värdet i var x har för typ
                typeof x [sk]  typeof "String"
            Vad returnerar t.ex. [1,2,3,4].constructor?
                konstruktor-funktionen = function Array()
            vad bör en funktion 'function isArray(myArray)' innehålla?
                return myArray.constructor.toString().indexOf("Array") > -1[sk]
            gör talet 123 till sträng
                String(123)
            konvertera talet i var x till sträng
                x.toString()
            Konvertera tal till sträng i e-notation
                toExponential()
            returnera sträng av tal, med värdet avrundat till visst antal decimaler
                toFixed()
            returnera sträng av tal, med värdet avrundat till viss längd
                toPrecision()
                ----

                ----
            konvertera boolean false till sträng
                String(false) [sk]  false.toString()
            dagens datum som sträng
                 String(Date()) [sk]  Date().toString()
            from date: Get the day as a number (1-31)
                getDate()
            from date: Get the weekday a number (0-6)
                getDay()
            from date: Get the four digit year (yyyy)
                getFullYear()
            from date: Get the hour (0-23)
                getHours()
            from date: Get the milliseconds (0-999)
                getMilliseconds()
            from date: Get the minutes (0-59)
                getMinutes()
            from date: Get the month (0-11)
                getMonth()
            from date: Get the seconds (0-59)
                getSeconds()
            from date: Get the time (milliseconds since January 1, 1970)
                getTime()
            Konvertera sträng 3.14 till tal
                Number("3.14")
            Lägg värde för y som tal i var x (y innehåller en sträng och måste konverteras till tal)
                var x = + y[sk]
            CONVERTING BETWEEN TYPES
                SE FLER ÖVNINGAR FRÅN 'Converting String to Numbers' }}} ; SE FLER ÖVNINGAR FRÅN 'Converting String to Numbers'
                ----

            Set font style, CSS, to 25 pixels ;
            BOM: Promptbox "skriv in ditt namn"; def.=harry potter [sk] prompt("Please enter your name", "Harry Potter"),,  (+returnval för ok och null för cancel)
            Konvertera ett datum i var d (var d = new Date();) till tal [sk] Number(d) ,,  d.getTime()
--
freec 01  js bookmarks
            FREEC 02 - JS* -- 1of4
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-02_jsalgodstruct.txt
                    freec-02_js.1of4-bmk.txt
                xxHash: 343d1387

                Introduction to JavaScript
                Using // will tell JavaScript to ignore the remainder of the text on the current line:
                You can make a multi-line comment beginning with /* and ending with */:
                JavaScript provides seven different data types which are undefined, null, boolean, string, symbol, number, and object.
                Any of the seven data types may be stored in a variable.
                In JavaScript we end statements with semicolons.
                It is common to initialize a variable to an initial value in the same line as it is declared.
                When JavaScript variables are declared, they have an initial value of undefined.
                If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number".
                If you concatenate a string with an undefined variable, you will get a literal string of "undefined".
                Write variable names in JavaScript in camelCase.
                The entire line becomes i++;, eliminating the need for the equal sign.
                Decimal numbers are sometimes referred to as floating point numbers or floats.
                Not all real numbers can accurately be represented in floating point.
                5 % 2 = 1 because Math.floor(5 / 2) = 2 (Quotient) 2 * 2 = 4
                The remainder operator is sometimes incorrectly referred to as the "modulus" operator.
                myVar *= 5;
                "your name" is called a string literal.
                When you are defining a string you must start and end with a single or double quote.
                In JavaScript, you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.
                Unlike some other programming languages, single and double quotes work the same in JavaScript.
                The reason why you might want to use one type of quote over the other is if you want to use both in a string.
                1. To allow you to use characters you may not otherwise be able to type out, such as a carriage return.
                2. To allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean.
                Code Output \' single quote \" double quote \\ backslash \n newline \r carriage return \t tab
                \b word boundary \f form feed
                Note that the backslash itself must be escaped in order to display as a backslash.
                Assign the following three lines of text into the single variable myStr using escape sequences.
                We can also use the += operator to concatenate a string onto the end of an existing string variable.
                This can be very helpful to break a long string over several lines.
                Sometimes you will need to build a string, Mad Libs style.
                var ourStr = "Hello, our name is " + ourName + ", how are you?"; // ourStr is now "Hello, our name is freeCodeCamp, how are you?"
                Basic JavaScript: Appending Variables to Strings
                "Alan Peter".length; // 18
                var firstName = "Charles"; var firstLetter = firstName[0]; // firstLetter is "C"
                In JavaScript, String values are immutable, which means that they cannot be altered once created.
                The only way to change myStr would be to assign it with a new string, like this:
                In order to get the last letter of a string, you can subtract one from the string's length.
                For example, if var firstName = "Charles", you can get the value of the last letter of the string by using firstName[firstName.length - 1].
                For example, you can get the value of the third-to-last letter of the var firstName = "Charles" string by using firstName[firstName.length - 3]
                Consider this sentence - "It was really ___, and we ___ ourselves ___".
                var sentence = "It was really " + "hot" + ", and we " + "Laughed" + " ourselves + "silly" +".
                You will need to use the string concatenation operator + to build a new string, using the provided variables: myNoun, myAdjective, myVerb, and myAdverb.
                You will then assign the formed string to the wordBlanks variable.
                var sandwich = ["peanut butter", "jelly", "bread"].
                You can also nest arrays within other arrays, like below:
                This is also called a multi-dimensional array.
                Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.
                Unlike strings, the entries of arrays are mutable and can be changed freely.
                var ourArray = [50,40,30]; ourArray[0] = 15; // equals [15,40,30]
                There shouldn't be any spaces between the array name and the square brackets, like array [0].
                An easy way to append data to the end of an array is via the push() function.
                .pop() is used to "pop" a value off of the end of an array.
                We can store this "popped off" value by assigning it to a variable.
                In other words, .pop() removes the last element from an array and returns that element.
                Use the.shift() function to remove the first item from myArray, assigning the "shifted off" value to removedFromMyArray.
                .unshift() works exactly like.push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
                The list should be a multi-dimensional array containing several sub-arrays.
                function functionName() {
                console.log("Hello World"); }
                You can call or invoke this function by using its name followed by parentheses, like this: functionName(); Each time the function is called it will print out the message "Hello World" on the dev console.
                Parameters are variables that act as placeholders for the values that are to be input to a function when it is called.
                When a function is defined, it is typically defined along with one or more parameters.
                The actual values that are input (or "passed") into a function when it is called are known as arguments.
                Here is a function with two parameters, param1 and param2:
                In JavaScript, scope refers to the visibility of variables.
                Variables which are used without the var keyword are automatically created in the global scope.
                You should always declare your variables with var.
                Inside function fun1, assign 5 to oopsGlobal without using the var keyword.
                Variables which are declared within a function, as well as the function parameters have local scope.
                The editor has two console.logs to help you see what is happening.
                // Run and check the console // myVar is not defined outside of myLocalScope console.log('inside myLocalScope', myVar);
                When you do this, the local variable takes precedence over the global variable.
                Basic JavaScript: Return a Value from a Function with Return
                In the case that the function doesn't have a return statement, when you call it, the function processes the inner code but the returned value is undefined.
                Last search start
                Basic JavaScript: Assignment with a Returned Value
                If you'll recall from our discussion of Storing Values with the Assignment Operator, everything to the right of the equal sign is resolved before the value is assigned.
                Call the processArg function with an argument of 7 and assign its return value to the variable processed.
                In Computer Science a queue is an abstract Data Structure where items are kept in order.
                Boolean values are never written with quotes.
                However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.
                If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.
                3 == '3' // returns true because JavaScript performs type conversion from string to number 3 === '3' // returns false because the types are different and type conversion is not performed
                typeof 3 // returns 'number' typeof '3' // returns 'string'
                The inequality operator (!=) is the opposite of the equality operator.
                The strict inequality operator (!==) is the logical opposite of the strict equality operator.
                The greater than operator (>) compares the values of two numbers.
                The greater than operator (&gt;) compares the values of two numbe
                Like the equality operator, greater than operator will convert data types of values while comparing.
                The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.
                The logical or operator (||) returns true if either of the operands is true.
                return "Bigger than 10"; } else {
                Combine the if statements into a single if /else statement.
                If you have multiple conditions that need to be addressed, you can chain if statements together with else if statements.
                Order is important in if, else if statements.
                Change the order of logic in the function so that it will return the correct statements in all cases.
                if/else statements can be chained together for complex logic.
                Basic JavaScript: Golf Code
                Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):
                A switch statement tests a value and can have many case statements which define various possible values.
                Statements are executed from the first matched case value until a break is encountered.
                switch(lowercaseLetter) {
                case "a":
                case values are tested with strict equality (===).
                Instead, you can add the default statement which will be executed if no matching case statements are found.
                default:
                If you have multiple inputs with the same output, you can represent them in a switch statement like this:
                case 1: case 2: case 3:
                You will need to have a case statement for each number in the range.
                If you have many options to choose from, a switch statement can be easier to write than many chained if /else if statements.
                Basic JavaScript: Returning Boolean Values from Functions
                Sometimes people use an if/else statement to do a comparison, like this:
                But there's a better way to do this.
                Since === returns true or false, we can return the result of the comparison:
                Basic JavaScript: Return Early Pattern for Functions
                When a return statement is reached, the execution of the current function stops and control returns to the calling location.
                Remember that undefined is a keyword, not a string.
                Basic JavaScript: Counting Cards
                When the count is positive, the player should bet high.
                You will write a card counting function.
                Basic JavaScript: Build JavaScript Objects
                Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through what are called properties.
                Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.
                However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.
                There are two ways to access the properties of an object: dot notation (.)
                and bracket notation ([]), similar to an array.
                Dot notation is what you use when you know the name of the property you're trying to access ahead of time.
                If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.
                Another use of bracket notation on objects is to access a property which is stored as the value of a variable.
                This can be very useful for iterating through an object's properties or when accessing a lookup table.
                Note that we do not use quotes around the variable name when using it to access the property because we are using the value of the variable, not the name.
                After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable.
                You can use either dot or bracket notation to update.
                You can add new properties to existing JavaScript objects the same way you would modify them.
                ourDog.bark = "bow-wow";
                delete ourDog.bark;
            FREEC 02 - JS* -- 2of4
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-02_jsalgodstruct.txt
                    freec-02_js.2of2-bmk.txt
                xxHash: 343d1387

                If you have tabular data, you can use an object to "lookup" values rather than a switch statement or an if/else chain.
                This is most useful when you know that your input data is limited to a certain range.
                Here is an example of a simple reverse alphabet lookup:
                We can use the .hasOwnProperty(propname) method of objects to determine if that object has the given property name.
                .hasOwnProperty() returns true or false if the property is found or not.
                Basic JavaScript: Manipulating Complex Objects
                Sometimes you may want to store data in a flexible Data Structure.
                A JavaScript object is one way to handle flexible data.
                They allow for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.
                In the example above, "artist": "Daft Punk" is a property that has a key of "artist" and a value of "Daft Punk".
                JavaScript Object Notation or JSON is a related data interchange format used to store data.
                The sub-properties of objects can be accessed by chaining together the dot or bracket notation.
                As we have seen in earlier examples, objects can contain both nested objects and nested arrays.
                Similar to accessing nested objects, Array bracket notation can be chained to access nested arrays.
                Write a function which takes an album's id (like 2548), a property prop (like "artist" or "tracks"), and a value (like "Addicted to Love") to modify the data in this collection.
                There are several rules for handling incomplete data:
                Use bracket notation when accessing object properties with variables.
                Push is an array method you can read about on Mozilla Developer Network.
                You may refer back to Manipulating Complex Objects Introducing JavaScript Object Notation (JSON) for a refresher.
                The first type of loop we will learn is called a while loop because it runs "while" a specified condition is true and stops once that condition is no longer true.
                var ourArrav = []; var i = 0; while(i < 5) {
                var ourArrav = []; var i = 0; while(i &lt; 5
                Let's try getting a while loop to work by pushing values to an array.
                for ([initialization]; [condition]; [final-expression])
                It is typically used to define and setup your loop variable.
                The final-expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.
                By changing our final-expression, we can count by even numbers.
                Basic JavaScript: Count Backwards With a For Loop
                Note that for the inner loop, we are checking the .length of arr[i], since arr[i] is itself an array.
                Basic JavaScript: Iterate with JavaScript Do...While Loops
                var ourArray = []; var i = 0; do {
                Basic JavaScript: Replace Loops using Recursion
                Note: Recursive functions must have a base case when they return without calling the function again (in this example, when n &lt;= 0), otherwise they can never finish executi
                Write a recursive function, sum(arr, n), that returns the sum of the first n elements of an array arr.
                Basic JavaScript: Profile Lookup
                We have an array of objects representing different people in our contacts lists.
                Basic JavaScript: Generate Random Fractions with JavaScript
                JavaScript has a Math.random() function that generates a random decimal number between 0 (inclusive) and not quite up to 1 (exclusive).
                Like Storing Values with the Equal Operator, all function calls will be resolved before the return executes, so we can return the value of the Math.random() function.
                Basic JavaScript: Generate Random Whole Numbers with JavaScript
                Basic JavaScript: Generate Random Whole Numbers within a Range
                The parseInt() function parses a string and returns an integer.
                The parseInt() function parses a string and returns an integer.
                The radix can be an integer between 2 and 36.
                Basic JavaScript: Use the Conditional (Ternary) Operator
                Basic JavaScript: Use Multiple Conditional (Ternary) Operators
                You can also chain them together to check for multiple conditions.
                It is considered best practice to format multiple conditional operators such that each condition is on a separate line, as shown above.
                Basic JavaScript: Use Recursion to Create a Countdown
                Basic JavaScript: Use Recursion to Create a Range of Numbers
                * Arrow functions * Classes * Modules * Promises * Generators * let and const
                If you use ES6 in your own projects, you may need to use a program (transpiler) to convert your ES6 code into ES5 until browsers support ES6.
                let camper = 'James'; let camper = 'David'; // throws an error
                "use strict";
                When you declare a variable with the let keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.
                'use strict'; let printNumTwo; for (let i= 0; i < 3; i++) {
                'use strict'; let printNumTwo; for (let i= 0; i &lt; 3; i++
                const has all the awesome features that let has, with the added bonus that variables declared using const are read-only.
                "use strict"; const FAV_PET = "Cats"; FAV_PET = "Dogs"; // returns error
                A common practice when naming constants is to use all uppercase letters, with words separated by an underscore.
                Note: It is common for developers to use uppercase variable identifiers for immutable values and lowercase or camelCase for mutable values (objects and arrays).
                In a later challenge you will see an example of a lowercase variable identifier being used for an array.
                However, it is important to understand that objects (including arrays and functions) assigned to a variable using const arestill mutable.
                Using the const declaration only prevents reassignment of the variable identifier.
                To ensure your data doesn't change, JavaScript provides a function Object.freeze to prevent data mutation.
                Any attempt at changing the object will be rejected without an error.
                ES6: Use Arrow Functions to Write Concise Anonymous Functions
                In JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function.
                Instead, we create inline functions.
                To achieve this, we often use the following syntax:
                Instead, you can use arrow function syntax:
                When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword return as well as the brackets surrounding the code.
                const myFunc = () => "value";
                const myFunc = () =&gt; "valu
                Just like a regular function, you can pass arguments into an arrow function.
                If an arrow function has a single argument, the parentheses enclosing the argument may be omitted.
                It is possible to pass more than one argument into an arrow function.
                In order to help us create more flexible functions, ES6 introduces default parameters for functions.
                const greeting = (name = "Anonymous") => "Hello " + name; console.log(greeting("John"));...
                const greeting = (name = "Anonymous") =&gt; "Hello " + name; console.log(greeting("John")); // Hello John console.log(greeting()); // Hello Anonym
                ES6: Use the Rest Parameter with Function Parameters
                function howMany(...args) {
                The rest parameter eliminates the need to check the args array and allows us to apply map(), filter() and reduce() on the parameters array.
                ES6 introduces the spread operator, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.
                const arr = [6, 89, 3, 45]; const maximus = Math.max(...arr); // returns 89
                ES6: Use Destructuring Assignment to Extract Values from Objects
                You can extract as many or few values from the object as you want.
                ES6: Use Destructuring Assignment to Assign Variables from Objects
                ES6: Use Destructuring Assignment to Assign Variables from Nested Objects
                ES6: Use Destructuring Assignment to Assign Variables from Arrays
                One key difference between the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list.
                Consequently, you cannot pick or choose which elements you want to assign to variables.
                Destructuring an array lets us do exactly that:
                Use destructuring assignment to swap the values of a and b so that a receives the value stored in b, and b receives the value stored in a.
                ES6: Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements
                ES6: Use Destructuring Assignment to Pass an Object as a Function's Parameters
                This can also be done in-place:
                A new feature of ES6 is the template literal.
                Template literals allow you to create multi-line strings and to use string interpolation features to create strings.
                // Template literal with multi-line and string interpolation const greeting = `Hello, my name is ${person.name}!
                I am ${person.age} years old.`;
                Secondly, notice that the string is multi-line, both in the code and the output.
                Basically, you won't have to use concatenation with the + operator anymore.
                To add variables to strings, you just drop the variable in a template string and wrap it with ${ and }.
                Similarly, you can include other expressions in your string literal, for example ${a + b}.
                ES6: Write Concise Object Literal Declarations Using Object Property Shorthand
                ES6: Write Concise Declarative Functions with ES6
                With ES6, You can remove the function keyword and colon altogether when defining functions in objects.
                Refactor the function setGear inside the object bicycle to use the shorthand syntax described above.
                ES6: Use class Syntax to Define a Constructor Function
                ES6 provides a new syntax to create objects, using the class keyword.
                In ES5, we usually define a constructor function and use the new keyword to instantiate an object.
                It should be noted that the class keyword declares a new function, to which a constructor is added.
                This constructor is invoked when new is called to create a new object.
                * UpperCamelCase should be used by convention for ES6 class names, as in SpaceShuttle used above.
                * The constructor method is a special method for creating and initializing an object created with a class.
                ES6: Use getters and setters to Control Access to an Object
                This change could involve calculations, or even overwriting the previous value completely.
                Notice the syntax used to invoke the getter and setter.
                Note: It is convention to precede the name of a private variable with an underscore (_).
                This is the power of a getter and a setter.
                You are creating an API for another user, who can get the correct result regardless of which one you track.
                ES6: Create a Module Script
                In order to make JavaScript more modular, clean, and maintainable; ES6 introduced a way to easily share code among JavaScript files.
                This involves exporting parts of a file for use in one or more other files, and importing the parts you need, where you need them.
                In order to take advantage of this functionality, you need to create a script in your HTML document with a type of module.
                <script type="module" src="filename.
                &lt;script type="module" src="filena
                A script that uses this module type can now use the import and export features you will learn about in the upcoming challenges.
                ES6: Use export to Share a Code Block
                Imagine a file called math_functions.js that contains several functions related to mathematical operations.
                export const add = (x, y) => {
                export const add = (x, y) =&gt
                The above is a common way to export a single function, but you can achieve the same thing like this:
                import allows you to choose which parts of a file or module to load.
                import { add } from './math_functions.js';
                The relative file path(./) and file extension (.js) are required when using import in this way.
                You can import more than one item from the file by adding them in the import statement like this:
                These functions are in a file called string_functions.js, which is in the same directory as the current file.
                import * as myMathModule from "./math_functions.
                The object will contain all of the exports from math_functions.js in it, so you can access the functions like you would any other object property.
                ES6: Create an Export Fallback with export default
                Usually you will use this syntax if only one value is being exported from a file.
                It is also used to create a fallback value for a file or module.
                Since export default is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file.
                Additionally, you cannot use export default with var, let, or const
                To import a default export, you need to use a different import syntax.
                The imported value, add, is not surrounded by curly braces ({}).
                ES6: Create a JavaScript Promise
                A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously.
                Promise is a constructor function, so you need to use the new keyword to create one.
                It takes a function, as its argument, with two parameters - resolve and reject.
                ES6: Complete a Promise with resolve and reject
                A promise has three states: pending, fulfilled, and rejected.
                If responseFromServer is true, call the resolve method to successfully complete the promise.
                ES6: Handle a Fulfilled Promise with then
                Promises are most useful when you have a process that takes an unknown amount of time in your code (i.e. something asynchronous), often a server request.
                This can be achieved by using the then method.
                result comes from the argument given to the resolve method.
                ES6: Handle a Rejected Promise with catch
                The .test() method takes the regex, applies it to a string (which is placed inside the parentheses), and returns true or false if your pattern finds something or not.
                let testStr = "freeCodeCamp"; let testRegex = /Code/; testRegex.test(testStr); // Returns true
                let testStr = "Hello, my name is Kevin."; let testRegex = /Kevin/; testRegex.test(testStr); // Returns true
                For example, if you wanted to match "yes" or "no", the regex you want is /yes|no/.
                An example of using this flag is /ignorecase/i.
                So far, you have only been checking if a pattern exists or not within a string.
                You can also extract the actual matches you found with the .match() method.
                "Hello, World!".match(/Hello/); // Returns ["Hello"] let ourStr = "Regular expressions"; let ourRegex = /expressions/; ourStr.match(ourRegex); // Returns ["expressions"]
                let repeatRegex = /Repeat/g; testStr.match(repeatRegex); // Returns ["Repeat", "Repeat", "Repeat"]
                You can have multiple flags on your regex like /search/gi
                Character classes allow you to define a group of characters you wish to match by placing them inside square ([ and ]) rackets.
                let bigStr = "big"; let bagStr = "bag"; let bugStr = "bug"; let bogStr = "bog"; let bgRegex = /b[aiu]a/; bigStr.match(bgRegex); // Returns ["big"] bagStr.match(bgRegex); // Returns ["bag"] bugStr.match(bgRegex); // Returns ["bug"] bogStr.match(bgRegex); // Returns null
                For example, to match lowercase letters a through e you would use [a-e].
                let jennyStr = "Jenny8675309"; let myRegex = /[a-z0-9]/ig; // matches all letters and numbers in jennyStr jennyStr.match(myRegex);
                "titanic" matched against the adjusted regex of /t[a-z]*?i/ returns ["ti"].
                Parsing HTML with regular expressions should be avoided, but pattern matching an HTML string with regular expressions is completely fine.
                let firstString = "Ricky is first and can be found."; let firstRegex = /^Ricky/; firstRegex.test(firstString); // Returns true
                The closest character class in JavaScript to match the alphabet is \w.
                let longHand = /[A-Za-z0-9_]+/; let shortHand = /\w+/; let numbers = "42"; let varNames = "important_var"; longHand.test(numbers); // Returns true shortHand.test(numbers); // Returns true longHand.test(varNames); // Returns true shortHand.test(varNames); // Returns true
                These shortcut character classes are also known as shorthand character classes.
                Use the shorthand character class \W to count the number of non-alphanumeric characters in various quotes and strings.
            FREEC 02 - JS* -- 3of4
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-02_jsalgodstruct.txt
                    freec-02_js.3of4-bmk.txt
                xxHash: 343d1387

                The shortcut to look for digit characters is \d, with a lowercase d.
                The shortcut to look for non-digit characters is \D.
                You need to check all the usernames in a database.
                Here are some simple rules that users have to follow when creating their username.
                let username = "JackOfAllTrades"; let userCheck = /change/; // Change this line let result = userCheck.test(username);
                You can search for whitespace using \s, which is a lowercase s.
                You can think of it as similar to the character class [ \r\t\f\n\v].
                You can think of it being similar to the character class [^ \r\t\f\n\v].
                For example, to match only the letter a appearing between 3 and 5 times in the string "ah", your regex would be /a{3,5}h/.
                For example, to match only the word "hah" with the letter a 3 times, your regex would be /ha{3}h/.
                A positive lookahead is used as (?=...)
                A negative lookahead is used as (?!...)
                A more practical use of lookaheads is to check two or more patterns in one string.
                If you want to find either Penguin or Pumpkin in a string, you can use the following Regular Expression: /P(engu|umpk)in/g
                let repeatStr = "regex regex"; let repeatRegex = /(\w+)\s\1/; repeatRegex.test(repeatStr); // Returns true repeatStr.match(repeatRegex); // Returns ["regex regex", "regex"]
                Using the .match() method on a string will return an array with the string it matches, along with its capture group.
                You can search and replace text in a string using .replace() on a string.
                The second parameter is the string to replace the match or a function to do something.
                You can also access capture groups in the replacement string with dollar signs ($).
                Write a regex and use the appropriate string methods to remove whitespace at the beginning and end of strings.
                Note: The String.prototype.trim() method would work here, but you'll need to complete this challenge using regular expressions.
                These issues generally come in three forms:
                This means checking the intermediate values and types of variables to see if they are what they should be.
                Debugging: Use the JavaScript Console to Check the Value of a Variable
                Both Chrome and Firefox have excellent JavaScript consoles, also known as DevTools, for debugging your JavaScript.
                You can find Developer tools in your Chrome's menu or Web Console in Firefox's menu.
                The console.log() method, which "prints" the output of what's within its parentheses to the console, will likely be the most helpful debugging tool.
                Use the console.log() method to print the value of the variable a where noted in the code.
                When you run ordinary JavaScript, the browsers console will display your console.log() statements the exact number of times it is called.
                If you prefer to use the browser console, and want it to mimic the freeCodeCamp console, place console.clear() before any other console calls, to clear the browser console.
                Type errors can lurk in calculations or function calls.
                Be careful especially when you're accessing and working with external data in the form of a JavaScript Object Notation (JSON) object.
                JavaScript recognizes six primitive (immutable) data types: Boolean, Null, Undefined, Number, String, and Symbol (new with ES6) and one type for mutable items: Object.
                Note that in JavaScript, arrays are technically a type of object.
                Transposed, missing, or mis-capitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error.
                Also, take care when nesting code blocks into others, such as adding a callback function as an argument to a method.
                const allSameQuotes = 'I\'ve had a perfectly wonderful evening, but this wasn\'t it.';
                Fix the string so it either uses different quotes for the href value, or escape the existing ones.
                This leads to unexpected control flow in your program.
                Fix the condition so the program runs the right branch, and the appropriate value is assigned to result.
                This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.
                Debugging: Catch Arguments Passed in the Wrong Order When Calling a Function
                Off by one errors (sometimes called OBOE) crop up when you're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indices of them.
                Debugging: Use Caution When Reinitializing Variables Inside a Loop
                It's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached.
                One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition.
                When you're done with this section, you should understand the basic properties and differences between arrays and objects, as well as how to choose which to use for a given purpose.
                Notice that this array also contains JavaScript objects, which we will examine very closely in our next section, but for now, all you need to know is that arrays are also capable of storing complex objects.
                let ourVariable = ourArray[0]; // ourVariable equals "a"
                ourArray[1] = "not b anymore"; // ourArray now equals ["a", "not b anymore", "c"];
                Basic Data Structures: Add Items to an Array with push() and unshift()
                Basic Data Structures: Remove Items from an Array with pop() and shift()
                The key difference between pop() and shift() and their cousins push() and unshift(), is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.
                splice() allows us to do just that: remove any number of consecutive elements from anywhere in an array.
                splice() can take up to 3 parameters, but for now, we'll focus on just the first 2. The first two parameters of splice() are integers which represent indexes, or positions, of the array that splice() is being called upon.
                Well, you can use the third parameter, comprised of one or more element(s), to add to the array.
                numbers.splice(startIndex, amountToDelete, 13, 14);
                The index at which to begin deleting elements (3), the number of elements to be deleted (1), and the elements (13, 14) to be inserted at that same index.
                We have defined a function, htmlColorNames, which takes an array of HTML colors as an argument.
                Modify the function using splice() to remove the first two elements of the array and add 'DarkSalmon' and 'BlanchedAlmond' in their respective places.
                * htmlColorNames should return ["DarkSalmon", "BlanchedAlmond", "LavenderBlush", "PaleTurquoise", "FireBrick"] * The htmlColorNames function should utilize the splice() method * You should not use shift() or unshift().
                slice(), rather than modifying an array, copies, or extracts, a given number of elements to a new array, leaving the array it is called upon untouched.
                While slice() allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6's new spread operator allows us to easily copy all of an array's elements, in order, with a simple and highly readable syntax.
                The spread syntax simply looks like this: ...
                Modify the function using spread syntax so that it works correctly (hint: another method we have already covered might come in handy here!).
                Another huge advantage of the spread operator, is the ability to combine arrays, or to insert all the elements of one array into another, at any index.
                Modify the function using the spread operator so that it returns the array ['learning', 'to', 'code', 'is', 'fun'].
                indexOf() takes an element as a parameter, and when called, it returns the position, or index, of that element, or -1 if the element does not exist on the array.
                JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as every(), forEach(), map(), etc.), however the technique which is most flexible and offers us the greatest amount of control is a simple for loop.
                Basic Data Structures: Create complex multi-dimensional arrays
                At their most basic, objects are just collections of key-value pairs.
                In other words, they are pieces of data (values) mapped to unique identifiers called properties (keys).
                const tekkenCharacter = {
                If you want to add an additional property, such as "origin", it can be done by assigning origin to the object:
                Hwoarang also had distinct orange hair.
                Bracket notation is required if your property has a space in it or if you want to use a variable to name the property.
                Basic Data Structures: Modify an Object Nested Within an Object
                Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.
                In short, they are key-value stores which provide a flexible, intuitive way to structure data, and, they provide very fast lookup time.
                If we wanted to remove the apples key, we can remove it by using the delete keyword like this:
                One uses the hasOwnProperty() method and the other uses the in keyword.
                Basic Data Structures: Iterate Through the Keys of an Object with a for...in Statement
                for (let user in users) { console.log(user); }
                Basic Data Structures: Generate an Array of All Object Keys with Object.keys()
                This will return an array with strings representing each property in the object.
                Basic Data Structures: Modify an Array Stored in an Object
                Additionally, the Data Structures lessons located in the Coding Interview Prep section of the curriculum also cover the ES6 Map and Set objects, both of which are similar to ordinary objects but provide some additional features.
                The data key contains five keys, one of which contains an array of friends.
                Finish writing it so that it takes a user object and adds the name of the friend argument to the array stored in user.data.friends and returns that array.
                To write an algorithm, you must first understand a problem, and then solve it with coding.
                First, consider how to get inputs.
                Basic Alaorithm Scriptina: Convert Celsius to Fahrenheit
                Basic Algorithm Scripting: Reverse a String
                Basic Algorithm Scripting: Factorialize a Number
                Factorials are often represented with the shorthand notation n!
                Basic Algorithm Scripting: Find the Longest Word in a String
                Basic Algorithm Scripting: Return Largest Numbers in Arrays
                Basic Algorithm Scripting: Confirm the Ending
                This challenge can be solved with the .endsWith() method, which was introduced in ES2015.
                But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.
                Basic Algorithm Scripting: Repeat a String Repeat a String
                Basic Algorithm Scripting: Truncate a String
                Basic Algorithm Scripting: Finders Keepers
                Basic Algorithm Scripting: Boo who
                Basic Algorithm Scripting: Title Case a Sentence
                Basic Algorithm Scripting: Slice and Splice
                Basic Algorithm Scripting: Falsy Bouncer
                Basic Algorithm Scripting: Where do I Belong
                Basic Algorithm Scripting: Mutations
                Basic Algorithm Scripting: Chunky Monkey
                Introduction to the Object Oriented Programming Challenges
                These are sometimes called classes, and they group together data with related behavior.
                The data is an object's attributes, and the behavior (or functions) are methods.
                Objects can transfer information by calling and passing data to another object's methods.
                let duck = {
                console.log(duck.name); // This prints "Aflac" to the console
                Methods are properties that are functions.
                sayName: function() {return "The name of this duck is " + duck.name + ".";}
                If the variable name changes, any code referencing the original name would need to be updated as well.
                A way to avoid these issues is with the this keyword:
                In the current context, this refers to the object that the method is associated with: duck.
                Constructors are functions that create new objects.
                They define properties and behaviors that will belong to the new object.
                Here is an example of a constructor:
                * Constructors are defined with a capitalized name to distinguish them from other functions that are not constructors.
                * Constructors use the keyword this to set properties of the object they will create.
                * Constructors define properties and behaviors instead of returning a value as other functions might.
                let blueBird = new Bird();
                Without the new operator, this inside the constructor would not point to the newly created object, giving unexpected results.
                * Use the Dog constructor from the last lesson to create a new instance of Dog, assigning it to a variable hound.
                Object Oriented Programming: Extend Constructors to Receive Arguments
                To more easily create different Bird objects, you can design your Bird constructor to accept parameters:
                It's now possible to define the properties for each Bird at the time it is created, which is one way that JavaScript constructors are so useful.
                instanceof allows you to compare an object to a constructor, returning true or false based on whether or not that object was created with the constructor.
                crow instanceof Bird; // => true
                crow instanceof Bird; // =&gt; t
                If an object is created without using a constructor, instanceof will verify that it is not an instance of that constructor:
                The following code adds all of the own properties of duck to the array ownProps:
                if(duck.hasOwnProperty(property)) { ownProps.push(property); }
                Object Oriented Programming: Use Prototype Properties to Reduce Duplicate Code
                A better way is to use Bird's prototype.
                Properties in the prototype are shared among ALL instances of Bird.
                Here's how to add numLegs to the Bird prototype:
                Bird.prototype.numLegs = 2;
                Since all instances automatically have the properties on the prototype, think of a prototype as a "recipe" for creating objects.
                Nearly every object in JavaScript has a prototype property which is part of the constructor function that created it.
                Own properties are defined directly on the object instance itself.
                And prototype properties are defined on the prototype.
                Here is how you add duck's own properties to the array ownProps and prototype properties to the array prototypeProps:
            FREEC 02 - JS* -- 4of4 nr1
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-02_jsalgodstruct.txt
                    freec-02_js.4-1of4-bmk.txt
                xxHash: 343d1387

                Object Oriented Programming: Understand the Constructor Property
                Note that the constructor property is a reference to the constructor function that created the instance.
                The advantage of the constructor property is that it's possible to check for this property to find out what kind of object it is.
                Here's an example of how this could be used:
                Since the constructor property can be overwritten (which will be covered in the next two challenges) it's generally better to use the instanceof method to check the type of an object.
                Write a joinDogFraternity function that takes a candidate parameter and, using the constructor property, return true if the candidate is a Dog, otherwise return false.
                A more efficient way is to set the prototype to a new object that already contains the properties.
                This way, the properties are added all at once:
                Object Oriented Programming: Remember to Set the Constructor Property when Changing the Prototype
                To fix this, whenever a prototype is manually set to a new object, remember to define the constructor property:
                Object Oriented Programming: Understand Where an Object's Prototype Comes From
                You can show this relationship with the isPrototypeOf method:
                Object Oriented Programming: Understand the Prototype Chain
                All objects in JavaScript (with a few exceptions) have a prototype.
                Also, an object's prototype itself is an object.
                The hasOwnProperty method is defined in Object.prototype, which can be accessed by Bird.prototype, which can then be accessed by duck.
                This is an example of the prototype chain.
                In this prototype chain, Bird is the supertype for duck, while duck is the subtype.
                Object is a supertype for all objects in JavaScript.
                Therefore, any object can use the hasOwnProperty method.
                The code can be edited to follow the DRY principle by creating a supertype (or parent) called Animal:
                Object Oriented Programming: Inherit Behaviors from a Supertype
                This and the next challenge will cover how to reuse Animal's methods inside Bird and Dog without defining them again.
                It uses a technique called inheritance.
                Instead, here's an alternative approach without those disadvantages:
                let animal = Object.create(Animal.prototype);
                By setting the prototype of animal to be Animal's prototype, you are effectively giving the animal instance the same "recipe" as any other instance of Animal.
                Object Oriented Programming: Set the Child's Prototype to an Instance of the Parent
                This challenge covers the next step: set the prototype of the subtype (or child) - in this case, Bird - to be an instance of Animal.
                Last search start
                Bird.prototype = Object.create(Animal.prototype);
                let duck = new Bird("Donald"); duck.eat(); // prints "nom nom nom"
                duck inherits all of Animal's properties, including the eat method.
                Modify the code so that instances of Dog inherit from Animal.
                Object Oriented Programming: Reset an Inherited Constructor Property
                Fix the code so duck.constructor and beagle.constructor return their respective constructors.
                A constructor function that inherits its prototype object from a supertype constructor function can still have its own methods in addition to inherited methods.
                In addition to what is inherited from Animal, you want to add behavior that is unique to Bird objects.
                Object Oriented Programming: Override Inherited Methods
                In previous lessons, you learned that an object can inherit its behavior (methods) from another object by referencing its prototype object:
                It's done the same way - by adding a method to ChildObject.prototype using the same method name as the one to override.
                function Animal() { } Animal.prototype.eat = function() {
                Object Oriented Programming: Use a Mixin to Add Common Behavior Between Unrelated Objects
                Inheritance does not work well for unrelated objects like Bird and Airplane.
                A mixin allows other objects to use a collection of functions.
                Object Oriented Programming: Use Closure to Protect Properties Within an Object from Being Modified Externally
                This way, the variable can only be accessed and changed by methods also within the constructor function.
                In JavaScript, a function always has access to the context in which it was created.
                This is called closure.
                Change how weight is declared in the Bird function so it is a private variable.
                Then, create a method getWeight that returns the value of weight 15.
                A common pattern in JavaScript is to execute a function as soon as it is declared:
                An immediately invoked function expression (IIFE) is often used to group related functionality into a single object or module.
                This returned object contains all of the mixin behaviors as properties of the object.
                Introduction to the Functional Programming Challenges
                The functional programming software development approach breaks a program into small, testable parts.
                Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope.
                Functional programming is about:
                Given a function (representing the tea type) and number of cups needed, the following function returns an array of strings (each representing a cup of a specific type of tea).
                We can modify getTea to accept a function as a parameter to be able to change the type of tea it prepares.
                Callbacks are the functions that are slipped or passed into another function to decide the invocation of that function.
                Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called first class functions.
                In JavaScript, all functions are first class functions.
                The functions that take a function as an argument, or return a function as a return value are called higher order functions.
                When the functions are passed in to another function or returned from another function, then those functions which gets passed in or returned can be called a lambda.
            FREEC 02 - JS* -- 4of4 nr2
                @Voice bookmarks exported from: /storage/emulated/0/Download/freec-02_jsalgodstruct.txt
                    freec-02_js.4-2of4-bmk.txt
                xxHash: 343d1387

                Similarly, an imperative style in programming is one that gives the computer a set of statements to perform a task.
                In contrast, functional programming is a form of declarative programming.
                You tell the computer what you want done by calling a method or function.
                For example, instead of using the for loop mentioned above, you could call the map method which handles the details of iterating over an array.
                This is a small example of a much larger pattern - you call a function on a variable, array, or an object, and the function changes the variable or something in the object.
                Recall that in functional programming, changing or altering things is called mutation, and the outcome is called a side effect.
                Functional Programming: Pass Arguments to Avoid External Dependence in a Function
                Another principle of functional programming is to always declare your dependencies explicitly.
                The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.
                Functional Programming: Refactor Global Variables Out of Functions
                Functional Programming: Use the map Method to Extract Data from an Array
                The code in the editor currently uses a for loop to do this, so you should replace the loop functionality with your map expression.
                console.log(JSON.stringify(ratings));
                It also doesn't alter the original array, as long as its callback function doesn't.
                In other words, map is a pure function, and its output depends solely on its inputs.
                It would teach us a lot about map to try to implement a version of it that behaves exactly like the Array.prototype.map() with a for loop or Array.prototype.forEach().
                Note: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.
                Functional Programming: Use the filter Method to Extract Data from an Array
                Functional Programming: Implement the filter Method on a Prototvpe
                Functional Programming: Return Part of an Array Using the slice Method
                Functional Programming: Remove Elements from an Array Using slice Instead of splice
                Functional Programming: Combine Two Arrays Using the concat Method
                Concatenation means to join items end to end.
                Use the concat method in the nonMutatingConcat function to concatenate attach to the end of original.
                Array.prototype.reduce(), or simply reduce(), is the most general of all array operations in JavaScript.
                You can solve almost any array processing problem using the reduce method.
                The first argument is known as the accumulator, which gets assigned the return value of the callback function from the previous iteration, the second is the current element being processed, the third is the index of that element and the fourth is the array upon which reduce is called.
                See below for an example using reduce on the users array to return the sum of all the users' ages.
                Now that you have worked through a few challenges using higher-order functions like map(), filter(), and reduce(), you now get to apply them to solve a more complex challenge.
                Functional Programming: Sort an Array Alphabetically using the sort Method
                JavaScript's default sorting method is by string Unicode point value, which may return unexpected results.
                Therefore, it is encouraged to provide a callback function to specify how to sort the array items.
                Functional Programming: Return a Sorted Array Without Changing the Original Array
                Use the sort method in the nonMutatingSort function to sort the elements of an array in ascending order.
                Functional Programming: Split a String into an Array Using the split Method
                Functional Programming: Combine an Array into a String Using the join Method
                Functional Programming: Apply Functional Programming to Convert Strings to URL Slugs
                Many content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes.
                Functional Programming: Use the every Method to Check that Every Element in an Array Meets a Criteria
                Functional Programming: Use the some Method to Check that Any Elements in an Array Meet a Criteria
                The arity of a function is the number of arguments it requires.
                Currying a function means to convert a function of N arity into N functions of arity 1.
                In other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.
                This is useful in your program if you can't supply all the arguments to a function at one time.
                These should prepare you to complete the final challenges for the JavaScript Algorithms And Data Structures Certification.
                These challenges will allow you to test how much you have learned and which parts you may need to review again before starting the projects.
                Intermediate Algorithm Scripting: Sum All Numbers in a Range
                Intermediate Algorithm Scripting: Diff Two Arrays
                Intermediate Algorithm Scripting: Seek and Destroy
                Intermediate Algorithm Scripting: Wherefore art thou
                Intermediate Algorithm Scripting: Spinal Tap Case
                Intermediate Algorithm Scripting: Pig Latin
                Intermediate Algorithm Scripting: Search and Replace
                Intermediate Algorithm Scripting: DNA Pairing The DNA strand is missing the pairing element.
                Intermediate Algorithm Scripting: Sorted Union
                Intermediate Algorithm Scripting: Convert HTML Entities
                Convert the characters &, <, >, " (double quote), and ' (apostrophe), in a string...
                Convert the characters &, &lt;, &gt;, " (double quote), and ' (apostrophe), in a string to their corresponding HTML ent
                Intermediate Algorithm Scripting: Sum All Odd Fibonacci Numbers
                Intermediate Algorithm Scripting: Smallest Common Multiple
                Intermediate Algorithm Scripting: Drop it
                Intermediate Algorithm Scripting: Binary Agents
                Intermediate Algorithm Scripting: Everything Be True
                Intermediate Algorithm Scripting: Arguments Optional
                Intermediate Algorithm Scripting: Make a Person
                Intermediate Algorithm Scripting: Map the Debris
                Introduction to the JavaScript Algorithms and Data Structures Projects
                * Palindrome Checker * Roman Numeral Converter * Caesars Cipher * Telephone Number Validator * Cash Register

jscb 2010
~/Empire/Doks/Comp/lang/webdev/js/js_cookb.pdf
            1. Working with JavaScript Strings  1
                1.1 Concatenating Two or More Strings  3
                1.2 Concatenating a String and Another Data Type  4
                1.3 Conditionally Comparing Strings  5
                1.4 Finding a Substring in a String  8
                1.5 Extracting a Substring from a String  9
                1.6 Checking for an Existing, Nonempty String  10
                1.7 Breaking a Keyword String into Separate Keywords  13
                1.8 Inserting Special Characters  15
                1.9 Processing Individual Lines of a textarea  16
                1.10 Trimming Whitespace from the Ends of a String  17
                1.11 Left- or Right-Pad a String  19
            2. Using Regular Expressions  21
                2.1 Testing Whether a Substring Exists  24
                2.2 Testing for Case-Insensitive Substring Matches  25
                2.3 Validating a Social Security Number  26
                2.4 Finding and Highlighting All Instances of a Pattern  28
                2.5 Replacing Patterns with New Strings  31
                2.6 Swap Words in a String Using Capturing Parentheses  32
                2.7 Using Regular Expressions to Trim Whitespace  35
                2.8 Replace HTML Tags with Named Entities  36
                2.9 Searching for Special Characters  37
            3. Dates, Time, and Timers  39
                3.1 Printing Out Today’s Date  41
                3.2 Printing Out the UTC Date and Time  42
                3.3 Printing Out an ISO  8601 Formatted Date  43
                3.4 Converting an ISO  8601 Formatted Date to a Format Acceptable to the Date Object  45
                3.5 Creating a Specific Date  47
                3.6 Scheduling a Future Date  48
                3.7 Tracking Elapsed Time  49
                3.8 Creating a Timeout  49
                3.9 Creating Recurring Timers  50
                3.10 Using Function Closures with Timers  52
            4. Working with Numbers and Math  55
                4.1 Keeping an Incremental Counter  57
                4.2 Converting a Decimal to a Hexadecimal Value  59
                4.3 Creating a Random Number Generator  59
                4.4 Randomly Generating Colors  60
                4.5 Converting Strings in a Table to Numbers  61
                4.6 Summing All Numbers in a Table Column  62
                4.7 Converting Between Degrees and Radians  64
                4.8 Find the Radius and Center of a Circle to Fit Within a Page Element  65
                4.9 Calculating the Length of a Circular Arc  67
            5. Working with Arrays and Loops  69
                5.1 Looping Through an Array  71
                5.2 Creating a Multidimensional Array  71
                5.3 Creating a String from an Array  73
                5.4 Sorting an Array  74
                5.5 Store and Access Values in Order  75
                5.6 Store and Access Values in Reverse Order  76
                5.7 Create a New Array as a Subset of an Existing Array  77
                5.8 Searching Through an Array  78
                5.9 Flatten a Multidimensional Array  79
                5.10 Search and Remove or Replace Array Elements  80
                5.11 Applying a Function Against Each Array Element  82
                5.12 Applying a Function to Every Element in an Array and Returning a New Array  83
                5.13 Creating a Filtered Array  84
                5.14 Validating Array Contents  86
                5.15 Using an Associative Array to Store Form Element Names and Values  88
            6. Building Reusability with JavaScript Functions  93
                6.1 Creating a Block of Reusable Code  94
                6.2 Passing Single Data Values to and from a Function  95
                6.3 Passing Complex Data Objects to a Function  96
                6.4 Creating a Dynamic Runtime Function  98
                6.5 Passing a Function As an Argument to Another Function  100
                6.6 Implementing a Recursive Algorithm  101
                6.7 Create a Function That Remembers Its State  103
                6.8 Improving Application Performance with a Generalized Currying Function  107
                6.9 Improve Application Performance with Memoization (Caching Calculations)  109
                6.10 Using an Anonymous Function to Wrap Global Variables  112
            7. Handling Events  115  @
                7.1 Detecting When the Page Has Finished Loading  117
                7.2 Capturing the Location of a Mouse Click Event Using the Event Object  119
                7.3 Creating a Generic, Reusable Event Handler Function  122
                7.4 Canceling an Event Based on Changed Circumstance  125
                7.5 Preventing an Event from Propagating Through a Set of Nested Elements  126
                7.6 Capturing Keyboard Activity  129
                7.7 Using the New HTML5 Drag-and-Drop  132  @
                7.8 Using Safari Orientation Events and Other Mobile Development Environments  140
            8. Browser Pieces  143
                8.1 Ask the Web Page Reader to Confirm an Action  144
                8.2 Creating a New, Stripped-Down Browser Window  144
                8.3 Finding Out About the Browser Accessing the Page  145
                8.4 Warning the Web Page Reader About Leaving a Page  146
                8.5 Changing Stylesheets Depending on Color Support  147
                8.6 Modifying Image Dimensions Depending on Page Size  149
                8.7 Creating Breadcrumbs in a CMS Template Page  150
                8.8 Bookmarking a Dynamic Page  153
                8.9 Preserving State for Back Button, Page Refresh  156
            9. Form Elements and Validation  159
                9.1 Accessing Form Text Input Values  159
                9.2 Dynamically Disabling and Enabling Form Elements  161
                9.3 Getting Information from a Form Element Based on an Event  161
                9.4 Performing an Action When a Radio Button Is Clicked  164
                9.5 Checking for a Valid Phone Number  166
                9.6 Canceling a Form Submission  167
                9.7 Preventing Duplicate Form Submissions  169
                9.8 Hiding and Displaying Form Elements  171
                9.9 Modifying a Selection List Based on Other Form Decisions
            10. Debugging and Error Handling  177
                10.1 Gracefully Handling No JavaScript Support  177
                10.2 Checking for Errors in Functions  180
                10.3 Using an Alert for Simple Debugging  181
                10.4 Catching an Error and Providing Graceful Error Handling  182
                10.5 Initiating Manageable Errors  184
                10.6 Using Firebug with Firefox  185  @@
                10.7 Setting a Breakpoint and Examining Data with Firebug  188
                10.8 Firefox and the Console  190
                10.9 Using IE’s Built-in Debugger  194
                10.10 Setting a Breakpoint with IE Developer Tools  196
                10.11 Opera’s Dragonfly  198
                10.12 Setting a Breakpoint with Dragonfly  201
                10.13 Turning on Safari’s Development Tools  201
                10.14 Setting a Breakpoint with Safari’s Debugger  207
                10.15 Debugging in Chrome  208
            11. Accessing Page Elements  211
                11.1 Access a Given Element and Find Its Parent and Child Elements  214  @
                11.2 Accessing All Images in the Web Page  216
                11.3 Discover All Images Within an Article  221
                11.4 Discover all Images in Articles Using the Selectors API  222
                11.5 Finding the Parent Element for a Group of Elements  226
                11.6 Highlighting the First Paragraph in Every Element  227
                11.7 Apply a Striping Theme to an Unordered List  230
                11.8 Creating an Array of All Elements of a Given Class  231
                11.9 Finding All Elements That Share an Attribute  232
                11.10 Finding All Checked Options  233
                11.11 Summing All the Values in a Table Row  234
                11.12 Get Element Attributes  237
                11.13 Get Style Information for an Element  238
            12. Creating and Removing Elements and Attributes  241  @
                12.1 Using innerHTML: A Quick and Easy Approach to Adding Content  241
                12.2 Inserting Elements Before Existing Page Elements  242
                12.3 Appending a New Element to the End of a Page  246
                12.4 Triggering Older Versions of IE to Style New Elements  247
                12.5 Inserting a New Paragraph  248
                12.6 Adding Text to a New Paragraph  249
                12.7 Adding Attributes to an Existing Element  251
                12.8 Testing for a Boolean Attribute  252
                12.9 Removing an Attribute  253
                12.10 Moving a Paragraph  254
                12.11 Replacing Links with Footnote Bullets  254
                12.12 Adding Rows to an Existing Table  257
                12.13 Removing a Paragraph from a div Element  260
                12.14 Deleting Rows from an HTML Table  262
                12.15 Changing the Element’s CSS Style Properties  264  (@)
            13. Working with Web Page Spaces  269
                13.1 Determining the Area of the Web Page  270
                13.2 Measuring Elements  272
                13.3 Locating Elements in the Page  273
                13.4 Hiding Page Sections  276
                13.5 Creating Collapsible Form Sections  277  @
                13.6 Adding a Page Overlay  281
                13.7 Creating Tab Pages  284
                13.8 Creating Hover-Based Pop-up Info Windows  289
                13.9 Collapsing or Resizing the Sidebar  292
            14. Creating Interactive and Accessible Effects with JavaScript, CSS, and ARIA  297
                14.1 Displaying a Hidden Page Section  299
                14.2 Creating an Alert Message  300
                14.3 Highlighting Form Field with Missing or Incorrect Data  302
                14.4 Adding Keyboard Accessibility to a Page Overlay  308
                14.5 Creating Collapsible Form Sections  312
                14.6 Displaying a Flash of Color to Signal an Action  316
                14.7 Adding ARIA Attributes to a Tabbed Page Application  320
                14.8 Live Region  323  (??)
            15. Creating Media Rich and Interactive Applications  325
                15.1 Creating Basic Shapes in Canvas (Using the canvas Element)  326
                15.2 Implementing Canvas Applications in IE  328
                15.3 Creating a Dynamic Line Chart in Canvas  330
                15.4 Adding JavaScript to an SVG File  333
                15.5 Accessing SVG from Web Page Script  335  @(@)
                15.6 Emulating SVG in Internet Explorer  338
                15.7 Enable Interactive SVG Embedded in HTML  339
                15.8 Using the Math Functions to Create a Realistic, Ticking Analog Clock in SVG  345  @
                15.9 Integrating SVG and the Canvas Element in HTML  347
                15.10 Turning on WebGL Support in Firefox and WebKit/Safari  350
                15.11 Running a Routine When an Audio File Begins Playing  351
                15.12 Controlling Video from JavaScript with the video Element  353
            16. JavaScript Objects  359
                16.1 Defining a Basic JavaScript Object  360
                16.2 Keeping Object Members Private  361
                16.3 Expanding Objects with prototype  362
                16.4 Adding Getter/Setter to Objects  364
                16.5 Inheriting an Object’s Functionality  366
                16.6 Extending an Object by Defining a New Property  369
                16.7 Enumerating an Object’s Properties  374
                16.8 Preventing Object Extensibility  377
                16.9 Preventing Object Additions and Changes to Property Descriptors  379
                16.10 Preventing Any Changes to an Object  380
                16.11 One-Off Objects and Namespacing Your JavaScript  381
                16.12 Rediscovering “this” with Prototype.bind  383  (@??)
                16.13 Chaining Your Object’s Methods  385  @
            17. JavaScript Libraries  389
                17.1 Packaging Your Code  390  @
                17.2 Testing Your Code with JsUnit  392
                17.3 Minify Your Library  397
                17.4 Hosting Your Library  397
                17.5 Using an External Library: Building on the jQuery Framework  400
                17.6 Using Existing jQuery Plug-ins  402  (@(@))
                17.7 Convert Your Library to a jQuery Plug-in  404
                17.8 Safely Combining Several Libraries in Your Applications  408
            18. Communication  413
                18.1 Accessing the XMLHttpRequest Object  414
                18.2 Preparing the Data for Transmission  416
                18.3 Determining the Type of Query Call  417
                18.4 Adding a Callback Function to an Ajax Request  420
                18.5 Checking for an Error Condition  421
                18.6 Processing a Text Result  422
                18.7 Making an Ajax Request to Another Domain (Using JSONP)  422
                18.8 Populating a Selection List from the Server  424  [@]
                18.9 Using a Timer to Automatically Update the Page with Fresh Data  427
                18.10 Communicating Across Windows with PostMessage  430
            19. Working with Structured Data  435
                19.1 Process an XML Document Returned from an Ajax Call  436
                19.2 Extracting Pertinent Information from an XML Tree  437
                19.3 Generate a JavaScript Object with JSON, Old-School Style  442  (@@)
                19.4 Parse a JSON Formatted String  444
                19.5 Convert an Object to a Filtered/Transformed String with JSON  445
                19.6 Convert hCalendar Microformat Annotations into a Canvas Timeline  447
                19.7 Glean Page RDFa and Convert It into JSON Using rdfQuery and the jQuery RDF Plug-in  450
            20. Persistence  457
                20.1 Attaching Persistent Information to URLs  458
                20.2 Creating a Cookie to Persist Information Across Pages  462
                20.3 Persisting Information Using the History.pushState Method and window.onpopevent  465  [@]
                20.4 Using sessionStorage for Client-Side Storage  469
                20.5 Creating a localStorage Client-Side Data Storage Item  476
                20.6 Persisting Data Using a Relational Data Store  479
            21. JavaScript Outside the Box  483
                21.1 Creating a Browser Add-On, Plug-in, or Extension  484  (@)
                21.2 Creating Desktop and Mobile Widgets  489
                21.3 Creating JavaScript Applications for the iPhone, Android, and BlackBerry with PhoneGap  494
                21.4 Enhancing Tools with JavaScript  496  @(!)
                21.5 Creating Efficient Desktop Applications with Web Workers and the File API  500  [@(@)]
JSCB (**** deflyssn. 2020)
            ++NEWEST EDITION  2ed  (=2015**)

            jscb.bmk01-1of2.txt
             --
            ---- Working with JavaScript Strings
            One of the methods that all JavaScript objects share is toString, which returns a string containing the serialized format of the object.
               
                bla bla bla
                evince -p 1 ~/Empire/Doks/Comp/lang/webdev/js/js_cookb.pdf &
                 ~/Dropbox/rsc/Doks/phone/Comp/lang/webdev/js/jscb-def22.txt
                evince -p 103 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &

            - As a primitive type, it joins with four other JavaScript primitive types: number, Boolean (true or false), null (no value), and undefined (unknown).
                p3
            - 1.1 Concatenating Two or More Strings Problem
                p4
            - There is a built-in String method that can concatenate multiple strings: concat.
            - In the case of another data type, such as a Boolean or number, the JavaScript engine first converts the other data type's value into a string, and then performs concatenation: // add a boolean to a string
                p5
            - Use the equality operator (==) within a conditional test: var strName = prompt("What's your name?", ""); if (strName == "Shelley") { alert("Your name is Shelley!
            - Unless case is an issue, you'll most likely want to convert the string to all lowercase or uppercase, using the built-in String methods toLowerCase and toUpperCase, before making the comparison, as shown in the following code: var strName = prompt("What's your name?", ""); if (strName.toUpperCase () == "SHELLEY") { alert("Your name is Shelley!
                p6
            - This same type of data type conversion also occurs with the equality operator if one value is a string.
            - For instance, if one value is a string literal and the other is a String object, you might want the comparison to fail because the two variables are of different data types, regardless of their perspective values.
            - The operators to use then are the inequality operator (!=) and strict inequality operator (!==).
                p7
            - Comparison operators work numerically with numbers, but lexically with strings.
            - If two string literals only vary based on case, the uppercase characters are lexically greater than the lowercase letter:
                p8
                - The method returns a numeric value equal to 0 if the two strings are the same; –1 if the string parameter is lexically greater than the original string; 1 otherwise:
            - You want to find out if a substring, a particular series of characters, exists in a string.
            - var iValue = testValue.indexOf(subsValue); // returns value of 12, index of substring if (iValue != -1) // succeeds, because substring exists
            - The indexOf method takes two parameters: the substring, and an optional second parameter, an index value of where to begin a search:
                p9
            - There's another String method, lastIndexOf, which returns the index position of the last occurrence of a substring within a string:
            - It's odd to see a String method called directly on quoted text, but in JavaScript, there's no difference in calling the method on a string literal, directly, or on a string variable.
            - 1.5 Extracting a Substring from a String Problem
                p10
            - var start = sentence.indexOf(":"); var end = sentence.indexOf(".", start+1); var list = sentence.substring(start+1, end);
            - var fruits = list.split(",") ; // array of values
                p11
            - Use a combination of the typeof operator, the general valueOf method (which all JavaScript objects share), and the String length property to create a conditional test that ensures a variable is set, is a string, and is not empty:
            - The JavaScript typeof operator returns the type of a variable.
                p12
            - Generally you'll only need to test whether a variable has been set, or find the length of a string, in order to ensure it's not an empty string.
                p13
            - You want to break the string into an array of separate keywords, and then print the keywords out with a keyword label.
            - var blk = document.getElementById("result"); blk.innerHTML = resultString;
                p14
            - The String split method takes two parameters: a required parameter with the character representing the separator for the split method; the second parameter (optional) is a number representing a count of the number of splits to make.
            - Here's an interesting use of split: if you want to split a string on every character, specify the empty string ('') or ("") as the separator: var arrayList = strList.split("");
            - var val = sentence.split(/:/); alert(val[1].split(/\./)[0]);
                p15
            - For instance, to add the copyright symbol into a block of text to be added to the page (shown in Figure 1-1), use the escape sequence \u00A9:
                p16
            - Use the String split method, combined with the line break escape sequence (\n) to split the contents of the textarea into its separate lines: var txtBox = document.getElementById("inputbox"); var lines = txtBox.value.split("\n"); // print out last line to page
                p17
            - This code snippet converts all line breaks into the HTML br element.
            - You want to trim the whitespace around a string that you've accessed from a form element.
                p18
            - A workaround you can use is outlined below, which not only allows for the use of trim, but a fallback if trim does not exist.
                - If it doesn't, you'll need to use the String prototype to add a customized trim method to the object: if (typeof String.trim == "undefined") { String.prototype.trim = function() { return this.replace(/(^\s*)|(\s*$)/g, ""); }
                p19
            - You need to create a string that's left- or right-padded with a given character.
            - However, if the value is inserted into a web page that disregards multiple spaces,
                p20
            - For instance, to right-align the text, create the CSS rule: .rightformatted
            - or you can use DOM (Document Object Model) Level 2 functionality: var num = 123.55;
                p22
            - if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color)) return [parseInt(result[1],16), parseInt(result[2],16), parseInt(result[3],16)]; // Look for #fff
            - As with String in Chapter 1, RegExp can be both a literal and an object.
            - To create a RegExp literal, you use the following syntax: var re = /regular expression/;
                p23
            - Table 2-1 shows the most commonly used special characters in JavaScript applications.
            - /\bno/ matches the first “no” in “nono”
            - /\Bno/ matches the second “no” in “nono”
                p24
            - A single character that is not whitespace
            - var re = new RegExp("Shelley\s+Powers");
                - The RegExp literal is compiled when script is evaluated, so you should use a RegExp literal when you know the expression won't change.
                p25
            - // search pattern var pattern = /Cook.*Book/; for (var i = 0; i < cookbookString.length;...
                p26
            - var pattern = /Cook.*Book/i; for (var i = 0; i < cookbookString.length; i++) { alert(cookbookString[i]...
            - Applies begin and end line special characters (^ and $, respectively) to each line in a multiline string
                p27
            - Since we're only interested in verifying that the string is a validly formatted Social Security number, we're using the String object's match method.
                p28
            - One site that provides some of the more complex Social Security number regular expressions, in addition to many other interesting regular expression “recipes,” is the Regular Expression Library.
                - Use the RegExp exec method and the global flag (g) in a loop to locate all instances of a pattern, such as any word that begins with t and ends with e, with any number of characters in between:
            - Included in the returned array is the actual matched value, the index in the string where the match is found, any parenthetical substring matches, and the original string.
                p29
            - A result string is built, consisting of both the unmatched text and the matched text, except the matched text is surrounded by a span element, with a CSS class used to highlight the text.
            - document.getElementById("searchSubmit").onclick=doSearch; }
                p30
            - while((matchArray = re.exec(searchString)) != null) { last = matchArray.index;
            - The lastIndex property is handy if you want to track both the first and last matches.
                p31
            - Use the String object's replace method, with a regular expression: var searchString = "Now is the time, this is the time"; var re = /t\w{2}e/g;
                p32
            - var name = "Abe Lincoln"; var re = /^(\w+)\s(\w+)$/; var newname = name.replace(re,"$2, $1");
                p33
            - Table 2-3 shows the other special characters that can be used with regular expressions and replace.
                - It used a loop to find and replace all entries, but in Example 2-2 we'll use the String replace method with the matched substring special pattern ($&) Example 2-2.
                p34
            - The captured text can also be accessed via the RegExp object when you use the RegExp exec method.
            - This approach is handy if you want to access the capturing parentheses values, but without having to use them within a string replacement.
                p36
            - So if you want left- or right-only trim, you'll want to create your own functions: function leftTrim(str) {
            - You want to paste example markup into a web page, and escape the markup—have the angle brackets print out rather than have the contents parsed.
                p37
            - We've searched for numbers and letters, and anything not a number or other character, but one thing we need to search is the special regular expression characters themselves.
                p39
            - You can also access every aspect of a date: year, month, day of week, time, and so on, using specialized get and set methods, described in Tables 3-1 and 3-2.
            - Table 3-2.
                p41
                - JavaScript also provides another way to work with time, through the use of recurring or one-time-only timers.
            - The difference between the two is that setInterval creates a recurring timer that refires until canceled, while setTimeout creates a one-time-only timer.
            - Both take a timer value, in milliseconds, as well as an expression to evaluate when the timer fires.
            - You want to print out the current date and time to a web page.
                p42
            - To get the month name, you'll most likely want to use an array:
            - var utcDate = today.toUTCString();
                p43
            - Instead of getMonth, use getUTCMonth, and so on.
            - It's not unusual for applications that provide APIs to require ISO 8601
                p44
            - The values are year, month, date, then “T” to represent time, and hours, minutes, seconds, and fractions of sections.
            - If the date is in UTC, the time zone is represented by the letter “Z”, as shown in the solution: 2009-10-15T14:42:51Z
            - Otherwise, the time zone is represented as +hh:mm to represent a time zone ahead of UTC, and -hh:mm to represent a time zone behind UTC.
                p45
            - Parse the ISO 8601 string into the individual date values, and use it to create a new JavaScript Date object:
            - In the solution, the nonnumeric characters are converted to a space: dtstr = dtstr.replace(/\D/g, " ");
            - ISO months are one-based, in values of 1 through 12. To use the month value in JavaScript Dates, the month needs to be adjusted by subtracting 1: dtcomps[1]--;
                p47
            - Construct a Date object, passing in the month, day, and year as parameters: var month = 10; // Month 10, in zero based system, is November var day = 18;
                p48
            - Use a combination of the Date object's get and set methods in order to create a future date.
                p49
            - Create a Date object when the first event occurs, a new Date object when the second event occurs, and subtract the first from the second.
            - You want to trigger a timeout based on an event.
                    p??
            - The first parameter can also be the name of a function: setTimeout(functionName, 2000);
                p50
            - You can cancel a timeout, using the clearTimeout method: var timer1 = setTimeout(functionName, 2000); ...
            - John Resig offers an excellent discussion on how timers work, and especially the issues associated with event queues and single threads of execution, at http://ejohn.org/blog/ how-javascript-timers-work/.
                p51
            - Use the Window.setInterval method to create a recurring timer: var x = 0;

                - Dynamic animations in a web page, SVG, or Canvas, are dependent on the setTime out and setInterval methods.
            - The setInterval method requires two parameters: the code or function to process, and the delay between timer events.
            - Unlike setTime out, discussed in Recipe 3.8, the setInterval timer will continue to cycle until the JavaScript application (the web page) is unloaded, or until the clearInterval method is called:
            - Being able to pass parameters to the function is handy if you're creating an animation and generating the parameters dynamically.
            - However, you can instead use function closures with the timer, as covered in Recipe 3.10.
                p52
            - Use an anonymous function as first parameter to the setInterval or setTimeout method call:
            - The approach also demonstrates how the use of this function closure allows access to the parent function's local variables within the timer method.
            - In the example, clicking the red box starts the timer, and the box moves.

                p55
            - Numbers and numeric operations in JavaScript are managed by two different JavaScript objects: Number and Math.
            - Numbers in JavaScript are floating point, though there may not be a decimal component present.
                p56
            - In addition, there are several static Number properties, which can only be accessed via the Number object directly:
            - Anytime you try to use a value in a number operation that can't be parsed as a number, you'll get a NaN error: alert(parseInt("3.5")); // outputs 3 alert(parseInt("three point five")); // outputs NaN
            - Table 4-1 provides a listing of the Math properties, and Table 4-2 contains a listing of the Math methods.
            - Math object static properties Property
                p57
            - Returns random number greater than or equal to 0, and less than 1
            - Define a number variable, either locally or globally, or as part of an object's properties, and increment the variable's value with each iteration of code: var globalCounter = 0;
                p58
            - A global variable is one that's declared outside of a function, and isn't redeclared within a function.
            - It can easily conflict with any other global variables that might exist in the application or other libraries you use: var counter = 0;
                p59
            - You have a decimal value, and need to find its hexadecimal equivalent.
            - Although decimals can be converted to any base number (between a range of 2 to 36), only the octal, hexadecimal, and decimal numbers can be manipulated, directly, as numbers.
                p60
            - Use a combination of JavaScript Math methods: random to generate a random value between 0 and 1, which is then multiplied by 255, and floor to truncate the number.
            - If you need a random number with a higher lower end, such as a number between 5 and 10, multiply the value from random by a number equal to the upper range, minus the lower range, minus 1, and then add the lower range to the result: var randomNumber = Math.floor(Math.random() * 6) + 5;
            - Use the Math object to randomly generate each RGB (Red-Green-Blue) value: function randomVal(val) {
                p61
            - var r = randomVal(255).toString(16);
            - return "#" + r + g + b;
            - Access the numbers using the Document Object Model (DOM) API, and use the global function parseInt to convert the strings to number values: var rows = document.getElementById("table1").children[0].rows; var numArray = new Array();

            jscb.bmk01-2of2.txt
             --
            - The parseInt global function has two arguments: a required numeric string, and an optional radix (base).
                p62
            - If the string could contain a floatingpoint number and you want the result to be a floating-point number, use the parse Float global function, instead:
            - You want to traverse all of the values in a table column, convert the values to numbers, and then sum the values.
            - The code uses document.querySelectorAll, which uses
            - a CSS selector, td + td.  (=p63)

                ajax
            p64
                deg. <--> radians
            p65
                fit circle w.in pageelement
            p67
                 length of circular arc
            p69
                ----  kap 5
                Arrays and Loops (**!)
            p71
                 'most common approach' =for loop
                multidim. array (**)
            p73
                    string from array
            p74
                    sort array
            p75
                    store/access val.s in order (fifo)          #pipe/queue
            p76
                    store/access val.s in rev. order (lifo)     #stack
            p77
                 array fr. subset of array
            p78
                search through array (**)
            p79
                    (IMPLEMENT CROSS-BROWS.FUNCTIONALITY (=W. PROTOTYPE) ****)
                flatten multidim. array  (= concat)
                search + remove/replace array elem.  (=indexOf + splice)
            p82
                apply funcion against each a.element    #callback f.s(??)
                    5.11 Applying a Function Against Each Array Element
                    = using the forEach() array method ****** __ __ __ __
            p83
            (or map(), =if want to return a new array(!!!!)) __ __
            p84
                filtering __
                    create filtered array (=filter)     #+PROTOTYPE
            p86
                (validate array contents)       #+PROTOTYPE
                    Array.every()

            p88
                hash map(?) / assoc. array  in js (****)
            p93,p94
                ---- kap 6      js Functions (**)
                create simple function(**)
            p95
                passing values to/from functions (**)   (=args + return)
            p96
                pass objects (=like arrays) as data to functions
            p98
                ((create dynamic runtime function))
            p100
                pass function as argument (=to another function) (**)
            p101
                ( implement recursive algorithm ]
              p102
                [ factorial / fibonacci in js ]
            p103
                create Function  that Remembers its state  =Closures
            p106
                    +Richard Cornford: "JS Closures"
              p107
                Generalized Currying Function (**)
            p109
                 improve performance w. Memoization
            p112
                (use Anonym. Function  to wrap Global Variable) **!     #jQuery etc (**)
                    =maintaining state betw. function calls, but avoid global state


                ---- kap 7      Events
            p115
                'Some Common Events' *************** !!!!!!!!!
            p116
                 DOM Level 0 vs DOM Level 2     #+Level 3
            p117
                    Detecting When the Page Has Finished Loading
               p119
                    Capturing the Location of a Mouse Click Event Using the Event Object
            p122
                (create generic reusable event handler funct.) (**)
              p125??
                    stop-listening function
                (cancelling event based on changed circumst.)
            p126
                    Preventing an Event from Propagating Through a Set of Nested Elements
              p129
                    Capturing Keyboard Activity

            jscb.02-1of3bmk.txt  (=p132 ###########)
             --
            - You want to incorporate the use of drag-and-drop into your web page, and allow your users to move elements from one place in the page to another.
                p135
            - Since I'm allowing a div element to be dragged, and it isn't a link, image, or text, I needed to set -khtml-user-drag to element.
            - In the end, it's easier just to set the data transfer to text, and transfer the identifier for the element, as shown in Example 7-4.
                p136
            - There are a small group of events associated with HTML5 drag-and-drop: dragstart
                p139
            - He details the challenges associated with making accessible drag-and-drop, as well as the two drag-and-drop properties associated with WAI-ARIA:
            - Until the HTML5 version of drag-and-drop is widely supported, you should make use of one of the libraries.
                p140
            - Mozilla's documentation is at https://developer.mozilla.org/ en/Drag_and_Drop.
             --
            - You want to determine if the Safari browser accessing your web page has changed its orientation from portrait to landscape.
                p141
            - As for general web access for mobile devices, you're better off providing mobile CSS files for mobile devices.
            - XUI is a JavaScript framework for mobile devices currently under development, and is accessible at http://xuijs.com/.
                p142
            - jQTouch is a jQuery plug-in for mobile devices, at http://www.jqtouch.com/.
                p143
            - They're part of what is known as the Browser Object Model (BOM), or the DOM Level 0 set of objects, which also includes the document, frames, and various other elements.
            - In the HTML5 specification, these are known as the browsing context.
                p144
            - Use the confirm pop-up box:
            - There are three types of pop-up boxes in JavaScript.
            - 8.2 Creating a New, Stripped-Down Browser Window ; var newWindow = window.open(....
                p145
            - fourth parameter
            - Use the Navigator object to discover information about the browser and browser environment:
                p147
            - window.onunload
            - Screen object to check the colorDepth property
                p148
            - 'Painting the Web'
            - media attribute
                p149
            @media rule
            getAttribute
            8.6 Modifying Image Dimensions Depending on Page Size
                p150
            availWidth width
            LightBox2 (??)
            Breadcrumbs in a CMS Template Page   #????   1 > 2 > 3
                p151
            window.location (???)
                p153
            8.8 Bookmarking a Dynamic Page
            +'restore a state for an application'
                p155
            (#three)
                p156
            Preserving State for Back Button, Page Refresh
            location object's hash
                p157
            A workaround to this problem is to add a timer that fires at certain intervals
                p159
            CH. 9 - Form Elements and Validation
            access the contents of a text input form element using JavaScript  (via DOM)
                p160
            DOM Level 0
            You can use encodeURI and encodeURIComponent in JavaScript for encoding.
                p161
            Based on some action or event, you want to disable, or enable, one or more form elements.
            Use the disabled property
            You need to access information from a form element after an event
                p162
            If you want to validate a form field after the data in the field has changed
             or the spacebar is clicked when the element has keyboard focus:
            Table 9-1 contains a list of form elements and the events most commonly captured for the element.  (button, submit  checkbox  radiobutton etc)
                p163
            In all browsers, you can access the element using the element context this . However, if you use DOM Level 2 and up event handling, such as the following function, which provides cross-browser event handling:
             +event object
                p164
            You want to perform an action based on which radio button is clicked.
            Attach an onclick event handler to each of the radio buttons; in the event handler function, perform whatever action you need:
                p165
            :enabled  :disabled
            document.forms[0].elements["intext"].disabled=true;
                p166
            attaching event handlers to form elements
            Access the form field value, and then use a regular expression to validate the format
                p167
            integrating accessibility into your forms using ARIA
            validation routines
            You want to cancel a form submission if you find the data entered into the form fields invalid.
             event.preventDefault
            cancelEvent
                p168
            You want to prevent duplicate form submissions.
                p169
            It's an OK approach, but we can take the security a little further. Instead of a pop up, we can embed a message directly into the page.
                p170
#refresh        =css
            //<![CDATA[
            //--><!]]>
            <form id="picker" method="post" action="">
                p171
            If Ajax is used to make the update, the form can be reenabled once the Ajax processing is complete.
            Surround the form elements that will be hidden with a div element:
             .style.display="none";  "block";       =css
                p173
            You want to modify the contents of a second selection list based on the choice made in a first selection list.
            query a database and build the selection list based on the choice.   ajax =18.9
            The second approach is to maintain a static copy of the second selection list options
                p174
             To prevent the lists from being too large, they may be built based on choices in other form elements, from an Ajax-enabled query, an array, or even a hidden selection list.
                p175
            try + catch  **
                p177
            CH. 10 - Debugging and Error Handling
            two types of errors in JavaScript.
            At a minimum, what we need from a debugger is the ability to stop program execution and then examine variables and objects at that point. It also helps if we can continue the program by steps, drill into functions, and examine network activity and the state of the DOM at any time.
            10.1 Gracefully Handling No JavaScript Support
                p178
             noscript element       #obsol. in h5
             style the form elements to be displayed by default, and then use JavaScript to turn off the display of some of the elements when the page loads.

                p180
            adding scripting after the page is fully constructed is known as progressive enhancement. It was the brain child of Steven Champeon of http://hesketh.com.
            There are several good articles on progressive enhancement. You can start with:  **
            The simplest approach to signaling an error in a function is through the returned result:
             return result;
                p181
            You want a simple way to check the value of a variable.   alert(someVariable);

                p182
             Anything beyond these simple printouts, though, should be left for browser debuggers.
            try  catch  finally   ***
                p183
            Error object  **    #message  name  etc
                p184
            Use the throw statement, and create a custom object as an exception:
            The existing exception types are Error , as demonstrated, and:  ( =EvalError, etc etc
            All the errors take a custom message as a string parameter.
                p185
            Use Firebug, the popular Firefox add-on development tool.
            The Firebug tab pages include the Console, the HTML element inspector, the CSS panel, the Script tab, the DOM tree tab, and the Net tab.
                p188
            10.7 Setting a Breakpoint and Examining Data with Firebug
                p189
            From left to right, the first control continues execution of the program until another breakpoint, ...
                p190
            You want to profile a JavaScript application's performance in Firefox.
                p191
            The com- mand line isn't for the inexperienced, but it can be a quick way to work your way around the DOM. It also has an “autofill” capability: if you start to type in a DOM element, as shown in Figure 10-12, and hit the tab, you can cycle through options at any point, hitting the return when you find one you want.
            For instance, to start a JavaScript profile and give it a name of test, use the following:   console.profile('test');    + profileEnd(
                p193
            console.log  console.count  console.time        #re- move console inline code .... before rolling your application out for beta or release
                p194
            Tools > Developer Tools   #IE
                p196
            Firebug  WebKit
             10.10 Setting a Breakpoint with IE Developer Tools
                p198
            Opera's Dragonfly       # no console API (??)
                p200
                p201
            Use Dragonfly's Scripts panel.      #breakpoint
                p203
            Safari Developer Tools  *
            User Agent string


                p204
            Snippet Editor  **(*)
                p205
            The JavaScript profile functionality   #+on small Canvas application
                p207
            10.14 Setting a Breakpoint with Safari's Debugger
            (click to left of line)
                p208
            Step Over (++)
            10.15 Debugging in Chrome
                p209
            The Developer Tools for Chrome are a little hard to find
            (uses WebKit)
                p211
            CH. 11 - Accessing Page Elements
            DOM Level 0  (BOM)   Level 2  Level 3
                p212
            head  title script meta
            body  div p ul li
            parent node
            document
                images forms links cookies
                p213
             You're encouraged to use the id attribute instead.
             ## document.all

            The W3C specifications provide a core API that can be used for more generic docu- ments, as well as APIs specific to HTML. These include a new events model, support for XPath, keyboard access, in addition to various methods to access existing elements, and to create new elements that can then be inserted into the document tree.


                p214
            getElementById method was just the beginning, and this very helpful method has been joined by getElementsByTagName, to get all elements via a specific element tag; getElementsByClassName, to get all elements that share the same class name; and the very new querySelector and querySelectorAll methods, which allow us to use the CSS style selectors in order to make more sophisticated queries.
                11.1 Access a Given Element and Find Its Parent and Child Elements ********
                p215
            parentNode  childNodes    nodeName   #text
                p216
            Use the document.getElementsByTagName method, passing in img as the parameter:
            NodeList
                p217
            appendChild(
            document.getElementsByTagName('*');
                p218
            getElementsByTagNameNS
             Dublin Core
            localName localName
                p220
            dc:title        #rdf
                p221
            pseudonamespace
            tagURN
            (Selectors API)
             You want to access all images within article elements only.
            Find all article elements in the web page. Once they are found, find the img elements for each one:

                p222
            HTML5 shim  **
                p223
            Use the newer Selectors API and access the img elements contained within article ele- ments using CSS-style selector strings:
             fallback methods
            querySelector querySelectorAll
                If you want only those img elements that are direct children of an article element, you would use the following:  ... ++++++


                p224
            The negation pseudoselector (:not)
                CSS3 provides syntax for handling namespaces. This is how to define a namespace in CSS3, via the Namespace module:  ********************   @namespace svg ......     CSS *******
                p225
            There are three different CSS selector specifications, labeled as Selectors Level 1, Level 2, and Level 3.
                p226
            John Resig, the creator of the popular jQuery library, has provided a comprehensive test suite for selectors at http://ejohn.org/apps/selectortest/.   +++++
             jQuery, Prototype, and Dojo

            You want to access the parent element for a group of paragraphs. (*)
                p227
            11.6 Highlighting the First Paragraph in Every Element
            p:first-of-type     =CSS
                p228
            window.onload=function() {
            ps[0].setAttribute(
                p229
            :nth-of-type(1), where parentheses are used to wrap the number of the target element.
                p230
            Microsoft provides a page for the CSS selectors it supports at ...
            You want to modify the appearance of unordered list items so that the list appears striped.
            var lis = document.querySelectorAll('li:nth-child(2n+1)');
            var lis = document.querySelectorAll('li:nth-child(odd)');
            (or w. modulo)
                p231
            retrieve a collection of elements that have a specific class name within the document.
            getElementsByClassName
            var elems = document.querySelectorAll(".classname");
                p232
            var elems = document.querySelectorAll('*[class]');  ++
            var elems = document.querySelectorAll('div:not(.test)');
                p233
            input[type='checkbox']:checked");
             var inputs = document.querySelectorAll("#checks input");
                p234
            (+try catch-variant *)
            11.11 Summing All the Values in a Table Row
            var cells = document.querySelectorAll("tr:nth-child(3) td");
            } catch(e) {
            , including adding a click event handler to the rows, and then processing all of the cells when the row is clicked.
                p236
            data property
            Method chaining
                p237
            You want to access the information contained in an element attribute.
            If the attribute is defined as a standard attribute in the DOM by the user agent (browser), you can access the attribute directly on the element:  (??)
             (elem.className)
            elem.getAttribute(   (**)
                p238
            .hasAttribute(

            You want to get one or more CSS style settings for an element.
            var width = elem.style.width;
                p239
            However, for property names with hyphens, such as background-color , use a Camel- Case notation such as the following:  (**)
            You're better off just accessing the values directly on the style property.
                p240
            set inline
            window.getComputedStyle
                p241
            CH. 12 - Creating and Removing Elements and Attributes
                p242
            It can be much faster when you're making complex additions to the web page, because its processing is handled by the HTML parser, rather than the DOM engine.
            outerHTML
            Based on these restrictions, it's best to not use innerHTML until after the page is com- pletely loaded.

            Use the DOM method createElement to create a new div element. Once created, attach it to the web page before an existing element, using another DOM method, insertBefore :
                p243
            If you're interested in attaching a web page element before another element, you'll not only need to access this element, but also the target ele- ment's parent element, in order to create the actual placement.
                p244
            addDiv  newDiv
            The new element is assigned a CSS style through the className property, which is a standard property for all HTMLEle ment objects. It's given some content using the innerHTML property ...
                p246
            12.3 Appending a New Element to the End of a Page
             nodeList
            var bdy = document.getElementsByTagName("body")[0];
                p247
             You want to use one of the new HTML5 elements, such as article , and have it styled or programmatically accessible in IE7/8.       #h5 shim
             html5shiv
                p248
            You want to insert a new paragraph just before the third paragraph within a div element.
             if (paras[3]) {
                p249
            createTextNode
                p250
            !! Inserting user-supplied text directly into a web page without scrubbing
            the text first is not a good idea.
             (Ajax to retrieve new page contents)
                p251
            createAttribute  (create Attr node)  setAttribute
                p252
            You want to test to see if an element has a Boolean attribute.
                p253
            attribute minimization  (XHTML?)
            Use the removeAttribute method:
                p254
             move the last paragraph to before the first.
            parent.insertBefore(para[para.length-1], para[0]);
             12.11 Replacing Links with Footnote Bullets  Ex. 12-3  (##!)


                p255
            (COMMENT W. INTENT/GOAL W. ACTIONS PERFORMED FOR EACH BLOCK *******)
                p256
            document.getElementsByTagName("body")[0].appendChild(footnote);}
                p257
            var newElement = oldElement.cloneNode(true);
            'because that browser version does not support the ___ method'
            12.12 Adding Rows to an Existing Table  #not hard, but can be tedious
                p258
            *** #for-loops
             .createTextNode
                p259
            (static array)
             To repeat, the steps to create and add a table row are:
             tbody
# +XML/JSON
                p260
            You want to remove a paragraph from the web page.   #removeChild
            pruneParagraph (??)
                p261
             paras.length
                p262
            12.14 Deleting Rows from an HTML Table
            You can also get a reference to the removed element if you want to process its contents before it's completely discarded.
             border-collapse: collapse;
            window.onload=function() {
            var values = new Array(3);
             tr.onclick=prunerow;
                p264
            12.15 Changing the Element's CSS Style Properties
            elem.style.width = "500px"; +++
            getComputedStyle  getPropertyValue
             setAttribute (!!)

            elem.style["fontFamily"] = "Courier";
                p265
                p269
            CH. 13 - Working with Web Page Spaces
             overflow
             display float
                p270
            13.1 Determining the Area of the Web Page
            clientWidth/Height
                p271
             quirks mode
            After the tests, both the width and height values are assigned to appropriately named properties in a returned object, using JSON notation:
             CSSOM
                p272
            You want to determine the current height of a web page element.
            getBoundingClientRect
            If you don't provide any stylesheet setting, the height depends on the viewport size; changing the viewport will also change the element's dimensions, including its height.  (+  foreignObject !!)
                p273
            13.3 Locating Elements in the Page
            You want to know the exact position of an element in the page.
            getBoundingClientRect
                p274
            if (cont == "a" || cont == "b" || cont == "c") {
                p276
            You can set the CSS visibility property to hide and show the message:
            or you can use the CSS display property:
             none block inline-block inherit
                p277
            (sliding outside page +)
            To just hide an element, I generally use the hidden attribute, and to remove the element from the page display, I use the display attribute.

            (collapsible form sections)  Split the form into display blocks using div elements, and then change the block's styling to control the display of the form section.  (****)
                p278
            A collapsible section is a form of widget—
                p279
              ('hoisting' ?? (**!))
                p280
            13.6 Adding a Page Overlay  (eg. display-message, expanded photo )
                p284
            13.7 Creating Tab Pages
             var ident = this.id.split("_")[1];
                p285
            Using a custom data-* attribute, as these values are called, means we can avoid global variables.
            'and then adds the onclick event handler to each tab.'
            .tabnavigation ul li:hover    cursor: pointer
                p289
            13.8 Creating Hover-Based Pop-up Info Windows
            First, you need to capture the mouseover and mouseout events for each image thumbnail, ......   (**!)       #four steps
            if (!xmlhttp) {
            xmlhttp = new XMLHttpRequest();
                p290  ajax
            xmlhttp.open('GET', url, true);
            xmlhttp.onreadystatechange = showWindow;
            xmlhttp.send(null);

            if(xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            var response = xmlhttp.responseText.split("#");
            if (!img) return;
                p291
            13.9 Collapsing or Resizing the Sidebar
             keypress
                p292
            text-decoration: underline
                p297
            CH. Accessibility =JS, CSS, Aria
             Windows-Eyes  NVDA     VoiceOver     Orca
                                      System Prefs > System > Universal Access
                p298
            The ARIA capabilities are described in a set of documents created via the WAI-ARIA (Web Accessibility Initiative-Accessible Rich Internet Applications), an initiative under the auspices of the W3C.
            A nice overview in how to work with Firefox and NVDA can be found at Marco's Accessibility Blog. A good overview on setting up a screen reader test environment can be found at http://www.iheni.com/screen-reader-testing/.  The WebAIM website provides a good overview of the different forms of disability types.
                p299
            aria-hidden
#msg[aria-hidden=true]
                p300
             msg.setAttribute("role","alert");  ....
                p302
            14.3 Highlighting Form Field with Missing or Incorrect Data
            onchange  (+validation)
                p303
            .onblur (**)
                p306
            ARIA role is set to alert
                p307
            Another approach you can take is to only do validation when the form is submitted.  Most built-in libraries, such as the jQuery Validation plug-in, operate this way.
            aria-required
                p308
            14.4 Adding Keyboard Accessibility to a Page Overlay
            if (keycode == 27) {
            The first step to adding keyboard accessibility into a web page is to either use elements that can receive keyboard focus ( a , area , button , input , object , select , and textarea ), or use the tabindex="0" setting on the element, which will make the element focusable.
                p312
            keydown
            tabindex **

            14.5 Creating Collapsible Form Sections
                p313
            The text for the label is enclosed in a link to make it keyboard-accessible. Since these are groupings of form elements, the label / elements pair are surrounded by a fieldset , and the label is a legend element.
            <div role="tablist" aria-multiselectable="true">
            <fieldset>

                p315
            One aspect of working with ARIA that I wasn't expecting is that it led me to reexamine how I create my widget-like applications, such as an accordion.  ****
            "verbally describing a web page obj." (like an accordion)
             Illinois Center for Information .....
                p316
            14.6 Displaying a Flash of Color to Signal an Action
            yellowColor : function (val) {          #??
                p317
            countDown
            .bind
                p319
            In fact, the WebAIM website—which is focused on accessibility—makes use of a yellow flash in an exceedingly clever and accessible way.
            if (anchors[i].href.indexOf('#')>-1)
                p320
            anchors[i].onclick = function(){Highlight(this.href);return true};
            tablist tabpanel tab  aria-labeledby
                p321
            var tabs = containers[j].querySelectorAll(".tabnavigation ul li");
                p323
            14.8 Live Region
            ARIA Live Regions
                p324
            polite assertive
            aria-atomic
             removals text all


                p325
            CH. 15 - CREATING MEDIA RICH AND INTERACTIVE APPLICATIONS ****  (incl. SVG and Canvas)
             WebGL
            New advances also allow you to include SVG using the img element, and CSS.
            canvas
                p326
             audio video
            (X3D)
            15.1 Creating Basic Shapes in Canvas  (=with canvas)
            <canvas   ***(*)
            .getContext  (??)
                p327
            width height
            if (imgcanvas.getContent) {
            var ctx = imgcanvas.getContext('2d');
             fillRect strokeRect clearRect
                p328
            _ (in IE)
                p329
                p330
            15.3 Creating a Dynamic Line Chart in Canvas
            Use the canvas element and the path method to create the chart.  (+update)
            array      [[100,100], [150,50], ....
            beginPath  moveTo  lineTo  stroke

                p331
            closedPath
            Example 15-2. Using timers to dynamically update a line chart
                p332
            setTimeout(function() {     #=anon. function (??/!)
            <canvas id="imgcanvas" width="650" height="350">
            There are other path methods: arc , to draw curves, and quadraticCurveTo and bezier CurveTo , to draw quadratic and bezier curves. All of these methods can be combined in one path to create complex images.

                p333  ****************** !!!!!!!!!!!!!
                JavaScript in SVG is included in script elements, just as with XHTML. The DOM methods are also available for working with the SVG elements.
            ... script blocks in an SVG file or element must have CDATA sections surrounding the actual script,  (***/!!!)
                p334
            +script type
            if we were to embed the SVG within an XHTML file served as application/xhtml+xml , such as that shown in Example 15-4, the color-changing animation would work the same.
                p335
            If the SVG is embedded directly in the web page, access the element and its attributes using the same functionality you would use with any other web page element:
            if the SVG is in an external SVG file embedded into the page via an object element,  ....
                p336
             getSVGDocument
                p337
            if (!svgdoc) return;
            var r = svgdoc.rootElement;
# +MANIPUL. THE SVG **  square.onclick = function() {
                p338
            , you also have to handle browser differences in how the onload event handler works.
                p339
            15.7 Enable Interactive SVG Embedded in HTML
                p340
            If you are embedding SVG directly in HTML5, there is one major difference you need to be aware of: there is no namespace support in HTML5.
                p342
                p343
             I added the SVGWeb library into Example 15-6, the HTML document, and wrapped the SVG element in a script tag, with the SVG MIME type:
                p345
            .item
            }, false);

            15.8 USING THE MATH FUNCTIONS TO CREATE A REALISTIC, TICKING ANALOG CLOCK IN SVG  ************* !!!!!!!!!!!!!
                p346
            (aligning text around '.' etc)
            viewBox="0 0 3 3">
                p347
            15.9 Integrating SVG and the Canvas Element in HTML
                p348
            context.fillStyle
                p349
            canvas into SVG (=ForeignObject)        #can embed any XML-based syntax
                            #eg. MathML, RDF etc.
                p350
            WebGL Support in Firefox and WebKit/Safari  (**)
            For Firefox, access the configuration options page by typing about:config into the ad- dress bar. Once past the warning page, find the webgl.enabled_for_all_sites option, and change the value to true.  (+Safari) *
                p351
            Mozilla has a nice WebGL support page, with tutorials and demos at https://developer .mozilla.org/en/WebGL. The WebKit blog also has a nice introduction to WebGL in WebKit at http://webkit.org/blog/603/webgl-now-available-in-webkit-nightlies/. There's also a website devoted to WebGL at http://learningwebgl.com/blog/. The Khronos Group website is at http://www.khronos.org/webgl/. The X3D for Developers site is at http://www.web3d.org/x3d/.

            15.11 Running a Routine When an Audio File Begins Playing
            and capture its end or play event:
            manageEvent( ... (etc)
                p352
            source
             aboutAudio
            onplay  onend
            inline event handler
                p353
            15.12 Controlling Video from JavaScript with the video Element
            <video id="meadow" poster="purples.jpg" >
                p354
            [Script in Head, Then Body(=Content/The Page)]
                p355
             play pause load canPlayType
            (+custom reset to start)  +using currentTime (!)
                p356
            H.264 (.mp4)  Ogg Teora (.ogv)
                p357
            Theora Cookbook
             WebM (=by Google)
                p359
            but if you want to ensure ease of reuse, compactness of code, and effi- ciency, ....   you're going to need to consider opportunities to encapsulate your code into objects.
            and all objects are, techni- cally, just functions.

            What prototypal inheritance means is that reuse occurs through creating new instances of existing objects, rather than in- stances of a class. Instead of extensibility occurring through class inheritance, proto- typal extensibility happens by enhancing an existing object with new properties and methods.

            You can focus on creating appli- cations, and then deriving the object framework via the effort.
                p360
            [=functions, w. var.s (=properties) and functions (=methods) attached to them)  **(!)

                p361
            the 'this' word ****
            To ensure the properties are assigned to the correct object, treat the object like a constructor using the new operator, rather than as a function.

            16.2 Keeping Object Members Private
            When creating the private data members, do not use the this keyword with the member:
                p362
            Members in the object constructor (the function body), are not accessible outside the object unless they're assigned to that object using this . If they're attached to the object using the var keyword, only the Tune 's inner function, the concat method, can access these now-private data members.
            'privileged method'

            This is an extremely powerful property of the language [....] Private and privileged members can only be made when an object is constructed. Public members can be added at any time.

            16.3 Expanding Objects with prototype
            .prototype.  **(*)
                p364
            used to extend the String object by adding a trim method through the prototype object:

            16.4 Adding Getter/Setter to Objects
                p365
            this.__defineGetter__("artist",function() {
            this.__defineSetter__("artist",function(val) {
            You can also add a getter/setter with other objects, including DOM objects.
             You can also use getter/setters with “one-off” objects, used to provide JavaScript name- spacing (covered later in the chapter):
                p366
            16.5 Inheriting an Object's Functionality

            Use the concept of constructor chaining and the Function.apply method to emulate traditional class inheritance behavior in JavaScript:
            newObject.prototype=new oldObject();   (****)
                p367
            oldObject.apply(this,arguments);  (**(**))
                p368
                p369
            16.6 Extending an Object by Defining a New Property Problem
            Use the new ECMAScript Object.defineProperty method to define one property:
            E 5  = greater control over how an object's properties are man- aged.
                p370
            property descriptor object
             writable configurable enumerable
            writable: true
            Object.getOwnPropertyDescription

                p374
             JSON.stringify
            16.7 Enumerating an Object's Properties
            Use a specialized variation of the for loop to iterate through the properties:
                p375
            or use the new ECMAScript 5 Object.keys method ...
            or use another new ECMAScript 5 method, Object.getOwnPropertyNames(obj),
                p377
            Use the new ECMAScript 5 Object.preventExtensions method to lock an object against future property additions:
                p378
            You can check to see if an object is extensible using Object.isExtensible:
            "use strict";
            you can turn on Strict mode only within a function:
                p379
            16.9 Preventing Object Additions and Changes to Property Descriptors
            Use the new ECMAScript Object.seal method
                p380
            To check if an object is sealed, you would use the Object.isSealed method:

            16.10 Preventing Any Changes to an Object
            Use the new ECMAScript 5 Object.freeze method to freeze the object against any and all changes:
             ('the object restriction-hierarchy')
                p381
            encapsulate your library functionality in such a way as to prevent clashes with other libraries
            Use an object literal, what I call a one-off object, to implement the JavaScript version of namespacing.
                p382
            The same is true for objects. The notation for object literals is pairs of property names and associated values, separated by commas, and wrapped in curly brackets:        #the 'literal notation'
                p383
            16.12 Rediscovering “this” with Prototype.bind
            You want to control the scope assigned a given function.

            If the method isn't supported in your target browser(s), extend the Function object with the code popularized by the Prototype.js JavaScript library:

                p384
            ...  and all unscoped functions automatically become the property of the window object.     #+the 'use' for the bind-method
            bind is particularly useful for timers, such as setInterval.  (****)
              new Counter(   .countDown()
                p385
              setTimeout(this.countDown.bind(this),1000);

            You wish to define your object's methods in such a way that more than one can be used at the same time, like the following,
            The ability to directly call one function on the result of another in the same line of code is known as method chaining.
                p387
            The key to making method chaining work is to return a reference to the object at the end of the method,  ...
                Chaining is extensively used within the DOM methods, ...   *********** !!!!!!!!
                p389
             Ample SDK

                p390
             MooTools
            17.1 Packaging Your Code
            If you find you have a set of functions you repeat in all of your applications, consider packaging them for reuse via an object literal. (!!!!**)

                p391
            Modularize the code by extracting it into a reusable function, and eventually into a new member of your library object literal:  (???/***(*))
              ex.(=custom): bb.js  +  mtwimg.sj  + accordion.js (=builds on lightbox 2) (**)
                p392
            This is a concept known as refac- toring: improving the efficiency of your code without affecting the external functionality.

             'minify' your JavaScript
            17.2 Testing Your Code with JsUnit  ****(!)
            , create several test application pages to test your li- brary's functionality. Each page will contain a link to the JsUnit engine and your library.  If the JsUnit library is located in its folder direction in your development subdirectory, link it as follows:    ****(!)
             Use the JsUnit methods in script in the page to perform the tests, and the JsUnit web page, testRunner.html , to actually run the test.
                p393
            assert(  assertTrue(/False(  assertEquals(
            assertsNotEquals(  assertNull(/NotNull(
                p394
            However, it does make it much easier to determine which test fails if you can see a unique comment for the test.

            sUnit supports other functions, such as setUp and tearDown , called before the tests are
            started and after they have finished, respectively. There are also three functions, which
            provide trace messages:
            warn(message,[value])
            Warning message, with optional value
            inform(message,[value])
            Information message, with optional value
            debug(message,[value])
            Debugging information, with optional value

            JsUnit supports other functions, such as setUp and tearDown , called before the tests are started and after they have finished, respectively. There are also three functions, which provide trace messages:
             warn(  inform(  debug(
                p396
            JsUnit can be managed manually, or can be integrated into an automated testing en- vironment, including integration with Apache Ant.  (**(*))
                p397
            17.3 Minify Your Library
            (after optimiz. + u-testing:)
            compress it with the JavaScript optimizer  (*)
                p400
            sourceforge  (??)

            Use one of the framework JavaScript libraries, such as Prototype, Dojo, or jQuery, in order to provide the basic functionality you need, but isolate the use so that you can swap frameworks if needed.
                p401
            <script type="text/javascript" src="jquery.js"></script>
            ...  , so you may want to check if they provide jQuery as part of their own installation.

            This beginning point is called the ready event, ...
            $(document).ready(function() {
             ...
            });

            It's based on CSS selector syntax for accessing a named element,
                p402
            $("#divOne").click(function() {     # *****(!!)
            , rather than return a reference to the div element and then attach the event handler function to it, you attach the event handler directly to the element request. (**)
            Rather than use jQuery methods directly in your business logic, use your own objects and methods, and call the jQuery methods within these.  By providing a layer of abstraction between the implementation of your application's business logic and the external framework library, if someday you stumble upon Frew, the Wonder Library, you can swap out jQuery   **(*)
             jQuery Cookbook (**)

            You've made the decision to use jQuery as a framework. Now you want to incorporate some jQuery plug-ins and ensure they don't clash with your object libraries.
                p403
            When you've found the plug-in(s) you want to use, check the documentation for all methods and properties, not just those you're interested in. Make sure that there isn't anything in the plug-in that can generate unwanted side effects when used in conjunc- tion with your own application. Focus on using plug-ins that provide exactly what you need, and only what you need.

            Then, in your script, make one function call:
            j$("#commentForm").validate();
                p404
            17.7 Convert Your Library to a jQuery Plug-in
            If you want your method to participate in the jQuery chain and be used with selectors, assign your method to the jQuery.fn property:
            If your plug-in has one or more separate functions that do not need to participate in the jQuery chain, or be attached to a selector, create a jQuery function directly on the jQuery object:

            If your function uses the jQuery dollar sign function ( $ ) and you're concerned that the library could be used with other libraries that make use of $ , wrap your function in an anonymous function.
                p405
                p406
            Notice the following line in both examples:
            return this.each(function () {

            Putting the semicolon be- fore the anonymous function ensures that the function won't break if another plug-in forgets to terminate a method or function with a semi-colon.
             .....
                p407
                p408
            17.8 Safely Combining Several Libraries in Your Applications
            The safest approach for using multiple libraries is to pick ones that are all based on the same framework, (Dojo, Prototype, or jQuery,)
                p409
            Well-designed libraries don't use DOM Level 0 event handling.
            Well-designed libraries use object literals to namespace their functionality:
            var BigObject = {
            foo : function () { },
            bar : function () { }
            }

            Well-designed libraries provide event hooks so that you can hook into the library at the points where it performs a major action.
            Libraries that provide a subdirectory with self-tests rate high in my book.
                p410
            To summarize:

            You can override the use of the $ by adding the following, after all the libraries have been loaded:
            jQuery.noConflict();
                p413
            CH. 18 - Communication      #Ajax etc
            Prepare the server-side API call.   Make the call.   Process the result.

            new in h5 (+split off):  postMessage
            easy communication between a parent and child window, even if the child window is located in another domain.

            +newer: Cross Origin Resource Sharing[cross-domain Ajax calls], Web Sockets API (**)

                p414
            18.1 Accessing the XMLHttpRequest Object
            var xmlHttp = new XMLHttpRequest();
            (+old cross-browser code:  if (   } else if (window.ActiveXObject) {
             open  setRequestHeader  send  sendAsBinary  abort  getResponseHeader  getAllResponseHeaders
                p415
              overrideMimeType
             xmlhttp.overrideMimeType('text/xml');

             status  statusText  readyState  responseText  responseXML
                p416
            18.2 Preparing the Data for Transmission  (=use Ajax instead of form submission)
            encodeURIComponent      #escape all char.s that could impact the Ajax call
            POST  GET
            function postEncodeURIComponent(str) {
            SQL injection  XXS attacks
                p417
            You're not sure whether to send your Ajax call as a GET or a POST.
            RESTful guidelines (REST trans- lates as REpresentational State Transfer).
            GET POST DELETE PUT
                p418
                p419
             true
            username  password
             setRequestHeader
                p420
            Both of the request approaches set the callback function for the Ajax object call's onreadystatechange event handler.

            18.4 Adding a Callback Function to an Ajax Request **
            Table 18-1. Values of XMLHttpRequest readyState property
                p421
            I can't stress strongly enough: please avoid synchronous Ajax calls.

            18.5  You want to check the status of the Ajax request.
            200
            access the XMLHttpRequest 's statusText property to get more detailed information:

                p422
            18.6  You want to process HTML returned as text.
            18.7 Making an Ajax Request to Another Domain (Using JSONP) ***  #=netflix/twitter API
                p423
            The most commonly used technique to solve the cross-domain problem, and the ap- proach I recommend, is to create a server-side proxy application that is called in the Ajax application.  (or using JSONP)  ***(*)
            mashup
             (callbacks again !!!!****)
            src  #attribute
                p424
            18.8 Populating a Selection List from the Server  **(*)
            Based on a user's actions with another form element, you want to populate a selection list with values.
                p427
            18.9 Using a Timer to Automatically Update the Page with Fresh Data   #=from a file
            !=
            startTimer  setTimeout      #+function hoisting again??
                p428
             clearTimeout       populateList??
            (Comet)

                p429
            (new!!!  =use WebSockets ****)
             new WebSocket(
             long polling
             ARIA live region
                p430
            18.10 Communicating Across Windows with PostMessage
            iFrame
            pastMessage  * #H5
                p431
            attachEvent ???
               addEventListener
                p433
            targetOrigin
                p435
            CH. 19 - Working with Structured Data
            JSON is basically the string serialization of JavaScript objects.
            There are mul- tiple approaches for annotating the web page elements with metadata that can be accessed within the page and without.  #most popular: RDF, Microformats
                p436
            responseXML  #XMLHttpRequest obj. property
             overrideMimeType
             DOMParser
                p437
            19.2 Extracting Pertinent Information from an XML Tree
            You want to access individual pieces of data from an XML document.
            var stories = xmlHttpObj.responseXML.getElementsByTagName("story");

                p439
             xmlHttpObj
            (when window loads get posts(?) for all elements (+includes hoisting)) (***!!!)
                #could have used Selectors API
                p442
            19.3 Generate a JavaScript Object with JSON, Old-School Style
             eval
            To figure out how to create JSON, think about how you create an object literal and just translate it into a string.  **!
                p443
            json2.js
            var obj = JSON.parse(objJSON);
                p444
            Parse the object with the new JSON built-in capability, added to browsers in ECMA- Script 5.
            stringify  parse   replacer
                p445
            19.5 Convert an Object to a Filtered/Transformed String with JSON
            JSON.stringify
                p447
            ( 19.6 Convert hCalendar Microformat Annotations into a Canvas Timeline )  (**)
                p448
            For the most part, we're retrieving elements based on class name, and making queries on these elements' subtrees for elements with different class names.
                p450
            19.7 Glean Page RDFa and Convert It into JSON Using rdfQuery and the jQuery RDF Plug-in     #drupal 7 (*!)
                p452
            a 'triple' store        #Microformats vs. RDF (**)
                p453
            Example 19-4 combines the pieces of the solution into a full-page application in order to more fully demonstrate how each of the components works together.  (**(!))
                p455
            RDF Primer / RDFa Primer  **
                p457
            CH. 20 - Persistance        #data storage
              using data encoding on a URL
            Cookies
              (Google Gears)
                p458
            20.1 Attaching Persistent Information to URLs
            You want to store a small fragment of information so that the information is available to anyone accessing the page.    #storing info as tag-on to url-string (=w. words and special char.s)

            Data encoding in the URL is more of a way to capture page state so that a person can send a link to the page in that state to another person, or link it within a web page.
                p459
            (!) spoofing
            Example 20-1. Using the URL and the query string to preserve state
                p462
            20.2  If the amount of data is less than 4k in size, use a browser cookie.
                p463
            Read the article “Improving Persistent Login Cookie Best Practice” ...
            document.cookie  #property
            There are parameters that can follow the cookie/value pair, all separated by semi-colons (;).
                p465
             20.3 Persisting Information Using the history.pushState Method and window.onpopevent       #=H5 *
                p467
            if (!event.state) return;
                p468
            window.onpopstate
                p469
            Use the new DOM Storage sessionStorage functionality:
                #closing a webstore page (!)
                p474
            The reason for all of these images is to demonstrate the significant differences between sessionStorage and cookies , ...

                p476
            20.5 Creating a localStorage Client-Side Data Storage Item
            You want to shadow form element entries (or any data) in such a way that if the browser crashes, the user accidentally closes the browser, or the Internet connection is lost, the user can continue.
            You could use cookies if the data is small enough, but that strategy doesn't work in an offline situation. Another, better approach, especially when you're persisting larger amounts of data or if you have to support functionality when no Internet connection is present, is to use the new localStorage:  ****
              sessionStorage  =>  localStorage
            length  clear
              domain http https(=secure)
                p478
            Example 20-5 demonstrates a more comprehensive implementation than the use case covered in the solution for this recipe.

                p479
            20.6 Persisting Data Using a Relational Data Store
            Web SQL(##) / IndexedDB / Web storage (DOM storage)
            SQLite (=in the browser??)
            openDatabase(

                p483
            CH. 21 - JavaScript Outside the Box
            ('THE MINIMAL WEB-APPLICATION' **)
            CouchDB
                p484
            "Uses outside web pages"
            21.1 Creating a Browser Add-0n, Plug-in, or Extension
            Use the browser's plug-in SDK, Extension API, or other packaged functionality that lets you use JavaScript to create the application.
            Google Chrome extension  Your extension can consist of a manifest file, created in JSON, a download icon, and then the extension web page and JavaScript.
                p485
            If you can work with Chrome, your extension begins with a manifest file that uses JSON and looks like:
            After you create the manifest and application page, you'll load the extension in Chrome via the Tools menu, choosing Extensions. Make sure the Developer Tools are exposed, and click the “Load unpacked extension...” button for the extension folder,
            Access the Google Chrome Extension Lab at ...

                p486
            To assist the new extension developer, Mozilla provides a section on extensions, in- cluding how to set up a development environment, what all of the files mean, and what you need to bring your application together. There is also an Extension Wizard, which can simplify your work.   ********
                p487
            Greasemonkey is a popular Firefox extension that simplifies the process of building new functionality for the browser. Rather than going through the entire extension- building process, you can create a Greasemonkey script using JavaScript, and not have to worry about XUL, XPCOM, or intimidating file structures.
            +Jetpack SDK
                p488
            A Greasemonkey script has a metadata section, .......  (**)
            The code, though, is very familiar. The following is a snippet  .......

                p489
            21.2 Creating Desktop and Mobile Widgets  ************ !!!!!!!!!!!!!!
            Use a widget development toolset.
             , a widget is a small, friendly little bit of single-purpose functionality that is easy on our eyes, wallets, and computer resources.
             Microsoft also supports HTML-based widgets in Vista and Windows 7
            Widgets came into their own when Apple released the Mac Dashboard, an environment conducive to embedding small, single-purpose applications.
            Apple Dashcode **(*)
                p491
            (simple Opera widget script *)
                p493
             .wgt
            Figure 21-5. My little Opera widget on my Mac desktop
            WIDGET SDK LINKS AND RESOURCES TIPS **!     #see more
                p494
            21.3 Creating JavaScript Applications for the iPhone, Android, and BlackBerry with PhoneGap
            PhoneGap provides an emulator, as does Android and BlackBerry.
            Eclipse **!
                p495
            jQTouch (*)
                p496
            21.4 Enhancing Tools with JavaScript        #eg. OpenOffice  **
              ... most likely under a subdirectory labeled Scripting Guide.
            (Extending Photoshop w. JavaScript) *?
                p497
             ExtendScript Toolkit       helloworld.jsx
                p498
            Adobe Bridge SDK

            OO      parcel-descriptor.xml       **!
            XScriptContext object
                p500
            The OpenOffice Writing Macros page can be found at http://wiki.services.openoffice.org/wiki/Documentation/DevGuide/Scripting/Writing_Macros.

            21.5 Creating Efficient Desktop Applications with Web Workers and the File API
             application cache, so your site can function offline; geolocation, if your application is mobile-based; direct file access through the File API; and Web Workers, for efficient concurrent processing.

            The File API bolts on to the existing input element file type, ........  (*******)
             FileList  File  FileReader
                p501
             Since ePub chapter files are valid XHTML, I can use the built-in XML Parser object, DOMParser , to process the file.
                p503
            Web Workers  =threads (**)
                p504
            new Worker(
            .postMessage
            onmessage(event) {
jscb 2020(**!)
~/Dropbox/rsc/Doks/phone.fmt35/0_todo/curr/jscb-def22.txt
            ---- I. The JavaScript Language
            1. Setting Up a Development Environment
                Choosing a Code Editor
                    evince -p 22 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using the Developer Console in Your Browser
                    evince -p 27 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Running Blocks of Code in the Developer Console
                    evince -p 35 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using Strict Mode to Catch Common Mistakes
                    evince -p 40 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Filling in HTML Boilerplate with Emmet Shortcuts
                    evince -p 44 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Installing the npm Package Manager (with Node.js)
                    evince -p 48 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Downloading a Package with npm
                    evince -p 53 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Updating a Package with npm
                    evince -p 63 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Setting Up a Local Test Server
                    evince -p 66 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Enforcing Code Standards with a Linter
                    evince -p 73 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Styling Code Consistently with a Formatter
                    evince -p 82 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Experimenting in a JavaScript Playground
                    evince -p 88 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            2. Strings and Regular Expressions
                Checking for an Existing, Nonempty String
                    evince -p 98 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Converting a Numeric Value to a Formatted String
                    evince -p 103 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Inserting Special Characters
                    evince -p 109 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Inserting Emojis
                    evince -p 112 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using Template Literals for Clearer String Concatenation
                    evince -p 115 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Performing a Case-Insensitive String Comparison
                    evince -p 119 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Checking If a String Contains a Specific Substring
                    evince -p 122 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Replacing All Occurrences of a String
                    evince -p 124 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Replacing HTML Tags with Named Entities
                    evince -p 126 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using a Regular Expression to Replace Patterns in a String
                    evince -p 129 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Extracting a List from a String
                    evince -p 137 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Finding All Instances of a Pattern
                    evince -p 140 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Removing Whitespace from the Beginning and End of a String
                    evince -p 148 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Converting the First Letter of a String to Uppercase
                    evince -p 150 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Validating an Email Address
                    evince -p 153 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            3. Numbers
                Generating Random Numbers
                    evince -p 157 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Generating Cryptographically Secure Random Numbers
                    evince -p 160 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Rounding to a Specific Decimal Place
                    evince -p 165 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Preserving Accuracy in Decimal Values
                    evince -p 168 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Converting a String to a Number
                    evince -p 171 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Converting a Decimal to a Hexadecimal Value
                    evince -p 175 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Converting Between Degrees and Radians
                    evince -p 177 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Calculating the Length of a Circular Arc
                    evince -p 179 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Manipulating Very Large Numbers with BigInt
                    evince -p 180 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            4. Dates
                Getting the Current Date and Time
                    evince -p 187 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Converting a String to a Date
                    evince -p 192 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Adding Days to a Date
                    evince -p 195 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Comparing Dates and Testing Dates for Equality
                    evince -p 197 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Calculating the Time Elapsed Between Two Dates
                    evince -p 202 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Formatting a Date Value as a String
                    evince -p 206 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            5. Arrays
                Checking If an Object Is an Array
                    evince -p 214 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Iterating Over All the Elements in an Array
                    evince -p 215 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Checking If Two Arrays Are Equal
                    evince -p 220 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Breaking Down an Array into Separate Variables
                    evince -p 226 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Passing an Array to a Function That Expects a List of Values
                    evince -p 229 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Cloning an Array
                    evince -p 231 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Merging Two Arrays
                    evince -p 236 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Copying a Portion of an Array by Position
                    evince -p 239 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Extracting Array Items That Meet Specific Criteria
                    evince -p 242 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Emptying an Array
                    evince -p 244 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Removing Duplicate Values
                    evince -p 246 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Flattening a Two-Dimensional Array
                    evince -p 249 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Searching Through an Array for Exact Matches
                    evince -p 252 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Searching Through an Array for Items That Meet Specific Criteria
                    evince -p 255 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Removing or Replacing Array Elements
                    evince -p 258 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Sorting an Array of Objects by a Property Value
                    evince -p 261 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Transforming Every Element of an Array
                    evince -p 264 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Combining an Array's Values in a Single Calculation
                    evince -p 266 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Validating Array Contents
                    evince -p 270 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating a Collection of Non-duplicated Values
                    evince -p 273 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating a Key-Indexed Collection of Items
                    evince -p 276 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            6. Functions
                Passing a Function as an Argument to Another Function
                    evince -p 282 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using Arrow Functions
                    evince -p 289 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Providing a Default Parameter Value
                    evince -p 296 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating a Function That Accepts Unlimited Arguments
                    evince -p 299 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using Named Function Parameters
                    evince -p 302 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating a Function That Stores its State with a Closure
                    evince -p 308 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating a Generator Function That Yields Multiple Values
                    evince -p 312 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Reducing Redundancy by Using Partial Application
                    evince -p 321 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Fixing this with Function Binding
                    evince -p 328 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Implementing a Recursive Algorithm
                    evince -p 335 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            7. Objects
                Checking if an Object Is a Certain Type
                    evince -p 342 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using an Object Literal to Bundle Data
                    evince -p 346 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Checking If an Object Has a Property
                    evince -p 353 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Iterating Over All the Properties of an Object
                    evince -p 355 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Testing for an Empty Object
                    evince -p 360 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Merging the Properties of Two Objects
                    evince -p 363 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Customizing the Way a Property Is Defined
                    evince -p 365 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Preventing Any Changes to an Object
                    evince -p 372 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Intercepting and Changing Actions on an Object with a Proxy
                    evince -p 375 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Cloning an Object
                    evince -p 381 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Making a Deep Copy of an Object
                    evince -p 385 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating Absolutely Unique Object Property Keys
                    evince -p 391 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating Enums with Symbol
                    evince -p 394 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            8. Classes
                Creating a Reusable Class
                    evince -p 400 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Adding Properties to a Class
                    evince -p 407 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Giving a Class a Better String Representation
                    evince -p 419 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using the Constructor Pattern to Make a Custom Class
                    evince -p 422 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Supporting Method Chaining in Your Class
                    evince -p 428 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Adding Static Methods to a Class
                    evince -p 432 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using a Static Method to Create Objects
                    evince -p 438 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Inheriting Functionality from Another Class
                    evince -p 442 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Organizing Your JavaScript Classes with Modules
                    evince -p 452 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            9. Asynchronous Programming
                Updating the Page During a Loop
                    evince -p 462 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using a Function That Returns a Promise
                    evince -p 469 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Promisifying an Asynchronous Function That Uses a Callback
                    evince -p 476 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Executing Multiple Promises Concurrently
                    evince -p 484 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Waiting for a Promise to Finish with Await and Async
                    evince -p 489 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating an Asynchronous Generator Function
                    evince -p 499 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using a Web Worker to Perform a Background Task
                    evince -p 505 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Adding Progress Support to a Web Worker
                    evince -p 512 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            10. Errors and Testing
                Catching and Neutralizing an Error
                    evince -p 520 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Catching Different Types of Errors
                    evince -p 526 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Catching Asynchronous Errors
                    evince -p 530 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Detecting Unhandled Errors
                    evince -p 534 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Throwing a Standard Error
                    evince -p 541 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Throwing a Custom Error
                    evince -p 546 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Writing Unit Tests for Your Code
                    evince -p 550 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Tracking Test Code Coverage
                    evince -p 565 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            ---- II. JavaScript in the Browser
            11. Browsing Tools
                Debugging JavaScript
                    evince -p 575 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Analyzing Runtime Performance
                    evince -p 580 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Identifying Unused JavaScript
                    evince -p 584 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using Lighthouse to Measure Best Practices
                    evince -p 587 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            12. Working with HTML
                Accessing a Given Element and Finding Its Parent and Child Elements
                    evince -p 594 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Traversing the Results from querySelectorAll() with forEach()
                    evince -p 599 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Adding Click Functionality to an Element
                    evince -p 601 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Finding All Elements That Share an Attribute
                    evince -p 605 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Accessing All Elements of a Specific Type
                    evince -p 607 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Discovering Child Elements Using the Selectors API
                    evince -p 612 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Changing an Element's Class Value
                    evince -p 616 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Setting an Element's Style Attribute
                    evince -p 617 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Adding Text to a New Paragraph
                    evince -p 622 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Inserting a New Element in a Specific DOM Location  @
                    evince -p 628 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Checking If a Checkbox Is Checked
                    evince -p 630 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Adding Up Values in an HTML Table
                    evince -p 632 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Deleting Rows from an HTML Table
                    evince -p 639 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Hiding Page Sections  @
                    evince -p 643 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating Hover-Based Pop-Up Info Windows
                    evince -p 646 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Validating Form Data
                    evince -p 652 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Highlighting Form Errors and Accessibility
                    evince -p 659 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating an Accessible Automatically Updated Region
                    evince -p 672 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            13. Fetching Remote Data
                Requesting Remote Data with Fetch
                    evince -p 677 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using XMLHttpRequest
                    evince -p 686 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Submitting a Form
                    evince -p 689 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Populating a Selection List from the Server
                    evince -p 696 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Parsing Returned JSON
                    evince -p 705 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Fetching and Parsing XML
                    evince -p 709 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Sending Binary Data and Loading into an Image
                    evince -p 713 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Sharing HTTP Cookies Across Domains
                    evince -p 715 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using Websockets to Establish a Two-Way Communication Between Client and Server
                    evince -p 718 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Long Polling a Remote Data Source
                    evince -p 722 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            14. Data Persistance
                Persisting Information with Cookies
                    evince -p 727 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using sessionStorage for Client-Side Storage
                    evince -p 734 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating a localStorage Client-Side Data Storage Item
                    evince -p 746 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Persisting Larger Chunks of Data on the Client Using IndexedDB
                    evince -p 755 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Simplifying IndexedDB with a Library
                    evince -p 762 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            15. Working with Media
                Adding JavaScript to SVG  @@
                    evince -p 771 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Accessing SVG from a Web Page Script
                    evince -p 777 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating an SVG Bar Chart with D3
                    evince -p 781 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Integrating SVG and the Canvas Element in HTML  @
                    evince -p 790 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Running a Routine When an Audio File Begins Playing
                    evince -p 794 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Controlling Video from JavaScript with the video Element
                    evince -p 798 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            16. Writing Web Applications  @
                Bundling JavaScript
                    evince -p 806 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                JavaScript and the Mobile Web
                    evince -p 810 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Writing a Progressive Web Application
                    evince -p 815 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Testing and Profiling a Progressive Web Application
                    evince -p 832 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Getting the Value of the Current URL
                    evince -p 840 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Redirecting a URL
                    evince -p 843 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Copying Text to a User's Clipboard
                    evince -p 845 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Enabling a Mobile-Like Notification in the Desktop Browser
                    evince -p 849 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Loading a File Locally in the Browser
                    evince -p 856 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Extending the Possible with Web Components
                    evince -p 862 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Choosing a Front-End Framework  (@)
                    evince -p 869 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            ---- III. Node.js
            17. Node Basics
                Managing Node Versions with Node Version Manager
                    evince -p 877 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Responding to a Simple Browser Request
                    evince -p 883 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Interactively Trying Out Node Code Snippets with REPL  @@(!!)
                    evince -p 888 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Reading and Writing File Data
                    evince -p 894 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Getting Input from the Terminal
                    evince -p 904 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Getting the Path to the Current Script
                    evince -p 909 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Working with Node Timers and Understanding the Node Event Loop
                    evince -p 911 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            18. Node Modules
                Searching for a Specific Node Module via npm
                    evince -p 924 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Converting Your Library into a Node Module
                    evince -p 927 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Taking Your Code Across Module Environments
                    evince -p 930 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating an Installable Node Module
                    evince -p 936 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Writing Multiplatform Libraries
                    evince -p 951 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Unit Testing Your Modules  @
                    evince -p 958 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            19. Managing Node
                Using Environment Variables
                    evince -p 965 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Managing Callback Hell
                    evince -p 969 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Accessing Command-Line Functionality Within a Node Application
                    evince -p 977 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Passing Command-Line Arguments
                    evince -p 982 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Creating a Command-Line Utility with Help from Commander
                    evince -p 985 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Keeping a Node Instance Up and Running
                    evince -p 990 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Monitoring Application Changes and Restarting During Local Development
                    evince -p 994 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Scheduling Repeat Tasks
                    evince -p 997 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Testing the Performance and Capability of Your WebSockets Application
                    evince -p 1000 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            20. Remote Data
                Fetching Remote Data
                    evince -p 1005 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Screen Scraping
                    evince -p 1009 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Accessing JSON-Formatted Data via a RESTful API
                    evince -p 1013 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
            21. Building Web Applications with Express  @
                Using Express to Respond to Requests
                    evince -p 1019 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Using the Express-Generator
                    evince -p 1027 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Routing
                    evince -p 1039 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Working with OAuth
                    evince -p 1042 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                OAuth 2 User Authentication with Passport.js
                    evince -p 1064 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Serving Up Formatted Data
                    evince -p 1074 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Building a RESTful API
                    evince -p 1077 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
                Building a GraphQL API  @
                    evince -p 1084 ~/Empire/Doks/Comp/lang/webdev/js/jscb-def22.pdf &
----
~/Documents/doks/jsjqdc.pdf
                Chapter 1: The ABC of Programming
                 1b: How do computers fit in with the world around them?
                 1c
                Chapter 2: Basic JavaScript Instructions
                Chapter 3: Functions, Methods & Objects
                Chapter 4: Decisions & Loops
                Chapter 5: Document Object Model
                Chapter 6: Events  p248
                Chapter 7: jQuery  p298
                    animating css properties

                chapter 8: Ajax & json  p372
                chapter 9: APIs  p414
                        =modernizer (etc), geolocation, web storage, history
                        jquery ui
                        Angular
                        platform, google maps
                chapter 10: Error Handling & Debugging  p454
                chapter 11: Content Panels  p492
                    sliders, modal windows, tabbed panels, accordions (**)

                chapter 12: Filtering, Searching & Sorting  p532
                chapter 13: Form Enhancement & Validation  p572

                doc_newest2019/jsjq-duck.txt
                ~/Documents/doks/jsjqdc.pdf 
                p8
            viewport        viewable area (=of the browser)

                p9
            LIST/PRESENTATION OF THE FUNCTIONS/APPS(!)
            =USED TO DEMONSTRATE DIFF. CHAPTERS/CONCEPTS (*****)
              slideshows
              forms
                p10
                reload part of page  (=makes the page feel more like an app)
                filtering data  (eg.  wh. clicking image, showing only images with keyword 'water' in the im. metadata(??/*))
                p14
            Chapter 1 - The ABC of Programming
                p17
            'A script is a series of instructions'
                p19
            Writing a script
                p24
            vocabulary      the words 'that computers understand'
            syntax          how those words are put together
            programmatic approach to problem solving
                =follow instructions one after another
                p27
            (script: calcul. cost of sign =cost per char * num. of letters)
            sketching out the tasks in a flowchart **

            flowchart symbols/colors key/legend:
                purple rect.            generic step (like calculate the cost (+informal def)
                blue arrow-rect.        event (eg. button is clicked)
                orange parallelogr.     input/output
                yellow diamond(**)      Decision
                p31     # 1b - How does the comp. model the real world?
                p32
            objects
                properties
                    name
                    value
                events
                methods
            instance
                p33
            OBJECT TYPE: HOTEL
            gym     false

            OBJECT TYPE: CAR
            currenteSpeed       30mph
                p34
            interaction w. objects (+in the real world)
                =can change value of the properties in these objects
                p35
            events:
                'An accelerate event can trigger code to increase the value of the currentSpeed property'
                p36
            Methods
                represent things people need to do with objects (=can retrieve or update the values of an object's properties)
                p37
            makeBooking()
            cancelBooking()
            checkAvailability()

            changeSpeed()
                p39
            1. When a reservation is made, the book event fires.
                p40
                p41
            obj. that represents windows and tabs in the browser ; 'window'
            current page's url * ; window.location  //  document.URL
            window's title * ; document.title
            last update of the page ** ; document.lastModified  (=property)
                p42
                p43
            event: page + assets have finished loading ; document.load
            event: user clicks somewhere on page ; document.click
            event: user presses key * ; document.keypress
                p44
            How a browser sees a web page
            (=reads in an html page as code
            +(!) Creates a model of the page and stores it in memory (+creates a document object at the top of the model))  **

            rendering engine
                creates the graphical representation on screen =interprets the css and applies to the html
            interpreter (scripting engine)
                p47
            1c - How do I write a script for a web page?
                p48
            html        content layer
            css         presentation layer
            js          behavior layer
             separation of concerns
                p49
            Progressive Enhancements
                p50
            Creating a Basic Javascript

            var today = new Date();
            var hourNow = today.getHours();
            .....
            greeting

            document.write(      );


            folder structure:
            add-content.html
            css/
              c01.css
            images/
              constructive-backdrop.jpg
              constructive-logo.gif
            index.html
            js/
              add-content.js
                p51
            Linking to a javascript file from an html page
            <script src=".......></script>

                p52
            Recommended place to put/add scripts (**!/?)  (via link etc) ; just before closing of body  (**)
                p53
            place script in the page  (=directly inline w. <script>-tags)
                p54
            How to use Objects and Methods
            'calling a method of an object'
            the methods and properties of an obj. (=like document) ; its 'members'
            name of '.'-operator ; member operator
                p55
            'Javascript runs where it is found in the HTML'
                p57
            CHAPTER 2 - BASIC JAVASCRIPT INSTRUCTIONS (**!)
                p60
            STATEMENTS
            each individual instruction/step that a comp. can follow (=one by one) ; = a 'statement'  (**)   #note: must end w. a semicolon (!!)
            code blocks     =enclosed in curly braces  (+must not be ended by a semicolon)
                p61
            comments

            var today ....
            hourNow
            today.getHours()

            // Display time of day

            /* an
               entire
               block */

            common use of multiline comments ; (top) descriptions of how the script works // commenting out blocks when testing  (**)
                p62
            variables
                p63
            calculated   computed
                p64
            Declaring Variables

            var quantity;

            var         a 'keyword'
            other name for variable     identifier

                p65
            Assign val to var.
            assign val. to var.         '='    +update var
            (TODO: PERHAPS CHECK UP ON 'SCOPE' (=global, local, lexical, block-level etc)  (*****(!!))
                p66
            js data types

            numbers, strings, Booleans
            bools in js         true  false

            0.75
            'Hi, Ivy!'


            arrays, objects, undefined, null
                p67
            Using a variable to store a number

            price
            quantity
            total

            write text to page (elem-id =cost) ; textContent method  on document + "get by id"
                p68
             (strings must be written on one line)
                p69
            (quotes inside a string)
                "    '    "
                \"
            (innerHTML can pose a security risk)
                p70
            var inStock
            var shipping
            var elStock
            .className
                p71
            Shorthand for Creating Variables

            var price, quantity, total
            var price = 5, quantity = 14;
                p72
            changing the value of a variable

            inStock = true;
            inStock = false;
                p73
            rules for naming variables

            1.
            2.
            3. cannot use keywords / reserved words
            4.
            5. use a name that describes the king of information that the variable stores (eg. firstName, lastName, age
            6.
                p74
            Arrays
            storing items in a shopping list (etc)
                p75
            var colors;
            colors = ['white', 'black', 'custom'];

            colors = ['white',
                      'black',
                      'custom'];

            el.textContent = colors[0];     #array literal   (use for most purposes)

            var colors = new Array('white',
                                   'black'.....     #array constructor  (*)
                p76
            values in an array
            index (*)

            itemThree = colors[2];
            numColors = colors.length;
                p77
            accessing and changing values in an array
                p78
            Expressions
            evaluates into a single value

            1. expr. that assign a val. to a var.
            2. expr. that use two or more val.s to return a single val.

            undefined

            var area = 3 * 2;
                p79
            'Expressions rely on things called operators'

            assignment operators
             =
            arithmetic operators
             + *
            string operators
             greeting = 'Hi ' + 'Molly';
            comparison operators
             buy = 3 > 5;
            logical operators
             buy = (5 > 3) && (2 < 4);
                p80
            arithmetic operators

            increment, decrement
            modulus

            (+  use parentheses, for changing precedence)
                p81
            example: using arithmetic operators  #elderflowers again
                p82
            string operator
             the '+' symbol  (=concatenation)

            '7'     // the string-repres. of the number 7

            NaN
                p83
            welcomeMessage

            greeting + ' ' + name
                p85
            Example: Basic JS Instructions
                p87
            // Create variables to hold details about the sign
            var welcome = greeting + name + message;
            var grandTotal = subTotal + shipping;
            elSubTotal.textContent = '$' + subTotal;
                p88
            'A script is made up of a series of statements. Each statement is like a step in a recipe.'
                p89
            CHAPTER 3 - Functions, Methods and Objects
                p90
            functions       consists of a series of statements grouped together because they perform a specific task


                p91
            GRAF.INSPIR  'The Cartoon Hotel-Website' ****
                p92
            function name       =should describe the task it is performing
            asking a function to
              perform a task    known as 'calling' the function
            code block          one or more statements within curly braces
            return value

            anonymous functions     do not have a name (=are executed as soon as the interpreter comes across them)
                p93
            (a basic function)

            var msg = 'Sign up .....
            function updateMessage() {

            updateMessage();
                p94
            function declaration

            function sayHello() {
              document.write('Hello!');
            }
                p95
            calling a function
            (function hoisting      'This still works because the interpreter runs through a script before executing each statement, ...'
                p96
            Declaring functions that need information
              #function parameters

            function getArea(width, height) {
              return width * height;
            }
                p97
            Calling functions that need information

            arguments as values
            arguments as variables
                p98
            Getting a single value out of a function

            function calculateArea(width, height) {
              var area = width * height;
              return area;
            }
            var wallOne = calculateArea(3, 5);
                p99
            Getting Multiple(!) value out of a function  **!

            function calculateArea(width, height, depth) {
              var area = width * height;
              var volume = width * height * depth;
              var sizes = [area, volume];
              return sizes;
            }
            var areaOne = getSize(3, 2, 3)[0];
                p100
            Anonymous functions and Function expressions

            'If a function is placed where a browser expects to see an expression (eg. as an argument to a function), then it gets treated as an expression.'

            var area = function(width, height) {
              return width * height;
            };

            var size = area(3, 4);

            (note: 'in an f-expression, the f. is not processed until the interwinterpreter get to that statement')     #cannot use hoisting + code before can potentially alter what goes on inside function


                p101
            IIFE (Immediately invoked ...)      ****!

            var area = (function() {        #'area' will hold the val. returned from the f.
              var width = 3;            #(rather than the function itself to be called later)
              var height = 2;
              return width * height;
            }());                       #inner '()'-pair   ''final parentheses''  =tell interpr. to call the f. immed.

                #(absol.) first and last parens   ''grouping operators''  (!!!/**) ='to ensure the interpr. treats this as an expression'

# the 'final parentheses' are sometimes placed after the 'grouping operators' (but that is considered bad/dodgy practice)


            When to use IIFE:s      used for code that only needs to run once within a task (rather than repeatedly being called by other parts of the script)
                - as an argument wh. a function is called
                - to assign the value of a property to an object
                - in event handlers and listeners (ch. 6) to perform a task when an event occurs
                - to prevent conflicts between two scripts that might use the same var. names (p99 (=103))
                p102
            Variable Scope
            local variables         or 'function-level var'  (=to have 'local scope'/'function-level scope'

            Global Variables
                p103
            How memory and variables work

            isWall
            canPaint
                p104
            What is an Object?
            groups together a set of variables and functions

            var that is part of an object           a property
            function that is part of an object      a method
                p105
            the 'hotel' object example (*!)

            key         name of a property or method

            var hotel = {
              name: 'Quay',
              rooms: 40,
              gym: true,
              roomTypes: ['twin', 'double', 'suite'],
              checkAvailability: function() {
                return this.rooms - this.booked;
              }
            };

            'As you will see over the next few pages, this is just one of the ways you can create an object.'


            DRS: THE DIFF. BETW. A FUNCTION AND AN OBJECT **(*!)
                p106
            Creating an Object: Literal Notation
              easiest and most popular way to create objects

            {
              name: 'Quay',
            .....
            .....
            .....
            .....
            .....
            };          #IMPORTANT (=FORGOT ';' ON END THE FIRST TIME)
                p107
            Accessing an Object and Dot Notation

              dot notation  (member operator)
            var hotelName = hotel.name;
            var roomsFree = hotel.checkAvailability();

              square bracket syntax
            var hotelName = hotel['name'];
            var roomsFree = hotel['checkAvailability']();

            sq.br.syntax is most commonly used when:
            - the name of the prop. or method contains special characters (like dashes)
            (- name of prop is number (=should be avoided))
            - a var. is being used in place of the property name (??  Ch. 12)


                p108
            Creating objects using literal notation  (****(!))

            'If the method needs parameters, you can supply them in the parentheses (just like you can pass arguments to a function).'
                p109
            Creating more object literals  (??)
                (=different objects  + stored in diff. named var.s)
                p110
            Creating an Object: Constructor Notation  (**!)

            var hotel = new Object();
                  new(=keyword) + Object(=constructor function)

            hotel.name = 'Quay';        #each statement that adds a property or method should
            hotel.rooms = 40;       # end with a semicolon (!)
            hotel.booked = 25;
            hotel.checkAvailability = function() {
              return this.rooms - this.booked;
            }

            this syntax can be used to add properties and methods both(!!)
            to obj.s created w. this, and(!!) the literal obj. syntax  (***!!)

            create an empty object      var hotel = {}
                p111
            Updating an Object  (*)

            update val.s of properties          dot notation, or sq.br. notation
            delete a property                   delete(=keyword) hotel.name;
                                                hotel.name = '';    #just clearing the val.
            update property             simply set to new value
            updating unexisting property =?     adds the prop. to the obj.


                p112
            OBJECT CONSTRUCTOR NOTATION (=Creating Many Objects *****)
            (='use a function as a template for creating objects (**))
            (=contains statements that add prop.s/methods to the object)

            function Hotel(name, rooms, booked) {
              this.name = name;
              this.rooms = rooms;
              this.booked = booked;
              this.checkAvailability = function() {
                return this.rooms - this.booked;
              };
            }

            'The name of the constructor function usually begins
            with a capital letter (unlike functions, which
            tend to begin with a lowercase character).'
                p113
            'You create instances of the object using the constructor function.'

            var parkHotel = new Hotel('Park', 120, 77);
                p114
            example: creating objects using constructor syntax
                p115
            Create and access objects constructor notation
            'To get a better idea of why you might want to create multiple objects on the same page, ...'
                p116
            Adding and Removing Properties


            'If an object is created using a constructor function, this
            syntax only adds or removes the properties from the one
            instance of the object (not all objects created with that function).'
                p117
            Recap: Ways to Create Objects


                p118
            the this keyword
            (+WHAT 'THIS' REFERS TO IN THE GLOBAL SCOPE (=THE WINDOW OBJECT)) ******

            'when 'this' is used inside a function in the global context, it refers to the 'window' object' (!!)

            function windowSize() {
              var width = this.innerWidth;
              var height = this.innerHeight;
              return [height, width];
            }

            'Under the hood, the this keyword is a reference to
            the object that the function is created inside.'
                p119
            (** nested functions + what 'this' refers to        =can vary (depending on which browser you're using (!!!!/##)        (+tip: store 'this' in var in first function (etc))

            (***** / !!!!!!######)
            'When a function is defined inside an object, it
            becomes a method. In a method, this refers to the containing object.'

            'If a named function has been defined in global
            scope, and it is then used as a method of an object,
            this refers to the object it is contained within.'

            (MEN FÖR I ############################ / !!!!!!!!!!!!!!!!!!!!!!!!!!! /  ----------------------------- )   "¤"!¤/¤%/#¤!½"#¤"#¤%!"¤#%¤/&¤#%&#¤"

                p120
            Recap: Storing Data

            arrays:
            hotels[1];
                p121
            OBJECTS CREATED W. LITERAL NOTATION ARE GOOD:
            - when y. are storing / transmitting data between applications
            - for global or configuration objects that set up information on the page
            OBJECTS CREATED W. CONSTRUCTORS ARE GOOD WHEN:
            - y. have lots of objects used with similar functionality (eg. multiple slideshows / media players / game characters) w.in a page
            - a complex obj. might not be used in code

            accessing property name in obj. hotel
            hotel.name;
                p122
            Arrays are Objects  (**)
            (='Arrays are actually a special type of object')
                =key/val. pairs (like all objects), but key for each val. is its index num.  (**!)

            object:

            costs = {
              room1: 420,
              room2 ......
            };


                p123
            Creating Complex Data Structures (=
            *****************************   !!!!!!!!!!!!!!!!!!!!

            ARRAYS IN AN OBJECT
            costs.room1[0];
            OBJECTS IN AN ARRAY
            costs[2].phone;


                p124
            Built-in Objects ********************
            'get ... width of the browser window, the content of the main heading in the page, .. length of text a user entered into a form field'
                p125
            what tools are available

            1. BOM
             represent current browser win./tab
            2. DOM
             repres. of the current page + creates new object for each element (+each indiv. section of text within the page)
            3. Global JS Objects
             eg. Dates and Times etc

            'An object model is a group of objects, each of
            which represent related things from the real world.
            Together they form a model of something larger.'

            'It is also possible for the property of an object
            to be another object. When an obj. is nested inside
            another obj. ...... a child object.'
                p126
            Three Groups of Built-in Objects

            BOM

            Window - Current Browser Window Or Tab
              Document - Current Web Page
              History - Pages In Browser History
              Location - Url Of Current Page
              Navigator - Information About Browser
              Screen - Device's Display Information

            ex:
            show browser's print dialog box         window.print();
            show width of device's screen (px)      window.screen.width;
                p127
            DOM
            document.lastModified;

            Global JS Objects
            String
             hotel.toUpperCase();
            Number
            Boolean
            Date
            Math
             Math.PI;
            Regex
                p128

            window.innerHeight
            .innerWidth
            .pageXOffset
            .pageYOffset
            .screenX
            .screenY
            .location
            .document
            .used
            .history
            .browser
            .history.length
            .browser
            .screen
            window.screen.width
            window.screen.height

            window.alert()
            .open()
            .print()
                p129
            Using the BOM

            msg += '.......
                p130
            The Document Object Model
            document.title
            .lastModified
            .URL
            document.domain

            'The DOM is vital to accessing
            and amending the content of
            the current web page.' **(*)

            document.write()
            .getElementById()
            .querySelectorAll(cssSel)       #list of elem.s that match a css selector
            document.createElement()
            document.createTextNode()


                p131
            Using the Document Object ****   *****
            adds info about the page to the footer
            stored inside var. msg + h-markup to display the information  (**)

            file:///        file opened/run from the computer
            http://
                p132 + 133  (****)
            Global Objects: String Object  (**)

            var saying = 'Home sweet home ';

            wrapper object      eg. String (svarname.length; etc)

            length      #num of code units in the string  (note: some (rarely used) char.s take up two code units)

            .toUpperCase()
            .toLowerCase()
            .charAt(12)
            .indexOf('ee')
            .lastIndexOf('e')       (**/!!)
            .substring(8,14)
            .split(' ')             **
            saying.trim()
            .replace('me','w')      #Note: by def. only replaces first val. found
                p135
            Data Types Revisited
            six data types
            simple/primitive data types     string, number(, boolean, undefined, null)
            complex data type               object

            array.length;       #+adding, removing, reordering content

            'Technically, functions are also objects. But ... they are callable, ...'
            (=you can tell the interpreter when you want to execute the statements that it contains)
                p136
            Global Objects: Number Object  (**)
            inNaN()
            toFixed()           #round to 3 decim. places
              #returns num. as string (since fractions cannot alw. be accur. repres. using floating point numbers)
            toPrecision(3)      #round to 3 digits
              #returns num. as string (since fractions cannot alw. be accur. repres. using floating point numbers)
            toExponential()

            (integer)
            real number         number that can contain a fractional part
            floating point number       real number that uses decimals to represent a fraction
            scientific notation
                p137
            Working w. Decimal Numbers
                p138
            Global Objects: Math Object

            Math.PI

            .round()
            .sqrt(9)
            .ceil()
            .floor()
            Math.random()

            radians to degrees ; numInDegs / (Math.PI / 180)
                p139
            Random Numbers

            r.num 1 - 10 ; random  +   x 10

            (+Tips etc)
                p140
            Creating an Instance of the Date Object

            var today = new Date();

            'You can set the date and/or time using any of the
            following formats (or methods shown on the right):'
            **
                p141
            Global Objects: Date Object (and Time)

            getDate()               +set
            getDay()
              #Date internally uses 0-6 for the days
            getFullYear()           +set
            getHours()              +set
            getMilliseconds()       +set
            getMinutes()            +set
            getMonth()              +set
            getseconds()            +set
            getTime()               +set
            getTimezoneOffset()
            toDateString()          #='will display the date in the following format: ....'  (+if want to show in diff. format =construct w. the other methods)
            toTimeString()
            toString()

            Unix time           secs since 1970-01-01 00:00:00
                p142
            Creating a Date Object

            var today = .......
            var year = today.getFullYear();
                p143
            Example: Working w. Dates and Times


            2. 'If you try to find the difference between two dates, you will end up with a result in milliseconds.'

            'the number of milliseconds in a year (that is not a leap year).'

                p145
            EXAMPLE: FUNCTIONS, METHODS AND OBJECTS **!
            'All the code is placed inside an IIFE to ensure any variable names used in the script do not clash with variable names used in other scripts.'

            offerExpires()      #custom f.
             weekFromToday
             monthNames
             expiryMsg
                p148
            'Functions allow you to group a set of related
            statements together that represent a single task.'
                p149
            CHAPTER 4 - Decisions and Loops  (**)
                p150
            evaluations
            decisions
            loops
                p153
            Eval.ing conditions and conditional statements
            1. an expression is eval.d (which returns a value)
            2. a conditional statement says what to do in a given situation

            if (score > 50) {
              document.write('You passed!');
            } else {
              document.write('Try again...');
            }
                p154
            Comparison operators: evaluating conditions

            ==
            !=

            ===         #strict equal to  (**)
            !==
                p155
            testing/checking a condition        ='evaluating the condition'
            'in short-circuit evaluation, a condition might not need to run (see p157)' (=p161)
                p156
            Structuring comparison operators

            operand
                p157
            Using Comparison Operators

#not having to use ( ) around test-expression
            var hasPassed = score >= pass;      //=when assigning to var.
                p158
            Using Expressions w. Comparison Operators

            -----operand------
            ((score1 + score2) > (highscore1 + highScore2))
                p159
            Comparing Two Expressions

            var comparison = (score1 + score2) > (highscore1 + highScore2);
                p160
            Logical Operators  **

            'Do expr 1 and 2 both evaluate to true? (=false)'
            ((5 < 2) && (2 >= 3))
                p161
            &&      true && true        #is true. all other comb.s false
            ||      false && false      #is false. all other comb.s true
            !true
             !(2 < 1)   #true

            SHORT-CIRCUIT EVAL.
            false && .....
            true || .....
                        #=no need to eval. right side
                p162
            Using Logical AND       = &&

            (not often write boolean result directly into page)
            ='it is more likely that you would check a condition, and if it is true,
            run other statements.'
                p163
            Using Logical OR and Logical NOT        ||  !
                p164
            if Statements

              curly brace
              if =keyword

                 condition
            if (score >= 50) {
              congratulate();       //code to execute if value is true
            }
                p165
            USING IF STATEMENTS

            if (.......
              ........
              msg += ' Proceed .....
            }


                #+'how lines of code do not always run in the order you expect them to.'
            function congratulate() {
              .....
            }
                p166
            if...else Statements

            if-code block
            else-code block


                p167
            Note!!: NO ';' NEEDED AFTER THE CODE BLOCKS (**)
            'An if statement runs a set of statements  if the condition is true'
            'An if...else statement runs a set of statements  if the condition is true, and a different set if it is false'  ****
                p168
            Switch Statement

            starts with a var called the 'switch value'

            switch (level) {

              case'One':
                title = 'Level 1';
                break;

              case 'Two':
                ......

              default:
                title = 'Test';
                break;

            }


            Tip: if vs switch ; switch is faster (**)  #=series of if:s do not 'short circuit'
                p169 + p170
            Example: Using Switch Statements (**)

            '(The switch value could also be an expression.)'
                p171
            Type Coercion and Weak Typing

            NaN     a value that is counted as number
                p172
            Truthy and Falsy Values

            falsy values in JS      false, 0(=the number), ''(=empty string), NaN, ((a var. with no val. assigned to it)
                                    # +'falsy values can also be treated as the number 0'

                                    # +'truthy values can also be treated as the number 1'
            +'the presence of an object or an array is usually considered truthy'
            (=commonly used wh. checking for the presence of an element in a page)


                p173
            Checking Equality and Existance     **** (----^)
                #=the 'Trick'  (*****/ !!!!!(####))

            if (document.getElementById('header')) {
              // Found: do something
            } else {
              // Not found: do something else
            }
                +!!!!!!#####

            (w. '==' ... false, 0, and ''  can be considered equal
            However they are not equal wh. using the strict operators (!!))
             +EQUALITY TABLES AND EXAMPLES
                p174
            Short Circuit Values

            ('Logical operators are processed left to right.')
            'They shourt-circuit (=stop) as soon as they have
            a result - but they return the val. that stopped
            the processing (not necessarily true or false).'  (!!! **)

                    // used creatively by programmers
                        eg. set value for var, or even creating objects
            var artistA = (artist || {});
            // creates empty obj. if artist does not have a value

            - Put the code most likely to return true first in OR operations,
            and most likely to return false first in AND operations.

            - Place the options requiring the most processing power last,
            just in case another value returns true and they do not need to be run.
                p175
            Loops

            for
              if need to run code specific num. of times
            while
              if not know how many times code should be run
              (cond can be s.thing other than a counter)
            do...while
              (will always be run at least once)

                  condition (counter)
            for (var i = 0; i < 10; i++) {
              document.write(1);
            }
                p176
            Loop Counters

            the three statements:
            initialization
            condition
              i < (rounds);
            update
                p179
            Key Loop Concepts

            keywords:
            break
            continue

            loops are very helpful w. arrays

            efficiency and memory concerns:

            'Any variable you can define outside of the loop and that does not change within the loop should be defined outside of it. (= If it were declared inside the loop, it would be recalculated every time the loop ran, needlessly using resources.)'
                p181
            Using while Loops

            var i = 1;
            var msg = '';

            while (i < 10) {
              msg += i + ' x 5 = ' + (i * 5) +'<br />';
              i++;
            }
                p182
            Using do while Loops

            var i = 1;      // Set counter to 1
            var msg = '';   // Message

            // Store 5 times table in a variable
            do {
              msg += i + ' x 5 = ' + (i * 5) + '<br />';
              i++;
            } while (i < 1);
            // Note how this is already 1 and it still runs

            document.getElementById('answer').innerHTML = msg;

                #note: some people like to write the 'while' on a new line =after the '}'
                p184
            Example: Decisions and Loops  'the user can be shown addition or multiplication (of a given number)'
                p185
            Example HTML (=for the Bullseye Tutoring/Game Blackboard (**!))
                p186
            if (operator === 'addition') {

                p188
            CHAPTER 5 - DOCUMENT OBJECT MODEL  **
                p189
                =specifies how browsers should:
            - Making a model of the html page
            - Accessing and changing the html page      #=how js can

            the DOM is an ___                   API
            APIs let programs/scripts ___       talk to each other


                p190
            The ListKing App *****
            colors for hotness of list/todo-items
            hot         red
            normal      orange
            cool        green
            complete    gray
                p191
            The DOM Tree is a Model of the Web Page

            the parts in a/the DOM tree + its four types of nodes

            <html>
              <body>
                <div id="page">
                  <h1 id="header">List</h1>
                  <h2>Buy groceries</h2>
                  <ul>
                    <li id="one" class="hot"><em>fresh</em> figs</li>
                    <li id="two" class="hot">pine nuts</li>
                    <li id="three" class="hot">honey</li>
                    <li id="four">balsamic vinegar</li>
                  </ul>
                  <script scr="js/list.js"></script>
                </div>
              </body>
            </html>


                p192

            (node relationships etc: 'Every node is a descendant of the document node')

            - (the) Document node       #=at the top of the page/root of the tree
                    =the starting point for all visits to the DOM tree ******* !!!!!!
            - Element nodes **
            - Attribute nodes       (+ 'not children of the elem. carrying them - they are PART of that element)
                (common use: change value of class attributes  to trigger new css rules that affect their presentation)
            - Text nodes
                p193
            Working with the DOM tree

            1. locate node + 2. use

            1. locate/access
            - sel. an individual element node  #dom query
                getElementById()
                querySelector()     #uses a css sel.
            - sel. multiple elements (nodelists)  #dom query
                getElementsByClassName()
                getElementsByTagName()
                querySelectorAll()      #uses a css sel.
            - traversing betw. elem. nodes  #traversing the dom
                parentNode()
                previousSibling / nextSibling()
                firstChild / lastChild()
                p194

            "the dom is working w. an elem."        =the dom is working w. a node that represents that element(!)

            2. use/work w. those elem.
            - access / update text nodes
                firstChild + nodeValue
            - work w. html content
                innerHTML
                textContent
                createElement()
                createTextNode()
                appendChild() / removeChild()
            - access / update attrib. values
                className / id
                hasAttribute()
                getAttribute()
                setAttribute()
                removeAttribute()


                p195
            Caching DOM Queries  **
            ='When you need to work w. an elem. more than once, you should use a var. to store the result of your DOM query'
                p196

            var itemOne = getElementById('one');
            "caching the selection"

            use text content of the elem. w. id 'one' ; itemOne.textContent
                p197
            Accessing Elements
            'If a method CAN return more than one node, it will ...' (=a NodeList =collection of nodes), even if it only finds one elem.

            'Finding the quickest way to access an element ... make the page seem faster and/or more responsive.'
                p198

            list/examples: Methods That Return A Single Element Node / one/several (as a NodeList)
                #+which are faster/slower (**)      = querySelectorAll() is slow
                p199
            Methods That Select Individual Elements
                p200
            Selecting Elements Using ID Attributes

            change class of post in listking to cool  **
                el.className = 'cool';      #set property className to "cool"
            id val  =can use ' or " for selecting the id-name (=as a string)
                p201
            NodeLists

            each node is given and index number
            numbered like arrays, but are actually collections
            retrieve items w. sq.br.syntax
            live (and static) NLists        l. = updated wh. the page updates
                p202

            querySelectorAll('li[id]')
                p203
            Selecting an Element from a NodeList
                (= item() method // array syntax)

            var elements = document.getElementsByClassName('hot')
            if (elements.length >= 1) {
              var firstItem = elements.item(0);
            }
                p204
            Array Syntax  (preferred  =is faster(!))

            var elements = document.getElementsByClassName('hot');
            if (elements.length >= 1) {
              var firstItem = elements[0];
            }
                p205
            Selecting elements using class attributes
              getElementsByClassName()

                p206
            getElementsByTagName()      #like 'li'  (=html-tags)**
                p207
            querySelector() / querySelectorAll()
                #selecting using css selectors

            var el =   ??????????????????????  #el?  =element?
                p208
            (tip/note: js runs one code line at a time  (+=can return diff. results if run wh. page is updating/has finished loading))
                p209
            Repeating Actions for an Entire NodeList
            (=looping through a NodeList with a for loop)

                p210
            ...; i<hotItems.length; ...
            change class of many listitems in listking from hot to cool  **

                p213
            Traversing the DOM
                # selecting by parent / sibling / child --properties  **(*)
#! 'are properties of the curr. node' + are read only (=do not update nodes they point to)
                p214
            Whitespace Nodes
                #eg. using jQuery to handle inconsistencies betw. browsers concerning wh.sp. and selecting
                p215
            Prev. / Next Sibling
#+first stripping wh.sp. (????)
                p216
            First / Last child
            'These properties also return inconsistent results if there is whitespace between elements.'




                p217
            How to Get / Update Element Content  **!

            'When an element contains a mix of text and other elements, you are more likely to work with the containing element rather than the individual nodes for each descendant.'      #mix of text-node + <em>  etc

            nodeValue       accesses text from node


                p218
            teterm: Parent/Sibling relationships when adding elements etc *****

            get/set text and(!)/or markup

            innerHTML       #note! gets/sets both(!)
            textContent
            innerText
                p219
            Access and Update a Text Node w. nodeValue
            (id + child + sibling  +nodeValue)  (!!(!))


                p220
            Accessing and Changing A Text Node  (***(*))
            ******************* !!!!!!!!!!!!!!!!!!

            Choose in two steps (=ending in nodeValue)  +  elText = elText.replace('pine nuts', 'kale');
            itemTwo.firstChild.nodeValue = elText;
                p221 p222
            Access and Update Text w. textContent / ((innerText))
                p223
            Adding or Removing HTML Content ****

            Change list item        a var can contain as much markup as needed ***(*!)

            +method =select elem. + set innerHTML
            removing content        set innerHTML to ''
            remove eg. one li from <ul>         set =return ev.thing Except(!) item to exclude
                p224
            dom manipul.        easily target indiv. nodes /| more code + slower
            innerHTML       update entire fragments + quicker /| may be unsecure

            dom manipul: add content    create new content one node at a time (+store in var), +attach to right place in tree w. another dom method
            removing content        =one method
                p225
            Access and Update Text and Markup w. innerHTML


            (General steps for getting, setting, update etc nodes *****
                get, store in var, operate on var via other methods/properties etc)

            'The elContent variable would now hold the string:'  ******
                p226
            Update Text and Markup  (=example for listking)
                =placing list item inside a link (**!)

            'If you use attributes in your
            HTML code, escaping the
            quotation using the backslash
            character \ can make it clearer
            that those characters are not
            part of the script.'  ??/(*)


                p227
            Adding Elements Using Dom Manipulation *****
            1. createElement()
            2. give it content  createTextNode()    #or skip for adding empty elem. to dom tree
            3. appendChild()
                    (+also insertBefore() )
                p228
            Adding an Elements to the Dom Tree **

            add new <li> (=list item)  to listking list **
                var newEl = document.createElement('li'); (+++)
            ( createTextNode()  appendChild()   getElementsByTagName()[0]  appendChild()  )
                p229
            Removing Elem.s via DOM Manipulation **
            1. Store the element in a var
            2. store the parent in a var
            3. remove the elem. from its containing elem
                p230
            removing a list item =post  in listking
                p231
            Comparing techniques: Updating HTML Content

            document.write()
                quick n easy  (but otherwise not recommended)
            elem.innerHTML()
                    risks: dont add content from users  (+2 more)
            DOM manipul.
                it does not affect event handlers



                p233
            XSS Attacks
                =if adding HTML to page w. innerHTML / some jQuery methods
            (teterm extern: news ticker)
            (teterm: session token)
                p234
            Defending Against XSS

            Validate Input Going To The Server
                do not allow untrusted users to submit html markup or javascript
                doublecheck validation on the server
            Validate Data Coming From The Server and Database
                potentially dangerous characters should be escaped
                only insert content generated by users into certain parts of the template file

            code written by you (and other trusted sources) can safely be added w. innerHTML
                p235
            XSS: Validation and Templates
                no <, &, (  etc  as input in form fields  (*!)

            diff. execution contexts ((??))

            never place any user's content in:
            Script tags:    <script>not here</script>
            HTML comments:  <!-- not here -->
            Tag names:      <notHere href="/test" />
            Attributes:     <div notHere="norHere" />
            CSS values:     {color: not here)
                p236
            XSS: Escaping and Controlling Markup

            most server-side lang.s have functions for stripping/escaping malicious code (*!)

            escape some html-char.s
            '  =  &#x27     #etc

            encodeURIComponent()

            jQuery      prefer .text() over .html()
                p237
            Attribute Nodes

            getAttribute()      gets the value of an attribute
            hasAttribute()      checks if element node has a specified attribute
            setAttribute()      sets the value of an attribute
            removeAttribute()   removes an attribute from an element node

            className           gets or sets the value of the class attribute
            id                  gets or sets the value of the id attribute
             accessKey
             checked
             href
             lang
             title
                p238
            Check for an Attribute and Get its Values
                #good practice to check for existance before working w. it

            in an if-statement (=runs if exists + saves resources otherwise)

            ((+ print to the listking list  =a message if exists))


                p239
            Creating Attributes and Changing Their Values  **!

            .setAttribute()

            +'generally considered better to update the properties
            rather than use a method (....'   ?? / ******
            (=uses method behind the scenes anyway)
                p240
            Removing Attributes *

            (check for elem.), sel. elem, call removeAttribute()
                p241
            EXAMINING THE DOM (In Chrome)
                Developer Tools // rmbclick elem. + Inspect Element
                p242
            EXAMINING THE DOM (In Firefox)
                DOM Inspector (=download?)
                
                shows wh.sp.  (as '#'  (??))
            Check nesting etc visually  =the 3D view of the DOM (!!)
                p244
            EXAMPLE: DOM - ListKing **(*)
            - add new item to start and end of list
            - set class attribute (eg. update value to 'cool') on all items
            - add the number of list items to the heading
                p248
            CHAPTER 6 - Events  (**!)
                p249
            'Scripts often respond to these events by updating the content ... (via the DOM) ...'   makes page feel more interactive
                p251
            Different Event Types

            UI Events
            load                Web page has finished loading
            unload              Web page is unloading (usually because a new page was requested)
            error               Browser encounters a JavaScript error or an asset doesn't exist
            resize              Browser window has been resized
            scroll              User has scrolled up or down the page

            Keyboard Events
            Event               Description
            keydown             User first presses a key (repeats while key is depressed)
            keyup               User releases a key
            keypress            Character is being inserted (repeats while key is depressed)

            Mouse Events
            click               User presses and releases a button over the same element
            dblclick            User presses and releases a button twice over the same element
            mousedown           User presses a mouse button while over an element
            mouseup             User releases a mouse button while over an element
            mousemove           User moves the mouse (not on a touchscreen)
            mouseover           User moves the mouse over an element (not on a touchscreen)
            mouseout            User moves the mouse off an element (not on a touchscreen)

                p252
            teterm: events occuring ; having 'fired' or been 'raised'
            teterm: event running/causing a script to start ; to 'trigger' a script

            Focus Events
            focus / focusin
            blur / focusout

            Form Events
            input
            change
            submit
            reset
            cut
            copy
            paste
            select


            Mutation Events**       #when dom structure has been changed by a script
                                        set to be replaced by mutation observers ( p288)
            DOMSubtreeModified
            DOMNodeInserted
            DOMNodeRemoved
            DOMNodeInsertedIntoDocument
            DOMNodeRemovedFromDocument

                p253
            How Events Trigger JS Code  **
            'Together these steps are known as event handling.'
            1. sel. the elem. node(s) you want the script to respond to
            2. indicate which event on the sel. node(s) will trigger the response
                #"binding an event to a DOM node"
            3. state the code you want to run when the event occurs
                # the function can be named or anonymous

            (mouseover  works w. most elem. nodes  ,  submit  works for forms)
                p254

            task: Show error message to user if username is too short (=when filling in a form/submission)  **(*!)
                p255
            Three Ways to Bind an Event to an Element **!!

             - HTML Event Handlers (!! =dont use)
                <a onclick="hide()">
            - DOM Event Handlers        #can only attach a single function to any event
            - DOM Level 2 Listeners     (**!   (but not IE8))
                p256
            ((html event handler attributes))
                p257
            Traditional DOM Event Handlers (*)
            element.onevent = functionName;

            el.onblur = checkUsername;      #custom f. to check length of username
                            +(!!)note: cannot pass arguments to f. with this method(!)

            'We don't want the code to
            run until the event fires, so the
            parentheses are omitted from
            the event handler on the last line.'

            +'example w. anon. function  and  function w. parameters'  =p260


                p258
            USING DOM EVENT HANDLERS (=Level 1)
             *********** !!!!!!
                p259
            EVENT LISTENERS **************
            ***********   !!!!!!!!!!!!!!!   Level 2 EventHandling  ******

            el.addEventListener('blur', checkUsername, false);
                                                         |
                        indicates something called capture (+often set to false)
                p260
            Example: Using Event Listeners

            removing event listeners (**)       removeEventListener()

                p261
            Using Parameters with Event Handlers and Listeners  ****(!!)
                =wrap the function call in an anonymous function

            el.addEventListener('blur', function() {
              checkUsername(5);
            }, false);

                p262
            example: using paramaters with event listeners 2
            *****
                p263
            Supporting older versions of IE

            conditional: =Check if browser supports addEventListener()
                else attachEvent()  #=
                p264
            Fallback for Using Event Listeners in IE8

            (=fallback-code)
                (+may be better to write helper function that creates appropr. event handler for y.  (=not have to create fallback for every event))
                p265
            Event Flow
            'If you hover or click on a link, you will also be hovering or clicking on its parent elements.'

            EVENT BUBBLING
                =event flows outward toward least specific node (=docum)
            EVENT CAPTURING
                =starts at least specific(=docum) + flows inwards
                    (=not supported in IE 8 and earlier browsers)
                p266
            Why Flow Matters
                for traditional event handlers (+older, and default in many browsers) =bubbling
                p267
            The Event Object
                tells info ab. the event
                +the element it happened on
                key pressed for keypress event
                part of viewport user clicked on
            (=is passed to any function that is the event handler or listener)

            common shorthand when passing the event obj.        e   #or also 'error'

            target
            type
            cancelable

            preventDefault()
            stopPropagation()

            (+IE 8 equivalents)


                p268
            (************** (!!!!!!!!!!))

            ev.listn w. no param.s
            function checkUsername(e) {

            ev.listn w. param.s
            function checkUsername(e, minLength) {
                p269
            (The Event Obj. in IE5-8)
                p270
            Using Event Listeners w. The Event Object
            (=combining the event function and its usage ??(/*))


                p271
            Event Delegation  ***************** !!!!!!!!!!!!!

            ='Creating event listeners for a lot of elem.s
            can slow down a page, but event flow allows
            you to listen for an event on a parent element.'
            (+use event obj.s target property)

            +
            - works w. new(ly added) elem.s
            - solves limitations (in IE 8) w. the this keyword  + when function needed parameters
            - simplifies your code (=fewer functions to write)
                p272
            Changing Default Behavior

            preventDefault()
              +returnValue()
            stopPropagation()
             return false;
                p273
            EXAMPLE: USING EVENT DELEGATION (+Flowchart)
                p275
            ((Which Element Did an Event Occur on?))

            alternative method: =using 'this' instead of event obj.s target property
              (only works w. version where not passing args to ev-handling funct.)


                p276
            DIFFERENT TYPES OF EVENTS ****

            - W3C DOM EVENTS
            - H5 EVENTS
                form element events (submit, input, change etc)
                readystatechange
                DOMContentLoaded
                hashchange
            - BOM EVENTS
                    (+new will be added, specifically concerning touchscreen devices)
                    +gestures, accelerometers (etc)
                touchstart
                touchend
                touchmove
                orientationchange
                p277
            UI Events       #ev. handler/listener should be attached to the browser window
            load
            unload
            error       #not robust solution for error handling
            resize      #may happen often, so dont trigger complicated code
            scroll      #may happen often, so dont trigger complicated code
                p278
            Load

            setup()     #function declared to give focus to text input (for creating user name) when the page has loaded

#attach to the window object, not document
                p279
            Focus and Blur Events

            most commonly used on forms *
            - show tips, feedback etc
            - need to trigger form validation (=user done filling in one field)

            focus
            blur
            focusin
            focusout
                p280
            F & B Example
                p281
            Mouse Events  *
            click
            dblclick
            mousedown               touchstart
            mouseup         #not keyboard       touchend
            mouseover       #not keyboard
            mouseout        #not keyboard
            mousemove       #not keyboard
                p282
            Click  *

            =remove pop-upd maintenance message

            (why it is better to trigger script w. form elements with focus than click  etc)
                p283
            Where Events Occur

            screenX screenY
            pageX pageY
            clientX clientY


                p284
            Determining Position ***

            sx.value = event.screenX
                p285
            Keyboard Events

            input
            keydown         fires for any key on the keyb.
            keypress        fires for char-keys
            keyup

            keyCode  (ascii code for char)

            String.fromCharCode(event.keyCode)
                p286
            Example: Which Key was Pressed?  *
                p287
            Form Events

            submit      checking user's input, before sending
            change
            input

            (why check/validate data w. js? ; =quicker than sending to the server to be checked
                p288
            Example: Using Form Events

            packageHint()   =custom
            checkTerms()


                p289
            Mutation Events and Observers ***(**)

            DOMNodeInserted   (etc)
                    (=already scheduled to be replaced by mutation observers)

                p290
            [Using Mutation Events  **]
                p291
            HTML5 EVENTS

            DOMContentLoaded
            hashchange
            beforeunload

            +new events being added to support more recent devices (=phones and tablets)
                p292
            Example: Using HTML5 Events

            (="Do you really want to leave?")
                p294
            EXAMPLE APP, EVENTS: AUDIO NOTE *

            data-state (etc.)   event delegation  H5

            handling events for several buttons etc
                switch statements
                p297
            binding
                the process of stating which event you are waiting to happen + which element you are waiting for that event to happen upon


                p298
            CHAPTER 7 - jQuery ***
                p299
            Quick consistent ways for**:
            - selecting elements    #w. css-style selectors (*)
            - performing tasks
            - handle events
                p301
            What is jQuery?
                a js file you include in your web pages

            find <li> elements with the class of hot
                jQuery('li.hot')
                $('li.hot')         #=the common "shorthand syntax"

            var cachedValue = $('li.hot')
                p302
            jQuery: matched set / jQuery selection ; the jQuery object ( $('li.hot') ) and the elements it contains

            Use a matched set / jQuery selection ; $('li.hot').addClass('complete');  #=method w. parameters  to update the elements that the jQ-selection contains   **

            differences from (+advantages over) DOM:
             .....
             .....
             .....



            - Methods affect all the selected elements (=w.out need to loop through each one (**!)      #p314
             ...(animation)...
            - Once sel. made =can apply multiple methods to it  **
                p303
            A Basic jQuery Example

            include the jQuery script in y. page
                just before </body>    <script src="js/jquery-1.11.0.js"></script>
            .min.js     version using minification (stripping unnecess. wh.sp, comments etc. from the code  +other optimizations)  #+the sourcefiles are simply js text
                p304
            'select elements using jQuery selectors, and then how to update those elements' (using the methods and properties of the jQuery object.)

            Sel. all headings (h1-6) **         $(':header').addClass('headline');
            Sel. first three list items +Fade into view ****!
            Remove list when clicking on it  **

                p305
            WHY USE JQUERY?
            1. Simple Selectors     (=uses css selectors)  + adds some extra
            2. Common tasks in Less Code
                loop through elements, add/rem. elem.s from the dom tree, handle events, fade elem.s into/out of view, handle ajax requests
            (+allows chaining   =can apply multiple methods to sel. elements)
                p306
            3. cross browser compatib.          #uses lots of feature detection
            (jquery --1.9 / 2.0--       dropping support for some older browser (=to make the code even smaller and more effective))
                p307
            FINDING ELEMENTS + SOME BASIC SYNTAX

            basic selectors ---
            *
            element
#id
            .class
            sel1, sel2      # .add()

            hierarchy ---
            ancestor descendant
            parent > child
              parent > *                #all children
            previous + next             #adjacent sibling
            previous ~ siblings         #all siblings of prev. elem

            basic filters ---
            :not(sel)       eg. div:not('#summary')
            :first
            :last
            :even
            :odd
            :eq(index)
            :gt(index)
            :lt(index)
            :header
            :animated       **
            :focus
                p308
            content filters ---
            :contains('text')
            :empty
            :parent
            :has(selector)

            visibility filters ---
            :hidden
            :visible

            child filters
            :nth-child(expr)
            :first-child
            :last-child
            :only-child

            attribute filters
            [attribute]
            [attribute='value']
            [attribute!='value']
            [attribute^='value']
            [attribute$='value']
            [attribute*='value']
            [attribute|='value']
            [attribute~='value']
            [attribute][attribute2]

            form
            :input
            :text
            :password
            :radio
            :checkbox
            :submit
            :image
            :reset
            :button
            :file
            :selected
            :enabled
            :disabled
            :checked
                p309
            Doing Things With Your Selection

            'You often see jQuery method
            names written starting with a
            period (.) before the name.'

            +'also methods that are specifically designed to work with Ajax'

            Content Filters

            Get or change content of
            elements, attributes, text nodes

                note pagenumbers +4(!!)
            Get/Change Content

            .html() p316
            .text() p316
            .replaceWith() p316
            .remove() p316

            Elements
            .before() p318
            .after() p318
            .prepend() p318
            .append() p318
            .remove() p346
            .clone() p346
            .unwrap() p346
            .detach() p346
            .empty() p346
            .add() p338

            Attributes
            .attr() p320
            .removeAttr() p320
            .addClass() p320
            .removeClass() p320
            .css() p322

            Form Values
            .val() p343
            .isNumeric() p343

            Finding Elements

            Find and select elements to
            work with & traverse the DOM

            General
            .find() p336
            .closest() p336
            .parent() p336
            .parents() p336
            .children() p336
            .siblings() p336
            .next() p336
            .nextAll() p336
            -prev() p336
            -prevAll() p336

            Filter/Test
            .filter() p338
            .not() p338
            .has() p338
            .is() p338
            :contains() p338

            Order In Selection
            .eq() p340
            .lt() p340
            .gt() p340
                p310

            Methods/Actions after having sel. the elem.s you want to work with (='and they are in a jQuery object')

            Dimension/Position

            Get or update the dimensions or
            position of a box

            Dimension

            .height() p348
            .width() p348
            .innerHeight() p348
            .innerWidth() p348
            .outerHeight() p348
            .outerwidth() p348
            $(document).height() p350
            $(document).width() 350
            $(window).height() 350
            $(window).width() 350

            Position
            .offset() p351
            .position() p351
            .scrollLeft() p350
            .scrollTop() p350

            Effects & Animation

            Add effects and animation to
            parts of the page

            Basic
            .show() p332
            .hide() p332
            .toggle() p332

            Fading
            .fadeIn() p332
            .fadeOut() p332
            .fadeTo() p332
            .fadeToggle() p332

            Sliding
            .slideDown() p332
            .slideUp() p332
            .slideToggle() p332

            Custom
            .delay() p332
            .stop() p332
            .animate() p332

            Events

            Create event listeners for each
            element in the selection

            Document/File
            .ready() p312
            .load() p313

            User Interaction
            .on() p326      #used to be methods for individual types of events (.click() etc)


                p311
            A Matched Set / jQuery Selection  (**)

            teterm:
            'When you select one or more elements, a jQuery object is returned.
            It is also known as a matched set or a jquery selection.'

            Single Element
            Multiple Elements

                p312
            jQuery Methods that Get and Set Data  (**)

            Get Information
                several =gets information from first list item
                (+get more =use traversion / filtering)

            Set Information
                Q-selection several =all gets set/updated
                p313
            jQuery Objects Store References to Elements *
                (to the corresponding nodes in the DOM tree (=Does not copy them(*!)))

            'The jQuery object is an array-like object because it stores a list
            of the elements in the same order that they appear in the HTML
            document (unlike other objects where the order of the properties is
            not usually preserved).'
                p314
            Caching jQuery Selections in Variables  **!
                (=storing ref. to elements in variable)

            $listItems = $('li');       #Naming convention =help differentiate from
                                         other variables in y. script


                p315
            Looping
                =often not needed (=all sel. gets updated by action ***!)
                    (teterm: =implicit iteration) **(*)

            get information from series of elem.s       use .each() method (=rather than writing a loop)  ***

                p316
            CHAINING **!

            $('li[id!="one"]').hide().delay(500).fadeIn(1400);
                =being able to place sever. methods in the same selector

            or for readability:
              $('li[id!="one"]')
              .hide()
              .delay(500)
              .fadeIn(1400);

            methods that can be chained ; methods that update the selection  #m.s that retrieve info cannot be chained

            Note! If one method in the chain fails, the whole chain fails
                p317
            Checking a Page is Ready to Work With

            .ready()

            $(document).ready(function() {
              // Your script goes here
            });
            (++SHORTHAND VERSION (=much more commonly used(!!))) ---v


                p318
            ************** !!!!
            The load Event  vs
            The .ready() Method  vs
            Placing scripts before the </body> tag

            $(function() {
              // Your script goes here
            });

            'This function-level scope
            prevents naming collisions with
            other scripts that might use the
            same variable names.'

            'Any statements inside the method automatically run when the page
            has loaded.
            This is the version that will be used in the examples in the rest
            of the chapter.'
                p319
            Getting Element Content (!!)
                .html()
            $('ul').html();
                .text()
            $('ul').text();
                p320
            Getting at Content


                p321
            Updating Elements
                .html()
                .text()
                .replaceWith()
                .remove()
            'If you want to use and amend the content of the current selection,
            these methods can take a function as a parameter.' ****
                (=Using a custom (or other?) function for editing sel.) **
                p322
            Changing Content
                can use string, variable, or function

            when specifying new content:
            'If you append a
            new element that has attributes,
            use single quotes to surround
            the content. Then use double
            quotes for the attribute values themselves.'
                p323
            Inserting Elements
                sel. w. jQuery obj. + use method to insert the content
                1.
                2.  .before()  .after()  .prepend()  .append()
                        (+ .prependTo()  .appendTo() )
                p324
            Example: Adding New Content **
                listking  (=add notice before list, prepend '+' to hot posts, add new elem. to the end of the list)  **
                p325
            Getting and Setting Attribute Values
                .attr()
                .addClass()
                .removeAttr()
                .removeClass()


                p326
            Working With Attributes ** ************* !!!!!!!!!!!!!!!

            'Using events to trigger changes
            to attribute values that apply
            new CSS rules is a popular way
            to make a web page interactive.'

            ='Favorite' + 'add margin and border'


                p327
            Getting and Setting CSS Properties  ** ****
                .css('propname', 'replacement_value')
                                    eg.  '+=20'
                +using object literal notation (=to set several properties ****)
                p328
            Example: Changing CSS Rules  **
                changing colors etc for listking list items  *
            NOTE! Better to do in the Style Sheet  (=than from the JS)  (!!)
                p329
            Working With Each Element in a Selection
                .each()     #looping through   ___

            ***************
                this  or  $(this)       #=pure js, or jQuery 'this'
                                            (=gets elem.  or  property)  (?????/**)

                p330
            Example: Using .each()
                add listitems' id-attribs to text in the listitems

                p331
            Event Methods  ****
                .on()       #+click, focus  etc etc   +anon./named function  ****

            ready  unload
                p332
            Example: Events
                show id attrib value to list item  wh. moving pointer over list item  **
            $listItems.on('mouseover click', function() {   **
                    (=write on mouseover  +  remove on mouseout) ******

                p333
            The Event Object
                the jQuery event Obj.    often   e
            type
            which
            data
            target
            pageX pageY
            timeStamp

            .preventDefault()
            .stopPropagation()

                p334
            Example: Event Object
                write trigger-event + date to listpost (in listking) **
#Note(!!):  timeStamp does not work on firefox (???)
                p335
            Additional Parameters for Event Handlers
                'filter initial jQuery sel. to respond to subset of the elements'
            (+function to run)
                        ((+older method for similar  is .delegate()  ))
                p336
            Example: Delegating Events  *(***)
                ='Building a white status-box below the listking list**'


                p337
            EFFECTS (transition + movement) ****
                Basic Effects
                  .show()
                  .hide()
                  .toggle()
                      etc
                Fading Effects
                Sliding Effects
                Custom Effects
                  .delay()
                  .stop()
                  .animate()        #=Creates Custom Animation

            Tip/Note: CSS3 Animations are Faster  ***(**!)
                p338
            Basic Effects  =fade in *
                .hide  +  then slide in
                 .delay()


                p339
            Animating CSS Properties  ****************
                .animate()  val.s that can be represented as numbers can be anim.d  #not string-values

            border-top-left-radius  =css property
            => borderTopLeftRadius  =jQuery equiv. ***

                .animate({
                  // Styles you want to change
                  }, speed, easing, complete);
                             linear / swing
                                     =function that should be run wh. anim. has finished
                                     (=known as a 'callback function')


                p340
            Example: Using Animation (*) *****
                list item: fade, slide right, +remove (=via callback f.)  ****

            animating betw. two colors
                see helpful jQuery color plugin (??/*)

                p341
            Traversing the DOM  (=after you have a j. selection)
                .find()
                .closest()

                .parent()
                .parents()
                .siblings()
                .next()
                .nextAll()
                :prev()
                .prevAll()

            sel. all siblings       .siblings() etc
            .siblings('.important')     siblings w. important
                p342
            Example: Traversing
                hide + show whole list   (=children of new top list item)

                p343
            Add and Filter Elements in a Selection (**)
                .add()  + filtering*****
                 :contains
                +conditional statements     .is()

            $('li').not('.hot').addClass('cool');
            $('li:not(.hot)').addClass('cool');
                p344
            EXAMPLE: Filters in Use  **
                (listking)
                p345
            Finding Items by Order
                =number for the array-like jQuery Object
                
                .eq()
                :lt()
                :gt()
                p346
            Example: Using Index Numbers
                (listking)
                p347
            Selecting Form Elements
                :button
                :checkbox
                :checked
                :disabled
                 .......
            '+narrowing down first'

            reminder: jQuery handles inconsistent handling of wh.sp. between browsers well

                all 'Note that you get better performance' (**!)
                p348
            Form Methods and Events  *
                .val()
                .filter()
                 .......
                $.isNumeric()

                +events (.on()  + eg. blur)

            'jQuery also makes it easier to
            work with a group of elements
            (such as radio buttons,
            checkboxes, and the options
            in a select box), because, once
            you have selected the elements,
            you can simply apply individual
            methods to each of them
            without having to write a loop.'

                p349
            lk Example: Working with Forms  **
                add button + form  under the list
                p350 ++()
            .val()
            $textInput
            newText
                p351
            Cutting and Copying Elements
                'Once you have a jQuery selection, ...'

                cut
                .remove()
                .detach()
                .empty()
                .unwrap()

                copy
                .clone()

                +paste  (p322)
                p352
            lk Example: Cut, Copy, Paste
                p353
            Box Dimensions
                .height(), .innerHeight() etc
                    'discover/update w/h of all boxes on the page'

                returns number in pixels
                p354
            lk Example: Changing Dimensions

            'Measurements in percentages or
            ems should be given as a string,
            with the suffix % or em.'

                p355
            Window and Page Dimensions  **
                .height/width()     'can also be used on a jQuery sel. containing the window and document obj.s'

                .height()  .width()
                .scrollLeft()  .scrollTop()
                    #may return incorrect values, unless DOCTYPE _ set in html page
                p356
            Position of Elements on the Page
                .offset()
                .position()

                +getting offset/position    store obj. in var + left/top properties
                p357
            lk Example: Determining Position of Items on the Page
                determining if the endzone has been reached
                p358 ++()

            (+calculating the end zone (**))
                p359
            Ways to Include jQuery in Your Page (**!)
            - from web  + fallback version on own server/device (**)
            CDN
                p360
            Loading jQuery from a CDN   *
                starts w. '//'      =called a 'protocol relative URL'

            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">

                +  ||-phrase
                p361
            Where to Place Your Scripts **!
                Speed
                + load event / H5 DOMContentLoaded  (!)

            Script alternatives: css animations / h5 autofocus attrib.
                p362
                  Location
                p363
            jQuery Documentation (**!)
                p364
            Extending jQuery with Plugins
                plugins.jquery.com
                codecanyon.net

            when was the plugin last updated?  (etc)
                p365
            JS Libraries  **

                stripping out parts you dont need
            DOM and Events
                YUI
                Dojo
            User Interface
                jQuery UI
                jQuery Mobile
            Graphics and Charts
            Templating
            Web Applications
                angular
                backbone
                ember
            Compitibility
                modernizr.js
                eynope.js
                require.js
                p366
            Preventing Conflicts w. Other Libraries
                = '$'

            Including jQuery after other libraries
                .noConflict()
                use full name
                wrap script in IIFE
                Specify alias for $  (eg. $j)  *
            Including jQuery before other libraries (??)


                p368
            EXAMPLE APP: THE LIST KING ****
                add item,  completed  (etc??)

            'The appearance and removal of the elements is also animated, and
            these animations demonstrate how methods can be chained together to
            create complex interactions based on the same selection of elements.'
                p372
            CHAPTER 8 - Ajax and Json  **
                p375
            What is Ajax?

                p376
            Why Use Ajax?   ****
                the user can do other things while the page loads things asynchr.

            +
            using ajax while pages are loading
            using ajax when pages have loaded

                p377
            how ajax works
                XMLHttpRequest


                p378
            Handling Ajax Requests and Responses  ********
                new XMLHttpRequest();
                p379
            Data Formats

            html vs xml vs json

            simple
                same domain

            can represent complex structures
                same domain

            any domain
            concise
                unforgiving syntax
                p380
            XML

                p381
            JSON **
                looks like object(s), but is simple text
                should(!) use double quotes   "

                valid types for the values      string, num, bool, array, obj, null
                p382
            Working w. JSON Data
                (=the JSON object       convert JSON data into JS obj. / convert JS obj. into string )

                JSON.stringify()
                JSON.parse()
                p383
            Loading HTML w. Ajax (*!)
                200
                304
                404
                500
                        (tip: better cross-browser support w. jQuery)
                p384 ++
                p385
            Loading XML with Ajax   *(*)
                loaded  + must be converted to HTML
                XMLHttpRequest.responseXML
                 getNodeValue()
                p386
            Loading JSON w. Ajax  **
                transmitted as a string
                +must be 'deserialized'
                JSON.parse()
                JSON.stringify()    =from the browser back to server  (serializing an object)
                p387
            Working w. Data from Other Servers

            a. A proxy file on the web server
            b. JSONP (json with padding)
            c. cross-origin resource sharing  (CORS)
                (or jQuery)
                p388
            How JSONP Works
                =this function call is the so called "padding"  (??/!)

                +no need to use parse()/stringify()
                p389
            Using JSONP
                p390 ++
                p393
            jQuery and Ajax Requests  *
                .load()             simplest method
                $.get()
                $.post()
                $.getJSON()
                $.getScript()
                $.ajax()

            'They are methods of the global
            jQuery object, which is why
            they start with $.'
                p394
            jQuery and Ajax: Responses
                the jqXHR Object
            (+GRAF.INSPIR.  =Vector Graphics)
            Relative URL:s

                p395
            Loading HTML into a Page with jQuery   **
                p396
            Loading Content  (*)
                p397
            jQuery's Ajax Shorthand Methods *
                $.get()
                $.post()
                $.getJSON()
                $.getScript()
                p398
            Requesting Data
                p399
            Sending Forms Using Ajax  (**!/?)
                .post()   + jq  .serialize()

            (server side  =  X-Requested-With    =a header)
                p400
            Submitting Forms  *
                p401
            Loading JSON and Handling Ajax Errors
                $.getJSON()
                  $.getScript()
                        +chaining:  .done()  .fail()  .always()
                p402
            Example: JSON and Errors  (*)
                p403
            Ajax Requests w. Fine-Grained Control
                $.ajax()
                over 30 diff. settings
                (includng  type url data success error beforeSend complete timeout)
                p404
            Example: Controlling Ajax  **

                p406
            EXAMPLE: AJAX AND JSON ***   BUS TIME TABLE (**)
                p410
            overrideMimeType()


                p413
            SUMMARY *****
            (=Use as a Check List  when reviewing Chapter again at some point)
                p414
            CHAPTER 9 - APIs        #='lets programs/scripts talk to each other'
                p415

            - H5 JS APIs (=provides access to other browser features)
            - jQuery API
            - Google, Facebook, Twitter

            what you need to know to use an API     what it does, how to ask it to do something, +how to understand its replies

            'Therefore, this chapter will familiarize you with the form in which APIs ar described.'
                p417
            Playing Nicely with Others      (=How to use and access the/different APIs)

            - what the api can do
                (DOM and jQuery   |   Facebook, Twitter)
            - how to access it
            - the syntax
                
            'As long as you know how to
            call a function, create an object,
            and access the properties and
            methods of an object, you will be
            able to use any JavaScript API.'


                p418
            HTML5 JavaScript APIs  **** !!!

             - web storage API
            - geolocation
            - localStorage          #store location in the browser
            - sessionStorage        #store location in the browser
            - history
                p419
            Feature Detection

            if (navigator.geolocation) {

            TIP!! Use Modernizr  ****
                p420
            Modernizr

            - 'test'-script     #contains everything (=check all M:s features)
            - A tool            customize + download code for features you need to check for

            if (Modernizr.geolocation) {
                p421
            Geolocation API: Finding Users' Locations
                p422 ++
            navigator.geolocation.getCurrentPosition(success, fail)
                                                    2 functions to be called


                p423
            The Geolocation API  ****

            navigator.geolocation.getCurrentPosition(success, fail)

            Position Object

            Position.coords.latitude    (etc etc)
            (incl. speed, accuracy, altitude  etc)

            PositionError (Obj.)
                p424
            Example: Working with Location  **(**)

                (script version for older browsers   geoPosition.js  (??))


                p425
            Web Storage API: Storing Data in Browsers ****!!!
                (local and session storage)
                5 Mb of data per domain
                  stored as string
                
            protocol  (eg. https)
            subdomain  (www, maps, mail)
            domain  (google.com, facebook.com)
            port  (80 for web pages(??))
                p426

            How to Access the Storage API

            localStorage.setItem(
            localStorage.getItem())

            =commonly used to store JSON-formatted data
             pares()
             stringify()

            removeItem()
            clear()

            length
                p427
            Example: Local Storage (*)
                p428
            Session Storage         better for
                - data only changed at set intervals (timetables, pricelists etc)
                - preferences / settings
                p429
            History API and pushState()
            =history for pages/apps using Ajax (**)
            replaceState()
            the 'history stack'     stack of states
              state
                p430
            history.pushState(state, title, url)
            onpopstate
            location.pathname
                p431
            The history Object

            history.back()
            history.forward()
            history.go()
            history.pushState()
            history.replaceState()

            length

            window.onpopstate
                p432
            Example: Working w. History  *
                p433
            Scripts with APIs
            many scripts use APIs

            jQuery UI
                include jQuery + then the extra script
            Angular
                p434
            jQuery UI
            the 'theme roller'
            jqui used simil. to jq   =

            'You create a jQuery
            selection and then call a method
            that will be defined in the plugin.'


                p435
            jQuery UI Accordion  *******

            +note: on a live site, the js should be kept in an external file
                p436
            jQuery UI Tabs   ***
                p437
            jQuery UI Form
                sliders, date pickers  ...
            'Most jQuery scripts live within the .ready() function or its shortcut'
            (+if including more jq plugins)
                p438
            '2. To turn a text input into a
            date picker, all you need to do
            is select the text input and then
            call the datepicker() method
            on that selection.'

            init


                p439
            AngularJS  (****)
                create web apps, in particul.  creating apps that read, write, update, delete data in a database or server  (******)
            uses version of MVC
            angular.js

            commands
            (controller  the ViewModel)
                =update view if there are changes to the model
                =update the model if there are changes to the view
                'The task of keeping data synchronized between the two is known as data binding (2)'
                change notifications

                p440
            USING ANGULAR  ****
            {{ name }}
            ng-app
            ng-model
                p441
            View and ViewModel

            controller or ViewModel
            'The HTML file is now called a template because it will display whatever data is in the corresponding controller.'
                p442
            Data Binding and Scope
            'Ang. is particul. helpful when you load data from a separate file inte the view.'
            'A page can have multiple controllers, each of which has its own scope.'
            ng-controller
            $http (service)
                (uses Ajax internally)
            get()
            post()
            jsonp()
            delete()
                p443
            Getting External Data
                (eg. getting JSON data from a database)
            $http
              (+uses Ajax)
            '1. The path to the JSON file is relative to the HTML template, not(!) the JS file (even though the path is written in the JS).'
                p444
            Loop Through Results  **
            $scope
            JSON (=object)
            error()
            HTML template (view) loop

            sessions
            session

            ng-repeat

            Popular Alternative: Backbone **
                p445
            Platform APIs  (Google, Facebook etc)
                include a script they provide on their page
                p446
            Google Maps API

            API Key
                p447
            Basic G-Map Settings
            maps (object)
            Map()
            mapOptions()
            zoom level  0-16
            'the images that make up the map are called tiles'
                    roadmap  satellite  hybrid  terrain
                p448
            A Basic Google Map
            loadScript()
             init()
                p449
            Changing Controls
             zoomControl()
              etc
              etc
              etc

                p450
            Google Map with Custom Controls (****)
             SMALL   etc
             HORIZONTAL_BAR  etc
                p451
            Styling a Google Map  *
            featureTypes
            elementTypes
            stylers
                p452
            Adding Markers


                p453
            SUMMARY ********
                p454
            CHAPTER 10 - ERROR HANDLING AND DEBUGGING **
                p455
            - The Console and Dev Tools
            - Common Problems
            - Handling Errors
                p457
            Order of Execution
                =to find the source of an error, it helps to know how scripts are processed (=the order in which statements are executed can be complex (etc))
                p458
            Execution Contexts
                one global (+each function creates a new  (w. variable scope))

            -
            -
            - Eval context


            function-level scope


                p459 + p460
            The Stack  **
                'Each time a new item is added to the stack, it creates a new execution context.'
                [+THE EXECUTION (STACKWISE) OF THE LAST 'SIMPLE' EXAMPLE  (=p457)]
                SEE MORE ******* (!!!!!!)
                p461
            Execution Context and Hoisting

            wh. entering a new context
            1. prepare
            2. execute
            hoisting (or preparing)
             'each execution context also creates its own 'variables object''
                p462
            UNDERSTANDING SCOPE
            'Functions in JS are said to have lexical scope.
            They are linked to the object they were defined WITHIN.'
             (=+includes variables from its parent execution context)

            note: looking outside for var. (especially far out) can hurt performance
                p463
            UNDERSTANDING ERRORS

            on error: exec. stops + interpr. checks current execution context for exception-handling code (+otherwise looks outside in the stack)
                p464
            ERROR OBJECTS
            name
            message
            fileNumber
            lineNumber

            seven types of built-in error objects:
            Error
            SyntaxError
            ReferenceError
            TypeError
            RangeError
            URIError
            EvalError


                p465
            Error Objects Continued ********* !!!!!!!!!  SEE MORE
                p466

            Error  (generic error object)
            'The generic Error object is the template (or prototype) from
            which all other error objects are created.'
                p467
            HOW TO DEAL WITH ERRORS  ***
            1. Debug script to fix errors
            2. Handle errors gracefully
                try catch throw finally


                p468
            A Debugging Workflow ** ****  !!

            - WHERE IS THE PROBLEM?
              . check the error message
              . (inserting echos etc): how far is your script running?
              . use breakpoints where things are going wrong
            - WHAT EXACTLY IS THE PROBLEM?
              . check vars at breakpoint, or earlier
              . test smaller pieces of the code
              . check num of param.s for a funct. / items in an array

            'If you are stuck on an error, ...
            try to describe the sit. to another programmer.'
                p469
            Browser Dev Tools and JavaScript Console **!
                f12  /  ka-j
                p470
            Check/Go to error       cs-k  //  ka-k / ka-c(safari)
                p471
            How to Look at Errors in Chrome
                note: line number =         where the interpr. noted(!) there was a problem
                p472
            Look at Errors in Firefox
                console  + js and logging
                (tip: expand minified js code first  =easier to understand
                p473
            Typing in the Console in Chrome
                =quickly testing js code
                clear console       no-entry sign
                p474
            Typing in the Console in Firefox
                clear
                <,  >       =lines you have written / evaluation results


                p475
            Writing From the Script to the Console (**)  ******
                writing to the console =
                console.log()
                console-log.html()
                p476
            Example: Logging Data to the Console  ********
                (log can write several values to the console at the same time) **
                p477
            More Console Methods
                console.info()      black
                console.warn()      yellow
                console.info()      red
                p478
            Grouping Messages (********)        #=create expandable(=block arrow) group **!
                console.group()  ****************
                console.groupEnd()
                p479
            Writing Tabular Data  ******** ****
                console.table()
                p480
            Writing on A Condition  **********
                console.assert()        =WRITE TO THE CONSOLE ONLY IF THE EXPRESSION EVAL.S TO FALSE  **
                p481
            Breakpoints ** ****
                sel. 'sources' (chrome) / 'debugger' (firefox)  + click line/line number (***!)
                check var.s val.s (=at breakpoint (etc??)) ******* ; hold pointer over val  (**)
                p482
            Stepping Through Code (=wh. having set sever. breakpoints)
                run/stop
                 step over(??)
                step through (=line by line)
                step into
                step out
                p483
            Conditional Breakpoints
                rmbclick + Add conditional breakpoint...
                p484
            Debugger Keyword  *******
                place/create keyword  from the code ; debugger;  (+also possible to put in a conditional statement)
                (++ may have to have dev.tools open  for the script to stop at point (and show it in the console))

            tip: 'If you have a development server, ...'
                (=your checking code can be placed in conditional statements  =activating if the code is running on/via a/that specific server)
                p485
            Handling Exceptions     TRY CATCH FINALLY

            try {
              // Try to execute this code
            } catch (exception) {
              // If there is an exception, run this code
            } finally {
              // This always gets executed
            }

              (can be nested, but that can affect performance of a script)

            if using  continue, break, or return  inside a try
                will go to the finally option


                p486
            Example, JSON: Try, Catch, Finally  *******  !!!!
                (=may come from external source)
                p487
            Throwing Errors ***(*)
                generate your own errors (and error messages(??))
            throw new Error('message');
            'NaN is not an error; it is a value that is not a number (!!)


                p488
            Throw Error for NaN  ******* *******


                p489
            Debugging Tips!

            Another Browser
            Add Numbers
            Strip it Back
            Explaining the Code
             Search
            Code Playgrounds
            Validation Toolos
                jslint
                jsonlint
                debugger for jQuery    plugin available for Chrome
                p490
            Common Errors

              back to basics
            capitalization
            implicit global
            escaped quotes in var. values

              missed/extra characters
            ,}  ,)
            Always use parentheses to surround a condition that you are testing.

            'undefined is not the same
            as null: null is for objects,
            undefined is for properties,
            methods, or variables.'

            check that your script has loaded (especially CDN files).
            conflicts betw. script files

              data type issues
            values inside switch statements are strongly typed =type is not checked or coerced autom.

            parseInt()      might have to pass a radix (=number of unique digits (including zero) used to represent the number)  ??
                p491
            SUMMARY
            understanding execution contexts (is useful)  **


                p492
            CHAPTER 11 - CONTENT PANELS (=accordions  etc etc)  (****!!)
                p493
            +creating you own scripts  using jQuery
            lightbox        ="modal window" (??)
              (=points to more complex jQuery plugins extending the functionality here
               +achieving many popular effects, without needing to rely on plugins written by other people)
                p494
            Accordion
            Tabbed Panel
            Modal Window        #displays hidden panel when clicking on win.
            Photo Viewer        #=switching betw. thumbnails (!!)
            Responsive Slider

            Turning the Accordion into a jQuery Plugin ****!!!!


                p495
            Separation of Concerns

            'As a rule, editing your HTML
            templates or stylesheets should not necessitate
            editing your scripts and vice versa.'

            'When your scripts access the DOM, you can
            uncouple them from the HTML by using class
            selectors rather than tag selectors.'
                p496
            Accessibility and No Javascript

            accesibility:
            use links for linking(??) + 'If it acts like a button, use a button'

            no javascript:
            no-js class  (??)


                p497
            ACCORDION **
                usually created within an unordered list
                    +li-elements containing each item
                items contain:
                visible label (eg. a button), a hidden panel w. the content (a <div>)
                    +animated w. jQuery   (or show/hide w. css)

                +'H5 introduces <details>
                and <summary> elements to
                create a similar effect, ...'


                +  liteAccordion  zAccordion
                p498
            the mechanics / schematic of the accordion

            ++  the jQuery .show() .hide() .toggle()
             are all shorthand for animate() ******** !!!!!!
                p499
            Creating the Accordion ******** !!!!!!
                
                preventDefault()
                .not(':animated')

                .slideToggle()      #show panel if hidden  +  hide panel if curr. visib.
                p501
            Tabbed Panel

            unordered list + li:s
            + <div>s
            +links  + id attribs

                + Tabslet  Tabulous
                p503
            Creating Tab Panels     #the flowchart/logic
                p504
            (the Code)
            +=   'emacs-aligning' around '='-signs  (etc)
                p505
            Modal Window

            content typically sit within the page but is hidden when page loads (=using css)
            js then takes the content and displays it inside <div> elements (=on top of win)

                + Colorbox, Lightbox 2, Fancybox
                p506

            this script uses the 'module pattern'
            (keeping some code private + exposing other funct.ality to other scripts w. public methods)

             
                p507
            Creating Modals     #=including the two 'scripts' (??/!)
                modal-init.js
            (.detach() vs .remove())
                p508
            Using the Modal Script
                p509
            Modal Object  (=the logic/flowchart)

            'the steps for creating the modal object'
                p510
            'In the code below, the lines that are highlighted in green
            are considered private.'
                p511
            Photo Viewer   (image gallery w. clickable thumbnails) **

            large <div> that holds main pic.
            <div>s for the other images  sitting within links  (??)

                Galleria  Gallerific  TN3Gallery
                p512
            crossfade()
                p513
            Using the Photo Viewer *
            photo-viewer
                p514
            Asynchronous Loading and Caching Images
            (=two problems  + their solutions )

                p515
            Photo Viewer Script (=flowchart + logic)

            $current

            The Cache Object **
                p516

            Centering the Image
                p517
            Photo Viewer Script  (=flowchart/logic) 2
                p519
            Responsive Slider  **

            <div> for main
            (+ two more contained sliders)

                Unslider  Anything Slider  Nivo Slider  WOW Slider
                    (+jQuery / Bootstrap)
                p520
            explanation logic and mechanics of slide show
            currentIndex
            newSlide
                p521
            Using the Slider

            'The width of the slide-viewer is not fixed, so it
            works in a responsive design. But ...'
                p522
            Slider Script Overview  (!*)

            1. setup
            2. move()
            3. timer ( advance() )
                var timout = setTimeout(function, delay);
                clearTimeout(timeout)
            4. process each of the slides that appear within a slider
                p523
            Slider Script  (flowchart + logic overview)
                p524

            Getting the right gap between slides using a timer  **!
                p525
            Slider move() Function


                p526
            CREATING A JQUERY PLUGIN ****!!     #Accordion
            =can use jQuery's nice selector syntax etc

            You can turn any function into a plugin if it:  ****
            - Manipulates a jQuery selection
            - Can return a jQuery selection

                (+THE ACTUAL MECHANICS (OF SELECTING A DOM OBJ. ETC)) !

                p527
            Basic Plugin Structure  ****

            1. Adding a method to jQuery

            2. Returning the jQuery Selection to Chain Methods

            3. Protecting the Namespace
                p528
            The Accordion Plugin  (flowchart/logic)


            'To use the plugin, ...'

            '3. The this keyword refers to the jQuery selection
            that was passed into the plugin. It is used to create
            an event handler that will listen for when the user
            clicks on an element with a class attribute whose
            value is accordion-control.'
                p529
            'Note how the filename for
            the jQuery plugin starts with
            jquery, ...'

            Including/Using  the new jquery.accordion.js
                p530
                p531
            - Content panels offer ways to show more content
            within a limitide area
                p532
            CHAPTER 12 - Filtering, Searching and Sorting
                p533
            (3 techniques for letting visitors find things on page/site) **


            __ __ __ __ __

                p535
            Array Methods **
            push()
            unshift()
            pop()
            shift()
            forEach()
            some()
            every()
            concat()
            filter()
            sort()
            reverse()
            map()           #call function on each element in array (+creates new array w. results)
                p536
            jQuery methods for filtering and sorting

            .add()
            .not()
            .each()
            .filter()
            .toArray()
                p537
            Supporting Older Browsers

            ECMAScript 5 Shim
                p538
            Arrays vs. Objects - Choosing the Best Data Structures

            Objects in an Array
                person[1].name;

                forEach()

            Objects as Properties

                people.Casey.rate;

                Object.keys

                p539
            Filtering  **

            Object literal for each person + Whole group held in an array.
                p540
            Displaying the Array
                two methods for filtering out from people
                .forEach()  .filter()
                p541                            |------v
            Using Array Methods to Filter Data
                            (.filter()   + function only returns true or false)  ??(?)
                p542
            Example: Static filtering of data
                p543
            Dynamic Filtering  *!/?

            'If you let users filter the contents of a page, you can
            build all of the HTML content, and then show and hide the
            relevant parts as the user interacts with the filters.'  ???

            eg. slider for updating results of a range etc
                # noUiSlider
                p544


            'Here are the tasks that the script needs to perform:' (****)
                p545
            (Storing References to Objects and DOM Nodes)

            "Caching+"  'it also creates a new object for that person and adds it to an array called rows.'
                # ='creates association betweeen ....'   (**(*))

            rows.push({
              person: this,     // person object
              $element: $row    // jQuery collection
                p546
            Dynamic Filtering       ***  (flowchart + logic)
                p547
            (the Example: Filtering an Array)
                p549
            Filtered Image Gallery

            'HTML5 allows you to store any data with an element using an attribute that starts with the word data-. The tags are comma-separated.'

            'By looping through each of the keys on the tagged object, the buttons can automatically be generated.'
                p550
            Tagged Images

            showing(/inspecting(??)) contents of the 'tagged'-object  (??)  in the console
                console.log(tagged);
                p551
            Processing the Tags  (flowchart + logic)
                p552
            Example: The Tagged Object
                p553
            Filtering the Gallery  (flowchart + logic)
                p554
            Example: The Filter Buttons


                p555
            Search *
            livesearch
            indexOf()       # not found  = -1
                p556
            example: Searchable Images

            cache = [
                p557
            Search Text  (flowchart + logic)

            1. Setting up the Cache Object
            2. Filtering Images when User Types in Search Box

                p558
            example: Livesearch  (**)



                p559
            Sorting ** __
                Array   sort()      #def. =lexicographic sort
                'To sort items in a different
                way, you can write a compare
                function ...'
                (+explanation of lexicographic sort)  #=as an algorithm
                p560
            Changing Order Using Compare Functions
                (=write a compare function)
                [compares two values at a time + returns a number]
            <0
            Indicates that it should
            show a before b

            0
            Indicates that the items should
            remain in the same order

            >0
            Indicates that it should
            show b before a

            tip: Can add write to console.log() (inside the function)  to inspect in what order values are being compared *!
                p561
            How Sorting Works **
            "a should go before b"  etc
                p562
            prices.sort(function(a, b) {
              return a - b;
            });
                p563
            Sorting Numbers  *

            ascending numerical
            prices.sort(function(a, b) {
              return a - b;
            });

            descending
            prices.sort(function(a, b) {
              return b - a;
            });

            Random Order
            prices.sort(function() {
              return 0.5 - Math.random;
            });
                p564
            Sorting Dates

            convert into Date object + use  < and >
                p565
            Sorting A Table
            ??
                p566
            '1. The <table> element needs
            to carry a class attribute whose
            value contains sortable.'

            data-sort
                p567
            Compare Functions  (flowchart + logic)

            name()
              =regex
            duration()
            date()

            shorthand:
            return a > b ? 1 : 0
                p568
            example: The Compare Object

            a.replace(/^the /i, '');
                p569
            Sorting Columns
                p570
            example: Sortable Table Script
                p571
            SUMMARY
            - arrays are commonly used to store a set of objects
             .....
             .....
            - Filters often rely on custom functions to check whether items match your criteria.
             using a compare function
            (support older browsers w. shim script)
                p572
            CHAPTER 13 - Form Enhancement and Validation
                p573
            - form enhancements
            - h5 form elements
                validation features not using javascript
            - form validation
                (longest code example in the book =the super 8 validation form)
            'you should not always rely upon jQuery (especially for scripts that use little of its functionality).'


                p575
            Helper Functions        #=one to create events
                'Instead of writing the same fallback code ever
                time you need an event handler, you can write the
                fallback code once in a h.f. and then call
                that function every time you need to add ...'

                utilities.js  **
            addEvent(el, event, callback);
                (checks if browser supports addEventListener()  )

            'two new techniques:'
            'You can add methods to DOM nodes because
            they are just objects (that represent elements).'

                p576
            Utilities File ***(!)
                // Helper function to add an event listener

            '(This could lead to a long method name, but ...'
            '......../flexible-javascript-events/).'
                p577
            The Form Element
                action
                method
                 name
                elements        #accessed via index num / val.s of their name attrib.s

                submit()
                reset()

                submit
                reset

                the 'forms collection'
                 document.forms[1];
                 document.form.login
                
                elements collection


                document.forms[1].elements[0];
                document.forms[1].elements.password;
            Note: 'So, use of index numbers ties a script to the HTML markup (- it does not achieve a separation of concerns).'
                p578
            Form Controls
            '... uses a different combination of the properties, methods and events shown below.'
            'Note that the methods can be used to simulate how a user would interact with the form controls.'
                value
                type
                name
                defaultValue
                form
                disabled
                checked
                defaultChecked
                selected

                focus()
                blur()
                select()
                click()
                
                blur
                focus
                click
                change
                input
                keydown, keyup, keypress
                p579
            Submitting Forms
            msg
                p580
            example: The submit Event and Getting Form Values
                p581
            Changing Type of Input

            'If you know something may cause
            an error for some browsers, placing that code in
            a try...catch statement lets the interpreter
            continue with an alternative set of code.'
                p582
            example: Showing A Password
                p583
            Submit Buttons
            (first disables the button on load)
                p584
            example: Disable Submit Button
                p585
            Checkboxes
                p586
            example: Select All Checkboxes
                p587
            Radio Buttons
                p588
            example: Radio Buttons

                p589
            Select Boxes        #more complex than the other examples **!
                options
                selectedIndex
                length
                multiple  (#)
                selectedOptions

                add(option, before)
                remove(index)
                p590
            html: Select Boxes
                p591
            getModels()     #custom
                p592
            Example: Select Boxes
                // WHEN THE USER CHANGES THE TYPE SELECT BOX
                        // If type is cameras
                p593
            Textarea
                p594
            Character Counter


                p595
            HTML5 Elements and Attributes   ******* !!!!!!!!
             (=not having to use javascript)**

            <input type=search

            <input type="email">
            <input type="url">
            <input type="telephone">

            <input type="number"
              min="0"
              max="10"
              step="2"
              value="6"
                p596
                autofocus
                placeholder
                required
                min
                max
                step
                value
                autocomplete
                pattern             #specify regex =for validation (**)
                novalidate

            <input type="range"
              min="0"
              max="10"
              step="2"
              value="6"

            <input type="color"
              min="0"
              max="10"
              step="2"
              value="6"

            <input type="date"
            <input type="month"
            <input type="week"
            <input type="time"
            <input type="datetime"
                p597
            Support and Styling

            Desktop Browsers
            Mobile              #very usable
                p598
            Current Approaches
            polyfills  (js or jQuery)
              html5please.com
            feature detection
                modernizr conditional loader (=only loads the polyfill if needed)
            Require.js
                p599
            Placeholder Fallback    (=for older browsers etc)
                p600
            example: 
                p601
            Polyfill Using Modernizer and Yepnope[conditional loader =a function]
                            may be included in the <head>
            if (!Modernizr.cssanimations) {
            Mod. + Yepnope
                p602
            example: Conditional Loading of a Polyfill
                yepnope()
                  test
                  yep
                  nope
                  complete
                Modernizr.inputtypes.date
                p603
            FORM VALIDATION (=most involved script in the book)
             'SUPER 8 FILM SOCIETY (BECOME A MEMBER)'
                +=form enhancements
                p604
            example html form inputs: Form HTML
                p605
            Validation Overview

            Generic Checks
            Checking Each Element
                elements.name       yes
                ......
                ......
                p606
            'Some developers proactively cache form elements
            in variables .....  This is a good idea, ...'

            Custom Validation Tasks
            Tracking Valid Elements
                valid.name
                .....
                .....
                .....
                p607
            Dealing w. Errors
            setErrorMessage()
            showErrorMessage()

            'Above you can see a representation of the form and its elements' collection'
                p608
            Submitting the Form
            isFormValid  (=like a flag/master switch)
                p609
            Code Overview

            A: Set up the Script
            B: Perform Generic Checks
            C: Perform Custom Validation
            D: Did the Form Pass Validation?
                p610
            EXAMPLE: THE SCRIPT  +first checks
                p611
            Required Form Elements
                H5  required
                validateRequired()
            a: does it have a required attribute?
            b: if so, does it have a value?
            c: should an error message be set?
                p612
            isRequired()
            isEmpty()

            function isRequired(el) {
              return ((typeof el.required === 'boolean') && el.required) ||
                (typeof el.required === 'string');
            }

            function isEmpty(el) {
              return !el.value || el.value === el.placeholder;
            }

                p613
            Creating Error Messages  **(*)
                .data()
            How Errors are set
            How Data is stored with nodes
                p614
            Displaying Error Messages  **(*)

            How Errors are displayed
                p615
            Validating Different Types of Input
            validateType
                p616
            Creating an Object to Validate Data Types

            var valid = /[^@]+@[^@]+/.test(el.value);       #set of characters commonly found in emails

                p617
            Regular Expressions **(*)
            .
            []
            [^]
            ^
            $

            ()      #'block/capturing group'
            *
            \n
            {m,n}
            \d

            \D
            \s
            \S
            \w
            \W
                p618

            /\d+$/
            number

            /^[ \s]+/
            whitespace at start of line

            /[^@]+@[^@]+/
            email

            /^#[a-fA-F0-9]{6}$/
            hex color value

            /^(\d{2}\/\d{2}\/\d{4})|(\d{4}-\d{2}-\d{2})$/
            date yy-mm-dd
                p619
            Custom Validation  *(*)
            validateBio()               #all three custom
            validatePassword()
            validateParentsConsent()
                p620
            Bio and Password Validation
                p621
            CODE DEPENDENCIES AND REUSE

            Dependencies        #eg. if has included jQuery
                good to note at top of script
            Code Reuse vs. Duplication

            "Every piece of knowledge must
            have a single, unambiguous,
            authoritative representation
            within a system."
                p622
            (Validating Parental Consent)
                p623
            Hide Parental Consent
                p624
            Age Confirmation
                p625
            Password Feedback
                p626
            example: Password Script


                p627
            SUMMARY ******


                doc_newest2019/jsjq-duck.txt
                evince -p 573 ~/Documents/doks/jsjqdc.pdf &
~/Dropbox/rsc/data/lists/ref/comp/cb/jqcb.txt
    ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/jqprogrcb.pdf
    ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/239723226-21-JQuery-UI-Widgets.pdf
    ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/jqcb.pdf
    ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/jqmobcb.pdf
    ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/jquicb.pdf
    ~/Empire/curr-desktop/jq2devcb.pdf
    --
TODO =INCLUDE
. doc_newest2019/ap-a.pdf
                p5
            native code
                p6
            text editor + google chrome
            phonegap solutions need android sdk installed
                p7
            Chapter 1 - Getting Started

            native (=access to the hardware  speakers, accelerometer, camera etc)
                p9
            "freemium"
                p11
            text wrangler  #mac
            notepad2 notepad++  #win
                p12
            tip: test your android web app w. chrome
            body { color: red; }

                p13
            a { font-style: italic; }
            h1 a { font-family: Arial; }
            'your own custom selectors' ** ; adding id/class attributes to your h-tags (**!)
            .loud { font-style: italic; }
            ((+more ideas for id/class names))  **

            advantage of using id (=over class) ** ; selecting by id is much faster (than selecting by class)
                p15
            you can actually link to stylesheets that are hosted on domains other than the one hosting the HTML document ; http://example.com/screen.css  #=testing etc
            (CSS Pocket Reference: Visual Presentation for the Web)
            "Did I say 'crash' course?"  ___skämthumor

            Introduction to JavaScript
            [very simple for loop + if-test: if apple, write 'my favorit!']
                p16
            ((quickcheck  js syntax))
                p17
             charset="utf-8"
                p18
              $('#foo').text('Hi there!');
                p19
            Chapter 2 - Basic Styling
                (=styling the web app to make it feel more like a native app (=style wise and how the style behaves and feels))
            - simple solution for testing webpage on y. android phone ; host on web server running on your computer + connect to the web server running on y. comp. from y. android phone
                p20
            Running a Web Server Locally
            (localhost etc)
            IIS Manager  (on windows)   inetpub

            sudo apt-get install apache2
            sudo a2enmod userdir
            sudo /etc/init.d/apache2 restart
            create dir public_html in your home dir + access w. a URL such as http://local-hostname/~your-username
                p21
            First Steps  ='native styling'  **

                p22
            THE BASIC J.STARK HTML DOK  (**)
                p24
              (Designing w. Web Standards - Jeffrey Zeldman)
                p25
            (separate style sheet for android (=not completely DRY))
            Responsive Web Design -- A list apart (=has article) *(*)

            <link rel="stylesheet" type="text/css"
                  href="android.css" media="only screen and (max-width: 600px)" />
            <link rel="stylesheet" type="text/css"
                  href="desktop.css" media="screen and (min-width: 601px)" />
            WURFL (contains information for identifying huge number of wireless devices)
                ***  SEE MORE (**/!!!)
                p26
            <!--[if IE]>
            .....
            <![endif]-->
            (android browser def. assumed width ; 980 px (??))

            <meta name="viewport" content="user-scalable=no, width=device-width" />
                p27
            ++ ='Setting the viewport to the width of the device' **(!)
                    +'makes your pages much more readable on android'
                p28
            Adding the Android CSS
            'UI conventions that make an Android app look like an Android app'
            (rounded corners, finger-friendly links that look like glossy buttons)
            custom font android uses ; Droid, then Roboto

            formatting the logo link as a clickable title bar


                p30
            'Figure 2-5. A little bit of CSS can go a long way toward enhancing the usability of your Android app'  ****(!)
                p32
            Adding the Android Look and Feel

            add text shadow ***
            text-shadow: 
            background-image:     #adding a gradient (**)

#header ul li:first-child a {
              top-left-radius(??)  etc   8px;
                p34
            '
            pseudoclasses =
            'In other words, you can style things based on characteristics -
            such as where they are in a list, whether they have cursor focus, or if
            they have been clicked - without having to manually update your markup.'

            Adding Basic Behavior with jQuery  *
                (eg. letting user hide top navigation  **)

            <div class="leftButton" onclick="toggleMenu()">Menu</div>


#header div.leftButton {   ****
              .....
              text-shadow: rgba(   ***
                p35
            images/


                p36
            js: Being able to hide the nav menus ****!!
              $(document).ready(function(){
                p37
            '600px (a reasonable maximum width for the most phones).'

            insert css for image 'button pressed'  (*)
                p41
            Chapter 3 - Advanced Styling
                make the pages BEHAVE like an android app
                (Ajax)
            tedious, but makes the website behave much more like an app (!)
                p42
            android.html
            android.css
            jquery.js
            android.js

            'This simple HTML wrapper markup will sit in front of the rest of the site's pages'
                (=Several(!) script files included in the header)
                p44
            'If you want a few functioning links to play with, ...'
            about.html
            blog.html
            consulting-clinic.html
                p45
            'Example 3-3. This bit of JavaScript in android.js converts the links on the page to Ajax requests'
              loadPage(url)
              hijackLinks()
                p46
            'One of my favorite things about JavaScript'  (=can pass functions ass a parameter to another function)
            tip: JavaScript: The Good Parts (+"everything else by Douglas Crockford")
                p47
            Progress Indicator
                p48
            jQuery  Adding a simple progress indicator to page
                p49
            Simulating Real-World Network Performance
             ratelimit
                p50
            Setting the Page Title  (=moving title to toolbar)
                p51
            'I like to remove the progress indicator as the very last action because I
              think it makes the application feel more responsive.'
                p52
            Handling Long Titles  (*!)
             overflow: hidden;
             white-space: nowrap;
             text-overflow: ellipsis;
                p53
            Automatic Scroll-to-Top
                p54
            scrollTo()  #custom
                p55
            (Hijacking Local Links Only)
            'My favorite regex page'  www.regular-expressions.info
            Roll Your Own Back Button   =js + css

            var hist = [];      //global  + not use 'history' keyword
              .....
              .....
            hist.unshift(....
            hist.shift(
                p58
            the 'url-matching' code  (?/*)
            (( hunlock tutorial on js arrays ))
                p59
            -webkit-tap-highlight-color

                p61
            +tip: add css to make button look clicked
                :active     #hm: does not work on android (??)
            use jQuery instead  and an image

            (why can't we use sprites?)
            -webkit-border-image property does not support image offsets


                p62
            Add Launcher Icon for the App
             to Home Screen  ****
                p63
            tips: Icon Design page (Android developer site)

            in android.html
            replace (with) myCustomIcon.png
            <link rel"apple-touch-icon-precomposed" href="myCustomIcon.png"
                p64
            Chapter 4 - Native (feeling) UI Animations  **!

            jQTouch
            calorie-tracking application called Kilo

            five panels: Home, Settings, Dates, Date, New Entry
                p65
            toolbar  edgetoedge  arrow  button  back
            (=Can create and use own classes by modifying existing jQTouch themes // creating own from scratch)

            new html skeleton for Kilo      #using the classes above
                p66
            'For this and other examples in this book, you will need to download jQTouch
            from http://www.jqtouch.com, unzip it, and move the jqtouch and themes
            directories into the same directory as your HTML document. You will also
            need to go into the jqtouch directory and rename the jQuery JavaScript file
            (such as jquery. 1.4.2.min.js) to jquery.js.'

            'Example 4-2. Adding these lines to the head of your document will activate jQTouch 
                p67
            'You can also make your own by duplicating a default theme and making changes'

            Adding the Dates Panel
                p68
            'unique (number) ids, but the same href (ie. #date)'
                p69

            adding the/a new panel **
              <li class="arrow"><a href="#dates">Dates</a></li>
                p70
                p71
            'the HTML for the Date panel' (??)
              #createEntry   +
                p73
            Adding the New Entry Panel

            <form method="post">
                p75
                p76
            Adding the Settings Panel


                p79
            PUTTING IT ALL TOGETHER  (=the complete HTML for the Kilo App) **(*!)
                p81
            'You can customize jQTouch default behavior by sending a variety of property settings into the constructor.'  #eg. like the 'icon' property

            addGlossToIcon
            backSelector
            cacheGetRequests
            cubeSelector
            dissolveSelector
            fadeSelector
            fixedViewport
            flipSelector
            formSelector
            fullScreen
                p82
            fullScreenClass
            icon
            popSelector
            preloadImages
            slideInSelector
            slideUpSelector
            startUpScreen
            statusBar
            submitSelector
            swapSelector
            useAnimations
                p84
            Chapter 5 - Client-Side Data Storage
            web storage (localStorage / sessionStorage)
                p85
            localStorage.setItem('age', 40);
            var age = localStorage.getItem('age');
            localStorage.removeItem('age');
            localStorage.clear();

            localStorage.age = 40 // Set the value of age
            var age = localStorage.age; // Get the value of age
            delete localStorage.age; // Remove age from storage

            kilo.js
                p86
            saveSettings()  # with jQuery

            function saveSettings() {
              ((=uses localStorage
                p87
            function loadSettings() {

            load w. loadSettings  when 'document is ready' (=has loaded)
            ___ZZZZ

                p88
            if (!localStorage.age) {
                            = "";
                p89
            Saving the Selected Date to Session Storage
             .bind('click touchend
            (get dates  etc)
                p90
            Web SQL Database  (???)
                p91
            var bd;
                p92
                p93
            'defined in the global scope because we're going to have to refer to it all over the place'
                p94
            transaction
             executeSql
            Checking your android database (w. Chrome developer tools)  *

                p95
            Inserting Rows (**/?)
                p96
            'INSERT INTO entries (date, calories, food) VALUES (?, ?, ?);' 
                p97
            Error handling
              +may want to execute SQL statements inside the error handler
            roll back
                p99
            entryTemplate ((???))

            gt()  #jQuery
                p100
            kilo.css
                p101
                p102


                p103
            Adding click-events to the buttons for added posts (=has to be added dynamically) ******
                p104

            'Example 5-1. The complete JavaScript listing for Kilo database interaction'
                p106
            Web Database Error Code Reference

            UNKNOWN_ERR
             ......
             ......
             ......
            database
            too_large
            quota
            syntax
            constraint
            timeout


                p108
            Chapter 6 - Going Offline  ** ************  !!!!!!
            the Offline Application Cache ***
            cache manifest file (that you host on your web server)
                p109

            demo.manifest
            CACHE MANIFEST
            index.html
            logo.jpg
            scripts/demo.js
            styles/screen.css
                #you can also use absolute web urls (!!)

            Use a PHP script to generate a dynamic manifest **(*)

            apache:
            AddType text/cache-manifest .manifest


                p110
            (+for Windows/Mac)

            MIME type for manifests (?/******)
                p111

            Getting app to update changes from the Web server  ****  ****
                p112
            updateready  **
            Online Whitelist (+fallback options)

            Network section of manifest


            FALLBACK   +p116
                p115
            'In most cases.....'  *******
                p117
            Running PHP Scripts on Your Web Server
            linux   sudo apt-get install apache 2 php5
            'Macs come with PHP installed, but you need to enable it:'
                p118
            (testing your new PHP installation)

            CREATING A DYNAMIC MANIFEST FILE)   ___PHP
                p119

                p122
            Debugging
            tip: set up console logging in JavaScript
                p123
            cd /var/log/apache2/
            tail -f acces?log

            'Adding the following JavaScript to your web apps during development will make your life a lot easier, ...'



                p126
            Chapter 7 - Going Native

            - access the hardware
            - be submitted to the android market
            PhoneGap
                (=written in js ****)
                p127
            'PhoneGap abstracts the APIs ...'

            - set up a local development environment
            - use the PhoneGap Build service to compile in the cloud

                p128
            Eclipse   (download + install)
            download Android SDK
            Install ADT (from within Eclipse)
            configure ADT: eclipse prefs, select android, add file =downloaded A. SDK
            launch Eclipse  + sel. Android SDK Manager
            select 'version' (eg. platform-tools android 2.1  + if avail.  google usb driver package (extras))

            Download latest copy of PhoneGap
                p130
            Set Up a New Android Project
            - eclipse: new > android proj.
            name
            create new proj. in workspace
            select build target (=2.1 (??))
            appname (eg. Kilo)
            reverse domain name syntax package name (eg. com.jstark.kilo)
            Create activity + app   #=initial class for y. application
             +finish


                p131
            Grab code from PhoneGap  =to include in y. proj./app *******
                p132
            Running Kilo as an Android App


                p134
            Controlling the Phone w. JavaScript  ********

            Beep, Vibrate, Alert
                p138
            Geolocation (*)
                p145
            Accelerometer
                ='set up Kilo to duplicate the last entry in ... list by shaking the phone.'  (**)

              startWatchingShake();
                p149
            Package App as Executable and Submit to Android Market
            - remove debug code
            - set version
            - compile app
            - sign compiled app w. private key
                p151
            Uploading App to Android Market
                p153
            Distributing Your App Directly
                p158
            detecting browsers w. WURFL
              curl


                doc_newest2019/ap-a.txt
. doc_newest2019/ap-i.pdf
MORE DOKS 2024++
            ~/Empire/Doks/Comp/lang/webdev/js/JsDefGuide-7e_2020.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsdefguide_2007.de.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsdefguide_2011.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-industry_2021.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsjoy_2021.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-modimpatient_2020.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-prowebdev-xe_2020.txt
              ~/Empire/Doks/Comp/lang/webdev/js/jshiperform-nodesveltewasm_2020.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jspromises_2022.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-50tips.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-advanced2_2019.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-cleanrobust_2020.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsmodwebdevcb_2018.txt
            ~/Empire/Doks/Comp/lang/webdev/js/ModJs01-thelang_2019.txt
            ~/Empire/Doks/Comp/lang/webdev/js/ModJs02-browserdokseventsinterf_2019.txt
            ~/Empire/Doks/Comp/lang/webdev/js/ModJs03-additartic_2019.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsmodernguide_2019.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-professional_2019.txt
                ~/Empire/Doks/Comp/lang/webdev/js/bootstrap-respdev_2016.txt
            ~/Empire/Doks/Comp/lang/webdev/js/derosa-js-bestpract_2018.txt
            ~/Empire/Doks/Comp/lang/webdev/js/derosa-js-es6pract_2018.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-datastructsalgoslearn_2018.txt
            ~/Empire/Doks/Comp/lang/webdev/js/webdev-offlfirst_2015.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsrediscover-es678_2018.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsrefactor_2017.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jssimplif-modes36plus_2018.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-maintainab_2012.txt
            ~/Empire/Doks/Comp/lang/webdev/js/jsnative-optimize_2017.txt
            ~/Empire/Doks/Comp/lang/webdev/js/js-notesforprof.txt
            ----
                ~/Empire/Doks/Comp/lang/webdev/js/purescript-functweb_2017.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-fullstack_2015.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jsjsoncb_2015.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-protechniques_2015.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jsbeautif_2015.txt
                ~/Empire/Doks/Comp/lang/webdev/js/learningjs_2016.txt
                ~/Empire/Doks/Comp/lang/webdev/js/JsAppProgr_2014.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jsapps-progr_2014.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jssmartlearn.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-byex.it.txt
                ~/Empire/Doks/Comp/lang/webdev/js/webdesblueprints.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jsdespattsmast.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-datastructalgos_2016.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-datastructsalgos_2014.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jseffective_2013.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-funprofit_2014.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-goodpart.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-hackstipstechn.mini.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-handbook_2015.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jsjq-duck.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jsninja_2012.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-oop-3e_2017.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jspatts_2011.ru.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jspattsjumpstart_2013.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-prowebdev-3e_2012.txt
                ~/Empire/Doks/Comp/lang/webdev/js/jsrediscover_2018.aux.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-think_2014.txt
                ~/Empire/Doks/Comp/lang/webdev/js/js-thisobjprotot_2014.txt

~/Empire/Doks/Comp/lang/webdev/js/jsjsoncb.pdf
~/Empire/Doks/Comp/lang/webdev/js/jsjsoncb.txt
            Chapter 1: Reading and Writing JSON on the Client ----
            Reading and writing JSON in JavaScript
            Reading and writing JSON in C++
            Reading and writing JSON in C#
            Reading and writing JSON in Java
            Reading and writing JSON in Perl
            Reading and writing JSON in Python
            Chapter 2: Reading and Writing JSON on the Server ----
            Reading and writing JSON in Clojure
            Reading and writing JSON in F#
            Reading and writing JSON with Node.js
            Reading and writing JSON in PHP
            Reading and writing JSON in Ruby
            Chapter 3: Using JSON in Simple AJAX Applications ----
            Creating an XMLHttpRequest object
            Making an asynchronous request for data
            Sending JSON to your web server
            Accepting JSON using Node.js
            Getting the progress of an asynchronous request
            Parsing the returned JSON
            Issuing a web service request using Node.js
            Chapter 4: Using JSON in AJAX Applications with jQuery and AngularJS ----
            Adding a dependency to jQuery to your web page
            Requesting JSON content using jQuery
            Sending JSON to your web server using jQuery
            Getting the progress of a request using jQuery
            Parsing the returned JSON using jQuery
            Adding a dependency to AngularJS to your web page
            Requesting JSON content using AngularJS
            Sending JSON to your web server using AngularJS
            Getting the progress of a request using AngularJS
            Parsing the returned JSON using AngularJS
            Chapter 5: Using JSON with MongoDB ----
            Setting up MongoDB
            Installing the MongoDB database driver for Node.js
            Installing the express module for Node.js
            Connecting to a MongoDB database using Node.js
            Creating a document in MongoDB using Node.js
            Searching for a document in MongoDB with Node.js
            Updating a document in MongoDB with Node.js
            Deleting a document in MongoDB using Node.js
            Using REST to search MongoDB
            Using REST to create a document in MongoDB
            Using REST to update a document in MongoDB
            Using REST to delete a document in MongoDB
            Chapter 6: Using JSON with CouchDB ----
            Installing and setting up CouchDB and Cradle
            Connecting to a CouchDB database using Node.js and Cradle
            Creating a CouchDB database using Node.js and Cradle
            Creating a document in CouchDB using Node.js and Cradle
            Setting up a data view in CouchDB with Node.js and Cradle
            Searching for a document in CouchDB with Node.js and Cradle
            Updating a document in CouchDB with Node.js and Cradle
            Deleting a document in CouchDB using Node.js and Cradle
            Using REST to enumerate CouchDB records
            Using REST to search CouchDB
            Using REST to upsert a document in CouchDB
            Using REST to delete a document in CouchDB
            Chapter 7: Using JSON in a Type-safe Manner ----
            How to deserialize an object using Json.NET
            How to handle date and time objects using Json.NET
            How to deserialize an object using gson for Java
            How to use TypeScript with Node.js
            How to annotate simple types using TypeScript
            How to declare interfaces using TypeScript
            How to declare classes with interfaces using TypeScript
            Using json2ts to generate TypeScript interfaces from your JSON
            Chapter 8: Using JSON for Binary Data Transfer ----
            Encoding binary data as a base64 string using Node.js
            Decoding binary data from a base64 string using Node.js
            Encoding and decoding binary data as a base64 string using JavaScript
            in the browser
            Encoding data as BSON using Json.NET
            Decoding data from BSON using Json.NET
            Using a DataView to access an ArrayBuffer
            Encoding and decoding base64 using an ArrayBuffer
            Compressing object-body content from a Node.js server built using
            the express module
            Chapter 9: Querying JSON with JSONPath and LINQ ----
            Using the JSONPath dot-notation to query JSON documents
            Using JSONPath bracket-notation to query JSON documents
            Using JSONPath scripting to construct more complicated queries
            Using JSONPath in your web application
            Using JSONPath in your Node.js application
            Using JSONPath in your PHP application
            Using JSONPath in your Python application
            Using JSONPath in your Java application
            Using JSONPath with SelectToken to query for JSONPath expressions in your C# application
            Using LINQ with Json.NET to query JSON in your C# application
            Chapter 10: JSON on Mobile Platforms ----
            Parsing JSON on Android
            Generating JSON on Android
            Parsing JSON on iOS in Objective-C
            Generating JSON on iOS in Objective-C
            Parsing JSON on iOS using Swift
            Generating JSON on iOS using Swift
            Parsing JSON using Qt
            Generating JSON using Qt


https://cheatography.com/kitallis/cheat-sheets/reactjs/
            Using components

            var Component = React.createClass({ ... });

            var compo = React.render(<Component />, mountnode);

            Before Rendering

            React.createClass({
              componentWillMount: function () {
                $.get(this.props.url, function (data) {
                  this.setState(data);
                });
              },

              render: function () {
                return (
                  <CommentList data={this.state.data} />
                );
              }
            });

            Default Properties

            React.createClass({
              getDefaultProps: function () {
                return {name: ''};
              }
            );

            Initial States

            React.createClass({
              getInitialState: function () {
                return {data: []};
              },

              render: function () {
                return (
                  <CommentList data={this.state.data} />
                );
              }
            });

            Lifecycle

            componentWillMount()
            componentDidMount()

            // not on initial render
            componentWillReceiveProps(props)
            shouldComponentUpdate(props, state)
            componentWillUpdate(props, state)
            componentDidUpdate(prevProps, prevState)

            componentWillUnmount()

            // ...there is no DidUnmount or ReceiveState.

            Methods

            {
              render: function()
              getInitialState: function()
              getDefaultProps: function()
              mixins: []
              propTypes: {}       / for validation /
              statics: { .. }     / static methods /
              displayName: '..'   / automatically filled in by jsx /
            }

            API

            c.getDOMNode() // deprecated 0.13
            React.findDOMNode(c) // 0.13+

            c.forceUpdate()
            c.isMounted()

            Properties

            this.setProps({ fullscreen: true });
            this.props.fullscreen === true

            this.replaceProps({ ... });

            States

            this.setState({ editing: true });
            this.state.editing === true

            this.replaceState({ ... });

            Basic class

            React.createClass({
              render: function () {
                return (
                  <div>Hello {this.props.name}</div>
                );
              }
            });

                    
            Actions

            <form onSubmit={this.handleSubmit}>
              Name: <input ref="name">
            </form>

            React.createClass({
              handleSubmit: function (event) {
                name = this.refs['name'].getDOMNode().value;
                // see two-way binding below
              }
            })

            Two-way binding

            React.createClass({
              mixins: [React.addons.LinkedStateMixin],
              getInitialState: function() {
                return {value: 'Hello!'};
              },
              render: function() {
                return <input type="text" valueLink={this.linkState('value')} />;
              }
            });
            // LinkedStateMixin adds a method to your React component called
            // linkState().

            Lists

            var TodoList = React.createClass({
              render: function() {
                var createItem = function(itemText) {
                  return <li>{itemText}</li>;
                };
                return <ul>{this.props.items.map(createItem)}</ul>;
              }
            });

            Property valida­tions

            React.createClass({
              propTypes: {
                // required
                requiredFunc: React.PropTypes.func.isRequired,
                requiredAny: React.PropTypes.any.isRequired,

                // primitives, optional by default
                bool: React.PropTypes.bool,
                func: React.PropTypes.func,
                number: React.PropTypes.number,
                string: React.PropTypes.string,
              }
            });

            Class set

            render: function() {
              var cx = React.addons.classSet;
              var classes = cx({
                'message': true,
                'message-important': this.props.isImportant,
                'message-read': this.props.isRead
              });
              // same final string, but much cleaner
              return <div className={classes}>Great Scott!</div>;
            }

            Propag­ating properties to children

            var VideoPlayer = React.createClass({
              render: function() {
                return <VideoEmbed {...this.props} controls='false' />;
              }
            });

            <VideoPlayer src="video.mp4" />

            Mixins

            var TickTock = React.createClass({
              mixins: [SetIntervalMixin]
            }

            SetIntervalMixin = {
              componentWillMount: function() { .. }
            }

            Source
            Thanks to http:/­/ri­cos­tac­ruz.co­m/c­hea­tsh­eet­s/r­eac­t.html
https://www.freecodecamp.org/news/the-react-cheatsheet/
            React Elements

            React elements are written just like regular HTML elements. You can write any valid HTML element in React.

            <h1>My Header</h1>
            <p>My paragraph>
            <button>My button</button>

            We write React elements using a feature called JSX.

            However, because JSX is really just JavaScript functions (and not HTML), the syntax is a bit different.

            Unlike HTML, single-tag elements (like the img element), must be self-closing. They must end in a forward slash /:

            <img src="my-image.png" />
            <br />
            <hr />

            React Element Attributes

            Additionally, JSX requires a different syntax for its attributes.

            Since JSX is really JavaScript and JavaScript uses a camelcase naming convention (that is, “camelCase”), attributes are written differently than HTML.

            The most common example is the class attribute, which we write as className.

            <div className="container"></div>

            React Element Styles

            To apply inline styles, instead of using double quotes (“”), we use two sets of curly braces.

            Inline styles are not written as plain strings, but as properties on objects:

            <h1 style={{ fontSize: 24, margin: '0 auto', textAlign: 'center' }}>My header</h1>

            React Fragments

            React also gives us an element called a fragment.

            React requires that all returned elements be returned within a single “parent” component.

            For example, we can’t return two sibling elements, like an h1 and a paragraph from a component:

            // this syntax is invalid
            function MyComponent() {
              return (
                <h1>My header</h1>
                </p>My paragraph</p>
              );
            } 

            If we don’t want to wrap our elements in a container element like a div, we can use a fragment:

            // valid syntax
            function MyComponent() {
              return (
                <>
                  <h1>My header</h1>
                  </p>My paragraph</p>
                </>
              );
            } 

            We can write fragments in a regular or shorthand syntax: <React.Fragment></React.Fragment> or <></>.
            React Components

            We can organized groups of elements into React components.

            A basic function component is written similarly to a regular JavaScript function with a couple of differences.

                Component names must start with a capital letter (that is, MyComponent, instead of myComponent)
                Components, unlike JavaScript functions, must return JSX.

            Here is the basic syntax of a React function component:

            function App() {
              return (
                 <div>Hello world!</div>
              );
            } 

            React Props

            React components can accept data passed to them called props.

            Props are passed from the parent component to a child component.

            Here we are passing a prop name from App to the User component.

            function App() {
              return <User name="John Doe" />
            }

            function User(props) {
              return <h1>Hello, {props.name}</h1>; // Hello, John Doe!
            }

            Props is an object, so we can select the name prop within User to get its value.

                To embed any dynamic value (that is, a variable or expression) within JSX, you must wrap it in curly braces.

            Since we are only using the name property on the props object, we can make our code simpler with object destructuring:

            function App() {
              return <User name="John Doe" />
            }

            function User({ name }) {
              return <h1>Hello, {name}!</h1>; // Hello, John Doe!
            }

            Any JavaScript value can be passed as a prop, including other elements and components.
            React Children Props

            Props can also be passed by placing data between the opening and closing tags of a component.

            Props that are passed this way are placed on the children property.

            function App() {
              return (
               <User>
                 <h1>Hello, John Doe!</h1>
               </User>
              );
            }

            function User({ children }) {
              return children; // Hello, John Doe!
            }

            React Conditionals

            React components and elements can be conditionally displayed.

            One approach is to create a separate return with an if-statement.

            function App() {
                const isAuthUser = useAuth();

              if (isAuthUser) {
                // if our user is authenticated, let them use the app
                return <AuthApp />;
              }

              // if user is not authenticated, show a different screen
              return <UnAuthApp />;
            }

            If you want to write a conditional within a return statement, however, you must use a conditional that resolves to a value.

            To use the ternary operator, wrap the entire conditional in curly braces.

            function App() {
                const isAuthUser = useAuth();

              return (
                <>
                  <h1>My App</h1>
                  {isAuthUser ? <AuthApp /> : <UnAuthApp />}
                </>
              ) 
            }

            React Lists

            Lists of React components can be output using the .map() function.

            .map() allows us to loop over arrays of data and output JSX.

            Here we are outputting a list of soccer players using the SoccerPlayer component.

            function SoccerPlayers() {
              const players = ["Messi", "Ronaldo", "Laspada"];

              return (
                <div>
                  {players.map((playerName) => (
                    <SoccerPlayer key={playerName} name={playerName} />
                  ))}
                </div>
              );
            }

            Whenever you are looping over an array of data, you must include the key prop on the element or component over which you are looping.

            Additionally, this key prop must be given a unique value, not just an element index.

            In the example above, we are using a value which we know to be unique, which is the playerName.
            React Context

            React context allows us to pass data to our component tree without using props.

            The problem with props is that sometimes we pass them through components that don’t need to receive them. This problem is called props drilling.

            Here is a oversimplified example of passing props through a Body component that doesn’t need it:

            function App() {
              return (
                <Body name="John Doe" />
              );
            } 

            function Body({ name }) {
              return (
                <Greeting name={name} />
              );
            } 

            function Greeting({ name }) {
              return <h1>Welcome, {name}</h1>;
            }

                Before using Context, its best to see if our components can be better organized to avoid passing props through components that don’t need it.

            To use Context, we use the createContext function from React.

            We can call it with an initial value to be put on context.

            The created context includes a Provider and a Consumer property, which are each components.

            We wrap the Provider around the component tree that we want to pass the given value down. Next, we place the Consumer in the component we want to consume the value.

            import { createContext } from 'react';

            const NameContext = createContext('');

            function App() {
              return (
                <NameContext.Provider value="John Doe">
                  <Body />
                <NameContext.Provider>
              );
            } 

            function Body() {
              return <Greeting />;
            } 

            function Greeting() {
              return (
                <NameContext.Consumer>
                  {name => <h1>Welcome, {name}</h1>}
                </NameContext.Consumer>
              );
            }

            React Hooks

            React hooks were introduced in React version 16.8 as a way to easily add reusable, stateful logic to React function components.

            Hooks let us use all the features that were previously only available in class components.

            Additionally, we can create our own custom hooks that give our app custom functionality.

            Many React hooks were added to the core React library as well. We are going to cover the 6 essential hooks you absolutely need to know:

                useState
                useEffect
                useRef
                useContext
                useCallback
                useMemo

            React useState Hook

            useState does exactly what it says—it allows us to use stateful values in function components.

            useState is used instead of a simple variable because when state is updated, our component re-renders, usually to display that updated value.

            Like all hooks, we call useState at the top of our component and can pass it an initial value to put on its state variable.

            We use array destructuring on the value returned from useState to access (1) the stored state and (2) a function to update that state.

            import { useState } from 'react';

            function MyComponent() {
              const [stateValue, setStateValue] = useState(initialValue);
            }

            A basic example of using useState is to increment a counter.

            We can see the current count from the count variable and can increment the state by passing count + 1 to the setCount function.

            import { useState } from 'react';

            function Counter() {
              const [count, setCount] = useState(0);

              function updateCount() {
                setCount(count + 1);
              }

              return <button onClick={updateCount}>Count is: {count}</button>;
            }

            React useEffect Hook

            If we want to interact with the “outside world”, such as using an API, we use the useEffect hook.

            useEffect is used to perform a side effect, which means to perform an operation that exists outside of our app that doesn’t have a predictable result.

            The basic syntax of useEffect requires a function as a first argument and an array as the second argument.

            import { useEffect } from 'react';

            function MyComponent() {
               useEffect(() => {
                 // perform side effect here
               }, []);
            }

            If we want to fetch data, we would use useEffect, such as in fetching and displaying a list of posts:

            import { useEffect } from 'react';

            function PostList() {
                 const [posts, setPosts] = useState([]);

               useEffect(() => {
                   fetch('https://jsonplaceholder.typicode.com/posts')
                   .then(response => response.json())
                   .then(posts => setPosts(posts));
               }, []);

               return posts.map(post => <Post key={post.id} post={post} />
            }

            If we need to use a value that comes from outside the effect function, it must be included in the dependencies array.

            If that value changes, the effect function will be re-executed.

            For example, here is a bit of code that adds or removes the class “overflow-hidden” to the body element whenever the mobile menu is opened or closed.

            function Mobile({ open }) {
              useEffect(() => {
                const body = document.querySelector("#__next");

                if (open) {
                  body.classList.add("overflow-hidden");
                } else {
                  body.classList.remove("overflow-hidden");
                }
              }, [open]);
             
              // ...
            }

            React useRef

            useRef allows us to get direct access to a JSX element.

            To use useRef, call it, get the returned value, and put it on the ref prop for a given React element.

                Refs do not have a built-in prop on components, only React elements.

            Here is the basic syntax for useRef:

            import { useRef } from 'react';

            function MyComponent() {
              const ref = useRef();

              return <div ref={ref} />
            }

            Once a ref is attached to a given element, we can use the value stored on ref.current to access the element itself.

            For example, if we wanted to write some code that focuses a search input when the users use the key combination Control + K.

            import { useWindowEvent } from "@mantine/hooks";
            import { useRef } from "react";

            function Header() {
                const inputRef = useRef();

              useWindowEvent("keydown", (event) => {
                if (event.code === "KeyK" && event.ctrlKey) {
                  event.preventDefault();
                  inputRef.current.focus();
                }
              });
              
              return <input ref={inputRef} />
            }

            React useContext

            useContext provides an easier way of consuming context than using the standard Context.Consumer component.

            The syntax involves passing the entire Context object that we want to consume into useContext. The returned value is the value passed down to Context.

            import { useContext } from 'react';

            function MyComponent() {
              const value = useContext(Context);

              // ...
            }

            To rewrite our example from earlier, using the useContext hook:

            import { createContext, useContext } from 'react';

            const NameContext = createContext('');

            function App() {
              return (
                <NameContext.Provider value="John Doe">
                  <Body />
                <NameContext.Provider>
              );
            } 

            function Body() {
              return <Greeting />;
            } 

            function Greeting() {
                const name = useContext(NameContext);

              return (
                <h1>Welcome, {name}</h1>
              );
            }

            React useCallback

            useCallback is a hook that we use to help with our app's performance.

            Specifically, it prevents functions from being recreated every time our component re-renders, which can hurt the performance of our app.

            If we go back to our PlayerList example from earlier and add the ability to add players to our array, when we pass down a function to remove them (handleRemovePlayer) via props, the function will be recreated every time.

            The way to fix this is to wrap our callback function in useCallback and to include its one argument player in the dependencies array:

            function App() {
              const [player, setPlayer] = React.useState("");
              const [players, setPlayers] = React.useState(["Messi", "Ronaldo", "Laspada"]);

              function handleChangeInput(event) {
                setPlayer(event.target.value);
              }
              function handleAddPlayer() {
                setPlayers(players.concat(player));
              }
              const handleRemovePlayer = useCallback(player => {
                setPlayers(players.filter((p) => p !== player));
              }, [players])

              return (
                <>
                  <input onChange={handleChangeInput} />
                  <button onClick={handleAddPlayer}>Add Player</button>
                  <PlayerList players={players} handleRemovePlayer={handleRemovePlayer} />
                </>
              );
            }

            function PlayerList({ players, handleRemovePlayer }) {
              return (
                <ul>
                  {players.map((player) => (
                    <li key={player} onClick={() => handleRemovePlayer(player)}>
                      {player}
                    </li>
                  ))}
                </ul>
              );
            }

            React useMemo

            useMemo is another performance hook that allows us to ‘memoize’ a given operation.

            Memoization makes it possible to remember the result of expensive calculations when they have already been made so we don’t have to make them again.

            Like useEffect and useCallback, useMemo accepts a callback function and a dependencies array.

            Unlike both of these functions, however, useMemo is intended to return a value.

                You must return the value either explicitly with the return keyword or implicitly but using the arrow function shorthand (seen below).

            A real-world example of useMemo comes from the mdx-bundler documentation. mdx-bundler is a library for converting .mdx files into React components.

            Here it uses useMemo to convert a raw string of code into a React component.

            import * as React from 'react'
            import {getMDXComponent} from 'mdx-bundler/client'

            function Post({code, frontmatter}) {
              const Component = React.useMemo(() => getMDXComponent(code), [code]);

              return (
                <>
                  <header>
                    <h1>{frontmatter.title}</h1>
                    <p>{frontmatter.description}</p>
                  </header>
                  <main>
                    <Component />
                  </main>
                </>
              )
            }

            The reason for doing so is to prevent the Component value from being recreated unnecessarily when the component re-renders.

            useMemo therefore will only execute its callback function if the code dependency changes.
            Enjoyed this tutorial? Here's a special bonus.

            Reading tutorials are a great way to learn React, but there is no replacement for hands-on coding.

            Introducing: the Learn React app
                https://www.learnreact.app/

            The Learn React app is an interactive learning experience designed to make you a confident React developer through 100s of fun challenges.

            Ready to level up your React skills? Click the link below to get started!
https://www.freecodecamp.org/news/react-for-beginners-cheatsheet/
            React Basics
            What is React, really?

            React is officially defined as a "JavaScript library for creating user interfaces," but what does that really mean?

            React is a library, made in JavaScript and which we code in JavaScript, to build great applications that run on the web.
            What do I need to know to learn React?

            In other words, you do need to have a basic understanding of JavaScript to become a solid React programmer?

            The most basic JavaScript concepts you should be familiar with are variables, basic data types, conditionals, array methods, functions, and ES modules.

            How do I learn all of these JavaScript skills? Check out the comprehensive guide to learn all of the JavaScript you need for React.
            If React was made in JavaScript, why don't we just use JavaScript?

            React was written in JavaScript, which was built from the ground up for the express purpose of building web applications and gives us tools to do so.

            JavaScript is a 20+ year old language which was created for adding small bits of behavior to the browser through scripts and was not designed for creating complete applications.

            In other words, while JavaScript was used to create React, they were created for very different purposes.
            Can I use JavaScript in React applications?

            Yes! You can include any valid JavaScript code within your React applications.

            You can use any browser or window API, such as geolocation or the fetch API.

            Also, since React (when it is compiled) runs in the browser, you can perform common JavaScript actions like DOM querying and manipulation.
            How to Create React Apps
            Three different ways to create a React application

                Putting React in an HTML file with external scripts
                Using an in-browser React environment like CodeSandbox
                Creating a React app on your computer using a tool like Create React App

            What is the best way to create a React app?

            Which is the best approach for you? The best way to create your application depends on what you want to do with it.

            If you want to create a complete web application that you want to ultimately push to the web, it is best to create that React application on your computer using a tool like Create React App.

            If you are interested in creating React apps on your computer, check out the complete guide to using Create React App.

            The easiest and most beginner-friendly way to create and build React apps for learning and prototyping is to use a tool like CodeSandbox. You can create a new React app in seconds by going to react.new!
            JSX Elements
            JSX is a powerful tool for structuring applications

            JSX is meant to make creating user interfaces with JavaScript applications easier.

            It borrows its syntax from the most widely used programming language: HTML. As a result, JSX is a powerful tool to structure our applications.

            The code example below is the most basic example of a React element which displays the text "Hello World":

            <div>Hello React!</div>

            Note that to be displayed in the browser, React elements need to be rendered (using ReactDOM.render()).
            How JSX is different from HTML

            We can write valid HTML elements in JSX, but what differs slightly is the way some attributes are written.

            Attributes that consist of multiple words are written in the camel-case syntax (like className) and have different names than standard HTML (class).

            <div id="header">
              <h1 className="title">Hello React!</h1>
            </div>

            JSX has this different way of writing attributes because it is actually made using JavaScript functions (more on this later).
            JSX must have a trailing slash if it is made of one tag

            Unlike standard HTML, elements like input, img, or br must close with a trailing forward slash for it to be valid JSX.

            <input type="email" /> // <input type="email"> is a syntax error

            JSX elements with two tags must have a closing tag

            Elements that should have two tags, such as div, main or button, must have their closing, second tag in JSX, otherwise it will result in a syntax error.

            <button>Click me</button> // <button> or </button> is a syntax error

            How JSX elements are styled

            Inline styles are written differently as well as compared to plain HTML.

                Inline styles must not be included as a string, but within an object.
                Once again, the style properties that we use must be written in the camel-case style.

            <h1 style={{ color: "blue", fontSize: 22, padding: "0.5em 1em" }}>
              Hello React!
            </h1>;

            Style properties that accept pixel values (like width, height, padding, margin, etc), can use integers instead of strings. For example, fontSize: 22 instead of fontSize: "22px".
            JSX can be conditionally displayed

            New React developers may be wondering how it is beneficial that React can use JavaScript code.

            One simple example if that to conditionally hide or display JSX content, we can use any valid JavaScript conditional, like an if statement or switch statement.

            const isAuthUser = true;

            if (isAuthUser) {
              return <div>Hello user!</div>   
            } else {
              return <button>Login</button>
            }

            Where are we returning this code? Within a React component, which we will cover in a later section.
            JSX cannot be understood by the browser

            As mentioned above, JSX is not HTML, but is composed of JavaScript functions.

            In fact, writing <div>Hello React</div> in JSX is just a more convenient and understandable way of writing code like the following:

            React.createElement("div", null, "Hello React!")

            Both pieces of code will have the same output of "Hello React".

            To write JSX and have the browser understand this different syntax, we must use a transpiler to convert JSX to these function calls.

            The most common transpiler is called Babel.
            React Components
            What are React components?

            Instead of just rendering one or another set of JSX elements, we can include them within React components.

            Components are created using what looks like a normal JavaScript function, but it's different in that it returns JSX elements.

            function Greeting() {
              return <div>Hello React!</div>;   
            }

            Why use React components?

            React components allow us to create more complex logic and structures within our React application than we would with JSX elements alone.

            Think of React components as our custom React elements that have their own functionality.

            As we know, functions allow us to create our own functionality and reuse it where we like across our application.

            Components are reusable wherever we like across our app and as many times as we like.
            Components are not normal JavaScript functions

            How would we render or display the returned JSX from the component above?

            import React from 'react';
            import ReactDOM from 'react-dom';

            function Greeting() {
              return <div>Hello React!</div>;   
            }

            ReactDOM.render(<Greeting />, document.getElementById("root));

            We use the React import to parse the JSX and ReactDOM to render our component to a root element with the id of "root."
            What can React components return?

            Components can return valid JSX elements, as well as strings, numbers, booleans, the value null, as well as arrays and fragments.

            Why would we want to return null? It is common to return null if we want a component to display nothing.

            function Greeting() {
              if (isAuthUser) {
                return "Hello again!";   
              } else {
                return null;
              }
            }

            Another rule is that JSX elements must be wrapped in one parent element. Multiple sibling elements cannot be returned.

            If you need to return multiple elements, but don't need to add another element to the DOM (usually for a conditional), you can use a special React component called a fragment.

            Fragments can be written as <></> or when you import React into your file, with <React.Fragment></React.Fragment>.

            function Greeting() {
              const isAuthUser = true;  
                
              if (isAuthUser) {
                return (
                  <>
                    <h1>Hello again!</h1>
                    <button>Logout</button>
                  </>
                );
              } else {
                return null;
              }
            }

            Note that when attempting to return a number of JSX elements that are spread over multiple lines, we can return it all using a set of parentheses () as you see in the example above.
            Components can return other components

            The most important thing components can return is other components.

            Below is a basic example of a React application contained with in a component called App that returns multiple components:

            import React from 'react';
            import ReactDOM from 'react-dom';

            import Layout from './components/Layout';
            import Navbar from './components/Navbar';
            import Aside from './components/Aside';
            import Main from './components/Main';
            import Footer from './components/Footer';

            function App() {
              return (
                <Layout>
                  <Navbar />
                  <Main />
                  <Aside />
                  <Footer />
                </Layout>
              );
            }

            ReactDOM.render(<App />, document.getElementById('root'));

            This is powerful because we are using the customization of components to describe what they are (that is, the Layout) and their function in our application. This tells us how they should be used just by looking at their name.

            Additionally, we are using the power of JSX to compose these components. In other words, to use the HTML-like syntax of JSX to structure them in an immediately understandable way (like the Navbar is at the top of the app, the Footer at the bottom, and so on).
            JavaScript can be used in JSX using curly braces

            Just as we can use JavaScript variables within our components, we can use them directly within our JSX as well.

            There are a few core rules to using dynamic values within JSX, though:

                JSX can accept any primitive values (strings, booleans, numbers), but it will not accept plain objects.
                JSX can also include expressions that resolve to these values.

            For example, conditionals can be included within JSX using the ternary operator, since it resolves to a value.

            function Greeting() {
              const isAuthUser = true;  
                
              return <div>{isAuthUser ? "Hello!" : null}</div>;
            }

            Props in React
            Components can be passed values using props

            Data passed to components in JavaScript are called props.

            Props look identical to attributes on plain JSX/HTML elements, but you can access their values within the component itself.

            Props are available in parameters of the component to which they are passed. Props are always included as properties of an object.

            ReactDOM.render(
              <Greeting username="John!" />,
              document.getElementById("root")
            );

            function Greeting(props) {
              return <h1>Hello {props.username}</h1>;
            }

            Props cannot be directly changed

            Props must never be directly changed within the child component.

            Another way to say this is that props should never be mutated, since props are a plain JavaScript object

            // We cannot modify the props object:
            function Header(props) {
              props.username = "Doug";

              return <h1>Hello {props.username}</h1>;
            }

            Components are considered pure functions. That is, for every input, we should be able to expect the same output. This means we cannot mutate the props object, only read from it.
            Special props: the children prop

            The children prop is useful if we want to pass elements / components as props to other components

            The children prop is especially useful for when you want the same component (such as a Layout component) to wrap all other components.

            function Layout(props) {
              return <div className="container">{props.children}</div>;
            }

            function IndexPage() {
              return (
                <Layout>
                  <Header />
                  <Hero />
                  <Footer />
                </Layout>
              );
            }

            function AboutPage() {
              return (
                <Layout>
                  <About />
                  <Footer />
                </Layout>
              );
            }

            The benefit of this pattern is that all styles applied to the Layout component will be shared with its child components.
            Lists and Keys in React
            How to iterate over arrays in JSX using map

            How do we displays lists in JSX using array data? We use the .map() function to convert lists of data (arrays) into lists of elements.

            const people = ["John", "Bob", "Fred"];
            const peopleList = people.map((person) => <p>{person}</p>);

            You can use .map() for components as well as plain JSX elements.

            function App() {
              const people = ["John", "Bob", "Fred"];

              return (
                <ul>
                  {people.map((person) => (
                    <Person name={person} />
                  ))}
                </ul>
              );
            }

            function Person({ name }) {
              // we access the 'name' prop directly using object destructuring
              return <p>This person's name is: {name}</p>;
            }

            The importance of keys in lists

            Each React element within a list of elements needs a special key prop.

            Keys are essential for React to be able to keep track of each element that is being iterated over with the .map() function.

            React uses keys to performantly update individual elements when their data changes (instead of re-rendering the entire list).

            Keys need to have unique values to be able to identify each of them according to their key value.

            function App() {
              const people = [
                { id: "Ksy7py", name: "John" },
                { id: "6eAdl9", name: "Bob" },
                { id: "6eAdl9", name: "Fred" },
              ];

              return (
                <ul>
                  {people.map((person) => (
                    <Person key={person.id} name={person.name} />
                  ))}
                </ul>
              );
            }

            State and Managing Data in React
            What is state in React?

            State is a concept that refers to how data in our application changes over time.

            The significance of state in React is that it is a way to talk about our data separately from the user interface (what the user sees).

            We talk about state management, because we need an effective way to keep track of and update data across our components as our user interacts with it.

            To change our application from static HTML elements to a dynamic one that the user can interact with, we need state.
            Examples of how to use state in React

            We need to manage state often when our user wants to interact with our application.

            When a user types into a form, we keep track of the form state in that component.

            When we fetch data from an API to display to the user (such as posts in a blog), we need to save that data in state.

            When we want to change data that a component is receiving from props, we use state to change it instead of mutating the props object.
            Introduction to React hooks with useState

            The way to "create" state is React within a particular component is with the useState hook.

            What is a hook? It is very much like a JavaScript function, but can only be used in a React function component at the top of the component.

            We use hooks to "hook into" certain features, and useState gives us the ability to create and manage state.

            useState is an example of a core React hook that comes directly from the React library: React.useState.

            import React from 'react';

            function Greeting() {
              const state = React.useState("Hello React");  
                
              return <div>{state[0]}</div> // displays "Hello React"
            }

            How does useState work? Like a normal function, we can pass it a starting value (like "Hello React").

            What is returned from useState is an array. To get access to the state variable and its value, we can use the first value in that array: state[0].

            There is a way to improve how we write this, however. We can use array destructuring to get direct access to this state variable and call it what we like, such as title.

            import React from 'react';

            function Greeting() {
              const [title] = React.useState("Hello React");  
                
              return <div>{title}</div> // displays "Hello React"
            }

            What if we want to allow our user to update the greeting they see? If we include a form, a user can type in a new value. However, we need a way to update the initial value of our title.

            import React from "react";

            function Greeting() {
              const [title] = React.useState("Hello React");

              return (
                <div>
                  <h1>{title}</h1>
                  <input placeholder="Update title" />
                </div>
              );
            }

            We can do so with the help of the second element in the array that useState returns. It is a setter function, to which we can pass whatever value we want the new state to be.

            In our case, we want to get the value that is typed into the input when a user is in the process of typing. We can get it with the help of React events.
            What are events in React?

            Events are ways to get data about a certain action that a user has performed in our app.

            The most common props used to handle events are onClick (for click events), onChange (when a user types into an input), and onSubmit (when a form is submitted).

            Event data is given to us by connecting a function to each of these props listed (there are many more to choose from than these three).

            To get data about the event when our input is changed, we can add onChange on input and connect it to a function that will handle the event. This function will be called handleInputChange:

            import React from "react";

            function Greeting() {
              const [title] = React.useState("Hello React");

              function handleInputChange(event) {
                console.log("input changed!", event);
              }

              return (
                <div>
                  <h1>{title}</h1>
                  <input placeholder="Update title" onChange={handleInputChange} />
                </div>
              );
            }

            Note that in the code above, a new event will be logged to the browser's console whenever the user types into the input

            Event data is provided to us as an object with many properties which are dependent upon the type of event.
            How to update state in React with useState

            To update state with useState, we can use the second element that useState returns to us in its array.

            This element is a function that will allow us to update the value of the state variable (the first element). Whatever we pass to this setter function when we call it will be put in state.

            import React from "react";

            function Greeting() {
              const [title, setTitle] = React.useState("Hello React");

              function handleInputChange(event) {
                setTitle(event.target.value);
              }

              return (
                <div>
                  <h1>{title}</h1>
                  <input placeholder="Update title" onChange={handleInputChange} />
                </div>
              );
            }

            Using the code above, whatever the user types into the input (the text comes from event.target.value) will be put in state using setTitle and displayed within the h1 element.

            What is special about state and why it must be managed with a dedicated hook like useState is because a state update (such as when we call setTitle) causes a re-render.

            A re-render is when a certain component renders or is displayed again based off the new data. If our components weren't re-rendered when data changed, we would never see the app's appearance change at all!
            What's Next

            I hope you got a lot of out this guide.

            If you want a copy of this cheatsheet to keep for learning purposes, you can download a complete PDF version of this cheatsheet here.

            Once you have finished with this guide, there are many things you can learn to advance your skills to the next level, including:

            - How to write custom React hooks
                https://reactbootcamp.com/how-to-code-react-hooks/
            - The complete guide to React props
                https://reactbootcamp.com/react-props-cheatsheet/
            - How to fetch data in React from front to back
                https://reactbootcamp.com/fetch-data-in-react/
            - How to build fullstack apps in React with Node
                https://reactbootcamp.com/react-app-node-backend/
            - Learn more about React state
                https://reactbootcamp.com/what-to-know-about-react-state/
            - How to add routing to your React app with React Router
                https://reactbootcamp.com/react-router-cheatsheet/
            - Learn every part of React with the advanced React cheatsheet
                https://reactbootcamp.com/react-cheatsheet-2021/
https://medium.com/coinmonks/react-js-cheatsheet-for-beginners-5665425d9026
            React Environment Setup

            Prerequisites for creating react apps: Node.js and NPM

            Sample app creation commands,

            npx create-react-app hello-world
            cd hello-world
            npm start

            Components

            Components are independent and reusable bits of code. It is similar to JavaScript functions which returns HTML via a render() function. Components are broadly classified into two - Class components and Function components.

            Class component
            import React from 'react'
            import ReactDOM from 'react-dom'
            class App extends React.Component {
              render() {
                return(
                  <div>
                     Hello World
                  </div>
                )
              }
            }
            ReactDOM.render(
              <React.StrictMode>
                <App />
              </React.StrictMode>,
              document.getElementById('root')
            );

            Function component
            import React from 'react'
            import ReactDOM from 'react-dom'
            function App() {
              return (
                <div>
                   Hello World
                </div>
              )
            }
            ReactDOM.render(
              <React.StrictMode>
                <App />
              </React.StrictMode>,
              document.getElementById('root')
            );

            State

            The state is an instance of React Component Class that can be used to store property values which belongs to the component. The component re-renders when a change in state occurs.

            import React from 'react'
            class App extends React.Component {
              constructor(props) {
                  super(props);
                  this.state = {  
                    //Initializing state values
                    name: ""
                  }
              }
              componentDidMount() {
                  this.setState({  
                    //Updating state values
                    name: "codemaker"
                  })
              }
              render() {
                return(
                  <div>
                    Hello {this.state.name} {/* Using state values */}
                  </div>
                )
              }
            }
            export default App;

            Props

            Props (Properties) are read-only immutable components. It is an object which stores the value of attributes and serves as a medium to pass data from one component to another. It passes values to the component in the same way as an argument is passed to a function.

            import React from 'react'
            import ReactDOM from 'react-dom'
            class App extends React.Component {
              constructor(props) {
                super(props);
              }
              render() {
                return(
                  <div>
                    Hello {this.props.name} {/* Using prop values */}
                  </div>
                )
              }
            }
            ReactDOM.render(
              <React.StrictMode>
                <App name={"codemaker"} /> {/* Provide prop values  */}
              </React.StrictMode>,
              document.getElementById('root')
            );

            Setting default props/state

            The defaultProps is used to set default values for the props. It can be defined as a component property to set the default props for the class. It also provides default values for the state in the constructor.

            default props

            import React from 'react'
            class App extends React.Component {
              constructor(props) {
                super(props);
              }
              render() {
                return(
                  <div>
                    Hello {this.props.name} {/* Using prop values */}
                  </div>
                )
              }
            }
            App.defaultProps = {  //Setting default props with values
              name: "codemaker"
            }
            export default App;

            default state

            import React from 'react'
            class App extends React.Component {
              constructor(props) {
                  super(props);
                  this.state = {  //Initializing state values / default state
                    name: ""
                  }
              }
              componentDidMount() {
                  this.setState({  //Updating state values
                    name: "codemaker"
                  })
              }
              render() {
                return(
                  <div>
                    Hello {this.state.name} {/* Using state values */}
                  </div>
                )
              }
            }
            export default App;

            Life cycle methods

            React is used to call multiple life cycle methods during the component execution of each stage. The method called when the component is created is called mounting. Each component update is called updating. The removal of components is called unmounting. The entire process is called the ‘Component Lifecycle’.

                Mounting lifecycle methods
                constructor()
                static getDerivedStateFromProps()
                render()
                componentDidMount()
                Updating lifecycle methods
                static getDerivedStateFromProps()
                shouldComponentUpdate()
                render()
                getSnapshotBeforeUpdate()
                componentDidUpdate()
                Unmounting lifecycle method
                componentWillUnmount
                Error handling lifecycle methods
                static getDerivedStateFromError()
                componentDidCatch()

            Image credits projects.wojtekmaj.pl
            DOM references

            React uses refs for DOM access in the component. It can be achieved by adding a ref attribute to an element in your application.

            import React from 'react';
            class App extends Component {
              render () {
                return <div>
                  <input ref={el => this.input = el} />
                </div>
              }  componentDidMount () {
                this.input.focus()
              }
            }
            export default App;

            DOM events

            Event is an action that could be triggered as a result of the user action or a system-generated action. React has its own event handling system known as Synthetic Events which is very similar to the event handling on DOM elements.

            React events has some syntactic differences from the DOM events. They are:

                React events are named in the camelCase format instead of the lowercase format.
                React event handler requires a function instead of a string.

            import React from 'react';
            class App extends Component {
              render () {
                 return (
                    <input type="text"
                       value={this.state.value}
                       onChange={event => this.onChange(event)} />
                 )
              }
              onChange (event) {
                this.setState({ value: event.target.value })
              }
            }
            export default App;

            JSX (Javascript XML)

            JSX enables users to write JavaScript in HTML. It writes HTML elements in JavaScript and places them in the DOM without any createElement() or appendChild() methods.

            import React from 'react';
            class App extends React.Component {
               render() {
                  var i = 1;
                  const { items } = this.props
                  return ( // JSX syntax. Using HTML code in Javascript
                     <div>
                        <p>Hello World</p>
                        <p>{8+5}</p> {/* JSX expression */}
                        <p className={"demo-class"}>class name test</p> {/* Accessing css class */}
                        <div style={{backgroundColor: 'red'}}> style option test</div>  {/* Defining styles inside component */}
                        <h1>{i == 1 ? 'True' : 'False'}</h1> {/* Conditional statements */}
                        {i == 1 ? <div>Hello</div> : <div>Haii</div>} {/* Conditional rendering */}
                        {i == 1 && <div>Test</div>} {/* Short evaluation */}
                        {items.map(item =>          //List rendering in JSX
                                     <p>{item}</p>  
                                  )
                        }
                        {//End of the line Comment...}
                        {/*Multi line comment...*/}
                     </div>
                  );
               }
            }
            export default App;

            Conditional rendering

            React offers conditional rendering to render a particular component or code snippet based on some condition or the state of our application.

            import React from 'react';   
            import ReactDOM from 'react-dom';
            class App extends React.Component {
              constructor(props) {
                super(props);
                this.state = {
                  isAuthenticated: true,
                }
             }
              render() {  
                const isAuthenticated = this.state.isAuthenticated;  
                return (  
                   <div>  
                     Welcome {isAuthenticated ? 'Authenticated User' : 'Please login to continue'}.  
                   </div>  
                );  
              }  
            }

            Property validation

            Props validation is a mechanism used to avoid props data-related issues. The PropTypes is a react component property which enables users to validate data types of values passed through props.

            import React from 'react';  
            import PropTypes from 'prop-types';
            class App extends React.Component {  
               render() {  
                    return (  
                        <div>  
                            <p>{this.props.propArray}</p>  
                            <p>{this.props.propBool}</p>  
                            <p>{this.props.propFunc(5)}</p>  
                            <p>{this.props.propString}</p>  
                            <p>{this.props.propNumber}</p>  
                        </div>  
                    );  
               }  
            }  
            App.propTypes = {  
                propArray: PropTypes.array.isRequired,  
                propBool: PropTypes.bool.isRequired,  
                propFunc: PropTypes.func,  
                propNumber: PropTypes.number,  
                propString: PropTypes.string,   
            }  
            App.defaultProps = {  
                propArray: [1,2,3],  
                propBool: true,  
                propFunc: function(x){return x+3},  
                propNumber: 1,  
                propString: "codemaker",  
            }  
            export default App;

            React Router

            React Router is a JavaScript library used to create routing in the React application. Routing is a mechanism where we can navigate to different pages when the URL path matches any ‘route’ inside the router file.

            Installation

            npm install react-router-dom --save

            There are two types of router components:

                BrowserRouter: It is used for handling dynamic URLs.
                HashRouter: It is used for handling static requests.

            Example

            // This is a React Router v6 app
            import { BrowserRouter, Routes, Route } from "react-router-dom";
            function App() {
              return (
                <BrowserRouter>
                  <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="users/*" element={<Users />} />
                  </Routes>
                </BrowserRouter>
              );
            }

            React Hooks

            Hooks were introduced in React 16.8. It enables users to use props and states directly inside a function component. It is useful to manage the component state and perform an after-effect when certain changes occur in the state without writing a class.

            Hooks are similar to JavaScript functions, but it is essential you follow these rules while using them.

                Only call Hooks at the top level
                Hooks should always be used at the top level of the React functions and it is necessary not to call them inside loops, conditions, or nested functions.
                Only call Hooks from React functions
                Call Hook only from function components and custom Hooks.

            import React, { useState, useEffect } from 'react';  
              
            function App() {
              // Declare a new state variable, which we'll call "count"
              const [count, setCount] = useState(0);  
              
              // Similar to componentDidMount and componentDidUpdate:  
              useEffect(() => {  
                // Update the document title using the browser API  
                document.title = `You clicked ${count} times`;  
              });  
              
              return (  
                <div>  
                  <p>You clicked {count} times</p>  {/* Access state values */}
                  <button onClick={() => setCount(count + 1)}>  {/* Updating state values using setCount */}
                    Click me  
                  </button>  
                </div>  
              );  
            }  
            export default App;

            The built-in Hooks are divided into two — Basic hooks and additional hooks.

            Basic Hooks

                useState
                useEffect
                useContext

            Additional Hooks

                useReducer
                useCallback
                useMemo
                useRef
                useImperativeHandle
                useLayoutEffect
                useDebugValue

            React context

            Context enables users to pass data to the child components without passing props down manually at each level.

            // Create a context for the user authentication.  
            const AuthContext = React.createContext('auth');  
              
            class App extends React.Component {  
             render() {  
                  /* Use a ContextProvider to pass the auth information, 
                     we are passing the "true" as the current value.*/  
                  return (  
                     <AuthContext.Provider value="true">  
                       <App />  
                     </AuthContext.Provider>  
                  );  
               }  
            }  
              
            // Now, it is not required to pass the auth down explicitly for every component.  
            function App(props) {  
               return (  
                  <Home /> 
               );  
            }  
              
            class Home extends React.Component {  
             static contextType = AuthContext;  
               render() {  
                  return <Button auth={this.context} />;  
               }  
            }

            Reactstrap

            Reactstrap is a javascript library that provides inbuilt Bootstrap components that makes it easier to create UI for your application with inbuilt validations. Reactstrap now supports Bootstrap 5.1.

            Installation:

            npm install reactstrap react react-dom
            npm install --save bootstrap

            Example:

            import React from 'react';
            import { Button } from 'reactstrap';
            import 'bootstrap/dist/css/bootstrap.min.css';
            function App() {
              return (
                <Button color="danger">Cancel</Button>
              );
            };

            Error Boundaries

            React 16 introduces a new approach in handling errors within your application by using error boundaries. It allows the user to keep the app running in spite of an error occurring during the runtime and displays a fallback UI to the user.

            import React from 'react';
            class ErrorBoundary extends React.Component {  
               constructor(props) {  
                  super(props);  
                  this.state = { hasError: false };  
               }  
               static getDerivedStateFromError(error) {  
                  // It will update the state so the next render 
                  // and shows the fallback UI.  
                  return { hasError: true };  
               }  
               componentDidCatch(error, info) {  
                  // It will catch error in any component below. 
                  // We can also log the error to an error reporting service.  
                  logErrorToMyService(error, info);  
               }  
               render() {  
                  if (this.state.hasError) {  
                      return (  
                       <div>Oops! Error occurs.</div>;  
                   );  
                  }  
                  return this.props.children;   
               }  
            }
            // Wrap the error boundary around your component
            <ErrorBoundary>  
             <App/>  
            </ErrorBoundary>

            React.js vs React native

            React.js is an open-source JavaScript library used to build the user interface for Web Applications whereas React Native is used for developing a mobile application for iOS and Android. React Native is almost similar to React, however, it uses native components instead of web components as building blocks and targets mobile platforms over browsers.
            Image credits Javapoint
            Summary
--
https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/
            React Hooks cheat sheet: Best practices and examples

            This React Hooks cheat sheet includes a lot of code snippets and assumes some Hooks fluency. If you’re completely new to Hooks, you may want to start with our React Hooks API reference guide.

            Included in this React Hooks cheat sheet are best practices related to the following Hooks:

                useState
                useEffect
                useContext
                useLayoutEffect
                useReducer
                useCallback
                useMemo
                useRef
                useTransition
                useDeferredValue
                useId

            useState

            useState lets you use local state within a function component. You pass the initial state to this function and it returns a variable with the current state value (not necessarily the initial state) and another function to update this value.

            Check out this React useState video tutorial:

            Declare state variable

            Declaring a state variable is as simple as calling useState with some initial state value, like so: useState(initialStateValue).

            const DeclareStateVar = () => {
              const [count] = useState(100)
              return <div> State variable is {count}</div>
            }

            Update state variable

            Updating a state variable is as simple as invoking the updater function returned by the useState invocation: const [stateValue, updaterFn] = useState(initialStateValue);.
            Note how the age state variable is being updated.

            Here’s the code responsible for the screencast above:

            const UpdateStateVar = () => {
              const [age, setAge] = useState(19)
              const handleClick = () => setAge(age + 1)

              return (
                <div>
                  Today I am {age} Years of Age
                  <div>
                    <button onClick={handleClick}>Get older! </button>
                  </div>
                </div>
              )
            }

            Why does the React useState Hook not update immediately?

            If you find that useState/setState are not updating immediately, the answer is simple: they’re just queues.

            React useState and setState don’t make changes directly to the state object; they create queues to optimize performance, which is why the changes don’t update immediately.
            React Hooks and multiple state variables

            Multiple state variables may be used and updated from within a functional component, as shown below:

            Here’s the code responsible for the screencast above:

            const MultipleStateVars = () => {
              const [age, setAge] = useState(19)
              const [siblingsNum, setSiblingsNum] = 
                useState(10)

              const handleAge = () => setAge(age + 1)
              const handleSiblingsNum = () => 
                  setSiblingsNum(siblingsNum + 1)
             

              return (
                <div>
                  <p>Today I am {age} Years of Age</p>
                  <p>I have {siblingsNum} siblings</p>

                  <div>
                    <button onClick={handleAge}>
                      Get older! 
                    </button>
                    <button onClick={handleSiblingsNum}>
                        More siblings! 
                    </button>
                  </div>
                </div>
              )
            }

            Use object state variable

            As opposed to strings and numbers, you could also use an object as the initial value passed to useState.

            Note that you have to pass the entire object to the useState updater function because the object is replaced, not merged.

            // 🐢 setState (object merge) vs useState (object replace)
            // assume initial state is {name: "Ohans"}

            setState({ age: 'unknown' })
            // new state object will be
            // {name: "Ohans", age: "unknown"}

            useStateUpdater({ age: 'unknown' })
            // new state object will be
            // {age: "unknown"} - initial object is replaced

            Multiple state objects updated via a state object variable.

            Here’s the code for the screencast above:

            const StateObject = () => {
              const [state, setState] = useState({ age: 19, siblingsNum: 4 })
              const handleClick = val =>
                setState({
                  ...state,
                  [val]: state[val] + 1
                })
              const { age, siblingsNum } = state

              return (
                <div>
                  <p>Today I am {age} Years of Age</p>
                  <p>I have {siblingsNum} siblings</p>

                  <div>
                    <button onClick={handleClick.bind(null, 'age')}>Get older!</button>
                    <button onClick={handleClick.bind(null, 'siblingsNum')}>
                      More siblings!
                    </button>
                  </div>
                </div>
              )
            }

            Initialize state from function

            As opposed to just passing an initial state value, state could also be initialized from a function, as shown below:

            const StateFromFn = () => {
              const [token] = useState(() => {
                let token = window.localStorage.getItem("my-token");
                return token || "default#-token#"
              })

              return <div>Token is {token}</div>
            }

            Functional setState

            The updater function returned from invoking useState can also take a function similar to the good ol’ setState:

            const [value, updateValue] = useState(0)
            // both forms of invoking "updateValue" below are valid 👇
            updateValue(1);
            updateValue(previousValue => previousValue + 1);

            This is ideal when the state update depends on some previous value of state.
            A counter with functional setState updates.

            Here’s the code for the screencast above:

            const CounterFnSetState = () => {
              const [count, setCount] = useState(0);
              return (
                <>
                  <p>Count value is: {count}</p>
                  <button onClick={() => setCount(0)}>Reset</button>
                  <button 
                    onClick={() => setCount(prevCount => prevCount + 1)}>
                    Plus (+)
                  </button>
                  <button 
                    onClick={() => setCount(prevCount => prevCount - 1)}>
                   Minus (-)
                  </button>
                </>
              );
            }

            Here’s a live, editable useState cheat sheet if you want to dive deeper on your own.
            useEffect

            With useEffect, you invoke side effects from within functional components, which is an important concept to understand in the React Hooks era.
            Basic side effect
            Watch the title of the document update.

            Here’s the code responsible for the screencast above:

            const BasicEffect = () => {
              const [age, setAge] = useState(0)
              const handleClick = () => setAge(age + 1)

              useEffect(() => {
                document.title = 'You are ' + age + ' years old!'
              })

              return <div>
                <p> Look at the title of the current tab in your browser </p>
                <button onClick={handleClick}>Update Title!! </button>
              </div>
            }

            Effect with cleanup

            It’s pretty common to clean up an effect after some time. This is possible by returning a function from within the effect function passed to useEffect. Below is an example with addEventListener.

            const EffectCleanup = () => {
              useEffect(() => {
                const clicked = () => console.log('window clicked')
                window.addEventListener('click', clicked)

                // return a clean-up function
                return () => {
                  window.removeEventListener('click', clicked)
                }
              }, [])

              return <div>
                When you click the window you'll 
                find a message logged to the console
              </div>
            }

            Multiple effects

            Multiple useEffect calls can happen within a functional component, as shown below:

            const MultipleEffects = () => {
              // 🍟
              useEffect(() => {
                const clicked = () => console.log('window clicked')
                window.addEventListener('click', clicked)

                return () => {
                  window.removeEventListener('click', clicked)
                }
              }, [])

              // 🍟 another useEffect hook 
              useEffect(() => {
                console.log("another useEffect call");
              })

              return <div>
                Check your console logs
              </div>
            }

            Note thatuseEffect calls can be skipped — i.e., not invoked on every render. This is done by passing a second array argument to the effect function.
            Skipping effects (array dependency)

            const ArrayDepMount = () => {
              const [randomNumber, setRandomNumber] = useState(0)
              const [effectLogs, setEffectLogs] = useState([])

              useEffect(
                () => {
                  setEffectLogs(prevEffectLogs => [...prevEffectLogs, 'effect fn has been invoked'])
                },
                []
              )

              return (
                <div>
                  <h1>{randomNumber}</h1>
                  <button
                    onClick={() => {
                      setRandomNumber(Math.random())
                    }}
                  >
                    Generate random number!
                  </button>
                  <div>
                    {effectLogs.map((effect, index) => (
                      <div key={index}>{'🍔'.repeat(index) + effect}</div>
                    ))}
                  </div>
                </div>
              )
            }

            In the example above, useEffect is passed an array of one value: [randomNumber].

            Thus, the effect function will be called on mount and whenever a new random number is generated.

            Here’s the Generate random number button being clicked and the effect function being rerun upon generating a new random number:

            Skipping effects (empty array dependency)

            In this example, useEffect is passed an empty array, []. Therefore, the effect function will be called only on mount.

            const ArrayDepMount = () => {
              const [randomNumber, setRandomNumber] = useState(0)
              const [effectLogs, setEffectLogs] = useState([])

              useEffect(
                () => {
                  setEffectLogs(prevEffectLogs => [...prevEffectLogs, 'effect fn has been invoked'])
                },
                []
              )

              return (
                <div>
                  <h1>{randomNumber}</h1>
                  <button
                    onClick={() => {
                      setRandomNumber(Math.random())
                    }}
                  >
                    Generate random number!
                  </button>
                  <div>
                    {effectLogs.map((effect, index) => (
                      <div key={index}>{'🍔'.repeat(index) + effect}</div>
                    ))}
                  </div>
                </div>
              )
            }

            Here’s the button being clicked and the effect function not invoked:

            Skipping effects (no array dependency)

            Without an array dependency, the effect function will be run after every single render.
            Over 200k developers use LogRocket to create better digital experiences
            Learn more →

            useEffect(() => {
            console.log(“This will be logged after every render!”)
            })

            Here’s a live, editable useEffect cheat sheet if you’d like to explore further.
            useContext

            useContext saves you the stress of having to rely on a Context consumer. React Context has a simpler API when compared to MyContext.Consumer and the render props API it exposes.

            Context is React’s way of handling shared data between multiple components.

            The following example highlights the difference between consuming a context object value via useContext or Context.Consumer:

            // example Context object
            const ThemeContext = React.createContext("dark");

            // usage with context Consumer
            function Button() {
              return <ThemeContext.Consumer>
                    {theme => <button className={theme}> Amazing button </button>}
              </ThemeContext.Consumer>
            }


            // usage with useContext hook 
            import {useContext} from 'react';

            function ButtonHooks() {
             const theme = useContext(ThemeContext)
             return <button className={theme}>Amazing button</button>
            }

            Here’s a live example with useContext:

            And here’s the code responsible for the example above:

            const ThemeContext = React.createContext('light');

            const Display = () => {
             const theme = useContext(ThemeContext);
             return <div
                    style={{
                    background: theme === 'dark' ? 'black' : 'papayawhip',
                    color: theme === 'dark' ? 'white' : 'palevioletred',
                    width: '100%',
                    minHeight: '200px'
                    }}
                >
                    {'The theme here is ' + theme}
                </div>
            }

            Here’s a live, editable React Context cheat sheet if you’d like to tinker around yourself.
            useLayoutEffect

            useLayoutEffect has the very same signature as useEffect. We’ll discuss the difference between useLayoutEffect and useEffect below.

            useLayoutEffect(() => {
            //do something
            }, [arrayDependency])

            Similar usage as useEffect

            Here’s the same example for useEffect built with useLayoutEffect:

            And here’s the code:

            const ArrayDep = () => {
                const [randomNumber, setRandomNumber] = useState(0)
                const [effectLogs, setEffectLogs] = useState([])
              
                useLayoutEffect(
                  () => {
                    setEffectLogs(prevEffectLogs => [...prevEffectLogs, 'effect fn has been invoked'])
                  },
                  [randomNumber]
                )
              
                return (
                  <div>
                    <h1>{randomNumber}</h1>
                    <button
                      onClick={() => {
                        setRandomNumber(Math.random())
                      }}
                    >
                      Generate random number!
                    </button>
                    <div>
                      {effectLogs.map((effect, index) => (
                        <div key={index}>{'🍔'.repeat(index) + effect}</div>
                      ))}
                    </div>
                  </div>
                )
              }

            useLayoutEffect vs. useEffect

            What’s the difference between useEffect and useLayoutEffect? The function passed to useEffect fires after layout and paint — i.e., after the render has been committed to the screen. This is OK for most side effects that shouldn’t block the browser from updating the screen.

            There are cases where you may not want the behavior useEffect provides, though; for example, if you need to make a visual change to the DOM as a side effect, useEffect won’t be the best choice.

            To prevent the user from seeing flickers of changes, you can use useLayoutEffect. The function passed to useLayoutEffect will be run before the browser updates the screen.

            You can read my follow-up piece for a deep dive on the differences between useEffect and useLayoutEffect.

            Here’s a live, editable useLayoutEffect cheat sheet.
            useReducer

            useReducer may be used as an alternative to useState. It’s ideal for complex state logic where there’s a dependency on previous state values or a lot of state sub-values.

            Depending on your use case, you may find useReducer quite testable.
            Basic usage

            As opposed to calling useState, call useReducer with a reducer and initialState, as shown below. The useReducer call returns the state property and a dispatch function.
            Increase/decrease bar size by managing state with useReducer.

            Here’s the code responsible for the above screencast:

            const initialState = { width: 15 };

            const reducer = (state, action) => {
              switch (action) {
                case 'plus':
                  return { width: state.width + 15 }
                case 'minus':
                  return { width: Math.max(state.width - 15, 2) }
                default:
                  throw new Error("what's going on?" )
              }
            }

            const Bar = () => {
              const [state, dispatch] = useReducer(reducer, initialState)
              return <>
                <div style={{ background: 'teal', height: '30px', width: state.width }}></div>
                <div style={{marginTop: '3rem'}}>
                    <button onClick={() => dispatch('plus')}>Increase bar size</button>
                    <button onClick={() => dispatch('minus')}>Decrease bar size</button>
                </div>
                </>
            }

            ReactDOM.render(<Bar />)

            Initialize state lazily

            useReducer takes a third function parameter. You may initialize state from this function, and whatever’s returned from this function is returned as the state object. This function will be called with initialState — the second parameter.
            Same increase/decrease bar size, with state initialized lazily.

            Here’s the code for the example above:

            const initializeState = () => ({
              width: 100
            })

            // ✅ note how the value returned from the fn above overrides initialState below: 
            const initialState = { width: 15 }
            const reducer = (state, action) => {
              switch (action) {
                case 'plus':
                  return { width: state.width + 15 }
                case 'minus':
                  return { width: Math.max(state.width - 15, 2) }
                default:
                  throw new Error("what's going on?" )
              }
            }

            const Bar = () => {
              const [state, dispatch] = useReducer(reducer, initialState, initializeState)
              return <>
                <div style={{ background: 'teal', height: '30px', width: state.width }}></div>
                <div style={{marginTop: '3rem'}}>
                    <button onClick={() => dispatch('plus')}>Increase bar size</button>
                    <button onClick={() => dispatch('minus')}>Decrease bar size</button>
                </div>
                </>
            }

            ReactDOM.render(Bar)

            Imitate the behavior of this.setState

            useReducer uses a reducer that isn’t as strict as Redux’s. For example, the second parameter passed to the reducer, action, doesn’t need to have a type property.

            This allows for interesting manipulations, such as renaming the second parameter and doing the following:

            const initialState = { width: 15 }; 

            const reducer = (state, newState) => ({
              ...state,
              width: newState.width
            })

            const Bar = () => {
              const [state, setState] = useReducer(reducer, initialState)
              return <>
                <div style={{ background: 'teal', height: '30px', width: state.width }}></div>
                <div style={{marginTop: '3rem'}}>
                    <button onClick={() => setState({width: 100})}>Increase bar size</button>
                    <button onClick={() => setState({width: 3})}>Decrease bar size</button>
                </div>
                </>
            }

            ReactDOM.render(Bar)

            The results remain the same with a setState-like API imitated.

            Here’s an editable useReducer cheat sheet.
            useCallback

            useCallback returns a memoized callback. Wrapping a component with React.Memo() signals the intent to reuse code. This does not automatically extend to functions passed as parameters.

            React saves a reference to the function when wrapped with useCallback. Pass this reference as a property to new components to reduce rendering time.
            useCallback example

            The following example will form the basis of the explanations and code snippets that follow.

            And here’s the code:

            const App = () => {
                const [age, setAge] = useState(99)
                const handleClick = () => setAge(age + 1)
                const someValue = "someValue"
                const doSomething = () => {
                  return someValue
                }
              
                return (
                  <div>
                    <Age age={age} handleClick={handleClick}/>
                    <Instructions doSomething={doSomething} />
                  </div>
                )
            }

            const Age = ({ age, handleClick }) => {
              return (
                <div>
                  <div style={{ border: '2px', background: "papayawhip", padding: "1rem" }}>
                    Today I am {age} Years of Age
                  </div>
                  <pre> - click the button below 👇 </pre>
                  <button onClick={handleClick}>Get older! </button>
                </div>
              )
            }

            const Instructions = React.memo((props) => {
              return (
                <div style={{ background: 'black', color: 'yellow', padding: "1rem" }}>
                  <p>Follow the instructions above as closely as possible</p>
                </div>
              )
            })

            ReactDOM.render (
              <App />
            )

            In the example above, the parent component, <Age />, is updated (and re-rendered) whenever the Get older button is clicked.

            Consequently, the <Instructions /> child component is also re-rendered because the doSomething prop is passed a new callback with a new reference.

            Note that even though the Instructions child component uses React.memo to optimize performance, it is still re-rendered.

            How can this be fixed to prevent <Instructions /> from re-rendering needlessly?
            useCallback with referenced function

            const App = () => {
              const [age, setAge] = useState(99)
              const handleClick = () => setAge(age + 1)
              const someValue = "someValue"
              const doSomething = useCallback(() => {
                return someValue
              }, [someValue])

              return (
                <div>
                  <Age age={age} handleClick={handleClick} />
                  <Instructions doSomething={doSomething} />
                </div>
              )
            }

            const Age = ({ age, handleClick }) => {
              return (
                <div>
                  <div style={{ border: '2px', background: "papayawhip", padding: "1rem" }}>
                    Today I am {age} Years of Age
                  </div>
                  <pre> - click the button below 👇 </pre>
                  <button onClick={handleClick}>Get older! </button>
                </div>
              )
            }

            const Instructions = React.memo((props) => {
              return (
                <div style={{ background: 'black', color: 'yellow', padding: "1rem" }}>
                  <p>Follow the instructions above as closely as possible</p>
                </div>
              )
            })

            ReactDOM.render(<App />)

            useCallback with inline function

            useCallback also works with an inline function as well. Here’s the same solution with an inline useCallback call:

            const App = () => {
              const [age, setAge] = useState(99)
              const handleClick = () => setAge(age + 1)
              const someValue = "someValue"

              return (
                <div>
                  <Age age={age} handleClick={handleClick} />
                  <Instructions doSomething={useCallback(() => {
                    return someValue
                  }, [someValue])} />
                </div>
              )
            }

            const Age = ({ age, handleClick }) => {
              return (
                <div>
                  <div style={{ border: '2px', background: "papayawhip", padding: "1rem" }}>
                    Today I am {age} Years of Age
                  </div>
                  <pre> - click the button below 👇 </pre>
                  <button onClick={handleClick}>Get older! </button>
                </div>
              )
            }

            const Instructions = memo((props) => {
              return (
                <div style={{ background: 'black', color: 'yellow', padding: "1rem" }}>
                  <p>Follow the instructions above as closely as possible</p>
                </div>
              )
            })

            render(<App />)

            Here’s live, editable useCallback cheat sheet.
            useMemo

            The useMemo function returns a memoized value. useMemo is different from useCallback in that it internalizes return values instead of entire functions. Rather than passing a handle to the same function, React skips the function and returns the previous result, until the parameters change.

            This allows you to avoid repeatedly performing potentially costly operations until necessary. Use this method with care, as any changing variables defined in the function do not affect the behavior of useMemo. If you’re performing timestamp additions, for instance, this method does not care that the time changes, only that the function parameters differ.
            useMemo example

            The following example will form the basis of the explanations and code snippets that follow.

            Here’s the code responsible for the screenshot above:

            const App = () => {
                const [age, setAge] = useState(99)
                const handleClick = () => setAge(age + 1)
                const someValue = { value: "someValue" }
                const doSomething = () => {
                  return someValue
                }
              
                return (
                  <div>
                    <Age age={age} handleClick={handleClick}/>
                    <Instructions doSomething={doSomething} />
                  </div>
                )
            }

            const Age = ({ age, handleClick }) => {
              return (
                <div>
                  <div style={{ border: '2px', background: "papayawhip", padding: "1rem" }}>
                    Today I am {age} Years of Age
                  </div>
                  <pre> - click the button below 👇 </pre>
                  <button onClick={handleClick}>Get older! </button>
                </div>
              )
            }

            const Instructions = React.memo((props) => {
              return (
                <div style={{ background: 'black', color: 'yellow', padding: "1rem" }}>
                  <p>Follow the instructions above as closely as possible</p>
                </div>
              )
            })

            ReactDOM.render (
              <App />
            )

            The example above is similar to the one for useCallback. The only difference here is that someValue is an object, not a string. Owing to this, the Instructions component still re-renders despite the use of React.memo.

            Why? Objects are compared by reference, and the reference to someValue changes whenever <App /> re-renders.

            Any solutions?
            Basic usage

            The object someValue may be memoized using useMemo. This prevents the needless re-render.

            const App = () => {
                const [age, setAge] = useState(99)
                const handleClick = () => setAge(age + 1)
                const someValue = useMemo(() => ({ value: "someValue" }))
                const doSomething = () => {
                  return someValue
                }
              
                return (
                  <div>
                    <Age age={age} handleClick={handleClick}/>
                    <Instructions doSomething={doSomething} />
                  </div>
                )
            }

            const Age = ({ age, handleClick }) => {
              return (
                <div>
                  <div style={{ border: '2px', background: "papayawhip", padding: "1rem" }}>
                    Today I am {age} Years of Age
                  </div>
                  <pre> - click the button below 👇 </pre>
                  <button onClick={handleClick}>Get older! </button>
                </div>
              )
            }

            const Instructions = React.memo((props) => {
              return (
                <div style={{ background: 'black', color: 'yellow', padding: "1rem" }}>
                  <p>Follow the instructions above as closely as possible</p>
                </div>
              )
            })

            ReactDOM.render (<App />)

            Here’s a live, editable useMemo demo.
            useRef

            useRef returns a “ref” object. Values are accessed from the .current property of the returned object. The .current property could be initialized to an initial value — useRef(initialValue), for example. The object is persisted for the entire lifetime of the component.

            Learn more in this comprehensive useRefs guide or check out our useRefs video tutorial:

            Accessing the DOM

            Consider the sample application below:
            Accessing the DOM via useRef.

            Here’s the code responsible for the screencast above:

            const AccessDOM = () => {
              const textAreaEl = useRef(null);
              const handleBtnClick = () => {
                textAreaEl.current.value =
                "The is the story of your life. You are an human being, and you're on a website about React Hooks";
                textAreaEl.current.focus();
              };
              return (
                <section style={{ textAlign: "center" }}>
                  <div>
                    <button onClick={handleBtnClick}>Focus and Populate Text Field</button>
                  </div>
                  <label
                    htmlFor="story"
                    style={{
                      display: "block",
                      background: "olive",
                      margin: "1em",
                      padding: "1em"
                    }}
                  >
                    The input box below will be focused and populated with some text
                    (imperatively) upon clicking the button above.
                  </label>
                  <textarea ref={textAreaEl} id="story" rows="5" cols="33" />
                </section>
              );
            };

            Instance-like variables (generic container)

            Other than just holding DOM refs, the “ref” object can hold any value. Consider a similar application below, where the ref object holds a string value:

            Here’s the code:

            const HoldStringVal = () => {
                const textAreaEl = useRef(null);
                const stringVal = useRef("This is a string saved via the ref object --- ")
                const handleBtnClick = () => {
                  textAreaEl.current.value =
                  stringVal.current + "The is the story of your life. You are an human being, and you're on a website about React Hooks";
                  textAreaEl.current.focus();
                };
                return (
                  <section style={{ textAlign: "center" }}>
                    <div>
                      <button onClick={handleBtnClick}>Focus and Populate Text Field</button>
                    </div>
                    <label
                      htmlFor="story"
                      style={{
                        display: "block",
                        background: "olive",
                        margin: "1em",
                        padding: "1em"
                      }}
                    >
                      Prepare to see text from the ref object here. Click button above.
                    </label>
                    <textarea ref={textAreaEl} id="story" rows="5" cols="33" />
                  </section>
                );
              };

            You could do the same as storing the return value from a setInterval for cleanup.

            function TimerWithRefID() {
              const setIntervalRef = useRef();

              useEffect(() => {
                const intervalID = setInterval(() => {
                  // something to be done every 100ms
                }, 100);

                // this is where the interval ID is saved in the ref object 
                setIntervalRef.current = intervalID;
                return () => {
                  clearInterval(setIntervalRef.current);
                };
              });
            }

            Other examples

            Working on a near-real-world example can help bring your knowledge of Hooks to life. Until data fetching with React Suspense is released, fetching data via Hooks proves to be a good exercise for more Hooks practice.

            Below’s an example of fetching data with a loading indicator:

            The code appears below:

            const fetchData = () => {
              const stringifyData = data => JSON.stringify(data, null, 2)
              const initialData = stringifyData({ data: null })
              const loadingData = stringifyData({ data: 'loading...' })
              const [data, setData] = useState(initialData)

              const [gender, setGender] = useState('female')
              const [loading, setLoading] = useState(false)

              useEffect(
                () => {
                  const fetchData = () => {
                    setLoading(true)
                    const uri = 'https://randomuser.me/api/?gender=' + gender
                    fetch(uri)
                      .then(res => res.json())
                      .then(({ results }) => {
                        setLoading(false)
                        const { name, gender, dob } = results[0]
                        const dataVal = stringifyData({
                          ...name,
                          gender,
                          age: dob.age
                        })
                        setData(dataVal)
                      })
                  }

                  fetchData()
                },
                [gender]
              )

              return (
                <>
                  <button
                    onClick={() => setGender('male')}
                    style={{ outline: gender === 'male' ? '1px solid' : 0 }}
                  >
                    Fetch Male User
                  </button>
                  <button
                    onClick={() => setGender('female')}
                    style={{ outline: gender === 'female' ? '1px solid' : 0 }}
                  >
                    Fetch Female User
                  </button>

                  <section>
                    {loading ? <pre>{loadingData}</pre> : <pre>{data}</pre>}
                  </section>
                </>
              )
            }

            Here’ a live, editable useRef cheat sheet.
            useTransition

            The key to understanding the useTransition Hook is that it prioritizes state change. By default, any state change in React is given a high priority. However, when you transition a state change (maybe because of heavy computation), you’re telling React to give that state change a lower priority, meaning all other state change would run and render on the screen before the transitioned state change would run.
            Marking state as transition

            Marking a state as transition is as simple as passing a synchronous function with the state you want to transition into the startTransition function returned by the useTransition Hook:

            import { useTransition } from 'react';

            const App =()=>{
              const [timeUpdate, setTimeUpdate] = useState(2)
              const [isPending, startTransition] = useTransition()

              startTransition(()=>{
                  // handle state change in here
                })

              }

            The isPending flag returns true or false indicating whether or not there is a pending transition, and we use the startTransition function to mark a state change as a transition.
            Difference between useTransition and regular state update

            State updates placed inside the useTransition Hook are given a low priority, while regular state updates are given a higher priority.

            So think of useTransition as a React Hook that lets you update the state without blocking the UI.

            Let’s take a look at an example.
            Changing state without transition

            I have created a CodeSandbox that makes two state updates:

                Updating the textInput state upon user input
                Looping and updating the listItems state with the currently entered user input

            React has a mechanism called “batching” that allows it to combine multiple state changes into a single update to the component’s state.

            When you call setState in a React component, React does not immediately update the component’s state. Instead, it schedules a state update to be processed later. If you call setState multiple times within the same event loop, React will batch these updates together into a single update before applying them to the component’s state and triggering a re-render.

            That’s why in this example our setTextInput state doesn’t trigger a re-render until after we’re done looping and updating the setListItems state then a render is triggered. This makes our application act a bit sluggish.

            Now, let’s look at the same example but this time, we’ll transition the state change that has heavy computation.
            Changing state with transition

            As we can see in this CodeSandbox, there’s a significant improvement in our application. In this example we’re telling react to give setListItems state update a lower priority seeing as it requires a heavy computation. This means that setTextInput state would trigger a re-render upon state change and not have to be batched with the setListItem state change.

            N.B., if a state update causes a component to suspend, that state update should be wrapped in a transition
            useDeferredValue

            The useDeferredValue Hook is a new addition to React 18, and it offers developers a powerful new tool for optimizing their applications. useDeferredValue allows you to defer the rendering of a value until a future point in time, which can be incredibly useful in situations where you want to avoid unnecessary rendering.

            Here’s the sample syntax code:

            import { useDeferredValue } from 'react'

            const App =()=>{
            const [valueToDefer, setValueToDefer] = useState("")
            const deferredValue = useDeferredValue(valueToDefer)

            return (
              <p>{deferredValue}</p>
              )
            }

            All we have to do is pass the value we want to defer into the useDeferredValue Hook.

            One of the most common use cases for the useDeferredValue Hook is when you have a large number of updates occurring at once. For example, imagine you have a search bar in your application that updates in real time as the user types. If the user is a fast typist, this could result in dozens, or even hundreds, of updates occurring in rapid succession. Without any optimization, this could cause your application to slow down.

            By using the useDeferredValue Hook, you can avoid this problem by deferring the rendering of the search results until the user stops typing. This is similar to how debouncing works; it can dramatically improve performance.

            Let’s demonstrates this use case with an example:

            const Search =()=> {
              const [searchQuery, setSearchQuery] = useState('');
              const [searchResults, setSearchResults] = useState([]);

              const deferredSearchQuery = useDeferredValue(searchQuery);

              useEffect(() => {
                // Fetch search results using deferredSearchQuery
                // Update setSearchResults with the new results
              }, [deferredSearchQuery]);

              const handleSearchInputChange = (event) => {
                setSearchQuery(event.target.value);
              };

              return (
                <div>
                  <input type="text" value={searchQuery} onChange={handleSearchInputChange} />
                  <ul>
                    {searchResults.map((result) => (
                      <li key={result.id}>{result.title}</li>
                    ))}
                  </ul>
                </div>
              );
            }

            Here, we’re using the useDeferredValue Hook to defer the rendering of the search results until after the user stops typing in the search bar. This helps to reduce unnecessary re-renders and improve performance.
            useId

            useId is a React Hook that is used to generate unique IDs. This can be valuable in a number of scenarios, such as generating unique IDs for accessibility attributes.

            Here’s the sample syntax code:

            import { useId } from 'react'

            const App =()=>{
            const id = useId()

            return (
              <input type="text" id={id} />
              )
            }

            Now, let’s look at a use case. Here’s an example of a scenario using the useId Hook with a TextField component:

            const TextField =()=>{
              return(
                  <>
                    <label htmlFor="name" /> 
                    <input type="text" id="name"/>
                  </>
              )
            }

            We’ll use the TextField component a couple times in our App component below:

            const App=()=>{
              return (
                <div className="inputs">
                  <TextField />
                  <TextField />
                </div>
              )
            }

            To link a label element to an input field, we use the id and htmlFor attribute. This will cause the browser to associate a particular label element with a particular input field. If we were working with plain HTML, this wouldn’t be necessary — instead, we could simply duplicate the elements and change the attributes.

            However, in our example above we created a reusable TextField component and we’re using this component twice in our App component. Since the attributes on the element in the TextField
            are static, every time we render the component, the attributes remain the same.

            We can fix this by using the useId Hook. Let’s modify the TextField component, like so:

            const TextField =()=>{
            const id = useId();
              return(
                  <>
                    <label htmlFor={id} /> 
                    <input type="text" id={id}/>
                  </>
              )
            }

            Now, every time we call the TextInput component, a unique ID will be associated with the elements that are rendered.
            Conclusion

            Hooks give a lot of power to functional components. I hope this cheat sheet proves useful in your day-to-day use of React Hooks.
--
~/Empire/Doks/Comp/lang/webdev/js/react-redux/cheatsh-qref/react.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/cheatsh-qref/reactapp-in10min.po.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/cheatsh-qref/react-cheat-sheet.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/cheatsh-qref/React-Cheatsheet.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/cheatsh-qref/redux-cheatsh.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/react-hooks.pdf
--
~/Empire/Doks/Comp/lang/webdev/js/react-redux/native/reactnative-animlibs.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/native/reactnative-byex.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/native/reactnative-byex.txt
~/Empire/Doks/Comp/lang/webdev/js/react-redux/native/reactnativecb.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/native/reactnativecb.txt
~/Empire/Doks/Comp/lang/webdev/js/react-redux/native/reactnative-notes.pdf
~/Empire/Doks/Comp/lang/webdev/js/react-redux/native/reactnative-notes.txt

react(+redux|native)
~/Empire/curr-desktop/react-designpatt.pdf
~/Empire/curr-desktop/react-designpatt17.pdf


~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-basics.pptx
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-begin-2018.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-begin-2018.txt
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-bust-2017.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-bust-2017.txt
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-fullst-2020.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-fullst-2020.txt
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-inaction.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-roadto-2018.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-roadto-2018.txt
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-tut-2018.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-tut-2018.txt
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-vs-rest.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/graphql-vs-rest.pptx
~/Empire/Doks/Comp/lang/webdev/db/graphql/react-redux-graphql-2017.pdf
~/Empire/Doks/Comp/lang/webdev/db/graphql/react-redux-graphql-2017.txt
https://github.com/MahmadSharaf/Cheat-Sheets/blob/master/GraphQL.md
            What GraphQL is

            GraphQL is a new API standard that provides a more efficient, powerful and flexible alternative to REST
            At its core, GraphQL enables declarative data fetching where a client can specify exactly what data it needs from an API.
            GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.
            GraphQL minimizes the amount of data that needs to be transferred over the network and thus majorly improves applications operating under these conditions.

            Schema

            GraphQL has its own type system that's used to define the schema of an API.

            The syntax for writing schemas is called the Schema Definition Language, or short SDL.

            In the below example, there are two types "Person" and "Post".

            type Person {
                name: String! 
                age: Int!
            }

            type Post {
                title: String!
            }

                "Person" has two fields "name" and "age" of types "string" and "int", the exclamation mark "!" means that the field is required.

                "Post" has one field "title" of type "string" and is required.

                These two types can get related together as below:

                type Person {
                    name: String! 
                    age: Int!
                    posts: [Post!]!
                }

                type Post {
                    title: String!
                    author: Person!
                }

                Person has a new field "posts" of type "list of Type Post". And Post has a new field "author" of type "Person".

                This created many to one relationship.

            The schema is one of the most important concepts when working with a GraphQL API.

            It specifies the capabilities of the API and defines how clients can fetch and update data.

            Each schema will have some root types that define the entry points for the API. These root types are, the Query, the Mutation, and the Subscription types.

            Query

            Requesting data is not coupled to the API endpoint, instead GraphQL has a single endpoint and the request payload determines the shape of the data received from the server.
            In a GraphQL query each field can have zero or more arguments if that is specified in the GraphQL schema.
            In the below example, it shows the schema for querying Person type. It starts with "type Query" to state that it is a Query object. Then the root field name of the query "allPersons" followed by the Type that will be sent, which in our case a list of Person Type.

            type Query {
            allPersons(last: Int): [Person!]!
            }

            For example, the following request payload contains a root field "allPersons" followed by the query payload.

            allPersons(last:2) {
            name
            posts{
                title
            }
            }

            This payload will return the name of the last two Persons and the title of their Posts.

            Mutation

            It is way of changing to the data in the server.
            There are three types of mutations:
                creating new data
                updating existing data
                deleting existing data
            Mutations generally follow the same syntactical structure as queries but they always need to start with a mutation keyword.
            In the below example, it shows the schema for mutating Person type. It starts with "type Mutation" to state that it is a Mutation object. Then the root field name of the mutation "createPerson" followed by the arguments of the Type "(name: String!, age: String!)" and the Type itself "Person!".

            type Mutation {
            createPerson(name: String!, age: String!): Person!
            }

            For example, it is possible to create a new person as below. It contains a root field "createPerson" which has the values of the record, followed by the payload. This payload is considered a query to the server. This helps to have a "mutation" and query in a single request to the server.

            mutation {
            createPerson(name: "Sharaf", age: 32) {
                id
            }
            }

            Subscription

            It is used to create a steady connection between the server and the client.
            It is used to update the client with any new events occurred on the server side.
            It has the same syntactical structure as queries but they always need to start with a "subscription" keyword.
            In the below example, it shows the schema for subscription type. It starts with "type Subscription" to state that it is a Subscription object. Then the root field name of the subscription "newPerson" followed by the arguments of the Type "{name, age}".

            type subscription {
            newPerson: Person!
            }

            In the below example, the client subscribes on the server to get informed about new users being created.

            subscription {
            newPerson {
                name
                age
            }
            }

            Architecture

            GraphQL, as a concept, is just a specification. This means that GraphQL is, in fact, not more than a long document that describes in detail how a GraphQL server has to behave, meaning what kinds of requests it should accept and what the response format for these requests has to look like. The specification for GraphQL can be found here.
            GraphQL to be used in a project, it has to be built from scratch. It can be built in any programming language with the help of any of the available reference implementations for it.
            GraphQL is actually transport-layer agnostic. This means it can potentially be used with any available network protocol. So, it is definitely possible to implement a GraphQL server based on TCP, WebSockets, or any other transport.
            GraphQL also doesn't care about the database or the format that is used to store the data.
            There are three common architectural use cases for GraphQL:
                GraphQL server with a connected database
                    It is the most common for greenfield projects.
                    Uses a single web server that implements the GraphQL.
                    The server resolves queries and constructs response with data that it fetches from the database.
                GraphQL server to integrate with existing or legacy systems.
                    It can be used to unify existing systems and hide their complexity of data fetching logic behind a GraphQL API. This way, new client applications can be developed that simply talk to the GraphQL server to fetch the data they need. The server is then responsible to make sure it fetches the data from the existing systems and packages it up in the GraphQL response format.
                    The server doesn't care about what the data sources are (databases, web services ,3rd party APIs, ..)
                A hybrid approach with a connected database and integration of existing systems.
                    In this architecture, when a query is received by the server, the server will resolve it and either retrieve the required data from the connected database or from the integrated APIs.
            The key to understanding how GraphQL is able to cope with all these different environments is the concept of a resolver function.
                GraphQL queries/mutations consist of set of fields
                Its server has one resolver function per field
                The purpose of each resolver is to retrieve the data to its corresponding field
https://quickref.me/graphql
            :Getting Started
            Overview

                An alternative approach to RESTful APIs
                GraphQL is a query language for APIs
                Easily describe the shape of the GraphQL API using clear shared terms.
                Clients issue queries/mutations to read and update data
                GraphQL syntax can express complex entity relations
                Libraries to implement GraphQL in different languages

            GraphQL
            Schema
            schema 	GraphQL schema definition
            query 	Read and traverse data
            mutation 	Modify data or trigger an action
            subscription 	Run a query when an event occurs
            Built-in Scalar Types
            Int 	Signed 32‐bit integer
            Float 	Signed double-precision floating-point value
            String 	UTF‐8 character sequence
            Boolean 	true or false
            ID 	A Unique identifier
            Type Definitions
            scalar 	Scalar Type
            type 	Object Type
            interface 	Interface Type
            union 	Union Type
            enum 	Enum Type
            input 	Input Object Type
            Type Modifiers
            String 	Nullable String
            String! 	Non-null String
            [String] 	List of nullable Strings
            [String]! 	Non-null list of nullable Strings
            [String!]! 	Non-null list of non-null Strings
            Input Arguments
            Basic Input

             

            type Query {
                users(limit: Int): [User]
            }

            Input with default value

             

            type Query {
                users(limit: Int = 10): [User]
            }

            Input with multiple arguments

             

            type Query {
                users(limit: Int, sort: String): [User]
            }

            Input with multiple arguments and default values

             

            type Query {
                users(limit: Int = 10, sort: String): [User]
            }
            type Query {
                users(limit: Int, sort: String = "asc"): [User]
            }
            type Query {
                users(limit: Int = 10, sort: String = "asc"): [User]
            }

            Input Types

             

            input ListUsersInput {
                limit: Int
                since_id: ID
            }

             

            type Mutation {
                users(params: ListUsersInput): [User]!
            }

            Custom Scalars

             

            scalar Url
            type User {
                name: String
                homepage: Url
            }

            Interfaces

             

            interface Foo {
                is_foo: Boolean
            }
            interface Goo {
                is_goo: Boolean
            }
            type Bar implements Foo {
                is_foo: Boolean
                is_bar: Boolean
            }
            type Baz implements Foo, Goo {
                is_foo: Boolean
                is_goo: Boolean
                is_baz: Boolean
            }

            Object implementing one or more Interfaces
            Unions

             

            type Foo {
                name: String
            }
            type Bar {
                is_bar: String
            }
            union SingleUnion = Foo
            union MultipleUnion = Foo | Bar
            type Root {
                single: SingleUnion
                multiple: MultipleUnion
            }

            Union of one or more Objects
            Enums

             

            enum USER_STATE {
                NOT_FOUND
                ACTIVE
                INACTIVE
                SUSPENDED
            }
            type Root {
                stateForUser(userID: ID!): USER_STATE!
                users(state: USER_STATE, limit: Int = 10): [User]
            }

            :Also see

                GraphQL Schema Language Cheat Sheet (github.com)

