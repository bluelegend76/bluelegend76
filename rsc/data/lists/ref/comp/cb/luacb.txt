set foldmethod=indent foldlevel=2
vim: fdm=indent:fdl=2:

~/Dropbox/rsc/data/lists/ref/comp/lang/lua/vlc_lua.txt  TODO(=input all module methods) !!

Lua Lua 5.3 Reference Manual
            Contents
            1 - Introduction
            2 - Basic Concepts
                2.1 - Values and Types
                2.2 - Environments and the Global Environment
                2.3 - Error Handling
                2.4 - Metatables and Metamethods
                2.5 - Garbage Collection
                    2.5.1 - Garbage-Collection Metamethods
                    2.5.2 - Weak Tables 
                2.6 - Coroutines 
            3 - The Language
                3.1 - Lexical Conventions
                3.2 - Variables
                3.3 - Statements
                    3.3.1 - Blocks
                    3.3.2 - Chunks
                    3.3.3 - Assignment
                    3.3.4 - Control Structures
                    3.3.5 - For Statement
                    3.3.6 - Function Calls as Statements
                    3.3.7 - Local Declarations 
                3.4 - Expressions
                    3.4.1 - Arithmetic Operators
                    3.4.2 - Bitwise Operators
                    3.4.3 - Coercions and Conversions
                    3.4.4 - Relational Operators
                    3.4.5 - Logical Operators
                    3.4.6 - Concatenation
                    3.4.7 - The Length Operator
                    3.4.8 - Precedence
                    3.4.9 - Table Constructors
                    3.4.10 - Function Calls
                    3.4.11 - Function Definitions 
                3.5 - Visibility Rules 
            4 - The Application Program Interface
                4.1 - The Stack
                4.2 - Stack Size
                4.3 - Valid and Acceptable Indices
                4.4 - C Closures
                4.5 - Registry
                4.6 - Error Handling in C
                4.7 - Handling Yields in C
                4.8 - Functions and Types
                4.9 - The Debug Interface 
            5 - The Auxiliary Library
                5.1 - Functions and Types 
            6 - Standard Libraries
                6.1 - Basic Functions
                6.2 - Coroutine Manipulation
                6.3 - Modules
                6.4 - String Manipulation
                    6.4.1 - Patterns
                    6.4.2 - Format Strings for Pack and Unpack 
                6.5 - UTF-8 Support
                6.6 - Table Manipulation
                6.7 - Mathematical Functions
                6.8 - Input and Output Facilities
                6.9 - Operating System Facilities
                6.10 - The Debug Library 
            7 - Lua Standalone
            8 - Incompatibilities with the Previous Version
                8.1 - Changes in the Language
                8.2 - Changes in the Libraries
                8.3 - Changes in the API 
            9 - The Complete Syntax of Lua 
Lua functions
            basic
                    _G
                    _VERSION
                    assert
                    collectgarbage
                    dofile
                    error
                    getmetatable
                    ipairs
                    load
                    loadfile
                    next
                    pairs
                    pcall
                    print
                    rawequal
                    rawget
                    rawlen
                    rawset
                    require
                    select
                    setmetatable
                    tonumber
                tostring
                type
                    xpcall
                    .
            coroutine
                    coroutine.create
                    coroutine.isyieldable
                    coroutine.resume
                    coroutine.running
                    coroutine.status
                    coroutine.wrap
                    coroutine.yield
            debug
                    debug.debug
                    debug.gethook
                    debug.getinfo
                    debug.getlocal
                    debug.getmetatable
                    debug.getregistry
                    debug.getupvalue
                    debug.getuservalue
                    debug.sethook
                    debug.setlocal
                    debug.setmetatable
                    debug.setupvalue
                    debug.setuservalue
                    debug.traceback
                    debug.upvalueid
                    debug.upvaluejoin
            io
                    io.close
                    io.flush
                    io.input
                    io.lines
                    io.open
                    io.output
                    io.popen
                    io.read
                    io.stderr
                    io.stdin
                    io.stdout
                    io.tmpfile
                    io.type
                io.write
                    file:close
                    file:flush
                    file:lines
                    file:read
                    file:seek
                    file:setvbuf
                    file:write
            math
                    math.abs
                    math.acos
                    math.asin
                    math.atan
                    math.ceil
                    math.cos
                    math.deg
                    math.exp
                    math.floor
                    math.fmod
                    math.huge
                    math.log
                    math.max
                    math.maxinteger
                    math.min
                    math.mininteger
                    math.modf
                math.pi
                    math.rad
                    .
                math.random
                math.randomseed
                    math.sin
                    math.sqrt
                    math.tan
                    math.tointeger
                    math.type
                    math.ult
            os
                    os.clock
                    os.date
                    os.difftime
                    os.execute
                    os.exit
                    os.getenv
                    os.remove
                    os.rename
                    os.setlocale
                    os.time
                    os.tmpname
            package
                    package.config
                    package.cpath
                    package.loaded
                    package.loadlib
                    package.path
                    package.preload
                    package.searchers
                    package.searchpath
            string
                    string.byte
                    string.char
                    string.dump
                    string.find
                    string.format
                    string.gmatch
                    string.gsub
                    string.len
                    string.lower
                    string.match
                    string.pack
                    string.packsize
                    string.rep
                    string.reverse
                    string.sub
                    string.unpack
                    string.upper
            table
                    table.concat
                    table.insert
                    table.move
                    table.pack
                    table.remove
                    table.sort
                    table.unpack
            utf8
                    utf8.char
                    utf8.charpattern
                    utf8.codepoint
                    utf8.codes
                    utf8.len
                    utf8.offset
            metamethods
                    __add
                    __band
                    __bnot
                    __bor
                    __bxor
                    __call
                    __concat
                    __div
                    __eq
                    __gc
                    __idiv
                    __index
                    __le
                    __len
                    __lt
                    __metatable
                    __mod
                    __mode
                    __mul
                    __name
                    __newindex
                    __pairs
                    __pow
                    __shl
                    __shr
                    __sub
                    __tostring
                    __unm
            environment variables
                    LUA_CPATH
                    LUA_CPATH_5_3
                    LUA_INIT
                    LUA_INIT_5_3
                    LUA_PATH
                    LUA_PATH_5_3
            C API
                    lua_Alloc
                    lua_CFunction
                    lua_Debug
                    lua_Hook
                    lua_Integer
                    lua_KContext
                    lua_KFunction
                    lua_Number
                    lua_Reader
                    lua_State
                    lua_Unsigned
                    lua_Writer
                    --
                    lua_absindex
                    lua_arith
                    lua_atpanic
                    lua_call
                    lua_callk
                    lua_checkstack
                    lua_close
                    lua_compare
                    lua_concat
                    lua_copy
                    lua_createtable
                    lua_dump
                    lua_error
                    lua_gc
                    lua_getallocf
                    lua_getextraspace
                    lua_getfield
                    lua_getglobal
                    lua_gethook
                    lua_gethookcount
                    lua_gethookmask
                    lua_geti
                    lua_getinfo
                    lua_getlocal
                    lua_getmetatable
                    lua_getstack
                    lua_gettable
                    lua_gettop
                    lua_getupvalue
                    lua_getuservalue
                    lua_insert
                    lua_isboolean
                    lua_iscfunction
                    lua_isfunction
                    lua_isinteger
                    lua_islightuserdata
                    lua_isnil
                    lua_isnone
                    lua_isnoneornil
                    lua_isnumber
                    lua_isstring
                    lua_istable
                    lua_isthread
                    lua_isuserdata
                    lua_isyieldable
                    lua_len
                    lua_load
                    lua_newstate
                    lua_newtable
                    lua_newthread
                    lua_newuserdata
                    lua_next
                    lua_numbertointeger
                    lua_pcall
                    lua_pcallk
                    lua_pop
                    lua_pushboolean
                    lua_pushcclosure
                    lua_pushcfunction
                    lua_pushfstring
                    lua_pushglobaltable
                    lua_pushinteger
                    lua_pushlightuserdata
                    lua_pushliteral
                    lua_pushlstring
                    lua_pushnil
                    lua_pushnumber
                    lua_pushstring
                    lua_pushthread
                    lua_pushvalue
                    lua_pushvfstring
                    lua_rawequal
                    lua_rawget
                    lua_rawgeti
                    lua_rawgetp
                    lua_rawlen
                    lua_rawset
                    lua_rawseti
                    lua_rawsetp
                    lua_register
                    lua_remove
                    lua_replace
                    lua_resume
                    lua_rotate
                    lua_setallocf
                    lua_setfield
                    lua_setglobal
                    lua_sethook
                    lua_seti
                    lua_setlocal
                    lua_setmetatable
                    lua_settable
                    lua_settop
                    lua_setupvalue
                    lua_setuservalue
                    lua_status
                    lua_stringtonumber
                    lua_toboolean
                    lua_tocfunction
                    lua_tointeger
                    lua_tointegerx
                    lua_tolstring
                    lua_tonumber
                    lua_tonumberx
                    lua_topointer
                    lua_tostring
                    lua_tothread
                    lua_touserdata
                    lua_type
                    lua_typename
                    lua_upvalueid
                    lua_upvalueindex
                    lua_upvaluejoin
                    lua_version
                    lua_xmove
                    lua_yield
                    lua_yieldk
            auxiliary library
                    luaL_Buffer
                    luaL_Reg
                    luaL_Stream
                    --
                    luaL_addchar
                    luaL_addlstring
                    luaL_addsize
                    luaL_addstring
                    luaL_addvalue
                    luaL_argcheck
                    luaL_argerror
                    luaL_buffinit
                    luaL_buffinitsize
                    luaL_callmeta
                    luaL_checkany
                    luaL_checkinteger
                    luaL_checklstring
                    luaL_checknumber
                    luaL_checkoption
                    luaL_checkstack
                    luaL_checkstring
                    luaL_checktype
                    luaL_checkudata
                    luaL_checkversion
                    luaL_dofile
                    luaL_dostring
                    luaL_error
                    luaL_execresult
                    luaL_fileresult
                    luaL_getmetafield
                    luaL_getmetatable
                    luaL_getsubtable
                    luaL_gsub
                    luaL_len
                    luaL_loadbuffer
                    luaL_loadbufferx
                    luaL_loadfile
                    luaL_loadfilex
                    luaL_loadstring
                    luaL_newlib
                    luaL_newlibtable
                    luaL_newmetatable
                    luaL_newstate
                    luaL_openlibs
                    luaL_opt
                    luaL_optinteger
                    luaL_optlstring
                    luaL_optnumber
                    luaL_optstring
                    luaL_prepbuffer
                    luaL_prepbuffsize
                    luaL_pushresult
                    luaL_pushresultsize
                    luaL_ref
                    luaL_requiref
                    luaL_setfuncs
                    luaL_setmetatable
                    luaL_testudata
                    luaL_tolstring
                    luaL_traceback
                    luaL_typename
                    luaL_unref
                    luaL_where
            standard library
                    luaopen_base
                    luaopen_coroutine
                    luaopen_debug
                    luaopen_io
                    luaopen_math
                    luaopen_os
                    luaopen_package
                    luaopen_string
                    luaopen_table
                    luaopen_utf8
            constants
                    LUA_ERRERR
                    LUA_ERRFILE
                    LUA_ERRGCMM
                    LUA_ERRMEM
                    LUA_ERRRUN
                    LUA_ERRSYNTAX
                    LUA_HOOKCALL
                    LUA_HOOKCOUNT
                    LUA_HOOKLINE
                    LUA_HOOKRET
                    LUA_HOOKTAILCALL
                    LUA_MASKCALL
                    LUA_MASKCOUNT
                    LUA_MASKLINE
                    LUA_MASKRET
                    LUA_MAXINTEGER
                    LUA_MININTEGER
                    LUA_MINSTACK
                    LUA_MULTRET
                    LUA_NOREF
                    LUA_OK
                    LUA_OPADD
                    LUA_OPBAND
                    LUA_OPBNOT
                    LUA_OPBOR
                    LUA_OPBXOR
                    LUA_OPDIV
                    LUA_OPEQ
                    LUA_OPIDIV
                    LUA_OPLE
                    LUA_OPLT
                    LUA_OPMOD
                    LUA_OPMUL
                    LUA_OPPOW
                    LUA_OPSHL
                    LUA_OPSHR
                    LUA_OPSUB
                    LUA_OPUNM
                    LUA_REFNIL
                    LUA_REGISTRYINDEX
                    LUA_RIDX_GLOBALS
                    LUA_RIDX_MAINTHREAD
                    LUA_TBOOLEAN
                    LUA_TFUNCTION
                    LUA_TLIGHTUSERDATA
                    LUA_TNIL
                    LUA_TNONE
                    LUA_TNUMBER
                    LUA_TSTRING
                    LUA_TTABLE
                    LUA_TTHREAD
                    LUA_TUSERDATA
                    LUA_USE_APICHECK
                    LUA_YIELD
                    LUAL_BUFFERSIZE
https://www.lua.org/manual/5.3/
~/Empire/Doks/Comp/lang/lua/cheatsh-qref/lua5-1.shortref2.pdf
            f [[see you soon]]
            f {x = 3, y = 4}
            t.f (x)
            x:move (2, -3)

            The Lua language (v5.1)
            Reserved identifiers and comments
            and
            break
            do
            else
            elseif
            local
            nil
            not
            or
            repeat
            comment to end of line
            -- ...
            _X is "reserved" (by convention) for constants (with X
            being any sequence of uppercase letters)

            end
            return
            --[=[ ]=]
#!

            false
            for
            function if
            in
            then
            true
            until
            while
            multi line comment (zero or multiple '=' are valid)
            usual Unix shebang; Lua ignores whole first line if this
            starts the line.

            Metatable operations (base library required)
            setmetatable (t, mt)
            getmetatable (t)
            rawget (t, i)
            rawset (t, i, v)
            rawequal (t1, t2)

            Types (the string values are the possible results of base library function type())
            "nil"
            "boolean"
            "number"
            "string"
            "table"
            "function"
            "thread"
            Note: for type boolean, nil and false count as false; everything else is true (including 0 and "").

            "userdata"

            string delimiters; interpret escapes.
            [=[...]=]
            \b backspace
            \f form feed
            \n newline
            \" d. quote
            \' quote
            \[ sq. bracket

            __add, __sub
            __mod
            __unm
            __concat
            __lt

            multi line string; escape sequences are ignored.
            \r return
            \t horiz. tab
            \v vert. tab
            \] sq. bracket
            \ddd decimal (up to 3 digits)

            Operators, decreasing precedence
            ^ (right associative, math library required)
# (length of strings and tables)
            not
            *
            /
            +
            .. (string concatenation, right associative)
            <
            >
            <=
            >=
            and (stops on false or nil, returns last evaluated value)
            or (stops on true (not false or nil), returns last evaluated value)

            __index

            - (unary)
            %
            ~=

            sets mt as metatable for t, unless t's metatable has a __metatable field, and returns t
            returns __metatable field of t's metatable or t's metatable or nil
            gets t[i] of a table without invoking metamethods
            sets t[i] = v on a table without invoking metamethods
            returns boolean (t1 == t2) without invoking metamethods

            Metatable fields (for tables and userdata)

            Strings and escape sequences
            '...' and "..."
            \a bell
            \\ backslash

            shortcut for f([[see you soon]])
            shortcut for f({x = 3, y = 4})
            calling a function assigned to field f of table t
            object call: shortcut for x.move(x, 2, -3)

            __call
            __gc

            ==

            __metatable

            sets handler h(a, b) for '+' and for binary '-'
            set handler h(a, b) for '%'
            sets handler h(a) for unary '-'
            sets handler h(a, b) for '..'
            sets handler h(a, b) for '<', '>' and possibly '<=',
            '>=' (if no __le)
            sets handler h(t, k) for access to non-existing
            field
            sets handler h(f, ...) for function call (using the
            object as a function)
            sets finalizer h(ud) for userdata (has to be set
            from C)
            sets value to be returned by getmetatable()

            simple assignment; variables are not typed and can hold different types. Local variables are
            lexically scoped; their scope begins after the full declaration (so that local a = 5).
            multiple assignments are supported
            swap values: right hand side is evaluated before assignment takes place
            excess values on right hand side ("6") are evaluated but discarded
            for missing values on right hand side nil is assumed
            destroys a; its contents are eligible for garbage collection if unreferenced.
            if z is not defined it is nil, so nil is assigned to a (destroying it)
            numbers expected, strings are converted to numbers (a = 5)
            strings expected, numbers are converted to strings (a = "32")

            __newindex

            sets handler h(t, k, v) for assignment to nonexisting field
            sets handler h(a) to convert to string, e.g. for
            print()
            table mode: 'k' = weak keys; 'v' = weak
            values; 'kv' = both.

            __tostring
            __mode

            Environment and global variables
            getfenv ([f])
            setfenv (f, t)
            _G
            _VERSION

            do block end
            if exp then block {elseif exp then block} [else block] end
            while exp do block end
            repeat block until exp
            for var = start, end [, step] do block end
            for vars in iterator do block end
            break

            require (pkgname)
            dofile ([filename])

            block; introduces local scope.
            conditional execution
            loop as long as exp is true
            exits when exp becomes true; exp is in loop scope.
            numerical for loop; var is local to loop.
            iterator based for loop; vars are local to loop.
            exits loop; must be last statement in block.

            load (func [, chunkname])
            loadfile (filename)
            loadstring (s [, name])
            pcall (f [, args])
            xpcall (f, h)

            Table constructors
            t = {}
            t = {"yes", "no", "?"}
            t = { [1] = "yes", [2] = "no", [3] = "?" }
            t = {[-900] = 3, [900] = 4}
            t = {x=5, y=10}
            t = {x=5, y=10; "yes", "no"}
            t = {msg = "choice", {"yes", "no", "?"}}

            loads a package, raises error if it can't be loaded
            loads and executes the contents of filename [default: standard input]; returns its returned
            values.
            loads a chunk (with chunk name set to name) using function func to get its pieces; returns
            compiled chunk as function (or nil and error message).
            loads file filename; return values like load().
            loads string s (with chunk name set to name); return values like load().
            calls f() in protected mode; returns true and function results or false and error message.
            as pcall() but passes error handler h instead of extra args; returns as pcall() but with the result
            of h() as error message, if any.

            creates an empty table and assigns it to t
            simple array; elements are t[1], t[2], t[3].
            same as above, but with explicit fields
            sparse array with just two elements (no space wasted)
            hash table, fields are t["x"], t["y"] (or t.x, t.y)
            mixed, fields/elements are t.x, t.y, t[1], t[2]
            tables can contain others tables as fields

            Simple output and error feedback

            defines function and assigns to global variable name
            defines function as local to chunk
            anonymous function assigned to variable f
            variable argument list, in body accessed as ...
            shortcut for t.name = function ...
            object function, gets obj as additional first argument self

            type (x)
            tostring (x)
            tonumber (x [, b])

            print (args)
            error (msg [, n])
            assert (v [, msg])
            select (index, ...)

            unpack (t)

            returns the arguments after argument number index or (if index is "#") the total number of
            arguments it received after index
            returns the type of x as a string (e.g. "nil", "string"); see Types above.
            converts x to a string, using t's metatable's __tostring if available
            converts string x representing a number in base b [2..36, default: 10] to a number, or nil if
            invalid; for base 10 accepts full format (e.g. "1.5e6").
            returns t[1]..t[n] (n = #t) as separate values

            Iterators

            Function call
            simple call, possibly returning one or more values
            shortcut for f("hello")
            shortcut for f('goodbye')

            prints each of the passed args to stdout using tostring() (see below)
            terminates the program or the last protected call (e.g. pcall()) with error message msg quoting
            level n [default: 1, current function]
            calls error(msg) if v is nil or false [default msg: "assertion failed!"]

            Information and conversion

            Function definition
            function name ( args ) body [return values] end
            local function name ( args ) body [return values] end
            f = function ( args ) body [return values] end
            function ( [args, ] ... ) body [return values] end
            function t.name ( args ) body [return values] end
            function obj:name ( args ) body [return values] end

            if f is a function, returns its environment; if f is a number, returns the environment of function
            at level f (1 = current [default], 0 = global); if the environment has a field __fenv, returns that
            instead.
            sets environment for function f (or function at level f, 0 = current thread); if the original
            environment has a field __fenv, raises an error. Returns function f if f ~= 0.
            global variable whose value is the global environment (that is, _G._G == _G)
            global variable containing the interpreter's version (e.g. "Lua 5.1")

            Loading and executing

            Control structures

            f (x)
            f "hello"
            f 'goodbye'

            sets handler h(a, b) for '*' and for '/'
            sets handler h(a, b) for '^'
            sets handler h(a) for the # operator (userdata)
            sets handler h(a, b) for '==', '~='
            sets handler h(a, b) for '<=', '>='

            The base library [no prefix]

            Assignment and coercion
            a = 5 b= "hi"
            local a = a
            a, b, c = 1, 2, 3
            a, b = b, a
            a, b = 4, 5, "6"
            a, b = "there"
            a = nil
            a=z
            a = "3" + "2"
            a = 3 .. 2

            __mul, __div
            __pow
            __len
            __eq
            __le

            ipairs (t)
            pairs (t)
            next (t [, inx])
            1

            returns an iterator getting index, value pairs of array t in numerical order
            returns an iterator getting key, value pairs of table t in an unspecified order
            if inx is nil [default] returns first index, value pair of table t; if inx is the previous index
            returns next index, value pair or nil when finished.

            Garbage collection
            collectgarbage (opt [, arg])

            Pseudo-random numbers
            generic interface to the garbage collector; opt defines function performed.

            math.random ([n [, m])

            Modules and the package library [package]

            math.randomseed (n)

            creates module name. If there is a table in package.loaded[name], this table is the module.
            Otherwise, if there is a global table name, this table is the module. Otherwise creates a new
            table and sets it as the value of the global name and the value of package.loaded[name].
            Optional arguments are functions to be applied over the module.
            package.loadlib (lib, func)
            loads dynamic library lib (e.g. .so or .dll) and returns function func (or nil and error message)
            package.path, package.cpath contains the paths used by require() to search for a Lua or C loader, respectively
            a table used by require to control which modules are already loaded (see module)
            package.loaded
            a table to store loaders for specific modules (see require)
            package.preload
            package.seeall (module)
            sets a metatable for module with its __index field referring to the global environment

            returns a pseudo-random number in range [0, 1] if no arguments given; in range [1, n] if n is
            given, in range [n, m] if both n and m are passed.
            sets a seed n for random sequence (same seed = same sequence)

            module (name, ...)

            The string library [string]
            Note: string indexes extend from 1 to #string, or from end of string if negative (index -1 refers to the last character).
            Note: the string library sets a metatable for strings where the __index field points to the string table. String functions can be used
            in object-oriented style, e.g. string.len(s) can be written s:len(); literals have to be enclosed in parentheses, e.g. ("xyz"):len().

            Basic operations
            string.len (s)
            string.sub (s, i [, j])
            string.rep (s, n)
            string.upper (s)
            string.lower (s)

            The coroutine library [coroutine]
            coroutine.create (f)
            coroutine.resume (co, args)
            coroutine.yield (args)
            coroutine.status (co)
            coroutine.running ()
            coroutine.wrap (f)

            creates a new coroutine with Lua function f() as body and returns it
            starts or continues running coroutine co, passing args to it; returns true (and possibly values)
            if co calls coroutine.yield() or terminates or false and an error message.
            suspends execution of the calling coroutine (not from within C functions, metamethods or
            iterators); any args become extra return values of coroutine.resume().
            returns the status of coroutine co: either "running", "suspended" or "dead"
            returns the running coroutine or nil when called by the main thread
            creates a new coroutine with Lua function f as body and returns a function; this function will
            act as coroutine.resume() without the first argument and the first return value, propagating
            any errors.

            Character codes
            string.byte (s [, i [, j]])
            string.char (args)

            table.maxn (t)
            table.sort (t [, cf])
            table.concat (t [, s [, i [, j]]])

            string.dump (f)

            string.format (s [, args])

            inserts v at numerical index i [default: after the end] in table t
            removes element at numerical index i [default: last element] from table t; returns the removed
            element or nil on empty table.
            returns the largest positive numerical index of table t or zero if t has no positive indices
            sorts (in place) elements from t[1] to #t, using compare function cf(e1, e2) [default: '<']
            returns a single string made by concatenating table elements t[i] to t[j] [default: i =1, j = #t]
            separated by string s; returns empty string if no elements exist or i > j.

            % [flags] [field_width] [.precision] type

            Formatting field types
            %d
            %o
            %x
            %f
            %e
            %g
            %c
            %s
            %q
            %%

            returns the absolute value of x
            returns the remainder of x / y as a rounded-down integer, for y ~= 0
            returns x rounded down to the nearest integer
            returns x rounded up to the nearest integer
            returns the minimum value from the args received
            returns the maximum value from the args received

            +
            (space)
#

            returns the square root of x, for x >= 0
            returns x raised to the power of y, i.e. x^y; if x < 0, y must be integer.
            global function added by the math library to make operator '^' work
            returns e (base of natural logs) raised to the power of x, i.e. e^x
            returns the natural logarithm of x, for x >= 0
            returns the base-10 logarithm of x, for x >= 0

            left-justifies within field_width [default: right-justify]
            prepends sign (only applies to numbers)
            prepends sign if negative, else blank space
            adds "0x" before %x, force decimal point for %e, %f, leaves trailing zeros for %g

            Formatting field width and precision
            n
            0n
            .n

            Trigonometrical
            converts angle a from radians to degrees
            converts angle a from degrees to radians
            constant containing the value of pi
            returns the sine of angle a (measured in radians)
            returns the cosine of angle a (measured in radians)
            returns the tangent of angle a (measured in radians)
            returns the arc sine of x in radians, for x in [-1, 1]
            returns the arc cosine of x in radians, for x in [-1, 1]
            returns the arc tangent of x in radians
            similar to math.atan(y / x) but with quadrant and allowing x = 0

            puts at least n (<100) characters, pad with blanks
            puts at least n (<100) characters, left-pad with zeros
            puts at least n (<100) digits for integers; rounds to n decimals for floating-point; puts no more than n
            (<100) characters for strings.

            Formatting examples
            string.format("results: %d, %d", 13, 27)
            string.format("<%5d>", 13)
            string.format("<%-5d>", 13)
            string.format("<%05d>", 13)
            string.format("<%06.3d>", 13)
            string.format("<%f>", math.pi)
            string.format("<%e>", math.pi)
            string.format("<%.4f>", math.pi)
            string.format("<%9.4f>", math.pi)
            string.format("<%c>", 64)
            string.format("<%.4s>", "goodbye")
            string.format("%q", [[she said "hi"]])

            Splitting on powers of 2
            math.frexp (x)
            math.ldexp (x, y)

            decimal integer
            octal integer
            hexadecimal integer, uppercase if %X
            floating-point in the form [-]nnnn.nnnn
            floating-point in exp. Form [-]n.nnnn e [+|-]nnn, uppercase if %E
            floating-point as %e if exp. < -4 or >= precision, else as %f; uppercase if %G.
            character having the (system-dependent) code passed as integer
            string with no embedded zeros
            string between double quotes, with all special characters escaped
            '%' character

            Formatting flags

            Exponential and logarithmic

            math.deg (a)
            math.rad (a)
            math.pi
            math.sin (a)
            math.cos (a)
            math.tan (a)
            math.asin (x)
            math.acos (x)
            math.atan (x)
            math.atan2 (y, x)

            returns a copy of s where formatting directives beginning with '%' are replaced by the value of
            arguments args, in the given order (see Formatting directives below)

            Formatting directives for string.format

            Basic operations

            math.sqrt (x)
            math.pow (x, y)
            __pow (x, y)
            math.exp (x)
            math.log (x)
            math.log10 (x)

            returns a binary representation of function f(), for later use with loadstring() (f() must be a Lua
            function with no upvalues)

            Formatting

            The mathematical library [math]
            math.abs (x)
            math.mod (x, y)
            math.floor (x)
            math.ceil (x)
            math.min (args)
            math.max (args)

            returns the platform-dependent numerical code (e.g. ASCII) of characters s[i], s[i+1], ···, s[j]. The
            default value for i is 1; the default value for j is i.
            returns a string made of the characters whose platform-dependent numerical codes are passed as args

            Function storage

            The table library [table]
            table.insert (t, [i,] v)
            table.remove (t [, i])

            returns the length of string s, including embedded zeros (see also # operator)
            returns the substring of s from position i to j [default: -1] inclusive
            returns a string made of n concatenated copies of string s
            returns a copy of s converted to uppercase according to locale
            returns a copy of s converted to lowercase according to locale

            splits x into normalized fraction and exponent of 2 and returns both
            returns x * (2 ^ y) with x = normalized fraction, y = exponent of 2
            2

            results: 13, 27
            < 13>
            <13 >
            <00013>
            < 013>
            <3.141593>
            <3.141593e+00>
            <3.1416>
            < 3.1416>
            <@>
            <good>
            "she said \"hi\""

            Finding, replacing, iterating (for the Patterns see below)
            string.find (s, p [, i [, d]])
            string.gmatch (s, p)
            string.gsub (s, p, r [, n])

            string.match (s, p [, i])

            file:write (values)

            returns first and last position of pattern p in string s, or nil if not found, starting search at
            position i [default: 1]; returns captures as extra results. If d is true, treat pattern as plain string.
            returns an iterator getting next occurrence of pattern p (or its captures) in string s as
            substring(s) matching the pattern.
            returns a copy of s with up to n [default: all] occurrences of pattern p (or its captures) replaced
            by r if r is a string (r can include references to captures in the form %n). If r is a function r() is
            called for each match and receives captured substrings; it should return the replacement string.
            If r is a table, the captures are used as fields into the table. The function returns the number of
            substitutions made as second result.
            returns captures of pattern p in string s (or the whole match if p specifies no captures) or nil if
            p does not match s; starts search at position i [default: 1].

            file:seek ([p] [, of])
            file:flush ()

            Simple I/O
            io.input ([file])
            io.output ([file])

            Patterns and pattern items
            io.close ([file])
            io.read (formats)
            io.lines ([fn])

            General pattern format: pattern_item [ pattern_items ]
            cc
            matches a single character in the class cc (see Pattern character classes below)
            cc*
            matches zero or more characters in the class cc; matchest longest sequence (greedy).
            ccmatches zero or more characters in the class cc; matchest shortest sequence (non-greedy).
            cc+
            matches one or more characters in the class cc; matchest longest sequence (greedy).
            cc?
            matches zero or one character in the class cc
            %n
            matches the n-th captured string (n = 1..9, see Pattern captures)
            %bxy
            matches the balanced string from character x to character y (e.g. %b() for nested parentheses)
            anchors pattern to start of string, must be the first item in the pattern
            ^
            anchors pattern to end of string, must be the last item in the pattern
            $

            io.write (values)
            io.flush ()

            predefined file objects for stdin, stdout and stderr streams
            starts program prog in a separate process and returns a file handle that you can use to read data
            from (if mode is "r", default) or to write data to (if mode is "w")
            io.type (x)
            returns the string "file" if x is an open file, "closed file" if x is a closed file or nil if x is not a
            file object
            io.tmpfile ()
            returns a file object for a temporary file (deleted when program ends)
            Note: unless otherwise stated, the I/O functions return nil and an error message on failure; passing a closed file object raises an
            error instead.
            io.stdin, io.stdout, io.stderr
            io.popen ([prog [, mode]])

            stores substring matching pattern as capture %1..%9, in order of opening parentheses
            stores current string position as capture

            Pattern character classes
            .
            %a
            %c
            %d
            %l
            %p
            %s
            %u
            %w
            %x
            %z
            %x
            [ set ]

            any character
            any letter
            any control character
            any digit
            any lowercase letter
            any punctuation character
            any whitespace character
            any uppercase letter
            any alphanumeric character
            any hexadecimal digit
            the byte value zero
            if x is a symbol the symbol itself
            any character in any of the given classes; can also
            be a range [c1-c2], e.g. [a-z].

            %A
            %C
            %D
            %L
            %P
            %S
            %U
            %W
            %X
            %Z
            x
            [ ^set ]

            any non-letter
            any non-control character
            any non-digit
            any non-(lowercase letter)
            any non-punctuation character
            any non-whitespace character
            any non-(uppercase letter)
            any non-alphanumeric character
            any non-(hexadecimal digit)
            any non-zero character
            if x not in ^$()%.[]*+-? the character itself
            any character not in set

            T he operating system library [os]
            System interaction
            os.execute (cmd)
            os.exit ([code])
            os.getenv (var)
            os.setlocale (s [, c])
            os.remove (fn)
            os.rename (of, nf)
            os.tmpname ()

            Pattern examples
            string.find("Lua is great!", "is")
            string.find("Lua is great!", "%s")
            string.gsub("Lua is great!", "%s", "-")
            string.gsub("Lua is great!", "[%s%l]", "*")
            string.gsub("Lua is great!", "%a+", "*")
            string.gsub("Lua is great!", "(.)", "%1%1")
            string.gsub("Lua is great!", "%but", "")
            string.gsub("Lua is great!", "^.-a", "LUA")
            string.gsub("Lua is great!", "^.-a",
            function(s) return string.upper(s) end)

            5
            4
            Lua-is-great!
            L***********!
            * * *!
            LLuuaa iiss ggrreeaatt!!
            L!
            LUA is great!
            LUA is great!

            os.clock ()
            os.time ([tt])

            os.date ([fmt [, t]])

            The I/O library [io]

            file:close ()
            file:read (formats)
            file:lines ()

            os.difftime (t2, t1)
            opens file with name fn in mode m: "r" = read [default], "w" = write", "a" = append, "r+" =
            update-preserve, "w+" = update-erase, "a+" = update-append (add trailing "b" for binary mode
            on some systems); returns a file object (a userdata with a C handle).
            closes file
            returns a value from file for each of the passed formats: "*n" = reads a number, "*a" = reads
            the whole file as a string from current position (returns "" at end of file), "*l" = reads a line (nil
            at end of file) [default], n = reads a string of up to n characters (nil at end of file)
            returns an iterator function for reading file line by line; the iterator does not close the file when
            finished.

            calls a system shell to execute the string cmd as a command; returns a system-dependent status
            code.
            terminates the program returning code [default: success]
            returns a string with the value of the environment variable var or nil if no such variable exists
            sets the locale described by string s for category c: "all", "collate", "ctype", "monetary",
            "numeric" or "time" [default: "all"]; returns the name of the locale or nil if it can't be set.
            deletes the file fn; in case of error returns nil and error description.
            renames file of to nf ; in case of error returns nil and error description.
            returns a string usable as name for a temporary file; subject to name conflicts, use io.tmpfile()
            instead.

            Date/time

            6
            4
            2
            11
            3
            13
            1
            1
            1

            Complete I/O
            io.open (fn [, m])

            sets file as default input file; file can be either an open file object or a file name; in the latter
            case the file is opened for reading in text mode. Returns a file object, the current one if no file
            given; raises error on failure.
            sets file as default output file (the current output file is not closed); file can be either an open
            file object or a file name; in the latter case the file is opened for writing in text mode. Returns a
            file object, the current one if no file given; raises error on failure.
            closes file (a file object) [default: closes the default output file]
            reads from the default input file, usage as file:read()
            opens the file with name fn for reading and returns an iterator function to read line by line; the
            iterator closes the file when finished. If no fn is given, returns an iterator reading lines from the
            default input file.
            writes to the default output file, usage as file:write()
            flushes any data still held in buffers to the default output file

            Standard files and utility functions

            Captures
            (pattern)
            ()

            writes each of the values (strings or numbers) to file, with no added separators. Numbers are
            written as text, strings can contain binary data (in this case, file may need to be opened in
            binary mode on some systems).
            sets the current position in file relative to p ("set" = start of file [default], "cur" = current, "end"
            = end of file) adding offset of [default: zero]; returns new current position in file.
            flushes any data still held in buffers to file

            3

            returns an approximation of the amount in seconds of CPU time used by the program
            returns a system-dependent number representing date/time described by table tt [default:
            current]. tt must have fields year, month, day; can have fields hour, min, sec, isdst (daylight
            saving, boolean). On many systems the returned value is the number of seconds since a fixed
            point in time (the "epoch").
            returns a table or a string describing date/time t (should be a value returned by os.time()
            [default: current date/time]), according to the format string fmt [default: date/time according to
            locale settings]; if fmt is "*t" or "!*t", returns a table with fields year (yyyy), month (1..12),
            day (1..31), hour (0..23), min (0..59), sec (0..61), wday (1..7, Sunday = 1), yday (1..366),
            isdst (true = daylight saving), else returns the fmt string with formatting directives beginning
            with '%' replaced according to Time formatting directives (see below). In either case a leading
            "!" requests UTC (Coordinated Universal Time).
            returns the difference between two values returned by os.time()

            --

            Time formatting directives (most used, portable features):
            date/time (locale)
            date only (locale)
            year (nn)
            day of year (001..366)
            month (01..12)
            abbreviated month name (locale)
            day of month (01..31)
            week number (01..53), Sunday-based
            weekday (0..6), 0 is Sunday
            abbreviated weekday name (locale)
            hour (00..23)
            either AM or PM
            minute (00..59)
            second (00..61)
            time zone name, if any

            %c
            %x
            %y
            %j
            %m
            %b
            %d
            %U
            %w
            %a
            %H
            %p
            %M
            %S
            %Z

            %X
            %Y

            time only (locale)
            year (yyyy)

            %B

            full name of month (locale)

            %W

            week number (01..53), Monday-based

            arg

            %A
            %I

            full weekday name (locale)
            hour (01..12)

            _PROMPT[2]

            LUA_INIT
            LUA_PATH
            LUA_CPATH
            _PROMPT[2]

            The compiler
            luac [options] [filenames]

            Options
            compiles from standard input
            produces a listing of the compiled bytecode
            -l
            -o filename
            sends output to filename [default: luac.out]
            performs syntax and integrity checking only, does not output bytecode
            -p
            strips debug information; line numbers and local names are lost.
            -s
            prints version information
            -v
            -stops parsing options
            Note: compiled chunks are portable between machines having the same word size.

            debug.debug ()

            enters interactive debugging shell (type cont to exit); local variables cannot be accessed
            directly.
            debug.getinfo (f [, w])
            returns a table with information for function f or for function at level f [1 = caller], or nil if
            invalid level (see Result fields for getinfo below); characters in string w select one or more
            groups of fields [default: all] (see Options for getinfo below).
            debug.getlocal (n, i)
            returns name and value of local variable at index i (from 1, in order of appearance) of the
            function at stack level n (1= caller); returns nil if i is out of range, raises error if n is out of
            range.
            debug.getupvalue (f, i)
            returns name and value of upvalue at index i (from 1, in order of appearance) of function f;
            returns nil if i is out of range.
            debug.traceback ([msg])
            returns a string with traceback of call stack, prepended by msg
            debug.setlocal (n, i, v)
            assigns value v to the local variable at index i (from 1, in order of appearance) of the function
            at stack level n (1= caller); returns nil if i is out of range, raises error if n is out of range.
            debug.setupvalue (f, i, v)
            assigns value v to the upvalue at index i (from 1, in order of appearance) of function f; returns
            nil if i is out of range.
            debug.sethook ([h, m [, n]])
            sets function h as hook, called for events given in string (mask) m: "c" = function call, "r" =
            function return, "l" = new code line; also, a number n will call h() every n instructions; h() will
            receive the event type as first argument: "call", "return", "tail return", "line" (line number as
            second argument) or "count"; use debug.getinfo(2) inside h() for info (not for "tail_return").
            debug.gethook ()
            returns current hook function, mask and count set with debug.sethook()
            Note: the debug library functions are not optimised for efficiency and should not be used in normal operation.

            Lua is a language designed and implemented by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes; for details see lua.org.
            Drafts of this reference card (for Lua 5.0) were produced by Enrico Colombini <erix@erix.it> in 2004 and updated by Thomas Lauer
            <thomas.lauer@gmail.com> in 2007, 2008 and 2009. Comments, praise or blame please to the lua-l mailing list.
            This reference card can be used and distributed according to the terms of the Lua 5.1 license.

            Result fields for debug.getinfo
            name of file (prefixed by '@') or string where the function was defined
            short version of source, up to 60 characters
            line of source where the function was defined
            "Lua" = Lua function, "C" = C function, "main" = part of main chunk
            name of function, if available, or a reasonable guess if possible
            meaning of name: "global", "local", "method", "field" or ""
            number of upvalues of the function
            the function itself

            Options for debug.getinfo (character codes for argument w)
            returns fields name and namewhat
            returns field func
            returns fields source, short_src, what and linedefined

            l
            u

            returns field currentline
            returns field nup

            The stand-alone interpreter
            Command line syntax
            lua [options] [script [arguments]]

            Options
            -e stats
            -l filename
            -i
            -v

            nil if no arguments on the command line, else a table containing command line arguments starting from
            arg[1] while #arg is the number of arguments; arg[0] holds the script name as given on the command line;
            arg[-1] and lower indexes contain the fields of the command line preceding the script name.
            contain the prompt for interactive mode; can be changed by assigning a new value.

            Command line syntax

            Basic functions

            n
            f
            S

            if this holds a string in the form @filename loads and executes filename, else executes the string itself
            defines search path for Lua modules, with "?" replaced by the module name
            defines search path for dynamic libraries (e.g. .so or .dll files), with "?" replaced by the module name
            set the prompts for interactive mode

            Special Lua variables

            The debug library [debug]

            source
            short_src
            linedefined
            what
            name
            namewhat
            nups
            func

            stops parsing options

            Recognized environment variables

            loads and executes script from standard input (no args allowed)
            executes the Lua statements in the literal string stats, can be used multiple times on the same line
            requires filename (loads and executes if not already done)
            enters interactive mode after loading and executing script
            prints version information
            4

            
~/Empire/Doks/Comp/lang/lua/cheatsh-qref/lua5-1.shortref.pdf
            draft

            Lua 5.1
            A Short Reference

            Acknowledgments
            Lua 5.1 Short Reference is a reformatted and updated version of Enrico Colombinis “Lua 5.0 Short Reference (draft 2)” in which he
            acknowledged others “I am grateful to all people that contributed with notes and suggestions, including John Belmonte, Albert-Jan
            Brouwer, Tiago Dionizio, Marius Gheorghe, Asko Kauppi, Philippe Lhoste, Virgil Smith, Ando Sonenblick, Nick Trout and of course
            Roberto Ierusalimschy, whose Lua 5.0 Reference Manual and Programming in Lua have been my main sources of Lua lore”. This Lua
            5.1 update further acknowledges and thanks Enrico Colombinis for his Lua 5.0 Short Reference (draft 2) and Roberto Ierusalimschys
            Lua 5.1 Reference Manual and Programming in Lua, 2nd Edition.
            This Short Reference update was done as a means of becoming familiar with Lua, so it has been edited and extended from the
            perspective of a new-comer to Lua.
            Graham Henstridge

            Lua 5.1 Short Reference
            block

            Introduction
            Lua is a free modern and evolving scripting language designed
            by Roberto Ierusalimschy, Luiz Henrique de Figueiredo,
            Waldemar Celes at Tecgraf, PUC-Rio, Brazil. Note: depreciated
            functions have been omitted.

            Reserved words
            and  break  do 
            else elseif end  false
            function
            if 
            in 
            local  nil
            not
            repeat return  then true  until  while
            _A... A system variable, A = any uppercase letter.

            for
            or

            *
            [

            /
            ]

            % ^
            ; :

#
            ,

            == ~= <= >= < >
            . .. ...

            =

            (

            )

            Comments
            -- 
            --[[ ... --]]
#! 

            Comment to end of line.
            Multi-line comment.
            At start of first line for Linux executable.

            Strings and escape sequences
            ' ' " " [[ ]] [=[ ]=]string delimiters; [[ ]] can be multi-line,
            escape sequences are ignored. If [=[ ]=]
            number of =s must balance
            \a (bell)
            \b (backspace)
            \f (form feed)
            \nnewline)
            \r (return)
            \t (tab)
            \v (vert. tab) 
            \\ (backslash) 
            \" (double quote)
            \' (single quote)
            \[ (square bracket) 
            \] (square bracket)
            \ddd (character represented decimal number).

            Types
            boolean
            number
            string 
            table
            function
            thread 
            userdata
            nil
            For booleans, nil and false count as false, all the rest is true
            including 0 and "" (null string). The type belongs to the value,
            NOT the variable to which it is assigned.

            Operators, decreasing precedence
            ^
            not 
            *
            +
            .. 
            <
            and 
            or 

            right-associative, math lib required
#
            - (unary negative sign)
            /
            %
            (string concatenation, right-associative)
            >
            <= 
            >= 
            ~= 
            ==
            (stops on false/nil)
            (stops on true (not false/nil))

            Assignment and coercion examples
            a = 5
            a = “hi” 
            a, b, c = 1, 2, 3
            a, b = b, a 
            a, b = 4, 5, 6 
            a, b = “there” 
            a = nil 
            a = #b
            a=z
            a = “3” + “2” 
            a = 3 .. 2 

            Simple assignment.
            Variables are not typed, they can hold
            different types.
            Multiple assignment.
            Swap values, because right side values
            evaluated before assignment.
            Too many values, 6 is discarded.
            Too few values, nil is assigned to b.
            as prior value will be garbage collected if
            unreferenced elsewhere.
            Size of b. If table, then first index that is
            followed by a nil value.
            If z is not defined a = nil.
            Strings converted to numbers: a = 5.
            Numbers are converted to strings: a = "32".

            Relational and boolean examples
            “abc” < “abe”
            “ab” < “abc”

            True: based first different character
            True: missing character is less than any

            Scope, blocks and chunks
            scope
            local

            Control structures
            do block end
            while exp do block end
            repeat block until exp
            if exp then block {elseif exp then block} [else block] end
            for var = start, end [, step] do block end
            for k, v in iterator do block end
            break (exits loop, but must be last statement in block).

            Table constructors

            Other reserved strings
            + -
            { }

            chunk 

            Is the body of a control structure, body of a
            function or a chunk.
            A file or string of script.

            By default all variables global.
            Reduces scope from point of definition to
            end of block.

            t = {}  A new empty table.
            t = {"yes", "no"}
            A new simple array, elements are t[1] = yes, t[2] = no.
            t = {[1] = "yes", [2] = "no"}
            Same as line above.
            t = {[-900] = 3, [+900] = 4}
            Sparse array, two elements.
            t = {x=5, y=10}
            Hash table or dictionary, fields t["x"], t["y"] or t.x, t.y.
            t = {x=5, y=10; "yes", "no"}
            Mixed fields: elements t.x, t.y, t[1], t[2].
            t = {msg = "choice", {"yes", "no"}}
            Table containing a table as field.

            Function definition
            function name ( args ) body [return values] end
            Global function.
            local function name ( args ) body [return values] end
            Function local to chunk.
            f = function ( args ) body [return values] end
            Anonymous function.
            function ( ... ) body [return values] end
            (...) indicates variable args and {...} places them in a
            table where they processed in standard way.
            function t.name ( args ) body [return values] end
            Shortcut for t.name = function [...]
            function obj:name ( args ) body [return values] end Object
            function getting extra arg self.
            Functions can return multiple results.

            Function call
            f ( args ) 
            t.f (args) 
            f ”string”
            f {table}

            Simple call, returning zero or more values.
            Calling function stored in field f of table t.
            Calling with a single string argument
            Calling with a single table argument

            Function examples
            local function f ( mode, value ) body end
            a local function with two arguments.
            r = f {value = 3.14, mode = “auto”}
            By passing a table, args can be passed by name where
            function is defined: function f ( t ) body end, and arg
            accessed as t.value, t.mode.

            Metatable operations
            setmetatable ( t, mt )
            Sets mt as metatable for t, unless t's metatable has a
            __metatable field.
            getmetatable ( t )
            Returns __metatable field of t's metatable, or t's
            metatable, or nil.
            rawget ( t, i )
            Gets t[i] of a table without invoking metamethods.
            rawset ( t, i, v )
            Sets t[i] = v on a table without invoking metamethods.
            rawequal ( t1, t2 )
            Returns boolean (t1 == t2) without invoking
            metamethods.

            page 1 of 7

            draft

            Metatable fields (for tables and userdata)
            __add 
            __sub 
            __mul 
            __div 
            __pow
            __unm 
            __concat 
            __eq 
            __lt 
            __le 
            __index 
            __newindex 
            __call 
            __tostring 
            __gc 
            __mode 
            __metatable 

            Sets handler h (a, b) for '+'.
            Sets handler h (a, b) for binary '-'.
            Sets handler h (a, b) for '*'.
            Sets handler h (a, b) for '/'.
            Sets handler h (a, b) for '^'.
            Sets handler h (a ) for unary '-'.
            Sets handler h (a, b) for '..'.
            Sets handler h (a, b) for '==', '~='.
            Sets handler h (a, b) for '<', '>' and '<=', '>='
            if no __le
            Sets handler h (a, b) for '<=', '>='.
            Sets handler h (t, k) for non-existing field
            access.
            Sets handler h (t, k) for new field
            assignment.
            Sets handler h (f, ...) for function call (using
            the object as a function).
            Sets handler h (a) to convert to string, e.g.
            for print ( ).
            Set finalizer h (ud) for userdata (can be set
            from the C side only).
            Table mode: 'k' = weak keys, 'v' = weak
            values, 'kv' = both.
            Set value returned by getmetatable ( ).

            The Basic Library
            Environment and global variables
            getfenv ( [f] )
            If f a function, returns its environment; if f a number,
            returns the environment of function at level f (1 = current
            [default], 0 = global); if the environment has a field
            __fenv, that is returned.
            setfenv ( f, t )
            Sets environment for function f or function at level f (0 =
            current thread); if the original environment has a field
            __fenv, raises an error.
            _G
            Variable whose value = global environment.
            _VERSION
            Variable with interpreter's version.

            Loading and executing
            require ( module )
            Loads module and returns final value of
            package.loaded[module] or raises error. In order,
            checks if already loaded, for Lua module, for C library.
            module ( name [, ...] )
            Creates a module. If a table in package.loaded[name]
            this is the module, else if a global table t of name, that
            table is the module, else creates new table t assigned to
            name. Initializes t._NAME to name, t._M to t and
            t._PACKAGE with package name.
            
            Optional functions passed to be applied over module
            dofile ( [filename] )
            Loads and executes the contents of filename [default:
            standard input]. Returns files returned values.
            load ( f [, n ] )
            Loads a chunk using function f to get its pieces. Each f
            call to return a string (last = nil) that is concatenated.
            Returns compiled chunk as a function or nil and error
            message. Optional chunk name = n for debugging.
            loadfile ( n )
            Loads contents of file n, without executing. Returns
            compiled chunk as function, or nil and error message.
            loadstring ( s [, n] )
            Returns compiled string s chunk as function, or nil and
            error message. Sets chunk name = n for debugging.
            loadlib ( lib, func )
            Links to dynamic library named lib (.so or .dll). Returns
            function named func, or nil and error message.
            pcall ( f [, args] )
            Calls function f in protected mode; returns true and
            results if OK, else false and error message.

            xpcall ( f, h )
            As pcall () but passes error handler h instead of extra
            args; returns as pcall () but with the result of h () as
            error message, if any (use debug.traceback () from the
            debug library for extended error info).

            Simple output and error feedback
            print ( args )
            Prints each of passed args to stdout using tostring.
            error ( msg [, n] )
            Terminates the program or the last protected call (e.g.
            pcall ()) with error message msg quoting level n
            [default: 1, current function].
            assert ( v [, msg] )
            Calls error (msg) if v is nil or false [default msg:
            "assertion failed!"].

            Information and conversion
            select ( i, ... )
            For numeric index i, returns the ith argument from
            the ... argument list. For i = string “#” (including quotes)
            returns total number of arguments including nils.
            type ( x )
            Returns the type of x as a string (e.g. "nil", "string").
            tostring ( x )
            Converts x to a string, using table's metatable's
            __tostring if available.
            tonumber ( x [, b] )
            Converts string x representing a number in base b
            [2..36, default: 10] to a number, or nil if invalid; for base
            10 accepts full format (e.g. "1.5e6").
            unpack ( t )
            Returns t[1]..t[n] as separate values, where n = #t.

            Iterators
            ipairs ( t )
            Returns an iterator getting index, value pairs of array t in
            numeric order.
            pairs ( t )
            Returns an iterator getting key, value pairs of table t in
            no particular order.
            next ( t [, index] )
            Returns next index-value pair (nil when finished) from
            index (default nil, i.e. beginning) of table t.

            Garbage collection
            collectgarbage ( opt [, v] )
            where opt can be:
            “stop”
            Stops garbage collection.
            “restart”
            Restart garbage collection.
            “collect”
            Initiates a full garbage collection.
            “count”
            Returns total memory used.
            “step”
            Perform garbage collection step size v,
            returns true if it finished a cycle.
            “setpause”
            Set pause to v/100.
            “setstepmul” Sets multiplier to v/100.
            The garbage collector can be tuned using the pause and
            multiplier values:
            pause
            Determines how long waits, larger value
            is less aggressive. Default = 2.
            multiplier
            Controls speed of collection relative to
            memory allocation. Default = 2.

            Coroutines
            coroutine.create ( f )
            Creates a new coroutine with function f, returns it.
            coroutine.resume ( co, args )
            Starts or continues running coroutine co, passing args
            to it. Returns true (and possibly values) if co calls
            coroutine.yield ( ) or terminates, returns false and a
            message in case of error.
            coroutines.running ( )
            Returns current running coroutine or nil if main thread.
            coroutine.yield ( args )

            page 2 of 7

            draft
            Suspends execution of the calling coroutine (not from
            within C functions, metamethods or iterators), any args
            become extra return values of coroutine.resume ( ).
            coroutine.status ( co )
            Returns the status of coroutine co as a string: either
            "running", "suspended" or "dead".
            coroutine.wrap ( f )
            Creates coroutine with function f as body and returns a
            function that acts as coroutine.resume ( ) without first
            arg and first return value, propagating errors.

            The Package Library
            package.cpath
            A variable used by require ( ) for a C loader. Set at
            startup to environment variable LUA_CPATH. (see Path
            Formats below).
            package.loaded
            Table of packages already loaded. Used by require ( )
            package.loadlib ( lib, fun )
            Dynamically links to library lib, which must include path.
            Looks for function fun (same name exported by lib).
            package.path
            Variable used by require ( ). Set at startup to
            environment variable LUA_PATH. (see Path Formats).
            package.preload
            A table to store loaders for specific modules.
            package.seeall ( m )
            Sets a metatable for module m with _index field
            referring to global environment.

            Path Formats
            A path is a sequence of path templates separated by
            semicolons. For each template, require ( filename ) will
            substitute each “?” by filename, in which each dot replaced by a
            "directory separator" ("/" in Linux); then it will try to load the
            resulting file name. Example:
            require ( dog.cat ) with path /usr/share/lua/?.lua;lua/?.lua will
            attempt to load cat.lua from /usr/share/lua/dog/ or lua/dog/

            The Table Library
            Tables as arrays (lists)
            table.insert ( t, [ i, ] v )
            Inserts v at numerical index i [default: after the end] in
            table t, increments table size.
            table.remove ( t [, i ] )
            Removes element at numerical index i [default: last
            element] from table t, decrements table size, returns the
            removed element or no value on empty table.
            table.maxn ( t )
            Returns largest numeric index of table t. Slow.
            table.sort ( t [, cf] )
            Sorts (in-place) elements from t[1] to t[#t ], using
            compare function cf (e1, e2) [default: '<'].
            table.concat ( t [, s [, i [, j]]] )
            Returns a single string made by concatenating table
            elements t[i] to t[j] (default: i =1, j = table.getn ( ) )
            separated by string s; returns empty string if no given
            elements or i > j

            Iterating on table contents
            Use the pairs or ipairs iterators in a for loop. Example:
            for k, v in pairs(table) do print (k, v) end
            will print the key (k) and value (v) of all the tables content.

            The Math Library
            Basic operations
            math.abs ( x ) 
            Returns the absolute value of x.
            math.fmod ( x, y ) Returns the remainder of x / y as a roundeddown integer, for y ~= 0.
            math.floor ( x )  Returns x rounded down to integer.
            math.ceil ( x ) 
            Returns x rounded up to the nearest integer.

            math.min( args )
            math.max( args )
            math.huge ( )
            math.modf ( x )

            Returns minimum value from args.
            Returns maximum value from args.
            Returns largest represented number
            Returns integer and fractional parts of x

            Exponential and logarithmic
            math.sqrt ( x ) 
            Returns square root of x, for x >= 0.
            math.pow ( x, y ) Returns x raised to the power of y, i.e. x^y;
            if x < 0, y must be integer.
            math.exp ( x ) 
            Returns e to the power of x, i.e. e^x.
            math.log ( x ) 
            Returns natural logarithm of x, for x >= 0.
            math.log10 ( x )  Returns base-10 logarithm of x, for x >= 0.
            math.frexp ( x )  If x = m2^e, returns m (normalized) and e.
            math.ldexp ( x, y ) Returns x2^y with y integer.

            Trigonometrical
            math.deg ( a ) 
            math.rad ( a ) 
            math.pi 
            math.sin ( a )
            math.cos ( a ) 
            math.tan ( a ) 
            math.asin ( x ) 
            math.acos ( x ) 
            math.atan ( x ) 

            Converts angle a from radians to degrees.
            Converts angle a from degrees to radians.
            Constant containing the value of Pi.
            Sine of angle a in radians.
            Cosine of angle a in radians.
            Tangent of angle a in radians.
            Arc sine of x in radians, for x in [-1, 1].
            Arc cosine of x in radians, for x in [-1, 1].
            Arc tangent of x in radians.

            Pseudo-random numbers
            math.random ( [n [, m] )
            Pseudo-random number in range [0, 1], [1, n] or [n, m].
            math.randomseed ( n )
            Sets a seed n for random sequence.

            The String Library
            Basic operations
            string.len ( s )
            Returns length of string s, including embedded zeros.
            string.sub ( s, i [, j] )
            Returns substring of s from position i to j [default: -1].
            string.rep ( s, n )
            Returns a string of n concatenated copies of string s.
            string.upper ( s )
            Returns a copy of s converted to uppercase.
            string.lower ( s )
            Returns a copy of s converted to lowercase.

            Character codes
            string.byte ( s [, i] )
            Ascii code of character at position i [default: 1] in string
            s, or nil if invalid i.
            string.char ( args )
            Returns a string made of the characters whose ascii
            codes are passed as args.

            Formatting
            string.format ( s [, args] )
            Returns a copy of s where formatting directives
            beginning with '%' are replaced by the value of
            arguments args. (see Formatting directives below)

            Finding, replacing, iterating
            string.find ( s, p [, i [, d]] )
            Returns first and last position of pattern p in string s, or
            nil if not found, starting search at position i [default: 1];
            returns parenthesized 'captures' as extra results. If d is
            true, treat pattern as plain string. (see Patterns below)
            string.gmatch ( s, p )
            Returns an iterator getting next occurrence of pattern p
            (or its captures) in string s as substring(s) matching the
            pattern. (see Patterns below)
            string.gsub ( s, p, r [, n] )
            Returns a copy of s with up to n [default: 1] occurrences
            of pattern p (or its captures) replaced by r. If r is a string
            (r can include references to captures of form %n). If r is
            table, first capture is key. If r is a function, it is passed all
            captured substrings, and should return replacement
            page 3 of 7

            draft
            string, alternatively with a nil or false return, original
            match is retained. Returns as second result, number of
            substitutions made (see Patterns below).

            Function storage
            string.dump ( f )
            Returns binary representation of function f. Use with
            loadstring ( ). f must be Lua function with no upvalues.
            Note: String indexes go from 1 to string.len ( s ), from end of
            string if negative (index -1 refers to the last character).

            Formatting directives for string.format
            % [flags] [field_width] [.precision] type

            Formatting field types
            %d 
            %o 
            %x 
            %f 
            %e 
            %g 
            %c 
            %s 
            %q 
            %% 

            Decimal integer.
            Octal integer.
            Hexadecimal integer, uppercase if %X.
            Floating-point in the form [-]nnnn.nnnn.
            Floating-point in exp. form [-]n.nnnn e [+|-]nnn,
            uppercase if %E.
            Floating-point as %e if exp. < -4 or >= precision, else as
            %f; uppercase if %G.
            Character having the code passed as integer.
            String with no embedded zeros.
            String between double quotes, with all special
            characters escaped.
            The '%' character.

            Formatting flags
            -
            Left-justifies, default is right-justify.
            +
            Prepends sign (applies to numbers).
            (space)Prepends sign if negative, else space.
#
            Adds "0x" before %x, force decimal point; for %e, %f,
            leaves trailing zeros for %g.

            Formatting field width
            n
            0n 

            Puts at least n characters, pad with blanks.
            Puts at least n characters, left-pad with zeros

            Formatting precision
            .n 

            Use at least n digits for integers, rounds to n decimals
            for floating-point or no more than n chars. for strings.

            Formatting examples
            string.format ("dog: %d, %d",7,27) 
            string.format ("<%5d>", 13) 
            string.format ("<%-5d>", 13) 
            string.format ("<%05d>", 13) 
            string.format ("<%06.3d>", 13)
            string.format ("<%f>", math.pi) 
            string.format ("<%e>", math.pi) 
            string.format ("<%.4f>", math.pi) 
            string.format ("<%9.4f>", math.pi) 
            string.format ("<%c>", 64) 
            string.format ("<%s.4>", "goodbye")
            string.format("%q",[[she said "hi"]])

            dog: 7, 27
            < 13>
            <13 >
            <00013>
            < 013>
            <3.141593>
            <3.141593e+00>
            <3.1416>
            < 3.1416>
            <@>
            <good>
            "she said "hi""

            Patterns and pattern items
            General pattern format: pattern_item [ pattern_items ]
            cc 
            Matches a single character in the class cc (see Pattern
            character classes below).
            cc* 
            Matches zero or more characters in the class cc;
            matches longest sequence.
            cc- 
            Matches zero or more characters in the class cc;
            matches shortest sequence.
            cc+  Matches one or more characters in the class cc;
            matches longest sequence.
            cc?  Matches zero or one character in the class cc.
            %n 
            (n = 1..9) Matches n-th captured string.
            %bxy  Matches balanced string from character x to character y
            (e.g. nested parenthesis).
            ^
            Anchor pattern to string start, must be first in pattern.
            $
            Anchor pattern to string end, must be last in pattern.

            Pattern captures
            (sub_pattern) 

            Stores substring matching sub_pattern as
            capture %1..%9, in order.

            () 

            Stores current string position as capture %
            1..%9, in order.

            Pattern character classes (ccʼs)
            .
            Any character.
            %a 
            Any letter.
            %A  Any non-letter.
            %c 
            Any control character.
            %C  Any non-control character.
            %d 
            Any digit.
            %D  Any non-digit.
            %l 
            Any lowercase letter.
            %L
            Any non-(lowercase letter).
            %p 
            Any punctuation character
            %P 
            Any non-punctuation character
            %s 
            Any whitespace character.
            %S 
            Any non-whitespace character.
            %u 
            Any uppercase letter.
            %U  Any non-uppercase letter.
            %w  Any alphanumeric character.
            %W  Any non-alphanumeric character.
            %x 
            Any hexadecimal digit.
            %X 
            Any non-(hexadecimal digit).
            %z 
            The zero character.
            %Z 
            Any non-zero character.
            %x 
            (x = symbol) The symbol itself.
            x
            If x not in ^$()%.[]*+-? the character itself.
            [ set ]  Any character in any of the given classes, can also be a
            range [c1-c2].
            [ ^set ] Any character not in set.

            examples
            string.find("Lua is great!", "is") 
            
            
            >56
            string.find("Lua is great!", "%s") 
            
            >44
            string.gsub("Lua is great!", "%s", "-") 
            > Lua-is-great! 2
            string.gsub("Lua is great!", "[%s%l]", "*")
            > L***********! 11
            string.gsub("Lua is great!", "%a+", "*")
            > * * *! 3
            string.gsub("Lua is great!", "(.)", "%1%1")
            > LLuuaa iiss ggrreeaatt!! 13
            string.gsub("Lua is great!", "%but", "")
            > L! 1
            string.gsub("Lua is great!", "^.-a", "LUA")
            > LUA is great! 1
            string.gsub("Lua is great!", "^.-a", function (s)
            return string.upper(s) end)
            > LUA is great! 1

            The I/O Library
            The I/O functions return nil and an error message on failure,
            unless otherwise stated; passing a closed file object raises an
            error instead.

            Complete I/O
            io.open ( fn [, m] )
            Opens file with name fn in mode m: "r" = read [default],
            "w" = write, "a" = append, "r+" = update-preserve, "w+"
            = update-erase, "a+" = update-append (add trailing "b"
            for binary mode on some systems), returns a file object
            (an userdata with a C handle) usable with ':' syntax.
            Note in the following that “file:” is an io meta-method call.
            file:close ( )
            Closes file.
            file:read ( formats )
            Returns a value from file for each of the passed
            formats: "*n" = reads a number, "*a" = reads whole file
            as a string from current position ("" at end of file), "*l" =
            reads a line (nil at end of file) [default], n = reads a
            string of up to n characters (nil at end of file).
            page 4 of 7

            draft
            file:lines ( )
            Returns an iterator function reading line-by-line from file;
            the iterator does not close the file when finished.
            file:write ( values )
            Write each of values (strings or numbers) to file, with no
            added separators. Numbers are written as text, strings
            can contain binary data (may need binary mode read).
            file:seek ( [p] [, of] )
            Sets current position in file relative to p ("set" = start of
            file [default], "cur" = current, "end" = end of file) adding
            offset of [default: zero]; returns new position in file.
            file:flush ( )
            
            Writes to file any data still held in memory buffers.

            Simple I/O
            io.input ( [file] )
            Sets file as default input file; file can be either an open
            file object or a file name; in the latter case the file is
            opened for reading in text mode; returns a file object,
            the current one if no file given; raises error on failure.
            io.output ( [file] )
            Sets file as default output file (current output file is not
            closed); file can be either an open file object or a file
            name; in the latter case file is opened for writing in text
            mode. Returns a file object, the current one if no file
            given. Raises error on failure.
            io.close ( [file] )
            Closes file object file. Default: closes default output file.
            io.read ( formats )
            Reads from default input file, same as file:read ( ).
            io.lines ( [fn] )
            Opens file name fn for reading. Returns an iterator
            function reading from it line-by-line. Iterator closes file
            when finished. If no fn, returns iterator reading lines
            from default input file.
            io.write ( values )
            Writes to the default output file, same as file:write ( ).
            io.flush ( )
            Writes to default output file any data in buffers.

            Standard files and utility functions
            io.stdin
            Predefined input file object.
            io.stdout 
            Predefined output file object.
            io.stderr
            Predefined error output file object.
            io.type ( x )
            Returns string "file" if x is an open file, "closed file" if x
            is a closed file, nil if x is not a file object.
            io.tmpfile ( )
            Returns file object for temporary file (deleted when
            program ends).

            The OS Library
            Many characteristics of this library are determined by operating
            system support.

            Date/time
            Time and date accessed via time-table tt = {year = 1970-2135 ,
            month = 1-12, day = 1-31, hour = 0-23, min = 0-59, sec =
            0-59, isdst = true-false,}
            os.time ( [tt] )
            Returns date/time, in seconds since epoch, described
            by table tt [default: current]. Requires year, month, day;
            while hour, min, sec, isdst fields optional.
            os.difftime ( t2, t1 )
            Returns difference between two os.time ( ) values.
            os.date ( [fmt [, t]] )
            Returns a table or string describing date/time t (that
            should be a value returned by os.time), according to the
            format string fmt:
            !
            A leading “!” requests UTC time
            *t
            Returns a table similar to time-table
            while the following format a string representation:
            %a 
            Abbreviated weekday name.
            %A  Full weekday name.

            %b 
            %B 
            %c 
            %d 
            %H 
            %I 
            %M 
            %m 
            %p 
            %S 
            %w 
            %x 
            %X 
            %y 
            %Y 

            Abbreviated month name.
            Full month name.
            Date/time (default)
            Day of month (01..31).
            Hour (00..23).
            Hour (01..12).
            Minute (00..59).
            Month (01..12).
            Either “am” or “pm”.
            Second (00..61).
            Weekday (0..6), 0 is Sunday.
            Date only.
            Time only.
            Year (nn).
            Year(nnnn).

            os.clock ( )
            Returns the approx. CPU seconds used by program.

            System interaction
            os.execute ( cmd )
            Calls system shell to execute string cmd, returning
            status code.
            os.exit ( [code] )
            Terminates script, returning code [default: success].
            os.getenv ( var )
            Returns a string with the value of the environment
            variable named var, or nil if no such variable exists.
            os.setlocale ( s [, c] )
            Sets the locale described by string s for category c:
            "all" (default), "collate", "ctype", "monetary", "numeric"
            or "time". Returns name of new locale, or nil if not set.
            os.remove ( fn )
            Deletes file fn, or returns nil and error description.
            os.rename ( of, nf )
            Renames file of to nf, or returns nil and error message.
            os.tmpname ( )
            Returns a string usable as name for a temporary file.

            The Debug Library
            The debug library functions are inefficient and should not be
            used in normal operation. In addition to debugging they can be
            useful for profiling.

            Basic functions
            debug.debug ( )
            Enters interactive debugging shell (type “cont“ to exit);
            local variables cannot be accessed directly.
            debug.getfenv ( o )
            Returns the environment of object o
            debug.getinfo ( [c,] f [, w] )
            Returns table with information for function f in coroutine
            c or for function at level f [1 = caller], or nil if invalid
            level. Table keys are:
            source
            Name of file (prefixed by '@') or string where f
            defined.
            short_src
            Short version of source, up to 60 characters.
            linedefined
            Line of source where the function was defined.
            what
            "Lua" = Lua function, "C" = C function,
            "main" = part of main chunk.
            name
            Name of function, if available, or a reasonable
            guess if possible.
            namewhat
            Meaning of name: "global", "local", "method",
            "field" or "".
            nups
            Number of upvalues of the function.
            func
            The function itself.
            page 5 of 7

            draft
            

            Characters in string w select one or more groups of
            fields (default is all):
            n Returns fields name and namewhat.
            f  Returns field func.
            S  Returns fields source, short_src, what and
            linedefined.
            l  Returns field currentline.
            u  Returns field nup.
            debug.getlocal ( [c,] n, i )
            Returns name and value of local variable at index i
            (from 1, in order of appearance) of the function at stack
            level n (1= caller) in coroutine c; returns nil if i is out of
            range, raises error if n is out of range.
            debug.gethook ( [c] )
            Returns current hook function, mask and count set with
            debug.sethook ( ) for coroutine c.
            debug.getmetatable ( o )
            Returns metatable of object o or nil if none.
            debug.getregistry ( )
            Returns registry table that contains static library data.
            debug.getupvalue ( f, i )
            Returns name and value of upvalue at index i (from 1, in
            order of appearance) of function f. If i is out of range,
            returns nil.
            debug.traceback ( [c,] [msg] )
            Returns a string with traceback of call stack, prepended
            by msg. Coroutine c may be specified.
            debug.setfenv ( o, t )
            Sets environment of object o to table t. Returns o.
            debug.sethook ( [[c,] h, m [, n]] )
            For coroutine c, sets function h as hook, called for
            events given in mask string m: "c" = function call, "r" =
            function return, "l" = new code line, optionally call h ( )
            every n instructions. Event type received by h ( ) as first
            argument: "call", "return", "tail return", "line" (line
            number as second argument) or "count". Use
            debug.getinfo (2) inside h ( ) for info (not for
            "tail_return").
            debug.setlocal ( [c,] n, i, v )
            Assigns value v to the local variable at index i (from 1, in
            order of appearance) of the function at stack level n (1=
            caller); returns nil if i is out of range, raises error if n is
            out of range. Coroutine c may be specified.
            debug.setmatatable ( o, t )
            Sets metatable of object o to table t, which can be nil.
            debug.setupvalue ( f, i, v )
            Assigns value v to upvalue at index i (from 1, in order of
            appearance) of function f. Returns nil if i is out of range.

            The Stand-alone Interpreter
            Command line syntax
            lua [options] [script [arguments]]

            Options
            -
            -e stats 

            -l filename 
            -i 
            -v 
            -- 

            Loads and executes script from standard
            input (no args allowed).
            Executes the Lua statements contained in
            the literal string stats, can be used multiple
            times on same line.
            Loads and executes filename if not already
            loaded.
            Enters interactive mode after loading and
            execution of script.
            Prints version information.
            Stops parsing options.

            Recognized environment variables
            LUA_INIT 

            _PROMPT 

            If it contains a string in the form @filename
            loads and executes filename, else executes
            the string itself.
            Sets the prompt for interactive mode.

            Special Lua variables
            arg 

            nil if no command line arguments, else table containing
            command line arguments starting from arg[1], arg.n is
            the number of arguments, arg [0] = script name as
            given on command line and arg[-1] and lower indexes
            contain fields of command line preceding script name.

            The Compiler
            Command line syntax
            luac [options] [scripts]

            Options
            -
            -l 
            -o filename 

            Compiles from standard input.
            Produces a listing of the compiled bytecode.
            Sends output to filename [default:
            luac.out].
            -p 
            Performs syntax and integrity checking only,
            does not output bytecode.
            -s 
            Strips debug information; line numbers and
            local names are lost.
            -v 
            Prints version information.
            -- 
            Stops parsing options.
            Compiled chunks portable on machines with same word size.

            Independent Libraries
            Lua core is designed to be a minimalist, portable and modern
            scripting language. As such it has only basic libraries.
            Independent libraries add functionality. Some useful libraries
            include:

            bitlib library
            The small elegantly written library by Reuben Thomas provides
            a useful set of bit-wise functions to Lua. All function arguments
            should be integers. Non integers can return unexpected results.
            bit.bnot ( a )
            One's complement of a.
            bit.band ( w1, ... ) Bitwise “and” of the w's
            bit.bor ( w1, ... ) Bitwise “or” of the w's
            bit.bxor ( w1, ... ) Bitwise “exclusive or” of the w's
            bit.lshift ( a, b )
            a shifted left b places
            bit.rshift ( a, b ) a shifted logically right b places
            bit.arshift ( a, b ) a shifted arithmetically right b places
            bit.mod ( a, b )
            Integer remainder of a divided by b

            lua file system library
            The lua file system library was written by Roberto Ierusalimschy,
            André Carregal and Tomás Guisasolaprovides. It is a convenient
            set of machine dependent file access functions:
            lfs.attributes ( filepath [, aname] )
            Returns a table with the file attributes single attribute
            (aname) or nil and error message. Attributes include:
            dev
            the device that the inode resides on.
            ino
            the inode number.
            mode
            string representing associated
            protection mode (file, directory, link,
            socket, named pipe, char device,
            block device or other)
            nlink
            number of hard links to the file
            uid
            user-id of owner
            gid
            group-id of owner.
            rdev
            device type, for special file inodes.
            access
            time of last access
            modification time of last data modification
            change
            time of last file status change
            size
            file size, in bytes
            blocks
            block allocated for file.
            blksize
            optimal file system I/O block size.
            lfs.chdir ( path )
            Change dir to path. Returns true or nil and error string.
            lfs.currentdir ( )
            Current working directory string or nil and error string.

            page 6 of 7

            draft
            lfs.dir ( path )
            Returns an iterator function that returns a string for each
            entry directory, nil no more entries. Raises error if path
            not a directory.
            lfs.lock ( filehandle, mode[, start[, length]] )
            Locks an open file or a part of it. Mode "r" for a read/
            shared lock or "w" for a write/exclusive lock. Starting
            point start and length length both numbers. Returns
            true or nil and error string.
            lfs.mkdir ( dirname )
            Creates a new directory dirname. Returns true or nil
            and error string.
            lfs.rmdir ( dirname )
            Removes directory dirname. Returns true or nil and
            error string.
            lfs.touch ( filepath [, atime [, mtime]] )
            Set access atime and modification mtime times of file
            filepath. Times in seconds as os.date(). Defaults to
            current time. Returns true or nil plus an error string.
            lfs.unlock ( filehandle[, start[, length]] )
            Unlocks an open file or a part of it. Start and length
            both numbers. Returns true or nil plus an error string.

            Examples
            lfs.attributes( “/var/spool/mail/root”, “size” )
            
            returns the size of “root” in bytes
            for f in lfs.dir ( “/tmp” ) do print ( f ) end
            
            prints all files and directories in /tmp directory

            page 7 of 7

            

derek banas lua
            ~/Empire/rsc/code/lua/test.lua

            Cheat Sheet From the Video
            -- Prints to the screen (Can end with semicolon)
            print("Hello World")

            --[[
            Multiline comment
            ]]

            -- Variable names can't start with a number, but can contain letters, numbers
            -- and underscores

            -- Lua is dynamically typed based off of the data stored there
            -- This is a string and it can be surrounded by ' or "
            name = "Derek"

            -- Another way to print to the screen
            -- Escape Sequences : \n \b \t \\ \" \'
            -- Get the string size by proceeding it with a #
            io.write("Size of string ", #name, "\n")

            -- You can store any data type in a variable even after initialization
            name = 4
            io.write("My name is ", name, "\n")

            -- Lua only has floating point numbers and this is the max number
            bigNum = 9223372036854775807 + 1
            io.write("Big Number ", bigNum, "\n")

            io.write("Big Number ", type(bigNum), "\n")

            -- Floats are precise up to 13 digits
            floatPrecision = 1.999999999999 + 0.0000000000005
            io.write(floatPrecision, "\n")

            -- We can create long strings and maintain white space
            longString = [[
            I am a very very long
            string that goes on for
            ever]]
            io.write(longString, "\n")

            -- Combine Strings with ..
            longString = longString .. name
            io.write(longString, "\n")

            -- Booleans store with true or false
            isAbleToDrive = true
            io.write(type(isAbleToDrive), "\n")

            -- Every variable gets the value of nil by default meaning it has no value
            io.write(type(madeUpVar), "\n")

            -- ---------- MATH ----------
            io.write("5 + 3 = ", 5+3, "\n")
            io.write("5 - 3 = ", 5-3, "\n")
            io.write("5 * 3 = ", 5*3, "\n")
            io.write("5 / 3 = ", 5/3, "\n")
            io.write("5.2 % 3 = ", 5%3, "\n")

            -- Shorthand like number++ and number += 1 aren't in Lua

            -- Math Functions: floor, ceil, max, min, sin, cos, tan,
            -- asin, acos, exp, log, log10, pow, sqrt, random, randomseed

            io.write("floor(2.345) : ", math.floor(2.345), "\n")
            io.write("ceil(2.345) : ", math.ceil(2.345), "\n")
            io.write("max(2, 3) : ", math.max(2, 3), "\n")
            io.write("min(2, 3) : ", math.min(2, 3), "\n")
            io.write("pow(8, 2) : ", math.pow(8, 2), "\n")
            io.write("sqrt(64) : ", math.sqrt(64), "\n")

            -- Generate random number between 0 and 1
            io.write("math.random() : ", math.random(), "\n")

            -- Generate random number between 1 and 10
            io.write("math.random(10) : ", math.random(10), "\n")

            -- Generate random number between 1 and 100
            io.write("math.random(1,100) : ", math.random(1,100), "\n")

            -- Used to set a seed value for random
            math.randomseed(os.time())

            -- Print float to 10 decimals
            print(string.format("Pi = %.10f", math.pi))

            -- ---------- CONDITIONALS ----------
            -- Relational Operators : > < >= <= == ~=
            -- Logical Operators : and or not

            age = 13

            if age < 16 then
                io.write("You can go to school", "\n")
                local localVar = 10
            elseif (age >= 16) and (age < 18) then
                io.write("You can drive", "\n")
            else
                io.write("You can vote", "\n")
            end

            -- A variable marked local is local only to this if statement
            -- io.write("Local Variable : ", localvar)

            if (age < 14) or (age > 67) then io.write("You shouldn't work\n") end

            -- Format, convert to string and place boolean value with string.format
            print(string.format("not true = %s", tostring(not true)))

            -- There is no ternary operator in Lua
            -- canVote = age > 18 ? true : false

            -- This is similar to the ternary operator
            canVote = age > 18 and true or false
            io.write("Can I Vote : ", tostring(canVote), "\n")

            -- There is no Switch statement in Lua

            -- ---------- STRINGS ----------
            quote = "I changed my password everywhere to 'incorrect.' That way when I forget it,it always reminds me, 'Your password is incorrect.'"

            io.write("Quote Length : ", string.len(quote), "\n")

            -- Return the string after replacing
            io.write("Replace I with me : ", string.gsub(quote, "I", "me"), "\n")

            -- Find the index of a matching String
            io.write("Index of password : ", string.find(quote, "password"), "\n")

            -- Set characters to upper and lowercase
            io.write("Quote Upper : ", string.upper(quote), "\n")
            io.write("Quote Lower : ", string.lower(quote), "\n")

            -- ---------- LOOPING ----------
            i = 1
            while (i <= 10) do
              io.write(i)
              i = i + 1

              -- break throws you out of a loop
              -- continue doesn't exist with Lua
              if i == 8 then break end
            end
            print("\n")

            -- Repeat will cycle through the loop at least once
            repeat
              io.write("Enter your guess : ")

              -- Gets input from the user
              guess = io.read()

              -- Either surround the number with quotes, or convert the string into
              -- a number
            until tonumber(guess) == 15

            -- Value to start with, value to stop at, increment each loop
            for i = 1, 10, 1 do
              io.write(i)
            end

            print()

            -- Create a table which is a list of items like an array
            months = {"January", "February", "March", "April", "May",
            "June", "July", "August", "September", "October", "November",
            "December"}

            -- Cycle through table where k is the key and v the value of each item
            for k, v in pairs(months) do
              io.write(v, " ")
            end

            print()

            -- ---------- TABLES ----------
            -- Tables take the place of arrays, dictionaries, tuples, etc.

            -- Create a Table
            aTable = {}

            -- Add values to a table
            for i = 1, 10 do
              aTable[i] = i
            end

            -- Access value by index
            io.write("First Item : ", aTable[1], "\n")

            -- Items in Table
            io.write("Number of Items : ", #aTable, "\n")

            -- Insert in table, at index, item to insert
            table.insert(aTable, 1, 0)

            -- Combine a table as a String and seperate with provided seperator
            print(table.concat(aTable, ", "))

            -- Remove item at index
            table.remove(aTable, 1)
            print(table.concat(aTable, ", "))

            -- Sort items in reverse
            table.sort(aTable, function(a,b) return a>b end)
            print(table.concat(aTable, ", "))

            -- Create a multidimensional Table
            aMultiTable = {}

            for i = 0, 9 do
              aMultiTable[i] = {}
              for j = 0, 9 do
                aMultiTable[i][j] = tostring(i) .. tostring(j)
              end
            end

            -- Access value in cell
            io.write("Table[0][0] : ", aMultiTable[1][2], "\n")

            -- Cycle through and print a multidimensional Table
            for i = 0, 9 do
              for j = 0, 9 do
                io.write(aMultiTable[i][j], " : ")
              end
              print()
            end

            -- ---------- FUNCTIONS ----------
            function getSum(num1, num2)
              return num1 + num2
            end

            print(string.format("5 + 2 = %d", getSum(5,2)))

            function splitStr(theString)

              stringTable = {}
              local i = 1

              -- Cycle through the String and store anything except for spaces
              -- in the table
              for str in string.gmatch(theString, "[^%s]+") do
                stringTable[i] = str
                i = i + 1
              end

              -- Return multiple values
              return stringTable, i
            end

            -- Receive multiple values
            splitStrTable, numOfStr = splitStr("The Turtle")

            for j = 1, numOfStr do
              print(string.format("%d : %s", j, splitStrTable[j]))
            end

            -- Variadic Function recieve unknown number of parameters
            function getSumMore(...)
              local sum = 0

              for k, v in pairs{...} do
                sum = sum + v
              end
              return sum
            end

            io.write("Sum : ", getSumMore(1,2,3,4,5,6), "\n")

            -- A function is a variable in that we can store them under many variable
            -- names as well as in tables and we can pass and return them though functions

            -- Saving an anonymous function to a variable
            doubleIt = function(x) return x * 2 end
            print(doubleIt(4))

            -- A Closure is a function that can access local variables of an enclosing
            -- function
            function outerFunc()
              local i = 0
              return function()
                i = i + 1
                return i
              end
            end

            -- When you include an inner function in a function that inner function
            -- will remember changes made on variables in the inner function
            getI = outerFunc()
            print(getI())
            print(getI())

            -- ---------- COROUTINES ----------
            -- Coroutines are like threads except that they can't run in parallel
            -- A coroutine has the status of running, susepnded, dead or normal

            -- Use create to create one that performs some action
            co = coroutine.create(function()
              for i = 1, 10, 1 do
              print(i)
              print(coroutine.status(co))
              if i == 5 then coroutine.yield() end
              end end)

            -- They start off with the status suspended
            print(coroutine.status(co))

            -- Call for it to run with resume during which the status changes to running
            coroutine.resume(co)

            -- After execution it has the status of dead
            print(coroutine.status(co))

            co2 = coroutine.create(function()
              for i = 101, 110, 1 do
              print(i)
              end end)

            coroutine.resume(co2)
            coroutine.resume(co)

            -- ---------- FILE I/O ----------
            -- Different ways to work with files
            -- r: Read only (default)
            -- w: Overwrite or create a new file
            -- a: Append or create a new file
            -- r+: Read & write existing file
            -- w+: Overwrite read or create a file
            -- a+: Append read or create file

            -- Create new file for reading and writing
            file = io.open("test.lua", "w+")

            -- Write text to the file
            file:write("Random string of text\n")
            file:write("Some more text\n")

            -- Move back to the beginning of the file
            file:seek("set", 0)

            -- Read from the file
            print(file:read("*a"))

            -- Close the file
            file:close()

            -- Open file for appending and reading
            file = io.open("test.lua", "a+")

            file:write("Even more text\n")

            file:seek("set", 0)

            print(file:read("*a"))

            file:close()

            -- ---------- MODULES ----------
            -- A Module is like a library full of functions and variables

            -- Use require to gain access to the functions in the module
            convertModule = require("convert")

            -- Execute the function in the module
            print(string.format("%.3f cm", convertModule.ftToCm(12)))

            -- ---------- METATABLES ----------
            -- Used to define how operations on tables should be carried out in regards
            -- to adding, subtracting, multiplying, dividing, concatenating, or
            -- comparing tables

            -- Create a table and put default values in it
            aTable = {}
            for x = 1, 10 do
              aTable[x] = x
            end

            mt = {
              -- Define how table values should be added
              -- You can also define _sub, _mul, _div, _mod, _concat (..)
              __add = function (table1, table2)

                sumTable = {}

                for y = 1, #table1 do
                  if (table1[y] ~= nil) and (table2[y] ~= nil) then
                    sumTable[y] = table1[y] + table2[y]
                  else
                    sumTable[y] = 0
                  end
                end

                return sumTable
              end,

              -- Define how table values should be checked for equality
              __eq = function (table1, table2)
                return table1.value == table2.value
              end,

              -- For homework figure out how to check if less then
              __lt = function (table1, table2)
                return table1.value < table2.value
              end,

              -- For homework figure out how to check if less then or equal
              __le = function (table1, table2)
                return table1.value <= table2.value
              end,
            }

            -- Attach the metamethods to this table
            setmetatable(aTable, mt)

            -- Check if tables are equal
            print(aTable == aTable)

            addTable = {}

            -- Add values in tables
            addTable = aTable + aTable

            -- print the results of the addition
            for z = 1, #addTable do
              print(addTable[z])
            end

            -- ---------- OBJECT ORIENTED PROGRAMMING ----------
            -- Lua is not an OOP language and it doesn't allow you to define classes
            -- but you can fake it using tables and metatables

            -- Define the defaults for our table
            Animal = {height = 0, weight = 0, name = "No Name", sound = "No Sound"}

            -- Used to initialize Animal objects
            function Animal:new (height, weight, name, sound)

              setmetatable({}, Animal)

              -- Self is a reference to values for this Animal
              self.height = height
              self.weight = weight
              self.name = name
              self.sound = sound

              return self
            end

            -- Outputs a string that describes the Animal
            function Animal:toString()

              animalStr = string.format("%s weighs %.1f lbs, is %.1f in tall and says %s", self.name, self.weight, self.height, self.sound)

              return animalStr
            end

            -- Create an Animal
            spot = Animal:new(10, 15, "Spot", "Roof")

            -- Get variable values
            print(spot.weight)

            -- Call a function in Animal
            print(spot:toString())

            -- ---------- INHERITANCE ----------
            -- Extends the properties and functions in another object

            Cat = Animal:new()

            function Cat:new (height, weight, name, sound, favFood)
              setmetatable({}, Cat)

              -- Self is a reference to values for this Animal
              self.height = height
              self.weight = weight
              self.name = name
              self.sound = sound
              self.favFood = favFood

              return self
            end

            -- Overide an Animal function
            function Cat:toString()

              catStr = string.format("%s weighs %.1f lbs, is %.1f in tall, says %s and loves %s", self.name, self.weight, self.height, self.sound, self.favFood)

              return catStr
            end

            -- Create a Cat
            fluffy = Cat:new(10, 15, "Fluffy", "Meow", "Tuna")

            print(fluffy:toString())
            1
            2
            3
            4
            5
            6
            7
            8
            9
            10
            11
            12
            13
            14
            15
            16
            17
            18
            19
            20
            21
            22
            23
            24
            25
            26
            27
            28
            29
            30
            31
            32
            33
            34
            35
            36
            37
            38
            39
            40
            41
            42
            43
            44
            45
            46
            47
            48
            49
            50
            51
            52
            53
            54
            55
            56
            57
            58
            59
            60
            61
            62
            63
            64
            65
            66
            67
            68
            69
            70
            71
            72
            73
            74
            75
            76
            77
            78
            79
            80
            81
            82
            83
            84
            85
            86
            87
            88
            89
            90
            91
            92
            93
            94
            95
            96
            97
            98
            99
            100
            101
            102
            103
            104
            105
            106
            107
            108
            109
            110
            111
            112
            113
            114
            115
            116
            117
            118
            119
            120
            121
            122
            123
            124
            125
            126
            127
            128
            129
            130
            131
            132
            133
            134
            135
            136
            137
            138
            139
            140
            141
            142
            143
            144
            145
            146
            147
            148
            149
            150
            151
            152
            153
            154
            155
            156
            157
            158
            159
            160
            161
            162
            163
            164
            165
            166
            167
            168
            169
            170
            171
            172
            173
            174
            175
            176
            177
            178
            179
            180
            181
            182
            183
            184
            185
            186
            187
            188
            189
            190
            191
            192
            193
            194
            195
            196
            197
            198
            199
            200
            201
            202
            203
            204
            205
            206
            207
            208
            209
            210
            211
            212
            213
            214
            215
            216
            217
            218
            219
            220
            221
            222
            223
            224
            225
            226
            227
            228
            229
            230
            231
            232
            233
            234
            235
            236
            237
            238
            239
            240
            241
            242
            243
            244
            245
            246
            247
            248
            249
            250
            251
            252
            253
            254
            255
            256
            257
            258
            259
            260
            261
            262
            263
            264
            265
            266
            267
            268
            269
            270
            271
            272
            273
            274
            275
            276
            277
            278
            279
            280
            281
            282
            283
            284
            285
            286
            287
            288
            289
            290
            291
            292
            293
            294
            295
            296
            297
            298
            299
            300
            301
            302
            303
            304
            305
            306
            307
            308
            309
            310
            311
            312
            313
            314
            315
            316
            317
            318
            319
            320
            321
            322
            323
            324
            325
            326
            327
            328
            329
            330
            331
            332
            333
            334
            335
            336
            337
            338
            339
            340
            341
            342
            343
            344
            345
            346
            347
            348
            349
            350
            351
            352
            353
            354
            355
            356
            357
            358
            359
            360
            361
            362
            363
            364
            365
            366
            367
            368
            369
            370
            371
            372
            373
            374
            375
            376
            377
            378
            379
            380
            381
            382
            383
            384
            385
            386
            387
            388
            389
            390
            391
            392
            393
            394
            395
            396
            397
            398
            399
            400
            401
            402
            403
            404
            405
            406
            407
            408
            409
            410
            411
            412
            413
            414
            415
            416
            417
            418
            419
            420
            421
            422
            423
            424
            425
            426
            427
            428
            429
            430
            431
            432
            433
            434
            435
            436
            437
            438
            439
            440
            441
            442
            443
            444
            445
            446
            447
            448
            449
            450
            451
            452
            453
            454
            455
            456
            457
            458
            459
            460
            461
            462
            463
            464
            465
            466
            467
            468
            469
            470
            471
            472
            473
            474
            475
            476
            477
            478
            479
            480
            481
            482
            483
            484
            485
            486
            487
            488
            489
            490
            491
            492
            493
            494
                
            -- Prints to the screen (Can end with semicolon)
            print("Hello World")
             
            --[[
            Multiline comment
            ]]
             
            -- Variable names can't start with a number, but can contain letters, numbers
            -- and underscores
             
            -- Lua is dynamically typed based off of the data stored there
            -- This is a string and it can be surrounded by ' or "
            name = "Derek"
             
            -- Another way to print to the screen
            -- Escape Sequences : \n \b \t \\ \" \'
            -- Get the string size by proceeding it with a #
            io.write("Size of string ", #name, "\n")
             
            -- You can store any data type in a variable even after initialization
            name = 4
            io.write("My name is ", name, "\n")
             
            -- Lua only has floating point numbers and this is the max number
            bigNum = 9223372036854775807 + 1
            io.write("Big Number ", bigNum, "\n")
             
            io.write("Big Number ", type(bigNum), "\n")
             
            -- Floats are precise up to 13 digits
            floatPrecision = 1.999999999999 + 0.0000000000005
            io.write(floatPrecision, "\n")
             
            -- We can create long strings and maintain white space
            longString = [[
            I am a very very long
            string that goes on for
            ever]]
            io.write(longString, "\n")
             
            -- Combine Strings with ..
            longString = longString .. name
            io.write(longString, "\n")
             
            -- Booleans store with true or false
            isAbleToDrive = true
            io.write(type(isAbleToDrive), "\n")
             
            -- Every variable gets the value of nil by default meaning it has no value
            io.write(type(madeUpVar), "\n")
             
            -- ---------- MATH ----------
            io.write("5 + 3 = ", 5+3, "\n")
            io.write("5 - 3 = ", 5-3, "\n")
            io.write("5 * 3 = ", 5*3, "\n")
            io.write("5 / 3 = ", 5/3, "\n")
            io.write("5.2 % 3 = ", 5%3, "\n")
             
            -- Shorthand like number++ and number += 1 aren't in Lua
             
            -- Math Functions: floor, ceil, max, min, sin, cos, tan,
            -- asin, acos, exp, log, log10, pow, sqrt, random, randomseed
             
            io.write("floor(2.345) : ", math.floor(2.345), "\n")
            io.write("ceil(2.345) : ", math.ceil(2.345), "\n")
            io.write("max(2, 3) : ", math.max(2, 3), "\n")
            io.write("min(2, 3) : ", math.min(2, 3), "\n")
            io.write("pow(8, 2) : ", math.pow(8, 2), "\n")
            io.write("sqrt(64) : ", math.sqrt(64), "\n")
             
            -- Generate random number between 0 and 1
            io.write("math.random() : ", math.random(), "\n")
             
            -- Generate random number between 1 and 10
            io.write("math.random(10) : ", math.random(10), "\n")
             
            -- Generate random number between 1 and 100
            io.write("math.random(1,100) : ", math.random(1,100), "\n")
             
            -- Used to set a seed value for random
            math.randomseed(os.time())
             
            -- Print float to 10 decimals
            print(string.format("Pi = %.10f", math.pi))
             
            -- ---------- CONDITIONALS ----------
            -- Relational Operators : > < >= <= == ~=
            -- Logical Operators : and or not
             
            age = 13
             
            if age < 16 then
                io.write("You can go to school", "\n")
                local localVar = 10
            elseif (age >= 16) and (age < 18) then
                io.write("You can drive", "\n")
            else
                io.write("You can vote", "\n")
            end
             
            -- A variable marked local is local only to this if statement
            -- io.write("Local Variable : ", localvar)
             
            if (age < 14) or (age > 67) then io.write("You shouldn't work\n") end
             
            -- Format, convert to string and place boolean value with string.format
            print(string.format("not true = %s", tostring(not true)))
             
            -- There is no ternary operator in Lua
            -- canVote = age > 18 ? true : false
             
            -- This is similar to the ternary operator
            canVote = age > 18 and true or false
            io.write("Can I Vote : ", tostring(canVote), "\n")
             
            -- There is no Switch statement in Lua
             
            -- ---------- STRINGS ----------
            quote = "I changed my password everywhere to 'incorrect.' That way when I forget it,it always reminds me, 'Your password is incorrect.'"
             
            io.write("Quote Length : ", string.len(quote), "\n")
             
            -- Return the string after replacing
            io.write("Replace I with me : ", string.gsub(quote, "I", "me"), "\n")
             
            -- Find the index of a matching String
            io.write("Index of password : ", string.find(quote, "password"), "\n")
             
            -- Set characters to upper and lowercase
            io.write("Quote Upper : ", string.upper(quote), "\n")
            io.write("Quote Lower : ", string.lower(quote), "\n")
             
            -- ---------- LOOPING ----------
            i = 1
            while (i <= 10) do
              io.write(i)
              i = i + 1
             
              -- break throws you out of a loop
              -- continue doesn't exist with Lua
              if i == 8 then break end
            end
            print("\n")
             
            -- Repeat will cycle through the loop at least once
            repeat
              io.write("Enter your guess : ")
             
              -- Gets input from the user
              guess = io.read()
             
              -- Either surround the number with quotes, or convert the string into
              -- a number
            until tonumber(guess) == 15
             
            -- Value to start with, value to stop at, increment each loop
            for i = 1, 10, 1 do
              io.write(i)
            end
             
            print()
             
            -- Create a table which is a list of items like an array
            months = {"January", "February", "March", "April", "May",
            "June", "July", "August", "September", "October", "November",
            "December"}
             
            -- Cycle through table where k is the key and v the value of each item
            for k, v in pairs(months) do
              io.write(v, " ")
            end
             
            print()
             
            -- ---------- TABLES ----------
            -- Tables take the place of arrays, dictionaries, tuples, etc.
             
            -- Create a Table
            aTable = {}
             
            -- Add values to a table
            for i = 1, 10 do
              aTable[i] = i
            end
             
            -- Access value by index
            io.write("First Item : ", aTable[1], "\n")
             
            -- Items in Table
            io.write("Number of Items : ", #aTable, "\n")
             
            -- Insert in table, at index, item to insert
            table.insert(aTable, 1, 0)
             
            -- Combine a table as a String and seperate with provided seperator
            print(table.concat(aTable, ", "))
             
            -- Remove item at index
            table.remove(aTable, 1)
            print(table.concat(aTable, ", "))
             
            -- Sort items in reverse
            table.sort(aTable, function(a,b) return a>b end)
            print(table.concat(aTable, ", "))
             
            -- Create a multidimensional Table
            aMultiTable = {}
             
            for i = 0, 9 do
              aMultiTable[i] = {}
              for j = 0, 9 do
                aMultiTable[i][j] = tostring(i) .. tostring(j)
              end
            end
             
            -- Access value in cell
            io.write("Table[0][0] : ", aMultiTable[1][2], "\n")
             
            -- Cycle through and print a multidimensional Table
            for i = 0, 9 do
              for j = 0, 9 do
                io.write(aMultiTable[i][j], " : ")
              end
              print()
            end
             
            -- ---------- FUNCTIONS ----------
            function getSum(num1, num2)
              return num1 + num2
            end
             
            print(string.format("5 + 2 = %d", getSum(5,2)))
             
            function splitStr(theString)
             
              stringTable = {}
              local i = 1
             
              -- Cycle through the String and store anything except for spaces
              -- in the table
              for str in string.gmatch(theString, "[^%s]+") do
                stringTable[i] = str
                i = i + 1
              end
             
              -- Return multiple values
              return stringTable, i
            end
             
            -- Receive multiple values
            splitStrTable, numOfStr = splitStr("The Turtle")
             
            for j = 1, numOfStr do
              print(string.format("%d : %s", j, splitStrTable[j]))
            end
             
            -- Variadic Function recieve unknown number of parameters
            function getSumMore(...)
              local sum = 0
             
              for k, v in pairs{...} do
                sum = sum + v
              end
              return sum
            end
             
            io.write("Sum : ", getSumMore(1,2,3,4,5,6), "\n")
             
            -- A function is a variable in that we can store them under many variable
            -- names as well as in tables and we can pass and return them though functions
             
            -- Saving an anonymous function to a variable
            doubleIt = function(x) return x * 2 end
            print(doubleIt(4))
             
            -- A Closure is a function that can access local variables of an enclosing
            -- function
            function outerFunc()
              local i = 0
              return function()
                i = i + 1
                return i
              end
            end
             
            -- When you include an inner function in a function that inner function
            -- will remember changes made on variables in the inner function
            getI = outerFunc()
            print(getI())
            print(getI())
             
            -- ---------- COROUTINES ----------
            -- Coroutines are like threads except that they can't run in parallel
            -- A coroutine has the status of running, susepnded, dead or normal
             
            -- Use create to create one that performs some action
            co = coroutine.create(function()
              for i = 1, 10, 1 do
              print(i)
              print(coroutine.status(co))
              if i == 5 then coroutine.yield() end
              end end)
             
            -- They start off with the status suspended
            print(coroutine.status(co))
             
            -- Call for it to run with resume during which the status changes to running
            coroutine.resume(co)
             
            -- After execution it has the status of dead
            print(coroutine.status(co))
             
            co2 = coroutine.create(function()
              for i = 101, 110, 1 do
              print(i)
              end end)
             
            coroutine.resume(co2)
            coroutine.resume(co)
             
            -- ---------- FILE I/O ----------
            -- Different ways to work with files
            -- r: Read only (default)
            -- w: Overwrite or create a new file
            -- a: Append or create a new file
            -- r+: Read & write existing file
            -- w+: Overwrite read or create a file
            -- a+: Append read or create file
             
            -- Create new file for reading and writing
            file = io.open("test.lua", "w+")
             
            -- Write text to the file
            file:write("Random string of text\n")
            file:write("Some more text\n")
             
            -- Move back to the beginning of the file
            file:seek("set", 0)
             
            -- Read from the file
            print(file:read("*a"))
             
            -- Close the file
            file:close()
             
            -- Open file for appending and reading
            file = io.open("test.lua", "a+")
             
            file:write("Even more text\n")
             
            file:seek("set", 0)
             
            print(file:read("*a"))
             
            file:close()
             
            -- ---------- MODULES ----------
            -- A Module is like a library full of functions and variables
             
            -- Use require to gain access to the functions in the module
            convertModule = require("convert")
             
            -- Execute the function in the module
            print(string.format("%.3f cm", convertModule.ftToCm(12)))
             
            -- ---------- METATABLES ----------
            -- Used to define how operations on tables should be carried out in regards
            -- to adding, subtracting, multiplying, dividing, concatenating, or
            -- comparing tables
             
            -- Create a table and put default values in it
            aTable = {}
            for x = 1, 10 do
              aTable[x] = x
            end
             
            mt = {
              -- Define how table values should be added
              -- You can also define _sub, _mul, _div, _mod, _concat (..)
              __add = function (table1, table2)
             
                sumTable = {}
             
                for y = 1, #table1 do
                  if (table1[y] ~= nil) and (table2[y] ~= nil) then
                    sumTable[y] = table1[y] + table2[y]
                  else
                    sumTable[y] = 0
                  end
                end
             
                return sumTable
              end,
             
              -- Define how table values should be checked for equality
              __eq = function (table1, table2)
                return table1.value == table2.value
              end,
             
              -- For homework figure out how to check if less then
              __lt = function (table1, table2)
                return table1.value < table2.value
              end,
             
              -- For homework figure out how to check if less then or equal
              __le = function (table1, table2)
                return table1.value <= table2.value
              end,
            }
             
            -- Attach the metamethods to this table
            setmetatable(aTable, mt)
             
            -- Check if tables are equal
            print(aTable == aTable)
             
            addTable = {}
             
            -- Add values in tables
            addTable = aTable + aTable
             
            -- print the results of the addition
            for z = 1, #addTable do
              print(addTable[z])
            end
             
            -- ---------- OBJECT ORIENTED PROGRAMMING ----------
            -- Lua is not an OOP language and it doesn't allow you to define classes
            -- but you can fake it using tables and metatables
             
            -- Define the defaults for our table
            Animal = {height = 0, weight = 0, name = "No Name", sound = "No Sound"}
             
            -- Used to initialize Animal objects
            function Animal:new (height, weight, name, sound)
             
              setmetatable({}, Animal)
             
              -- Self is a reference to values for this Animal
              self.height = height
              self.weight = weight
              self.name = name
              self.sound = sound
             
              return self
            end
             
            -- Outputs a string that describes the Animal
            function Animal:toString()
             
              animalStr = string.format("%s weighs %.1f lbs, is %.1f in tall and says %s", self.name, self.weight, self.height, self.sound)
             
              return animalStr
            end
             
            -- Create an Animal
            spot = Animal:new(10, 15, "Spot", "Roof")
             
            -- Get variable values
            print(spot.weight)
             
            -- Call a function in Animal
            print(spot:toString())
             
            -- ---------- INHERITANCE ----------
            -- Extends the properties and functions in another object
             
            Cat = Animal:new()
             
            function Cat:new (height, weight, name, sound, favFood)
              setmetatable({}, Cat)
             
              -- Self is a reference to values for this Animal
              self.height = height
              self.weight = weight
              self.name = name
              self.sound = sound
              self.favFood = favFood
             
              return self
            end
             
            -- Overide an Animal function
            function Cat:toString()
             
              catStr = string.format("%s weighs %.1f lbs, is %.1f in tall, says %s and loves %s", self.name, self.weight, self.height, self.sound, self.favFood)
             
              return catStr
            end
             
            -- Create a Cat
            fluffy = Cat:new(10, 15, "Fluffy", "Meow", "Tuna")
             
            print(fluffy:toString())

            -- The module name and filename are the same
            local convert = {}
            function convert.ftToCm(feet)
              return feet * 30.48
            end
            return convert
-----
~/Dropbox/rsc/Doks/phone/Comp/lang/lua/luaprogrin4ed.txt
~/Empire/Doks/Comp/lang/lua/lua-qstart.epub
~/Empire/Doks/Comp/lang/lua/luaforbeg.txt
~/Empire/Doks/Comp/lang/lua/luaprogr-beg.pdf
~/Empire/Doks/Comp/lang/lua/luaprogr-gems.txt


teal ----

https://billyquith.github.io/cheatsheet/?sheet=moonscript

fennel ----

