vim:fdm=marker:
____
__
ScratchArea:General {{{

Linux to Windows terminology-___  ___Gemini

Linux
  Windows

Daemon
  Service
Super User
  System Account / System User
-F
  /F
Environment
  Environment Variables
${VIM-RUNTIME}/file.x
  %AppData%/file.x

}}}
kfil {{{
  Ska vi köpa den här produkten?
      when should we buy this product/should we buy this product (at this point)?
    [vilka/hur många saker accepterar vi genom vårt (vardagliga) beteende/utan att vi tänker på det]
  Indicators and Predictors
  'Personal/Subjective Validation'
  verification (and theorizing) vs testing/falsification
      Baserat på 'mina fältundersökningar genom åren'
  P.N: Jag har träffat och interagerat med många(!) andliga/hippie-typer genom åren, och jag skulle faktiskt säga (baserat på de omfattande fältundersökningarna) att det är mer typiskt än inte = Det räcker med att säga 'Hm, jag undrar om det kan stämma/Har det replikerats?' så blir det/för att det ska bli riktigt(!) dålig stämning. ;) ;) ;)
  Det är regel snarare än undantag.

  Några av mina favoritämnen/_/personer att studera:
  - Feminister (och liknande aktivister)
  - Sociologer
  - Andliga/New Age-personer
  - Religiösa (+Teologer)
  - "Vanliga" människor

}}}
colschemes {{{
  blue dolphin
  chalk
    chill
}}}
ScratchArea LIA 2/TruckCom Updater {{{

= Parallel: TruckCom Linter

MSAL, Graph, Sharepoint = Examples + Code {{{

- Great great. So the first step
  included (and you're free to show
  at least the outline of some code
  to clarify, that would be very
  helpful) is getting a Microsoft
  Identity (or MSAL) ID token, to
  be used to see if the user is
  authorized to access a Sharepoint
  (via MS Graph) to retrieve some
  information.

Okay, getting an access token using
the Microsoft Authentication
Library (MSAL) is the crucial first
step for authenticating with
Microsoft Graph and accessing
SharePoint data.

Here's a basic outline of how you
can acquire an access token using
MSAL in a C# application:

- 1. Install the MSAL.NET NuGet Package:

dotnet add package Microsoft.Identity.Client

- 2. Acquire an Access Token:

using Microsoft.Identity.Client;

public async Task<string> GetAccessTokenAsync() {
  // Configure your application
  string[] scopes = new string[] { "https://graph.microsoft.com/.default" };
    // Request the necessary permissions
  string clientId = "YOUR_CLIENT_ID";
    // Replace with your application's client ID
  string tenantId = "YOUR_TENANT_ID";
    // Replace with your tenant ID (e.g., your organization's Azure AD tenant ID)

  // Create an instance of the IConfidentialClientApplication
  IConfidentialClientApplication app = ConfidentialClientApplicationBuilder
    .Create(clientId)
    .WithClientSecret("YOUR_CLIENT_SECRET")
      // Replace with your client secret
    .WithAuthority(new Uri($"https://login.microsoftonline.com/{tenantId}"))
    .Build();

  // Acquire an access token
  AuthenticationResult result = await app.AcquireTokenForClient(scopes)
    .ExecuteAsync();

  return result.AccessToken;
}

Explanation:

- IConfidentialClientApplication:
  This class represents your
  application and is the main entry
  point for authentication
  operations.
- clientId and clientSecret: These
  are application credentials that
  you register in the Azure portal.
- tenantId: This identifies your
  Azure AD tenant.
- scopes: The requested
  permissions. In this case,
  https://graph.microsoft.com/.default
  requests the default set of
  permissions for Microsoft Graph.

Important Notes:

- Replace placeholders: Replace the
  placeholders (YOUR_CLIENT_ID,
  YOUR_CLIENT_SECRET,
  YOUR_TENANT_ID) with your actual
  application credentials.
- Error Handling: Implement proper
  error handling (e.g., handle
  exceptions like
  MsalServiceException) to
  gracefully handle authentication
  failures.
- Security: Store your client
  secret securely. Avoid hardcoding
  it directly in your application.
  Consider using Azure Key Vault or
  other secure storage mechanisms.

This code provides a basic
framework for acquiring an access
token. You can then use this token
to make authenticated requests to
the Microsoft Graph API.

In the next step, we can explore
how to use this access token to
interact with SharePoint data.

Do you have any questions about
this initial code snippet or would
you like to proceed to the next
step?


- Yes, I think that's a good
  exposition as far as that goes,
  and we should go on to looking at
  how to retrieve information from
  the Sharepoint using MS Graph now

Okay, let's dive into retrieving
information from SharePoint using
Microsoft Graph and the access
token we obtained.

1. Install the Microsoft Graph
Client Library:

dotnet add package Microsoft.Graph

2. Make a GraphServiceClient instance:

using Microsoft.Graph;

// ... (GetAccessTokenAsync method as shown previously) ...

public async Task<IGraphServiceClient> GetGraphServiceClientAsync() {
  string accessToken = await GetAccessTokenAsync();
  return new GraphServiceClient(new DelegateAuthenticationProvider(
    requestMessage => {
      requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
      return Task.CompletedTask;
    }));
}

3. Retrieve SharePoint List Items:

public async Task<IList<ListItem>> GetSharePointListItemsAsync(string listId) {
  IGraphServiceClient graphClient = await GetGraphServiceClientAsync();

  var listItems = await graphClient.Sites["<your_site_id>"].Lists[listId].Items
    .Request()
    .GetAsync();

  return listItems.ToList(); 
}

Replace placeholders:

- Replace <your_site_id> with the
  ID of your SharePoint site.
- You can find the site ID in the
  SharePoint site URL.


Explanation:

- GraphServiceClient: This class
  provides methods for interacting
  with the Microsoft Graph API.
- DelegateAuthenticationProvider:
  This allows you to provide a
  custom authentication handler. We
  use it to attach the access token
  to the HTTP requests.
- Sites["<your_site_id>"].Lists[listId].Items:
  This represents the endpoint for
  retrieving list items from a
  specific list within a SharePoint
  site.
- Request(): This method allows you
  to configure the request (e.g.,
  filtering, sorting, expanding).
- GetAsync(): This method executes
  the request and returns a
  collection of ListItem objects.


Further Considerations:

- Error Handling: Implement robust
  error handling to gracefully
  handle potential issues such as
  network errors, invalid access
  tokens, or API rate limits.
- Pagination: If a list contains a
  large number of items, use the
  skip and top parameters in the
  Request() method to paginate
  through the results.
- Filtering and Sorting: Use the
  $filter, $orderby, and $expand
  query parameters to filter, sort,
  and expand related data in your
  requests.

This example demonstrates a basic
approach to retrieving SharePoint
list items using the Microsoft
Graph API and MSAL.NET. You can
adapt and extend this code to
perform various operations on
SharePoint data, such as creating
new items, updating existing items,
and working with files.

Do you have any specific questions
about this code or would you like
to explore other SharePoint
operations?


- Maybe you could show me (and list
  the names of) some common MS
  Graph and Sharepoint operations
  (with at least small snippets of
  code) so I can get the feel for
  it and an overview?

Certainly! Here are some common
Microsoft Graph operations for
interacting with SharePoint, along
with code snippets to illustrate
each:

- 1. Create a new list item

// Assuming you have the GraphServiceClient (as shown in the previous example)
var newItem = new ListItem {
  Title = "New Item Title"
};

var createdItem = await graphClient.Sites["<your_site_id>"].Lists[listId].Items
  .Request()
  .AddAsync(newItem);

- 2. Update an existing list item

// Assuming you have the list item ID
string itemId = "1"; 

var updatedItem = new ListItem {
  Title = "Updated Item Title"
};

await graphClient.Sites["<your_site_id>"].Lists[listId].Items[itemId]
  .Request()
  .UpdateAsync(updatedItem);

- 3. Delete a list item

await graphClient.Sites["<your_site_id>"].Lists[listId].Items[itemId]
  .Request()
  .DeleteAsync();

- 4. Upload a file to a document
  library

// Assuming you have the file path and library ID
string filePath = @"C:\path\to\your\file.docx";
string libraryId = "your_library_id";

using (var stream = new FileStream(filePath, FileMode.Open)) {
  await graphClient.Sites["<your_site_id>"].Drive.Root
    .ItemWithPath($"/{libraryId}/{Path.GetFileName(filePath)}")
    .Content
    .Request()
    .PutAsync<DriveItem>(stream);
}

- 5. Download a file from a
  document library

// Assuming you have the file path in SharePoint
string filePathInSharePoint = "/Documents/your_file.docx";

using (var stream = new MemoryStream()) {
  await graphClient.Sites["<your_site_id>"].Drive.Root
    .ItemWithPath(filePathInSharePoint)
    .Content
    .Request()
    .GetAsync(stream);

  // Save the downloaded file to your local disk
  using (var fileStream = new FileStream(@"C:\path\to\save\file.docx", FileMode.Create, FileAccess.Write)) {
    stream.Position = 0;
    await stream.CopyToAsync(fileStream);
  }
}

- 6. Get list properties

var list = await graphClient.Sites["<your_site_id>"].Lists[listId]
  .Request()
  .GetAsync();

Console.WriteLine($"List Title: {list.Title}");
Console.WriteLine($"List Description: {list.Description}");
// ... other list properties

These examples provide a basic
overview of some common SharePoint
operations using the Microsoft
Graph API. You can further explore
and customize these operations
based on your specific
requirements.

I hope these code snippets give you
a better understanding of how to
interact with SharePoint using
Microsoft Graph and C#.

Do you have any specific scenarios
in mind that you'd like to explore
further? I'm happy to provide more
tailored examples and guidance.


- I think I'll come back to it when
  I have digested and properly
  looked at what you have showed me
  so far. One question I would
  maybe like to ask is if I would
  like to send a Teams message to a
  certain user that their
  installation has been completed
  or something like that.

You're right, sending a Teams
message using the Microsoft Graph
API requires a few more steps and
considerations.

Here's a basic outline of how you
can send a message to a user in
Teams:

- 1. Acquire an Access Token (with
  appropriate permissions):

- You'll need to acquire an access token with the ChatMessage.Send permission.
- Important: Ensure that the user
  granting the permissions has the
  necessary permissions within
  their organization to send
  messages in Teams.

2. Identify the Recipient:

    You'll need to identify the recipient of the message. This could be:
        A user's ID
        A group ID
        A channel ID

3. Construct the Message Payload:

    Create a JSON object representing the chat message, including the message content, recipient information, and any other desired properties (e.g., importance).

4. Send the Message:

    Use the GraphServiceClient to make a POST request to the appropriate Teams API endpoint to send the message.

Example Code Snippet (Conceptual):
Code snippet

using Microsoft.Graph;

// ... (Acquire Access Token with ChatMessage.Send permission) ...

// Example: Send a message to a user 
string userId = "user_id";
  // Replace with the user's ID
string messageContent = "Hello from your C# application!";

var chatMessage = new ChatMessage {
  Body = new ItemBody {
    Content = messageContent,
    ContentType = BodyType.Text 
  }
};

await graphClient.Users[userId].Chats 
  .Request()
  .PostAsync(chatMessage); 

Important Notes:

    Permissions: Ensure that your application has the necessary permissions to send messages in Teams. This typically requires user consent.
    Error Handling: Implement robust error handling to catch potential issues (e.g., invalid user ID, insufficient permissions, network errors).
    Rate Limits: Be mindful of Microsoft Graph API rate limits to avoid throttling.
    Teams API Documentation: Refer to the official Microsoft Graph documentation for the latest information on Teams APIs, including detailed information on message properties, available endpoints, and best practices.

This provides a basic framework for sending Teams messages using the Microsoft Graph API.

I recommend exploring the Microsoft Graph documentation thoroughly to understand the available options and customize the message content and delivery according to your specific requirements.

Do you have any further questions about sending Teams messages or would you like to explore other aspects of Microsoft Graph and SharePoint?

One quick follow-up: Could Rx.Net or some library like that be used to good effect in these kind of applications and simplify some code and workflow?

You're absolutely right! Rx.NET can be incredibly beneficial when working with asynchronous operations and streams of data, like those often encountered when interacting with APIs like Microsoft Graph.  

Here are some potential use cases for Rx.NET in your SharePoint integration:

    Handling asynchronous API calls: Rx.NET provides operators like FromAsync and ObserveOn that can help you manage asynchronous operations efficiently, such as making multiple API calls concurrently or handling potential delays.
    Processing streams of data: If you're dealing with large datasets from SharePoint (e.g., retrieving a large number of list items), Rx.NET can help you process the data stream in a more efficient and reactive manner. You can use operators like Buffer, Window, and Scan to process data in chunks or perform aggregations.   

    Handling events: If you need to react to changes in SharePoint data (e.g., new items added to a list), Rx.NET can be used to create event streams and subscribe to notifications.
    Error handling and retries: Rx.NET provides powerful operators for handling errors, such as Retry, RetryWhen, and Catch. This can be invaluable when dealing with potential network issues or transient errors when interacting with the Microsoft Graph API.

Example (Conceptual - Handling a stream of list items):
Code snippet

// Assuming you have a method to fetch pages of list items asynchronously
public async Task<IEnumerable<ListItem>> GetListItemsAsync(string listId, int skip = 0, int top = 100) { 
  // ... (Your existing logic to fetch a page of list items) ... 
}

// Create an observable sequence to fetch all list items
IObservable<ListItem> listItemsObservable = Observable.Create<ListItem>(async observer => {
  int skip = 0;
  const int pageSize = 100;

  while (true) {
    var page = await GetListItemsAsync(listId, skip, pageSize); 
    foreach (var item in page) {
      observer.OnNext(item); 
    }

    if (page.Count < pageSize) { 
      break; 
    }

    skip += pageSize; 
  }

  observer.OnCompleted(); 
  return Disposable.Empty; 
});

// Subscribe to the observable and process the list items
listItemsObservable
  .SubscribeOn(Scheduler.Default) 
  .ObserveOn(SynchronizationContext.Current) 
  .Subscribe(item => {
    // Process each list item 
  });

This example demonstrates how to create an observable sequence to fetch all list items from a SharePoint list, allowing you to process the items asynchronously and handle the stream of data more effectively.

I encourage you to explore the Rx.NET library and experiment with its operators to see how it can improve the efficiency, maintainability, and responsiveness of your SharePoint integration applications.

Do you have any specific scenarios in mind where you think Rx.NET could be particularly beneficial for your SharePoint integration? I'd be happy to discuss those in more detail.

}}}
SharePoint: Add A New Column {{{

- Question: A colleague gave me a
  task to construct an app that
  obtains information from a
  Microsoft Sharepoint, and I was
  instructed to 'add a new column
  in the Sharepoint, to select
  application-type' (i.e. for the
  file I'm supposed to download
  from/using Sharepoint). Could you
  explain a bit what he might mean,
  especially when it comes to
  'adding a new column in the
  Sharepoint'? My suspicion is that
  it might be somewhat analogous to
  adding one more column in a
  database-table. Am I on the right
  track?

Yes, you are absolutely on the
right track! Your colleague's
request to "add a new column" in
SharePoint is indeed very analogous
to adding a new column in a
database table.

Here's a breakdown of what that
means in the context of SharePoint:


SharePoint Lists and Libraries:

- SharePoint uses lists and
  libraries to store data.
  - Lists are used for structured
    data, like tasks, contacts, or
    custom data.
  - Libraries are used for storing
    files, like documents, images,
    or videos.
- Both lists and libraries are
  essentially tabular structures,
  similar to database tables.
- Each row in a list or library
  represents an item (in a list) or
  a file (in a library).
- Each column represents a piece of
  metadata associated with the item
  or file.


Adding a New Column:

- When your colleague asks you to
  add a new column, they mean
  adding a new metadata field to
  the SharePoint list or library.
- This new column will allow you to
  store additional information
  about each item or file.
- In your case, the new column will
  be used to store the
  "application-type" of the files
  you're downloading.
- Sharepoint has a lot of different
  column types, such as:
  - Text
  - Number
  - Date and Time
  - Choice (drop-down list)
  - Yes/No
  - Lookup (referencing another
    list or library)
  - And many more...


"Application-Type" Column:

- For your "application-type"
  column, a "Choice" column would
  likely be the most appropriate.
- This would allow you to create a
  drop-down list of predefined
  application types (e.g., "Word
  Document," "Excel Spreadsheet,"
  "PDF," "CustomApp1", etc.).
- This will provide a consistent
  and controlled way to categorize
  your files.


How to Add a Column in SharePoint:

The exact steps might vary slightly
depending on your SharePoint
version, but here's a general
outline:

- 1. Navigate to the List or Library:

- Open the SharePoint site and go
  to the list or library where
  you want to add the column.

- 2. Access List/Library Settings:

- Look for a "Settings" or "Gear"
  icon.
- Select "List settings" or
  "Library settings."

- 3. Create a Column:

- Find the "Columns" section.
- Click "Create column."

- 4. Configure the Column:

- Enter a column name (e.g.,
  "Application Type").
- Select the column type (e.g.,
  "Choice").
- Enter the choices for the
  drop-down list.
- Configure any other settings as
  needed (e.g., whether the
  column is required).
- Click "OK" or "Save."


Why This Is Useful:

- Filtering and Sorting: The
  "application-type" column will
  allow you to easily filter and
  sort the files in the library
  based on their type.
- Automation: You can use the
  column in your app to automate
  the download process. For
  example, you could filter the
  library to download only files of
  a specific application type.
- Data Integrity: A "Choice" column
  helps ensure data consistency and
  prevents users from entering
  arbitrary values.
- Searching: Sharepoint search can
  use the content of the column to
  find files.


In Summary:

Your colleague's instruction to
"add a new column" is about adding
a new metadata field to your
SharePoint library, much like
adding a column to a database
table. Using a "Choice" column for
"application-type" will provide a
structured and efficient way to
manage your files.

}}}

- Own exception-type for Updater (=same as in TCCore)  // Förslag|För framtida =från Erik J.
- error-code handling

[Note: When running in Debug-mode through Rider, the program is not System-User - I.e. create/use dummy-exe for testing purposes]

SignalR  #for polling/direct feedback(=without the need for polling) during install/download-process {{{

Let's illustrate the difference between polling and SignalR with a simplified example of updating a counter on a webpage.

1. Polling (Traditional Approach):
JavaScript

// Client-side (JavaScript)
function updateCounter() {
  fetch('/counter') // Make a request to the server
    .then(response => response.json())
    .then(data => {
      document.getElementById('counter').innerText = data.count;
    });
}

setInterval(updateCounter, 5000); // Poll every 5 seconds

// Server-side (C# - Example using ASP.NET Core)
[HttpGet("/counter")]
public IActionResult GetCounter()
{
    return Json(new { count = _counterValue }); // _counterValue is your counter variable
}

In this approach, the client repeatedly asks the server for the counter value every 5 seconds.  This is inefficient because the server might not have any updates to provide most of the time.

2. SignalR (Real-time Approach):
JavaScript

// Client-side (JavaScript)
const connection = new signalR.HubConnectionBuilder()
  .withUrl("/counterHub") // URL of your SignalR Hub
  .build();

connection.on("CounterUpdated", (count) => { // Listen for updates
  document.getElementById('counter').innerText = count;
});

connection.start().then(() => {
    // Optionally, you could send a request to the hub to get the initial value
    connection.invoke("GetCurrentCount").then(count => {
        document.getElementById('counter').innerText = count;
    });
}).catch(err => console.error(err));


// Server-side (C# - ASP.NET Core)
public class CounterHub : Hub
{
    private int _counterValue = 0;

    public async Task UpdateCounter()
    {
        _counterValue++;
        await Clients.All.SendAsync("CounterUpdated", _counterValue); // Push update to all clients
    }

    public int GetCurrentCount() {
        return _counterValue;
    }
}

// In Startup.cs (ASP.NET Core):
app.UseEndpoints(endpoints =>
{
    endpoints.MapHub<CounterHub>("/counterHub");
    // ... other endpoints
});

With SignalR, the server pushes the updated counter value to all connected clients as soon as it changes.  The client doesn't need to constantly poll.  This is much more efficient and provides a real-time experience.

Key Differences and Improvements:

    Reduced Network Traffic: SignalR sends only the necessary updates, while polling sends requests even when there's no change.
    Improved Responsiveness: Updates are displayed instantly with SignalR, whereas polling introduces a delay.
    Simplified Code: The client-side code is cleaner and easier to understand with SignalR.

This is a very basic example, but it illustrates the core concept of how SignalR simplifies real-time communication.  Remember that this is a simplified example and error handling and more complex scenarios would add further code.  However, this should give you a good starting point to feel the difference.

}}}
- Testing/Using RxDotnet to simplify event-handling
.   - TC LinterUtil (inline interactive wiki) {{{

Nice. I have another little interesting task for us: We are discussing in our team about how many cores to use when running parallel tasks and the solution the team came up with (a bit reluctantly) was that the best temporary solution was to put a note about it in the team's wiki.

I'm thinking a better solution would be to construct some small sort of 'linter' utility that in a similar way to StyleCop could flag up the code with some highlight or color if one sets the options wrong or not in the preferred way, and gives a message with a recommendation if one hovers over the highlight. Would that be a very involved or difficult task do you think? By the way, the most used language and framework in the team is C# and DotNet Core, but the linter could as far as I'm concerned be written in a language like F# or the like.

Creating a "linter" utility to enforce coding standards related to parallel task core usage is a very interesting and valuable idea! It's definitely a better approach than relying on wiki notes.  While it's not a trivial task, it's also not overwhelmingly difficult, especially if you focus on a specific set of rules and integrate it appropriately.

Here's a breakdown of the challenges and potential approaches:

Challenges:

    Static Analysis Limitations:  Determining the optimal number of cores for parallel tasks is often highly context-dependent.  It depends on factors like the nature of the tasks, the hardware, and the overall system load.  A static analysis tool (like a linter) can only provide guidelines and flag potential issues, not definitively say "this is wrong."

    Language/Framework Integration: Integrating the linter seamlessly into your development workflow is important.  You'd want it to run during development (perhaps as part of the build process) and ideally provide feedback directly in the IDE (Visual Studio).

    Rule Definition:  You'll need to carefully define the rules your linter will enforce.  What constitutes a "bad" or "suboptimal" core usage?  Some examples:
        Using a fixed number of cores that's too high for most scenarios.
        Not considering the number of available cores.
        Using hardcoded magic numbers instead of configuration.
        Not providing a way to configure the number of cores (making it hard to override in specific cases).

    False Positives:  Any linter will inevitably produce some false positives (flagging code that's actually okay).  You need to design the rules and the output messages to minimize these and provide ways to suppress warnings when necessary.

Potential Approaches:

    Roslyn Analyzer (C#):  Since you're using C# and .NET Core, a Roslyn analyzer is the most natural and powerful approach.  Roslyn analyzers are integrated directly into Visual Studio and can provide real-time feedback as you write code.  This is the best option for tight integration.

    Custom Code Analysis Tool: You could create a separate tool (perhaps in F# or another language) that performs static analysis on your C# code.  This would be more complex to integrate into the development process but could be more flexible if you need to analyze other languages or file types.

    Regular Expressions/Text Parsing (Simplest, but Limited):  For very basic rules (e.g., just checking for specific keywords or patterns), you could use regular expressions or simple text parsing.  This would be the quickest to implement but also the most limited.

Example Roslyn Analyzer Concept (C#):
C#

// Example (Conceptual) Roslyn Analyzer
[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class ParallelCoreUsageAnalyzer : DiagnosticAnalyzer
{
    // ... Rule definition (DiagnosticDescriptor) ...

    public override void Analyze(AnalysisContext context)
    {
        // ... Syntax analysis to find parallel code ...

        // ... Check core usage (e.g., number of cores used) ...

        if (/* Core usage is not optimal */)
        {
            // ... Report a diagnostic (warning or error) with a message ...
        }
    }
}

Implementation Steps (Roslyn Analyzer):

    Create a Roslyn Analyzer Project:  Visual Studio has templates for creating Roslyn analyzers.

    Define Rules:  Create DiagnosticDescriptor objects to define the rules your analyzer will enforce, including the severity (warning, error), message, and help link.

    Implement Analysis Logic:  Use the Roslyn API to analyze the code's syntax tree and identify places where the rules are violated.

    Report Diagnostics:  Use the AnalysisContext to report diagnostics (warnings or errors) with informative messages and code highlights.

    Test and Refine:  Test your analyzer thoroughly and refine the rules and messages to minimize false positives and provide helpful guidance.

Recommendation:

For your situation, I strongly recommend going with a Roslyn analyzer. While it requires some learning, it's the best way to achieve tight integration with Visual Studio and provide real-time feedback to your team.  Start with a small set of well-defined rules and gradually expand the analyzer as you gain experience.  This will give your team a much more effective way to manage parallel core usage than wiki notes.

What I'm thinking is that Roslyn would be a valuable tool to make use of, and the rules and suggestions do not necessarily have to be overly complex, but more based on a few rules that the team comes up with for suggestions; In that way the suggestions when hovering over highlight would be more like a builtin tooltip-version of the Wiki, and would contain suggestions from the team 'inline' rather than having to browse around in the Wiki to find the correct page and such overhead. Also (as a short side-note), if it's not overkill I would like to use F# in some part of the process as it tends to shorten down code and it's a language I'm eager to learn more of.

You're on the right track! Focusing on a few well-defined rules and using Roslyn to provide inline suggestions (like a built-in tooltip version of your wiki) is an excellent strategy. It makes the linter practical, manageable, and directly addresses your team's needs. And yes, incorporating F# where it makes sense is a great way to leverage its strengths and learn more.

Here's a refined approach, combining Roslyn for the core analysis and potentially F# for parts of the process:

1. Define the Rules (Team Effort):

    This is the most crucial step. Get your team together and brainstorm the most important guidelines for parallel task core usage. Focus on common mistakes or areas where you've seen issues.
    Keep the initial set of rules small and specific. You can always add more later.
    Examples:
        "Avoid hardcoding the number of cores. Use Environment.ProcessorCount or a configurable setting."
        "For I/O-bound tasks, consider using fewer cores or asynchronous operations instead of parallel loops."
        "When using Parallel.For, ensure the workload is sufficiently CPU-intensive to justify the overhead."
        "If the degree of parallelism needs to be configurable, use a settings file or environment variable rather than a magic number."

2. Roslyn Analyzer (C#):

    This is where the core analysis happens. You'll use C# and the Roslyn API to examine the code's syntax tree and identify violations of your rules.
    The Roslyn analyzer will generate diagnostics (warnings or errors) with helpful messages that appear directly in Visual Studio. These messages are the "inline tooltips" you envisioned.
    Example Roslyn Diagnostic Message: "Consider using Environment.ProcessorCount instead of hardcoding the number of cores. This makes your code more adaptable to different environments."

3. F# (Optional, but Potentially Useful):

    Rule Definition/Management: You could use F# to define or manage your rules. F#'s type system and functional approach might be well-suited for representing complex rules or creating a domain-specific language (DSL) for defining them. The Roslyn analyzer itself would still be in C#, but the rules could be stored and managed in F#. This is probably only worth it if you anticipate your rules becoming quite complex.
    Testing: F# can be great for writing unit tests for your Roslyn analyzer. Its functional nature can make it easier to write concise and expressive tests.
    External Tooling: If you decide to create a separate code analysis tool (in addition to the Roslyn analyzer), F# would be a good choice for that tool.

4. Integration:

    The Roslyn analyzer integrates directly into Visual Studio. As developers write code, the analyzer runs in the background and provides real-time feedback.
    If you create a separate tool, you'll need to integrate it into your build process (e.g., as a pre-build step) or provide a way for developers to run it manually.

Example Workflow:

    Team defines a rule: "Avoid hardcoding core counts."

    You implement this rule in a Roslyn analyzer (C#).

    A developer writes code: Parallel.For(0, 8, i => { ... }); (8 is hardcoded).

    The Roslyn analyzer detects this and displays a warning in Visual Studio: "Consider using Environment.ProcessorCount instead of hardcoding '8' as the number of cores."

    The developer hovers over the warning and sees a more detailed explanation (from your rule description) with a link to your team's wiki page (if you have one) for more information.

Key Advantages of this Approach:

    Direct Feedback: Developers get immediate feedback in their IDE, making it easy to correct issues.
    Consistent Enforcement: The linter ensures that the rules are consistently applied across the codebase.
    Centralized Knowledge: The rules and suggestions are stored in code, making them easier to update and maintain than wiki pages.
    Improved Code Quality: By enforcing best practices, the linter helps improve the overall quality and maintainability of your code.

Starting with a small set of rules and gradually expanding your linter will make the project more manageable and allow you to get quick wins.  The combination of Roslyn's power and F#'s expressiveness (if you choose to use it) will provide a very effective solution for your team.

}}}
Installing an msi (Microsoft Installer) file {{{

Could you tell me a bit about the
.msi file format, i.e. mostly
focusing on how I install it
programmatically from a program
written in C#?

Absolutely. The .msi (Microsoft
Installer) file format is a
database-driven package format used
by Windows Installer for
installing, maintaining, and
removing software. It's a
fundamental part of Windows
software deployment.

Key Characteristics of MSI Files:

- Database-Driven: MSI files
  contain a relational database
  that describes the software
  components, installation process,
  and dependencies.   
- Transactional: Windows Installer
  uses a transactional approach,
  meaning that if an installation
  fails, it can roll back changes
  to the system.  
- Declarative: The installation
  process is defined declaratively,
  specifying what should be
  installed rather than how.
- Component-Based: Software is
  divided into components, which
  are the smallest units of
  installation.
- Features: MSI supports features,
  which are logical groupings of
  components.  
- Properties: MSI uses properties
  to store information about the
  installation.  


Programmatic Installation from C#:

To install an MSI file
programmatically from a C# program,
you can use the Process class to
execute the msiexec.exe
command-line utility.

Here's a breakdown of the process
and some code examples:

- 1. Using msiexec.exe:

msiexec.exe is the command-line
installer for MSI files. It
provides various command-line
options for controlling the
installation process.  

- 2. Basic Installation:

using System.Diagnostics;

public static void InstallMsi(string msiFilePath)
{
    Process process = new Process();
    process.StartInfo.FileName = "msiexec.exe";
    process.StartInfo.Arguments = $"/i \"{msiFilePath}\" /qn"; // /i for install, /qn for quiet (no UI)
    process.StartInfo.UseShellExecute = false;
    process.StartInfo.CreateNoWindow = true; // Prevents a console window from appearing
    process.Start();
    process.WaitForExit();

    if (process.ExitCode == 0)
    {
        Console.WriteLine("MSI installation successful.");
    }
    else
    {
        Console.WriteLine($"MSI installation failed with exit code: {process.ExitCode}");
    }
}

Explanation:

- /i: Specifies that an
  installation should be performed.
- /qn: Runs the installation in
  quiet mode, with no user
  interface.
- \"{msiFilePath}\": The path to
  the MSI file, enclosed in quotes
  to handle paths with spaces.
- process.WaitForExit(): Waits for
  the msiexec.exe process to
  finish.
- process.ExitCode: Gets the exit
  code of the process, which
  indicates success or failure.

3. Common msiexec.exe Options:

- /i: Install an MSI package.
- /x: Uninstall an MSI package.
- /f: Repair an MSI package.
- /p: Apply a patch (MSP file).
- /qn: Quiet mode (no UI).
- /qb: Basic UI.
- /qb!: Basic UI with no cancel
  button.
- /qr: Reduced UI.
- /qf: Full UI.
- /l*v <log_file>: Log installation
  details to a file.
- PROPERTY=VALUE: Set MSI
  properties.

- 4. Setting MSI Properties:

You can pass properties to the MSI
installer using the PROPERTY=VALUE
syntax.

public static void InstallMsiWithProperties(string msiFilePath, string properties)
{
    Process process = new Process();
    process.StartInfo.FileName = "msiexec.exe";
    process.StartInfo.Arguments = $"/i \"{msiFilePath}\" {properties} /qn";
    process.StartInfo.UseShellExecute = false;
    process.StartInfo.CreateNoWindow = true;
    process.Start();
    process.WaitForExit();
}

Example usage:

InstallMsiWithProperties("MyInstaller.msi", "INSTALLDIR=\"C:\\MyProgram\" LICENSEKEY=\"12345\"");

- 5. Logging:

Logging is crucial for debugging
installation issues.  

public static void InstallMsiWithLogging(string msiFilePath, string logFilePath)
{
    Process process = new Process();
    process.StartInfo.FileName = "msiexec.exe";
    process.StartInfo.Arguments = $"/i \"{msiFilePath}\" /qn /l*v \"{logFilePath}\"";
    process.StartInfo.UseShellExecute = false;
    process.StartInfo.CreateNoWindow = true;
    process.Start();
    process.WaitForExit();
}

6. Elevated Privileges:

If the MSI requires administrator
privileges, you'll need to run your
C# program with elevated
privileges.

Important Considerations:

- Error Handling: Always check the process.ExitCode to handle installation failures.
- Logging: Use logging to diagnose
  problems.   
- Security: Be cautious when
  running external processes,
  especially with elevated
  privileges.

By using the Process class and
msiexec.exe, you can effectively
install MSI files from your C#
applications.

}}}

Graph [hämta en fil-url] + Hämta 
    /me  #Graph

Identity/Graph+Sharepoint--inspiration: TCCore klasss: SharePointHandler
    create BatchRequest-Object
    får url
    + skickar in url 
    SharePoint-client (+GetFileStream)
      (och då kör vi en http-client)

SharePoint
Batch (generalla graph-anrop + slå ihop dem)
PackageSync  ___hm

Setup HttpClient
Setup Talk to Sharepoint
Core: Services (ServiceCollectionExtension.cs)
TruckComCoreWindowsService
TruckComCoreWebAPI

TODO:PROGR
.    Te: 'General/More specific programming/CS-terms' {{{
guid
  telematics
}}}
'handler'

Controllers often corresponds 1-to-1 to ___ {{{
    a set/collection of data related to a specific topic of interest
        an endpoint(??)

    e.g. WeatherForecastController
        +innehåller ofta olika metoder (GetWeatherForecast)
}}}
controllers brukar delas upp så att ____ {{{
    de har ett begränsat ansvarsområde
        t.ex. för en klass user => user-controller
    en egen controller för en entitet i en databas
    gruppera + validera indata (mm)
}}}
man anropar aldrig en controller från en annan controller, utan istället från/via ___ {{{
    en service (som plockar ut + omformaterar data för att sen kunna användas av en controller)
}}}
services är ansvariga för att ____ {{{
    leverera data till en controller
}}}
services kan läggas till 'automatiskt'/laddas till controllers genom att ___ (=anges hur) {{{
    injiceras (dependency injection)

    specificeras/läggs till i konstruktorn
}}}
en endpoint är egentligen ___ {{{
    en metod + controllern (=hela pathen)

    en unik URL på en server  # 'sett från utsidan'
    ung.= varje unik publik metod i controllers är en endpoint
}}}

Index|Install|Download--endpoints  =3 metoder i en controller / ...
    vad är indata + vad ska returneras (obs: i omvänd ordning när skapar metoden)  +definiera t.ex. HttpGet("index")

Alla controllers ärver (som standard) från ___ {{{
    ControllerBase
    exempel ...<ActionBase>
                  ^
                  +---------
    skicka ut sträng, ActionBase (=standard, Ok är standard)
}}}
HTTP status codes are easily used/included with ____ {{{
    named methods, e.g. this.Ok(@"hejsan")
    BadRequest(), NotFound(), ...
}}}
Using templates for WebAPI, Controllers etc (in Rider)
tips on breakpoints (when/how to use) {{{
    vet inte hur en metod funkar
        =sätt en breakpoint i början av metoden

    step over vs step into
        oftast step over, om inte t.ex. 
}}}
fördelen med unit testing {{{
    =du kan speca upp och köra precis en grej i koden

    [Fact]
    public void newmethod() {
*     var s = this.sut.ToString();
    }
}}}

Exempel C# 'INLINE TESTING': Testa och se hur Math.Pow funkar {{{
    [Fact]
    public void newmethod() {
*     var pow = Math.Pow(3,5);
    }

    [+run debug + step over]
    I så fall: Se till att referens till testramverket är inkluderat/angivet (+ta bort innan pushar upp)
}}}


tror _ tycker jag är seg, långsam och jobbar konstigt

}}}
install + use C#/F# in Jupyter(++)/Polyglot Notebooks {{{

- Great! I have asked the same question before, but it was in a different thread or conversation so I'll have to ask it again (the answer was very good by the way, but I didn't have a chance to write it down that time):

- What if I wanted the interactive experience of a Jupyter Notebook (i.e. being able to mix markup, text and documentation, and code) but I wanted to use F# (and sometimes maybe also C#). I think Notebook is such a good experience for testing out programming code. How could I accomplish that in Jupyter Notebook or something giving me a Notebook-like experience?

You're right, using Jupyter Notebooks with F# is a fantastic way to experiment, learn, and document your code.

Here's how you can achieve this:

1. Install Necessary Components:

    Install .NET SDK: Ensure you have the .NET SDK installed on your system. You can download it from the official .NET website.

    Install Jupyter:
        You can install Jupyter using pip:
        Bash

pip install jupyter

Or through Anaconda (if you have it installed):
Bash

    conda install -c conda-forge jupyter

Install the F# kernel for Jupyter:

    Install the dotnet-interactive package:
    Bash

dotnet tool install -g dotnet-interactive 

Register the F# kernel with Jupyter:
Bash

        dotnet try jupyter install 

2. Launch Jupyter Notebook:

    Open a terminal or command prompt and run:
    Bash

    jupyter notebook

3. Create a new F# notebook:

    In the Jupyter Notebook interface, click "New" and select "F#".

4. Start coding!

    You can now start writing and executing F# code within the notebook cells.
    Jupyter Notebook provides a rich environment for interactive coding, including:
        Code execution and output display
        Markdown cells for documentation, notes, and explanations
        Rich output formatting (e.g., tables, plots)
        Code completion and other helpful features

Key Advantages:

    Interactive Environment: The Jupyter Notebook environment is highly interactive, allowing you to experiment with code, see immediate results, and easily modify and rerun code cells.
    Documentation and Visualization: You can seamlessly integrate code with Markdown cells to document your work, add explanations, and include visualizations.
    Code Organization: Notebooks provide a structured way to organize your code, making it easier to read, understand, and share.

I hope this guide helps you get started with using F# in Jupyter Notebooks. If you have any further questions or encounter any issues during the setup or usage, feel free to ask!

I'm ready for your next question. 😊

Great. A quick follow-up: I remember from the answer I got when I asked the question previously also mentioned a community-driven version of Notebook, but I cannot quite remember the name of it. Do you know which one I'm talking about?
----
Great. A quick follow-up (concerning using F# in Notebooks): I remember from the answer I got when I asked the question previously also mentioned a community-driven version of Notebook, but I cannot quite remember the name of it. Do you know which one I'm talking about? Also there is something called 'Multilang Notebooks' or something similar for the DotNet platform, am I correct?

You're right, there is a community-driven alternative to Jupyter Notebooks called nteract.

    nteract is a cross-platform, open-source interactive computing environment that supports multiple languages, including F#.
    It focuses on a more user-friendly and modern interface compared to the classic Jupyter Notebook.

Regarding "Multilang Notebooks" or similar concepts:

    .NET Interactive: This is a core component within the .NET ecosystem. It allows you to create interactive notebooks and scripts that can execute .NET code (including C# and F#) within various environments, including Jupyter Notebooks.   

Visual Studio Code with the Jupyter extension: VS Code provides excellent support for Jupyter Notebooks, including the ability to run and debug F# code within the notebook environment.

}}}
../weblinks.txt


gvim -p ../at/PROGR.cm.txt comp/lang/PROGRLANG.DB.ref.txt



Multimedia, MuRec {{{
    gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/{graf/pr/MultiMedia,comp/mu/MuRec}.txt
      MultiMedia: Scribus, Inkscape, Gimp, imagick, fontforge, Blender, ... ffmpeg
    gvim -p ../ref/graf/pr/MultiMedia.txt ../ref/comp/mu/MuRec.txt
      gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/{graf/pr/MultiMedia,comp/mu/MuRec}.txt

}}}
TODO: Add ffmpeg from at.Blender (etc)
____
Browsers (File, Web, Media, Web) {{{
media ----
    gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/{sysadm/browse/file,hardw/hardw-devices,sysadm/browse/media,sysadm/browse/web,sysadm/browse/mail,sysadm/browse/remote}.txt
cd at
    gvim -p ../ref/comp/sysadm/browse/file.txt ../ref/comp/hardw/hardw-devices.txt ../ref/comp/sysadm/browse/media.txt ../ref/comp/sysadm/browse/web.txt ../ref/comp/sysadm/browse/mail.txt ../ref/comp/sysadm/browse/remote.txt
      gvim -c '/.*@.*' -p ~/Dropbox/rsc/Doks/phone/comp/sysadm/browse/{file,media,web,mail,remote}.txt

    ## at.pr.mplayer.bash
tmp:mpv
    PLAYLIST WITH LUA-SCRIPTING **** {{{
        https://duckduckgo.com/?t=ffab&q=mpv+playlist&ia=web
        https://smarttech101.com/how-to-configure-use-mpv-video-player/
        https://duckduckgo.com/?t=ffab&q=mpv+lua&ia=web
    https://github.com/mpvnet-player/mpv.net/wiki/Extending-mpv-and-mpv.net-via-Lua-scripting
      https://mpv.io/manual/master/#lua-scripting
    https://github.com/mpv-player/mpv/wiki/User-Scripts
https://github.com/jonniek/mpv-playlistmanager
    https://github.com/drogers141/mpv-playlist-navigator
      https://github.com/422658476/MPV-EASY-Player/blob/master/portable-data/scripts/playlistnoplayback.lua
      https://github.com/occivink/mpv-gallery-view
    }}}
Mpv-Mplayer SectionLoop+Cropping[!!] {{{

Quick question concerning mpv and mplayer - I have the documentation for it set in a file somewhere, but it might be easier to submit the question here: Let's say I wanted to play a video file with looping between two time-points, and also crop the video to a certain geometry specification. I know I can do this with vlc and set it interactively (via the Gui), but if I wanted to do that using either mpv or player, I suspect that could be specified as a directive directly from the command-line. Could you help me out on that?
expand_more
volume_up

Absolutely! Both mpv and mplayer offer command-line options to achieve looping and cropping for your video playback. Here's how to accomplish it:

Looping a Video between Time Points

mpv:
Use the -loop option along with the and end times (in seconds) to specify the loop range.

Bash
mpv -loop start_time-end_time video_file.mp4
Use code with caution.
content_copy
Replace start_time and end_time with the actual starting and ending seconds of your desired loop.

mplayer:
Mplayer doesn't have a built-in looping option. However, you can achieve a similar effect using the -ao null option to mute the audio and loop the video playback with external tools. Here's an example using the sleep command:

Bash
mplayer -ao null -loop 0 video_file.mp4 & sleep ((end_time - start_time)) ; kill %1
Use code with caution.
content_copy
This command first plays the muted video in a loop (-loop 0) using mplayer. The sleep command pauses for the duration of your loop ((end_time - start_time)) and then kills the mplayer process using its process ID (%1).

Cropping the Video

mpv:
Use the --crop option followed by a colon (:) separated width and height specification (e.g., width:height).

Bash
mpv --crop width:height video_file.mp4
Use code with caution.
content_copy
Replace width and height with the desired cropped dimensions.

mplayer:
Mplayer doesn't have a direct cropping option. However, you can achieve a similar effect by combining scaling and positioning with the -vf option. This requires some experimentation to get the exact crop you desire. Here's a basic example:

Bash
mplayer -vf scale=width:height video_file.mp4
Use code with caution.
content_copy
This scales the video to the specified width and height. You might need to adjust positioning further using options like -af for horizontal and vertical adjustments.

Combining Looping and Cropping:

You can combine these options in your command line to achieve both looping and cropping simultaneously:

Bash
# mpv example
mpv --crop width:height -loop start_time-end_time video_file.mp4

# mplayer example (with sleep for looping)
mplayer -vf scale=width:height -ao null -loop 0 video_file.mp4 & sleep ((end_time - start_time)) ; kill %1
Use code with caution.
content_copy
Remember to replace placeholders with your specific values and adjust the scaling/positioning options in mplayer for the desired crop. While mplayer requires some workarounds, mpv offers a more straightforward approach for both looping and cropping using command-line options.

}}}
browse:web-text ----
    TextbasedWebbrowsers(, Reveal|Impress.js)
    ---- consolidation-list: lynx, links, Nyxt/Vimium(+?), w3m, qutebrowser ----  xterm
    ~/Dropbox/rsc/data/lists/learnqna/vanki/lynx.txt
    ~/RiderProjects/bluelegend76/rsc/data/lists/learnqna/vanki/lynx.txt
browse:(file, web, im, mail) ----
    Firefox/chrome(+Devtools), Evince, Okular, Thunar/Dolphin, Mutt, Shotwell,   exwm/im-viewer/pdftools-em
}}}
  gvim ../ref/comp/Editors.txt
Sysadm(+wm) Redhat, nushell {{{
  https://www.nushell.sh/cookbook/

  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/{cb/bcb.index,sysadm/cmdl-fu.shell,cb/RegexCb,cb/regex-vim,cb/pshell}.txt
  gvim -p ../ref/comp/cb/bcb.index.txt ../ref/comp/sysadm/cmdl-fu.shell.txt ../ref/comp/cb/RegexCb.txt ../ref/comp/cb/regex-vim.txt ../ref/comp/cb/pshell.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/{cb/bcb.index,sysadm/cmdl-fu.shell,cb/RegexCb,cb/regex-vim,cb/pshell}.txt

  regex: (vim, emacs, python/js, grep-posix, find, ag|perl)  + C#


  ¤¤ gvim -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{ssh,vnc-deskt,vbox,vera,termux,tasker}.txt
  ¤¤ gvim -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{ssh,vnc-deskt,vbox,vera,termux,tasker}.txt
  ¤¤ gvim -p comp/cb/{ssh,vnc-deskt,vbox,vera,termux,tasker}.txt
}}}
m/loffice (excel/calc + basic  +/base etc) {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{moffice,loffice,latexcb}.txt
                                                                   |
                                                                =set to include impress.js, reveal.js (etc) =??(|**(!!))
  gvim -p ../ref/comp/cb/moffice.txt ../ref/comp/cb/loffice.txt ../ref/comp/cb/latexcb.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{moffice,loffice,latexcb}.txt

}}}
.   ^-- markup: md, wiki, github-md, x-markd {{{
    TODO: ADD INDEX-FILE[**]  Temp-Solution: Start off list in Loffice.Latex
    org
    Markdown
      markdown extra
    wiki markup
    latex, mermaid
    context, texinfo
      plantuml
    xml
    docbook
      json, yaml

  gvim ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/xml/xml.txt
  gvim comp/lang/xml/xml.txt
  gvim ~/Dropbox/rsc/data/lists/ref/comp/lang/xml/xml.txt
  gvim comp/lang/xml/xml.txt
}}}
--
Git + Compile/Build, Deploy/Devops / CI, Testing (, disassembly) {{{
  TODO/ADD: Compile/Build
TODO: ADD MGIT + PTOOLS (FROM AT.GIT)
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{git,compile-build,Testing,deploy-devops,math-progr,algos,probltask-leetrosetta,disassembly}.txt
  gvim -p ../ref/comp/cb/git.txt ../ref/comp/cb/compile-build.txt ../ref/comp/cb/Testing.txt ../ref/comp/cb/deploy-devops.txt ../ref/comp/cb/math-progr.txt ../ref/comp/cb/algos.txt ../ref/comp/cb/probltask-leetrosetta.txt ../ref/comp/cb/disassembly.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{git,compile-build,Testing,deploy-devops,math-progr,algos,probltask-leetrosetta,disassembly}.txt

}}}

@@ system {{{
  __
  ada/spark
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{asm,cppcb,dlangcb,rustcb,jcb,cscb,go-v}.txt
                                                                      +including: go-v
  gvim -p ../ref/comp/cb/asm.txt ../ref/comp/cb/cppcb.txt ../ref/comp/cb/dlangcb.txt ../ref/comp/cb/rustcb.txt ../ref/comp/cb/jcb.txt ../ref/comp/cb/cscb.txt ../ref/comp/cb/go-v.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{asm,cppcb,dlangcb,rustcb,jcb,cscb,go-v}.txt

  --
  ~/Dropbox/rsc/data/lists/ref/comp/cb/go-handson.txt
  ~/Dropbox/rsc/data/lists/ref/comp/lang/vlang/vlang-man.check.txt
  ~/Dropbox/rsc/data/lists/ref/comp/lang/vlang/vlang-methods.scratch.txt
}}}
@@ Funct + Lisp {{{
  ____
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{clispcb,schemecb,clojure,haskell,sml-ocaml,fs}.txt
                                                  +lfe(??)
  gvim -p ../ref/comp/cb/clispcb.txt ../ref/comp/cb/schemecb.txt ../ref/comp/cb/clojure.txt ../ref/comp/cb/haskell.txt ../ref/comp/cb/sml-ocaml.txt ../ref/comp/cb/fs.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{clispcb,schemecb,clojure,haskell,sml-ocaml,fs}.txt

elisp  / newlisp {{{
  https://www.emacswiki.org/emacs/ElispCookbook
}}}
}}}



.     asm, wasm {{{
}}}
@@ Db mongo, sql, nosql, graph {{{
  __
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{Db.sql,db.graph,db.nosql}.txt
  gvim -p ../ref/comp/cb/Db.sql.txt ../ref/comp/cb/db.graph.txt ../ref/comp/cb/db.nosql.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{Db.sql,db.graph,db.nosql}.txt

}}}

multimedia + media {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{svganim,h5multimedia_canvas,imagickcb,ffmpegcb}.txt
  gvim -p ../ref/comp/cb/svganim.txt ../ref/comp/cb/h5multimedia_canvas.txt ../ref/comp/cb/imagickcb.txt ../ref/comp/cb/ffmpegcb.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{svganim,h5multimedia_canvas,imagickcb,ffmpegcb}.txt

  TODO  =CANVAS CHEATSHEETS(??)
  gamedev
    ~/Dropbox/rsc/data/lists/ref/comp/gamedev/levelup-gamedevbig.txt
    --
    ~/Dropbox/rsc/data/lists/ref/comp/gamedev/threejs03-gamedev.txt
      ~/Empire/curr-desktop/gameprogr-gems1.pdf
      ~/Empire/curr-desktop/gameprogr-gems6.pdf
    ~/Empire/Doks/Comp/lang/webdev/js/mmedia/threejs/

. {{{
        svg
        canvas
    lilypond (!)
    ## ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/internals.pdf
    ## ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/internals.txt
    #

    aux = programs, media (etc)
    audacity
    vlc
    mplayer
    blender *
    inkscape
}}}
}}}
stat datasci || mlearn-ai {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{stat-datasci,mlearn-ai}.txt
  gvim -p ../ref/comp/cb/stat-datasci.txt ../ref/comp/cb/mlearn-ai.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{stat-datasci,mlearn-ai}.txt

  gvim -p comp/cb/
  comp/cb/stat-datasci.txt
  comp/cb/mlearn-ai.txt
  R gnuplot Datasci(!) {{{
  . {{{
  ~/Empire/curr-desktop/gnuplotcb.pdf
      R
  https://www.scribd.com/book/290055884/Python-Data-Science-Cookbook
    https://www.scribd.com/book/272080010/Practical-Data-Science-Cookbook
    https://www.scribd.com/book/253053167/Practical-Data-Analysis
  }}}
  }}}
}}}
  ..\..\..\JupNoteb.binder.Tags1.txt
--
@@ scripting / web {{{
. {{{
h5, c3  Todo (=at top of scripting**(??))
~/Empire/Doks/Comp/lang/webdev/h5/h5cb.pdf
~/Empire/Doks/Comp/lang/webdev/c3/c3cb.pdf
}}}
  ____
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{jscb,h5c3,jqcb,phpcb,luacb,elixir}.txt
  gvim -p ../ref/comp/cb/jscb.txt ../ref/comp/cb/h5c3.txt ../ref/comp/cb/jqcb.txt ../ref/comp/cb/phpcb.txt ../ref/comp/cb/luacb.txt ../ref/comp/cb/elixir.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{jscb,h5c3,jqcb,phpcb,luacb,elixir}.txt

    ## ~/Dropbox/rsc/data/lists/ref/comp/lang/erlang-elixir/elixir.txt
    ## ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/erlang-elixir/elixir.txt
    ## ~/Dropbox/rsc/data/lists/ref/comp/lang/erlang-elixir/elixir.txt
  elixir / erlang (=Put into Webdev/Handheld) {{{
      --
      https://devhints.io/elixir
        https://elixir-lang.org/getting-started/introduction.html#interactive-mode
      https://github.com/vnegrisolo/cheat-sheet-elixir
      https://www.programming-idioms.org/cheatsheet/Elixir
      https://elixir-lang.org/docs.html
      https://hexdocs.pm/elixir/Kernel.html
      https://hexdocs.pm/elixir/File.html
  }}}

  ~/Empire/Doks/Comp/lang/lua/lua-game-development-cookbook.txt
  ~/Empire/Doks/Comp/lang/lua/Gamedev-Lua.txt
  ~/Empire/Doks/Comp/lang/lua/corona-webappwith.txt
  ~/Empire/Doks/Comp/lang/lua/luaprogr-gems.txt
    --
    ~/Empire/Doks/Comp/Gamedev/webmob/lua-iosgamedev.pdf
    ~/Empire/Doks/Comp/Gamedev/love-solar-corona/luagame-coronasdk.epub
    ## ~/Empire/Doks/Comp/Gamedev/love-solar-corona/luagame-coronasdk.txt
    ~/Empire/Doks/Comp/lang/lua/corona-buildgames.txt
    ~/Empire/Doks/Comp/lang/lua/corona-sdk.txt
    ~/Empire/Doks/Comp/lang/lua/corona-tutorial.txt
    --
    ~/Empire/Doks/Comp/lang/lua/corona-buildgames.pdf
    ~/Empire/Doks/Comp/lang/lua/corona-sdk.pdf
    ~/Empire/Doks/Comp/lang/lua/corona-tutorial.pdf
. {{{
TODO !!!! ~/Empire/curr-desktop/laravel5cb.pdf
TODO   ~/Empire/curr-desktop/js-goodpractice.pptx
              ~/Empire/curr-desktop/js-cleancode.pdf
              ~/Empire/curr-desktop/js-cleanrobust.pdf
                --
              ~/Empire/curr-desktop/js-professional.pdf
TODO !!   ~/Empire/curr-desktop/jsjsoncb.pdf

--
    lua
    https://www.scribd.com/document/22065348/Lua-Programming-Gems
    https://github.com/lua-cookbook/lua-cookbook/tree/master/src/book/en_US
    https://github.com/lua-cookbook/lua-cookbook/wiki/The-table-of-contents
    https://simion.com/info/lua_cookbook.html
    https://www.lua.org/gems/ **(!**)
    https://www.lua.org/gems/front.pdf

        --
    ~/Dropbox/rsc/data/lists/ref/comp/cb/go-handson.pdf
    ~/Dropbox/rsc/data/lists/ref/comp/cb/go-handson.txt
    ~/Dropbox/rsc/Doks/phone/gocb.txt
    ~/Empire/Doks/Comp/lang/go-v/gocb.pdf
    ~/Empire/curr-desktop/go-designpatt.pdf
--
    ~/Dropbox/rsc/Doks/phone/Comp/lang/elixcb.txt
}}}
}}}
handheld / mobile (=android, ios, etc) {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{androidcb-java,androidcb-kotlin,dart-flutter,ios}.txt
  gvim -p ../ref/comp/cb/androidcb-java.txt ../ref/comp/cb/androidcb-kotlin.txt ../ref/comp/cb/dart-flutter.txt ../ref/comp/cb/ios.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{androidcb-java,androidcb-kotlin,dart-flutter,ios}.txt

. {{{
  ~/Dropbox/rsc/Doks/phone/Comp/lang/java/kotlin/kotlin-androiddevs.txt  #google-devs
  ~/Dropbox/rsc/Doks/phone/Comp/lang/java/kotlin/kotlin-androiddev.txt
  
  --
  dart+flutter  (=FLUTTER COOKBOOK)
}}}
}}}

@@ nyq muHask csound scoll  pd chuck [!!!!] {{{
  __
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{nyq,csound,scoll,hask-euterp,pd,chuck}.txt
  gvim -p ../ref/comp/cb/nyq.txt ../ref/comp/cb/csound.txt ../ref/comp/cb/scoll.txt ../ref/comp/cb/hask-euterp.txt ../ref/comp/cb/pd.txt ../ref/comp/cb/chuck.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{nyq,csound,scoll,hask-euterp,pd,chuck}.txt

}}}
-- fsharp / fstar / coq  agda
  gvim -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{fsharp,fstar,coq}.txt
  gvim -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{fsharp,fstar,coq}.txt
  gvim -p comp/cb/{fsharp,fstar,coq}.txt
https://docs.scala-lang.org/cheatsheets/
    prolog/mercury {{{

        https://mercurylang.org/about/comparison_with_haskell.html
        https://mercurylang.org/information/doc-release/faq.pdf
        https://mercury-in.space/crash.html
        https://mercurylang.org/documentation/papers/book.pdf
        https://github.com/Mercury-Language/mercury/wiki/Tutorial
        https://mercurylang.org/information/doc-release/reference_manual.pdf
        https://mercurylang.org/information/doc-release/library.pdf
        https://mercurylang.org/information/doc-release/transition_guide.pdf
    }}}


ps
  gvim ~/Dropbox/rsc/data/lists/ref/comp/lang/ps/ps.txt
  gvim ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/ps/ps.txt
  gvim comp/lang/ps/ps.txt
tj
  gvim ~/Dropbox/rsc/data/lists/ref/comp/lang/tj/tj.txt
  gvim ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/tj/tj.txt
  gvim comp/lang/tj/tj.txt

anki
    vimscript
solidity etc {{{
  ~/Empire/curr-desktop/blockchain-byex.pdf
}}}


TODO (Etc) ----
Files to create: [Or, Maybe create/move majority to Sysadm]
    rsc/data/lists/ref/comp/cb/disassembly.txt  # Maybe move to System
    rsc/data/lists/ref/comp/cb/h5c3,jqcb.txt

https://overapi.com/  #php, python, java etc 'all cheatsheet collected'

Clojure vs Elixir {{{
___cloj
___elix


___cloj
Clojure Data Structures: Code Examples
Sure, here are some code examples demonstrating the syntax for different Clojure data structures:

Vectors:

(def fruit-basket ["apple" "banana" "orange"])
(get fruit-basket 1) ;; => "banana"
(conj fruit-basket "mango") ;; => ["apple" "banana" "orange" "mango"]

Lists:

(def shopping-list '(milk eggs bread))
(first shopping-list) ;; => "milk"
(rest shopping-list) ;; => '(eggs bread)
(conj shopping-list "cheese") ;; => '(milk eggs bread cheese)

Sets:

(def unique-ids #{1 2 3 2 4})
(contains? unique-ids 3) ;; => true
(count unique-ids) ;; => 3
(conj unique-ids 5) ;; => #{1 2 3 4 5}

Maps:

(def person-info {:name "Alice" :age 30 :city "New York"})
(get person-info :name) ;; => "Alice"
(keys person-info) ;; => [:name :age :city]
(assoc person-info :occupation "software engineer") ;; => {:name "Alice" :age 30 :city "New York" :occupation "software engineer"}

Keywords:

(def my-keyword :my-unique-key)
(keyword? my-keyword) ;; => true
(:name {:name "Bob" :age 40}) ;; => "Bob"

Atoms and Refs:

(def counter (atom 0))
(swap! counter inc) ;; => increments counter to 1
@counter ;; => 1

(def score (ref 0))
(dosync (ref-set score 10)) ;; thread-safe way to set score to 10
@score ;; => 10

Sequences:

(map inc [1 2 3]) ;; => (2 3 4)
(filter even? [1 2 3 4]) ;; => (2 4)
(range 5) ;; => (0 1 2 3 4)

Lazy Sequences:

(defn infinite-naturals [] (cons 1 (lazy infinite-naturals)))
(take 5 (infinite-naturals)) ;; => (1 2 3 4 5)


___elix
List: Ordered, indexed collections similar to Clojure lists.

fruits = ["apple", "banana", "orange"]

# Access by index:
head = fruits[0]  # "apple"

# Add to the beginning:
new_fruits = ["mango" | fruits]  # ["mango", "apple", "banana", "orange"]
Use code with caution.
Map: Unordered collections of key-value pairs similar to Clojure maps.

person = %{ name: "Alice", age: 30, city: "New York" }

# Access by key:
name = person[:name]  # "Alice"

# Add a new key-value pair:
updated_person = Map.put(person, :occupation, "software engineer")

Enum: Lazy sequences similar to Clojure lazy sequences.

numbers = 1..10  # Creates an Enum from 1 to 10

# Convert to a list:
list_of_numbers = Enum.to_list(numbers)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Iterate over the Enum:
Enum.each(numbers, &IO.puts/1)  # Prints each number on a new line

Specialized Collections:

Keyword: Represents unique, case-insensitive keys similar to Clojure keywords.

:my_unique_key    # Defines a keyword
Keyword.atom?(:my_unique_key)   # => true
Use code with caution.
Atom: Mutable single-value cell similar to Clojure atoms.

counter = Atom.new(0)
Process.sleep(1000)  # Simulate some delay
Atom.get(counter)   # => 0 (initial value)
Atom.update!(counter, &(&1 + 1))  # Increments counter to 1
Atom.get(counter)   # => 1 (updated value)

Process: Represents a running Erlang process (unique to Elixir).

spawn fn ->
  IO.puts "Hello from a separate process!"
end

# Processes run concurrently, so the output might not appear immediately

Note: This is just a small sample of Elixir data structures. I encourage you to explore their documentation and experiment further to gain a deeper understanding of their capabilities and how to use them effectively in your projects.

Remember, while syntax might differ slightly between languages, the core concepts of data structures often translate well. Use this overview as a stepping stone to further exploration and practical application!

}}}

