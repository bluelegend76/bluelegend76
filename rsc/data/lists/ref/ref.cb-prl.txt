vim:fdm=marker:
____
__
ScratchArea:General {{{

Linux to Windows terminology-___  ___Gemini

Linux
  Windows

Daemon
  Service

Super User
  System Account / System User

-F
  /F

Environment
  Environment Variables

}}}
kfil {{{
  Ska vi köpa den här produkten?
      when should we buy this product/should we buy this product (at this point)?
    [vilka/hur många saker accepterar vi genom vårt (vardagliga) beteende/utan att vi tänker på det]
  Indicators and Predictors
  'Personal/Subjective Validation'
  verification (and theorizing) vs testing/falsification
      Baserat på 'mina fältundersökningar genom åren'
  P.N: Jag har träffat och interagerat med många(!) andliga/hippie-typer genom åren, och jag skulle faktiskt säga (baserat på de omfattande fältundersökningarna) att det är mer typiskt än inte = Det räcker med att säga 'Hm, jag undrar om det kan stämma/Har det replikerats?' så blir det/för att det ska bli riktigt(!) dålig stämning. ;) ;) ;)
  Det är regel snarare än undantag.

  Några av mina favoritämnen/_/personer att studera:
  - Feminister (och liknande aktivister)
  - Sociologer
  - Andliga/New Age-personer
  - Religiösa (+Teologer)
  - "Vanliga" människor

}}}
ScratchArea LIA 2/TruckCom Updater {{{

MSAL, Graph, Sharepoint = Examples + Code {{{

Great great. So the first step included (and you're free to show at least the outline of some code to clarify, that would be very helpful) is getting a Microsoft Identity (or MSAL) ID token, to be used to see if the user is authorized to access a Sharpoint (via MS Graph) to retrieve some information.

Okay, getting an access token using the Microsoft Authentication Library (MSAL) is the crucial first step for authenticating with Microsoft Graph and accessing SharePoint data.

Here's a basic outline of how you can acquire an access token using MSAL in a C# application:

1. Install the MSAL.NET NuGet Package:
Bash

dotnet add package Microsoft.Identity.Client

2. Acquire an Access Token:
Code snippet

using Microsoft.Identity.Client;

public async Task<string> GetAccessTokenAsync()
{
    // Configure your application
    string[] scopes = new string[] { "https://graph.microsoft.com/.default" }; // Request the necessary permissions
    string clientId = "YOUR_CLIENT_ID"; // Replace with your application's client ID
    string tenantId = "YOUR_TENANT_ID"; // Replace with your tenant ID (e.g., your organization's Azure AD tenant ID)

    // Create an instance of the IConfidentialClientApplication
    IConfidentialClientApplication app = ConfidentialClientApplicationBuilder
        .Create(clientId)
        .WithClientSecret("YOUR_CLIENT_SECRET") // Replace with your client secret
        .WithAuthority(new Uri($"https://login.microsoftonline.com/{tenantId}"))
        .Build();

    // Acquire an access token
    AuthenticationResult result = await app.AcquireTokenForClient(scopes)
        .ExecuteAsync();

    return result.AccessToken;
}

Explanation:

    IConfidentialClientApplication: This class represents your application and is the main entry point for authentication operations.
    clientId and clientSecret: These are application credentials that you register in the Azure portal.
    tenantId: This identifies your Azure AD tenant.
    scopes: The requested permissions. In this case, https://graph.microsoft.com/.default requests the default set of permissions for Microsoft Graph.

Important Notes:

    Replace placeholders: Replace the placeholders (YOUR_CLIENT_ID, YOUR_CLIENT_SECRET, YOUR_TENANT_ID) with your actual application credentials.
    Error Handling: Implement proper error handling (e.g., handle exceptions like MsalServiceException) to gracefully handle authentication failures.
    Security: Store your client secret securely. Avoid hardcoding it directly in your application. Consider using Azure Key Vault or other secure storage mechanisms.

This code provides a basic framework for acquiring an access token. You can then use this token to make authenticated requests to the Microsoft Graph API.

In the next step, we can explore how to use this access token to interact with SharePoint data.

Do you have any questions about this initial code snippet or would you like to proceed to the next step?

- Yes, I think that's a good exposition as far as that goes, and we should go on to looking at how to retrieve information from the Sharepoint using MS Graph now

Okay, let's dive into retrieving information from SharePoint using Microsoft Graph and the access token we obtained.

1. Install the Microsoft Graph Client Library:
Bash

dotnet add package Microsoft.Graph

2. Make a GraphServiceClient instance:
Code snippet

using Microsoft.Graph;

// ... (GetAccessTokenAsync method as shown previously) ...

public async Task<IGraphServiceClient> GetGraphServiceClientAsync()
{
    string accessToken = await GetAccessTokenAsync();
    return new GraphServiceClient(new DelegateAuthenticationProvider(
        requestMessage => 
        {
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            return Task.CompletedTask;
        }));
}

3. Retrieve SharePoint List Items:
Code snippet

public async Task<IList<ListItem>> GetSharePointListItemsAsync(string listId)
{
    IGraphServiceClient graphClient = await GetGraphServiceClientAsync();

    var listItems = await graphClient.Sites["<your_site_id>"].Lists[listId].Items
        .Request()
        .GetAsync();

    return listItems.ToList(); 
}

    Replace placeholders:
        Replace <your_site_id> with the ID of your SharePoint site.
        You can find the site ID in the SharePoint site URL.

Explanation:

    GraphServiceClient: This class provides methods for interacting with the Microsoft Graph API.
    DelegateAuthenticationProvider: This allows you to provide a custom authentication handler. We use it to attach the access token to the HTTP requests.
    Sites["<your_site_id>"].Lists[listId].Items: This represents the endpoint for retrieving list items from a specific list within a SharePoint site.
    Request(): This method allows you to configure the request (e.g., filtering, sorting, expanding).
    GetAsync(): This method executes the request and returns a collection of ListItem objects.

Further Considerations:

    Error Handling: Implement robust error handling to gracefully handle potential issues such as network errors, invalid access tokens, or API rate limits.
    Pagination: If a list contains a large number of items, use the skip and top parameters in the Request() method to paginate through the results.
    Filtering and Sorting: Use the $filter, $orderby, and $expand query parameters to filter, sort, and expand related data in your requests.

This example demonstrates a basic approach to retrieving SharePoint list items using the Microsoft Graph API and MSAL.NET. You can adapt and extend this code to perform various operations on SharePoint data, such as creating new items, updating existing items, and working with files.

Do you have any specific questions about this code or would you like to explore other SharePoint operations?

Maybe you could show me (and list the names of) some common MS Graph and Sharepoint operations (with at least small snippets of code) so I can get the feel for it and an overview?

Certainly! Here are some common Microsoft Graph operations for interacting with SharePoint, along with code snippets to illustrate each:

1. Create a new list item
Code snippet

// Assuming you have the GraphServiceClient (as shown in the previous example)

var newItem = new ListItem
{
    Title = "New Item Title"
};

var createdItem = await graphClient.Sites["<your_site_id>"].Lists[listId].Items
    .Request()
    .AddAsync(newItem);

2. Update an existing list item
Code snippet

// Assuming you have the list item ID
string itemId = "1"; 

var updatedItem = new ListItem
{
    Title = "Updated Item Title"
};

await graphClient.Sites["<your_site_id>"].Lists[listId].Items[itemId]
    .Request()
    .UpdateAsync(updatedItem);

3. Delete a list item
Code snippet

await graphClient.Sites["<your_site_id>"].Lists[listId].Items[itemId]
    .Request()
    .DeleteAsync();

4. Upload a file to a document library
Code snippet

// Assuming you have the file path and library ID
string filePath = @"C:\path\to\your\file.docx";
string libraryId = "your_library_id";

using (var stream = new FileStream(filePath, FileMode.Open))
{
    await graphClient.Sites["<your_site_id>"].Drive.Root
        .ItemWithPath($"/{libraryId}/{Path.GetFileName(filePath)}")
        .Content
        .Request()
        .PutAsync<DriveItem>(stream);
}

5. Download a file from a document library
Code snippet

// Assuming you have the file path in SharePoint
string filePathInSharePoint = "/Documents/your_file.docx";

using (var stream = new MemoryStream())
{
    await graphClient.Sites["<your_site_id>"].Drive.Root
        .ItemWithPath(filePathInSharePoint)
        .Content
        .Request()
        .GetAsync(stream);

    // Save the downloaded file to your local disk
    using (var fileStream = new FileStream(@"C:\path\to\save\file.docx", FileMode.Create, FileAccess.Write))
    {
        stream.Position = 0;
        await stream.CopyToAsync(fileStream);
    }
}

6. Get list properties
Code snippet

var list = await graphClient.Sites["<your_site_id>"].Lists[listId]
    .Request()
    .GetAsync();

Console.WriteLine($"List Title: {list.Title}");
Console.WriteLine($"List Description: {list.Description}");
// ... other list properties

These examples provide a basic overview of some common SharePoint operations using the Microsoft Graph API. You can further explore and customize these operations based on your specific requirements.

I hope these code snippets give you a better understanding of how to interact with SharePoint using Microsoft Graph and C#.

Do you have any specific scenarios in mind that you'd like to explore further? I'm happy to provide more tailored examples and guidance.

I think I'll come back to it when I have digested and properly looked at what you have showed me so far. One question I would maybe like to ask is if I would like to send a Teams message to a certain user that their installation has been completed or something like that.

You're right, sending a Teams message using the Microsoft Graph API requires a few more steps and considerations.

Here's a basic outline of how you can send a message to a user in Teams:

1. Acquire an Access Token (with appropriate permissions):

    You'll need to acquire an access token with the ChatMessage.Send permission.
    Important: Ensure that the user granting the permissions has the necessary permissions within their organization to send messages in Teams.

2. Identify the Recipient:

    You'll need to identify the recipient of the message. This could be:
        A user's ID
        A group ID
        A channel ID

3. Construct the Message Payload:

    Create a JSON object representing the chat message, including the message content, recipient information, and any other desired properties (e.g., importance).

4. Send the Message:

    Use the GraphServiceClient to make a POST request to the appropriate Teams API endpoint to send the message.

Example Code Snippet (Conceptual):
Code snippet

using Microsoft.Graph;

// ... (Acquire Access Token with ChatMessage.Send permission) ...

// Example: Send a message to a user 
string userId = "user_id"; // Replace with the user's ID
string messageContent = "Hello from your C# application!";

var chatMessage = new ChatMessage
{
    Body = new ItemBody
    {
        Content = messageContent,
        ContentType = BodyType.Text 
    }
};

await graphClient.Users[userId].Chats 
    .Request()
    .PostAsync(chatMessage); 

Important Notes:

    Permissions: Ensure that your application has the necessary permissions to send messages in Teams. This typically requires user consent.
    Error Handling: Implement robust error handling to catch potential issues (e.g., invalid user ID, insufficient permissions, network errors).
    Rate Limits: Be mindful of Microsoft Graph API rate limits to avoid throttling.
    Teams API Documentation: Refer to the official Microsoft Graph documentation for the latest information on Teams APIs, including detailed information on message properties, available endpoints, and best practices.

This provides a basic framework for sending Teams messages using the Microsoft Graph API.

I recommend exploring the Microsoft Graph documentation thoroughly to understand the available options and customize the message content and delivery according to your specific requirements.

Do you have any further questions about sending Teams messages or would you like to explore other aspects of Microsoft Graph and SharePoint?

One quick follow-up: Could Rx.Net or some library like that be used to good effect in these kind of applications and simplify some code and workflow?

You're absolutely right! Rx.NET can be incredibly beneficial when working with asynchronous operations and streams of data, like those often encountered when interacting with APIs like Microsoft Graph.  

Here are some potential use cases for Rx.NET in your SharePoint integration:

    Handling asynchronous API calls: Rx.NET provides operators like FromAsync and ObserveOn that can help you manage asynchronous operations efficiently, such as making multiple API calls concurrently or handling potential delays.
    Processing streams of data: If you're dealing with large datasets from SharePoint (e.g., retrieving a large number of list items), Rx.NET can help you process the data stream in a more efficient and reactive manner. You can use operators like Buffer, Window, and Scan to process data in chunks or perform aggregations.   

    Handling events: If you need to react to changes in SharePoint data (e.g., new items added to a list), Rx.NET can be used to create event streams and subscribe to notifications.
    Error handling and retries: Rx.NET provides powerful operators for handling errors, such as Retry, RetryWhen, and Catch. This can be invaluable when dealing with potential network issues or transient errors when interacting with the Microsoft Graph API.

Example (Conceptual - Handling a stream of list items):
Code snippet

// Assuming you have a method to fetch pages of list items asynchronously
public async Task<IEnumerable<ListItem>> GetListItemsAsync(string listId, int skip = 0, int top = 100) 
{ 
    // ... (Your existing logic to fetch a page of list items) ... 
}

// Create an observable sequence to fetch all list items
IObservable<ListItem> listItemsObservable = Observable.Create<ListItem>(async observer => 
{
    int skip = 0;
    const int pageSize = 100;

    while (true) 
    {
        var page = await GetListItemsAsync(listId, skip, pageSize); 
        foreach (var item in page) 
        {
            observer.OnNext(item); 
        }

        if (page.Count < pageSize) 
        { 
            break; 
        }

        skip += pageSize; 
    }

    observer.OnCompleted(); 
    return Disposable.Empty; 
});

// Subscribe to the observable and process the list items
listItemsObservable
    .SubscribeOn(Scheduler.Default) 
    .ObserveOn(SynchronizationContext.Current) 
    .Subscribe(item => 
    {
        // Process each list item 
    });

This example demonstrates how to create an observable sequence to fetch all list items from a SharePoint list, allowing you to process the items asynchronously and handle the stream of data more effectively.

I encourage you to explore the Rx.NET library and experiment with its operators to see how it can improve the efficiency, maintainability, and responsiveness of your SharePoint integration applications.

Do you have any specific scenarios in mind where you think Rx.NET could be particularly beneficial for your SharePoint integration? I'd be happy to discuss those in more detail.

}}}

- Own exception-type for Updater (=same as in Core)
- error-code handling

[Note: When running in Debug-mode through Rider, the program is not System-User - I.e. create/use dummy-exe for testing purposes]

SignalR  #for polling during install/download-process


Graph [hämta en fil-url] + Hämta 

SharePoint
Batch (generalla graph-anrop + slå ihop dem)
PackageSync

Setup HttpClient
Setup Talk to Sharepoint
Core: Services (ServiceCollectionExtension.cs)
TruckComCoreWindowsService
TruckComCoreWebAPI


TODO:PROGR
    Te: 'General/More specific programming/CS-terms'
Controllers often corresponds 1-to-1 to ___
    WeatherForecastController
        +innehåller ofta olika metoder (GetWeatherForecast)
    .
    a set/collection of data related to a specific topic of interest
    an endpoint(?)
controllers brukar delas upp så att ____
    de har ett begränsat ansvarsområder
        för klassen user
        = user-controller
    en egen controller för en entitet i en databas
    gruppera + validera indata (mm)
man anropar aldrig en controller från en annan controller, utan istället från/via ___
    .
    en service (som plockar ut + omformaterar data för att sen kunna användas av en controll)
services är ansvariga för att ____
    leverera data till en controller
services kan injiceras
en endpoint är eg. en metod + controllern (=hela pathen)
Index|Install|Download-endpoints  =3 metoder i en controller / ...
    vad är indata + vad ska returneras (=i omvänd ordning när skapar metoden)  +definiera t.ex. HttpGet("index")
Alla controllers ärver (som standard) från ___
    .
    ControllerBase
    exempel ...<ActionBase>
HTTP status codes are easily used with ____
    named methods, e.g. this.Ok(@"hejsan")
        BadRequest(), NotFound()
Använda templates för WebAPI, Controllers etc (i Rider)
breakpoints
    vet inte hur en metod funkar
        .
        =sätt en breakpoint i början av metoden
    step over vs step into
        .
        oftast step over, om inte t.ex. 
fördelen med unit testing
    .
    =du kan speca upp och köra en precis grej i koden
    [Fact]
    public void newmethod() {
*     var s = this.sut.ToString();
    }

Exempel C# INLINE TESTING: Testa och se hur Math.Pow funkar
    [Fact]
    public void newmethod() {
*     var pow = Math.Pow(3,5);
    }
    [+run debug + step over]
guid
'handler'
    .
    xxxx
/me  #Graph

}}}
install + use C#/F# in Jupyter(++)/Polyglot Notebooks {{{

- Great! I have asked the same question before, but it was in a different thread or conversation so I'll have to ask it again (the answer was very good by the way, but I didn't have a chance to write it down that time):

- What if I wanted the interactive experience of a Jupyter Notebook (i.e. being able to mix markup, text and documentation, and code) but I wanted to use F# (and sometimes maybe also C#). I think Notebook is such a good experience for testing out programming code. How could I accomplish that in Jupyter Notebook or something giving me a Notebook-like experience?

You're right, using Jupyter Notebooks with F# is a fantastic way to experiment, learn, and document your code.

Here's how you can achieve this:

1. Install Necessary Components:

    Install .NET SDK: Ensure you have the .NET SDK installed on your system. You can download it from the official .NET website.

    Install Jupyter:
        You can install Jupyter using pip:
        Bash

pip install jupyter

Or through Anaconda (if you have it installed):
Bash

    conda install -c conda-forge jupyter

Install the F# kernel for Jupyter:

    Install the dotnet-interactive package:
    Bash

dotnet tool install -g dotnet-interactive 

Register the F# kernel with Jupyter:
Bash

        dotnet try jupyter install 

2. Launch Jupyter Notebook:

    Open a terminal or command prompt and run:
    Bash

    jupyter notebook

3. Create a new F# notebook:

    In the Jupyter Notebook interface, click "New" and select "F#".

4. Start coding!

    You can now start writing and executing F# code within the notebook cells.
    Jupyter Notebook provides a rich environment for interactive coding, including:
        Code execution and output display
        Markdown cells for documentation, notes, and explanations
        Rich output formatting (e.g., tables, plots)
        Code completion and other helpful features

Key Advantages:

    Interactive Environment: The Jupyter Notebook environment is highly interactive, allowing you to experiment with code, see immediate results, and easily modify and rerun code cells.
    Documentation and Visualization: You can seamlessly integrate code with Markdown cells to document your work, add explanations, and include visualizations.
    Code Organization: Notebooks provide a structured way to organize your code, making it easier to read, understand, and share.

I hope this guide helps you get started with using F# in Jupyter Notebooks. If you have any further questions or encounter any issues during the setup or usage, feel free to ask!

I'm ready for your next question. 😊

Great. A quick follow-up: I remember from the answer I got when I asked the question previously also mentioned a community-driven version of Notebook, but I cannot quite remember the name of it. Do you know which one I'm talking about?
----
Great. A quick follow-up (concerning using F# in Notebooks): I remember from the answer I got when I asked the question previously also mentioned a community-driven version of Notebook, but I cannot quite remember the name of it. Do you know which one I'm talking about? Also there is something called 'Multilang Notebooks' or something similar for the DotNet platform, am I correct?

You're right, there is a community-driven alternative to Jupyter Notebooks called nteract.

    nteract is a cross-platform, open-source interactive computing environment that supports multiple languages, including F#.
    It focuses on a more user-friendly and modern interface compared to the classic Jupyter Notebook.

Regarding "Multilang Notebooks" or similar concepts:

    .NET Interactive: This is a core component within the .NET ecosystem. It allows you to create interactive notebooks and scripts that can execute .NET code (including C# and F#) within various environments, including Jupyter Notebooks.   

Visual Studio Code with the Jupyter extension: VS Code provides excellent support for Jupyter Notebooks, including the ability to run and debug F# code within the notebook environment.

}}}
../weblinks.txt


gvim -p ../at/PROGR.cm.txt comp/lang/PROGRLANG.DB.ref.txt

Multimedia, MuRec {{{
    gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/{graf/pr/MultiMedia,comp/mu/MuRec}.txt
      MultiMedia: Scribus, Inkscape, Gimp, imagick, fontforge, Blender, ... ffmpeg
    gvim -p ../ref/graf/pr/MultiMedia.txt ../ref/comp/mu/MuRec.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/{graf/pr/MultiMedia,comp/mu/MuRec}.txt

}}}


____
Browsers (File, Web, Media, Web) {{{
media ----
    gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/{sysadm/browse/file,hardw/hardw-devices,sysadm/browse/media,sysadm/browse/web,sysadm/browse/mail,sysadm/browse/remote}.txt
    gvim -p ../ref/comp/sysadm/browse/file.txt ../ref/comp/hardw/hardw-devices.txt ../ref/comp/sysadm/browse/media.txt ../ref/comp/sysadm/browse/web.txt ../ref/comp/sysadm/browse/mail.txt ../ref/comp/sysadm/browse/remote.txt
      gvim -c '/.*@.*' -p ~/Dropbox/rsc/Doks/phone/comp/sysadm/browse/{file,media,web,mail,remote}.txt

    ## at.pr.mplayer.bash
tmp:mpv
    PLAYLIST WITH LUA-SCRIPTING **** {{{
        https://duckduckgo.com/?t=ffab&q=mpv+playlist&ia=web
        https://smarttech101.com/how-to-configure-use-mpv-video-player/
        https://duckduckgo.com/?t=ffab&q=mpv+lua&ia=web
    https://github.com/mpvnet-player/mpv.net/wiki/Extending-mpv-and-mpv.net-via-Lua-scripting
      https://mpv.io/manual/master/#lua-scripting
    https://github.com/mpv-player/mpv/wiki/User-Scripts
https://github.com/jonniek/mpv-playlistmanager
    https://github.com/drogers141/mpv-playlist-navigator
      https://github.com/422658476/MPV-EASY-Player/blob/master/portable-data/scripts/playlistnoplayback.lua
      https://github.com/occivink/mpv-gallery-view
    }}}
Mpv-Mplayer SectionLoop+Cropping[!!] {{{

Quick question concerning mpv and mplayer - I have the documentation for it set in a file somewhere, but it might be easier to submit the question here: Let's say I wanted to play a video file with looping between two time-points, and also crop the video to a certain geometry specification. I know I can do this with vlc and set it interactively (via the Gui), but if I wanted to do that using either mpv or player, I suspect that could be specified as a directive directly from the command-line. Could you help me out on that?
expand_more
volume_up

Absolutely! Both mpv and mplayer offer command-line options to achieve looping and cropping for your video playback. Here's how to accomplish it:

Looping a Video between Time Points

mpv:
Use the -loop option along with the and end times (in seconds) to specify the loop range.

Bash
mpv -loop start_time-end_time video_file.mp4
Use code with caution.
content_copy
Replace start_time and end_time with the actual starting and ending seconds of your desired loop.

mplayer:
Mplayer doesn't have a built-in looping option. However, you can achieve a similar effect using the -ao null option to mute the audio and loop the video playback with external tools. Here's an example using the sleep command:

Bash
mplayer -ao null -loop 0 video_file.mp4 & sleep ((end_time - start_time)) ; kill %1
Use code with caution.
content_copy
This command first plays the muted video in a loop (-loop 0) using mplayer. The sleep command pauses for the duration of your loop ((end_time - start_time)) and then kills the mplayer process using its process ID (%1).

Cropping the Video

mpv:
Use the --crop option followed by a colon (:) separated width and height specification (e.g., width:height).

Bash
mpv --crop width:height video_file.mp4
Use code with caution.
content_copy
Replace width and height with the desired cropped dimensions.

mplayer:
Mplayer doesn't have a direct cropping option. However, you can achieve a similar effect by combining scaling and positioning with the -vf option. This requires some experimentation to get the exact crop you desire. Here's a basic example:

Bash
mplayer -vf scale=width:height video_file.mp4
Use code with caution.
content_copy
This scales the video to the specified width and height. You might need to adjust positioning further using options like -af for horizontal and vertical adjustments.

Combining Looping and Cropping:

You can combine these options in your command line to achieve both looping and cropping simultaneously:

Bash
# mpv example
mpv --crop width:height -loop start_time-end_time video_file.mp4

# mplayer example (with sleep for looping)
mplayer -vf scale=width:height -ao null -loop 0 video_file.mp4 & sleep ((end_time - start_time)) ; kill %1
Use code with caution.
content_copy
Remember to replace placeholders with your specific values and adjust the scaling/positioning options in mplayer for the desired crop. While mplayer requires some workarounds, mpv offers a more straightforward approach for both looping and cropping using command-line options.

}}}
browse:web-text ----
    TextbasedWebbrowsers(, Reveal|Impress.js)
    ---- consolidation-list: lynx, links, Nyxt/Vimium(+?), w3m, qutebrowser ----  xterm
    ~/Dropbox/rsc/data/lists/learnqna/vanki/lynx.txt
    ~/RiderProjects/bluelegend76/rsc/data/lists/learnqna/vanki/lynx.txt
browse:(file, web, im, mail) ----
    Firefox/chrome(+Devtools), Evince, Okular, Thunar/Dolphin, Mutt, Shotwell,   exwm/im-viewer/pdftools-em
}}}
  gvim ../ref/comp/Editors.txt
Sysadm(+wm) Redhat, nushell {{{
  https://www.nushell.sh/cookbook/

  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/{cb/bcb.index,sysadm/cmdl-fu.shell,cb/RegexCb,cb/regex-vim,cb/pshell}.txt
  gvim -p ../ref/comp/cb/bcb.index.txt ../ref/comp/sysadm/cmdl-fu.shell.txt ../ref/comp/cb/RegexCb.txt ../ref/comp/cb/regex-vim.txt ../ref/comp/cb/pshell.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/{cb/bcb.index,sysadm/cmdl-fu.shell,cb/RegexCb,cb/regex-vim,cb/pshell}.txt

  regex: (vim, emacs, python/js, grep-posix, find, ag|perl)  + C#


  ¤¤ gvim -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{ssh,vnc-deskt,vbox,vera,termux,tasker}.txt
  ¤¤ gvim -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{ssh,vnc-deskt,vbox,vera,termux,tasker}.txt
  ¤¤ gvim -p comp/cb/{ssh,vnc-deskt,vbox,vera,termux,tasker}.txt
}}}
m/loffice (excel/calc + basic  +/base etc) {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{moffice,loffice,latexcb}.txt
                                                                   |
                                                                =set to include impress.js, reveal.js (etc) =??(|**(!!))
  gvim -p ../ref/comp/cb/moffice.txt ../ref/comp/cb/loffice.txt ../ref/comp/cb/latexcb.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{moffice,loffice,latexcb}.txt

}}}
.   ^-- markup: md, wiki, github-md, x-markd {{{
    TODO: ADD INDEX-FILE[**]  Temp-Solution: Start off list in Loffice.Latex
    org
    Markdown
      markdown extra
    wiki markup
    latex, mermaid
    context, texinfo
      plantuml
    xml
    docbook
      json, yaml

  gvim ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/xml/xml.txt
  gvim comp/lang/xml/xml.txt
  gvim ~/Dropbox/rsc/data/lists/ref/comp/lang/xml/xml.txt
  gvim comp/lang/xml/xml.txt
}}}
--
Git + Compile/Build, Deploy/Devops / CI, Testing (, disassembly) {{{
  TODO/ADD: Compile/Build
TODO: ADD MGIT + PTOOLS (FROM AT.GIT)
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{git,compile-build,Testing,deploy-devops,math-progr,algos,probltask-leetrosetta,disassembly}.txt
  gvim -p ../ref/comp/cb/git.txt ../ref/comp/cb/compile-build.txt ../ref/comp/cb/Testing.txt ../ref/comp/cb/deploy-devops.txt ../ref/comp/cb/math-progr.txt ../ref/comp/cb/algos.txt ../ref/comp/cb/probltask-leetrosetta.txt ../ref/comp/cb/disassembly.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{git,compile-build,Testing,deploy-devops,math-progr,algos,probltask-leetrosetta,disassembly}.txt

}}}

@@ system {{{
  __
  ada/spark
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{asm,cppcb,dlangcb,rustcb,jcb,cscb,go-v}.txt
                                                                      +including: go-v
  gvim -p ../ref/comp/cb/asm.txt ../ref/comp/cb/cppcb.txt ../ref/comp/cb/dlangcb.txt ../ref/comp/cb/rustcb.txt ../ref/comp/cb/jcb.txt ../ref/comp/cb/cscb.txt ../ref/comp/cb/go-v.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{asm,cppcb,dlangcb,rustcb,jcb,cscb,go-v}.txt

  --
  ~/Dropbox/rsc/data/lists/ref/comp/cb/go-handson.txt
  ~/Dropbox/rsc/data/lists/ref/comp/lang/vlang/vlang-man.check.txt
  ~/Dropbox/rsc/data/lists/ref/comp/lang/vlang/vlang-methods.scratch.txt
}}}
@@ Funct + Lisp {{{
  ____
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{clispcb,schemecb,clojure,haskell,sml-ocaml,fs}.txt
                                                  +lfe(??)
  gvim -p ../ref/comp/cb/clispcb.txt ../ref/comp/cb/schemecb.txt ../ref/comp/cb/clojure.txt ../ref/comp/cb/haskell.txt ../ref/comp/cb/sml-ocaml.txt ../ref/comp/cb/fs.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{clispcb,schemecb,clojure,haskell,sml-ocaml,fs}.txt

elisp  / newlisp {{{
  https://www.emacswiki.org/emacs/ElispCookbook
}}}
}}}


.     asm, wasm {{{
}}}
@@ Db mongo, sql, nosql, graph {{{
  __
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{Db.sql,db.graph,db.nosql}.txt
  gvim -p ../ref/comp/cb/Db.sql.txt ../ref/comp/cb/db.graph.txt ../ref/comp/cb/db.nosql.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{Db.sql,db.graph,db.nosql}.txt

}}}

multimedia + media {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{svganim,h5multimedia_canvas,imagickcb,ffmpegcb}.txt
  gvim -p ../ref/comp/cb/svganim.txt ../ref/comp/cb/h5multimedia_canvas.txt ../ref/comp/cb/imagickcb.txt ../ref/comp/cb/ffmpegcb.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{svganim,h5multimedia_canvas,imagickcb,ffmpegcb}.txt

  TODO  =CANVAS CHEATSHEETS(??)
  gamedev
    ~/Dropbox/rsc/data/lists/ref/comp/gamedev/levelup-gamedevbig.txt
    --
    ~/Dropbox/rsc/data/lists/ref/comp/gamedev/threejs03-gamedev.txt
      ~/Empire/curr-desktop/gameprogr-gems1.pdf
      ~/Empire/curr-desktop/gameprogr-gems6.pdf
    ~/Empire/Doks/Comp/lang/webdev/js/mmedia/threejs/

. {{{
        svg
        canvas
    lilypond (!)
    ## ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/internals.pdf
    ## ~/legacy/empire-lasttransfer2022/empire-lasttransfer_2022-06/internals.txt
    #

    aux = programs, media (etc)
    audacity
    vlc
    mplayer
    blender *
    inkscape
}}}
}}}
stat datasci || mlearn-ai {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{stat-datasci,mlearn-ai}.txt
  gvim -p ../ref/comp/cb/stat-datasci.txt ../ref/comp/cb/mlearn-ai.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{stat-datasci,mlearn-ai}.txt

  gvim -p comp/cb/
  comp/cb/stat-datasci.txt
  comp/cb/mlearn-ai.txt
  R gnuplot Datasci(!) {{{
  . {{{
  ~/Empire/curr-desktop/gnuplotcb.pdf
      R
  https://www.scribd.com/book/290055884/Python-Data-Science-Cookbook
    https://www.scribd.com/book/272080010/Practical-Data-Science-Cookbook
    https://www.scribd.com/book/253053167/Practical-Data-Analysis
  }}}
  }}}
}}}
  ..\..\..\JupNoteb.binder.Tags1.txt
--
@@ scripting / web {{{
. {{{
h5, c3  Todo (=at top of scripting**(??))
~/Empire/Doks/Comp/lang/webdev/h5/h5cb.pdf
~/Empire/Doks/Comp/lang/webdev/c3/c3cb.pdf
}}}
  ____
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{jscb,h5c3,jqcb,phpcb,luacb,elixir}.txt
  gvim -p ../ref/comp/cb/jscb.txt ../ref/comp/cb/h5c3.txt ../ref/comp/cb/jqcb.txt ../ref/comp/cb/phpcb.txt ../ref/comp/cb/luacb.txt ../ref/comp/cb/elixir.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{jscb,h5c3,jqcb,phpcb,luacb,elixir}.txt

    ## ~/Dropbox/rsc/data/lists/ref/comp/lang/erlang-elixir/elixir.txt
    ## ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/erlang-elixir/elixir.txt
    ## ~/Dropbox/rsc/data/lists/ref/comp/lang/erlang-elixir/elixir.txt
  elixir / erlang (=Put into Webdev/Handheld) {{{
      --
      https://devhints.io/elixir
        https://elixir-lang.org/getting-started/introduction.html#interactive-mode
      https://github.com/vnegrisolo/cheat-sheet-elixir
      https://www.programming-idioms.org/cheatsheet/Elixir
      https://elixir-lang.org/docs.html
      https://hexdocs.pm/elixir/Kernel.html
      https://hexdocs.pm/elixir/File.html
  }}}

  ~/Empire/Doks/Comp/lang/lua/lua-game-development-cookbook.txt
  ~/Empire/Doks/Comp/lang/lua/Gamedev-Lua.txt
  ~/Empire/Doks/Comp/lang/lua/corona-webappwith.txt
  ~/Empire/Doks/Comp/lang/lua/luaprogr-gems.txt
    --
    ~/Empire/Doks/Comp/Gamedev/webmob/lua-iosgamedev.pdf
    ~/Empire/Doks/Comp/Gamedev/love-solar-corona/luagame-coronasdk.epub
    ## ~/Empire/Doks/Comp/Gamedev/love-solar-corona/luagame-coronasdk.txt
    ~/Empire/Doks/Comp/lang/lua/corona-buildgames.txt
    ~/Empire/Doks/Comp/lang/lua/corona-sdk.txt
    ~/Empire/Doks/Comp/lang/lua/corona-tutorial.txt
    --
    ~/Empire/Doks/Comp/lang/lua/corona-buildgames.pdf
    ~/Empire/Doks/Comp/lang/lua/corona-sdk.pdf
    ~/Empire/Doks/Comp/lang/lua/corona-tutorial.pdf
. {{{
TODO !!!! ~/Empire/curr-desktop/laravel5cb.pdf
TODO   ~/Empire/curr-desktop/js-goodpractice.pptx
              ~/Empire/curr-desktop/js-cleancode.pdf
              ~/Empire/curr-desktop/js-cleanrobust.pdf
                --
              ~/Empire/curr-desktop/js-professional.pdf
TODO !!   ~/Empire/curr-desktop/jsjsoncb.pdf

--
    lua
    https://www.scribd.com/document/22065348/Lua-Programming-Gems
    https://github.com/lua-cookbook/lua-cookbook/tree/master/src/book/en_US
    https://github.com/lua-cookbook/lua-cookbook/wiki/The-table-of-contents
    https://simion.com/info/lua_cookbook.html
    https://www.lua.org/gems/ **(!**)
    https://www.lua.org/gems/front.pdf

        --
    ~/Dropbox/rsc/data/lists/ref/comp/cb/go-handson.pdf
    ~/Dropbox/rsc/data/lists/ref/comp/cb/go-handson.txt
    ~/Dropbox/rsc/Doks/phone/gocb.txt
    ~/Empire/Doks/Comp/lang/go-v/gocb.pdf
    ~/Empire/curr-desktop/go-designpatt.pdf
--
    ~/Dropbox/rsc/Doks/phone/Comp/lang/elixcb.txt
}}}
}}}
handheld / mobile (=android, ios, etc) {{{
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{androidcb-java,androidcb-kotlin,dart-flutter,ios}.txt
  gvim -p ../ref/comp/cb/androidcb-java.txt ../ref/comp/cb/androidcb-kotlin.txt ../ref/comp/cb/dart-flutter.txt ../ref/comp/cb/ios.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{androidcb-java,androidcb-kotlin,dart-flutter,ios}.txt

. {{{
  ~/Dropbox/rsc/Doks/phone/Comp/lang/java/kotlin/kotlin-androiddevs.txt  #google-devs
  ~/Dropbox/rsc/Doks/phone/Comp/lang/java/kotlin/kotlin-androiddev.txt
  
  --
  dart+flutter  (=FLUTTER COOKBOOK)
}}}
}}}

@@ nyq muHask csound scoll  pd chuck [!!!!] {{{
  __
  gvim -c '/.*@.*' -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{nyq,csound,scoll,hask-euterp,pd,chuck}.txt
  gvim -p ../ref/comp/cb/nyq.txt ../ref/comp/cb/csound.txt ../ref/comp/cb/scoll.txt ../ref/comp/cb/hask-euterp.txt ../ref/comp/cb/pd.txt ../ref/comp/cb/chuck.txt
    gvim -c '/.*@.*' -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{nyq,csound,scoll,hask-euterp,pd,chuck}.txt

}}}
-- fsharp / fstar / coq  agda
  gvim -p ~/Dropbox/rsc/data/lists/ref/comp/cb/{fsharp,fstar,coq}.txt
  gvim -p ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/cb/{fsharp,fstar,coq}.txt
  gvim -p comp/cb/{fsharp,fstar,coq}.txt
https://docs.scala-lang.org/cheatsheets/
    prolog/mercury {{{

        https://mercurylang.org/about/comparison_with_haskell.html
        https://mercurylang.org/information/doc-release/faq.pdf
        https://mercury-in.space/crash.html
        https://mercurylang.org/documentation/papers/book.pdf
        https://github.com/Mercury-Language/mercury/wiki/Tutorial
        https://mercurylang.org/information/doc-release/reference_manual.pdf
        https://mercurylang.org/information/doc-release/library.pdf
        https://mercurylang.org/information/doc-release/transition_guide.pdf
    }}}


ps
  gvim ~/Dropbox/rsc/data/lists/ref/comp/lang/ps/ps.txt
  gvim ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/ps/ps.txt
  gvim comp/lang/ps/ps.txt
tj
  gvim ~/Dropbox/rsc/data/lists/ref/comp/lang/tj/tj.txt
  gvim ~/RiderProjects/bluelegend76/rsc/data/lists/ref/comp/lang/tj/tj.txt
  gvim comp/lang/tj/tj.txt

anki
    vimscript
solidity etc {{{
  ~/Empire/curr-desktop/blockchain-byex.pdf
}}}


TODO (Etc) ----
Files to create: [Or, Maybe create/move majority to Sysadm]
    rsc/data/lists/ref/comp/cb/disassembly.txt  # Maybe move to System
    rsc/data/lists/ref/comp/cb/h5c3,jqcb.txt

https://overapi.com/  #php, python, java etc 'all cheatsheet collected'

Clojure vs Elixir {{{
___cloj
___elix


___cloj
Clojure Data Structures: Code Examples
Sure, here are some code examples demonstrating the syntax for different Clojure data structures:

Vectors:

(def fruit-basket ["apple" "banana" "orange"])
(get fruit-basket 1) ;; => "banana"
(conj fruit-basket "mango") ;; => ["apple" "banana" "orange" "mango"]

Lists:

(def shopping-list '(milk eggs bread))
(first shopping-list) ;; => "milk"
(rest shopping-list) ;; => '(eggs bread)
(conj shopping-list "cheese") ;; => '(milk eggs bread cheese)

Sets:

(def unique-ids #{1 2 3 2 4})
(contains? unique-ids 3) ;; => true
(count unique-ids) ;; => 3
(conj unique-ids 5) ;; => #{1 2 3 4 5}

Maps:

(def person-info {:name "Alice" :age 30 :city "New York"})
(get person-info :name) ;; => "Alice"
(keys person-info) ;; => [:name :age :city]
(assoc person-info :occupation "software engineer") ;; => {:name "Alice" :age 30 :city "New York" :occupation "software engineer"}

Keywords:

(def my-keyword :my-unique-key)
(keyword? my-keyword) ;; => true
(:name {:name "Bob" :age 40}) ;; => "Bob"

Atoms and Refs:

(def counter (atom 0))
(swap! counter inc) ;; => increments counter to 1
@counter ;; => 1

(def score (ref 0))
(dosync (ref-set score 10)) ;; thread-safe way to set score to 10
@score ;; => 10

Sequences:

(map inc [1 2 3]) ;; => (2 3 4)
(filter even? [1 2 3 4]) ;; => (2 4)
(range 5) ;; => (0 1 2 3 4)

Lazy Sequences:

(defn infinite-naturals [] (cons 1 (lazy infinite-naturals)))
(take 5 (infinite-naturals)) ;; => (1 2 3 4 5)


___elix
List: Ordered, indexed collections similar to Clojure lists.

fruits = ["apple", "banana", "orange"]

# Access by index:
head = fruits[0]  # "apple"

# Add to the beginning:
new_fruits = ["mango" | fruits]  # ["mango", "apple", "banana", "orange"]
Use code with caution.
Map: Unordered collections of key-value pairs similar to Clojure maps.

person = %{ name: "Alice", age: 30, city: "New York" }

# Access by key:
name = person[:name]  # "Alice"

# Add a new key-value pair:
updated_person = Map.put(person, :occupation, "software engineer")

Enum: Lazy sequences similar to Clojure lazy sequences.

numbers = 1..10  # Creates an Enum from 1 to 10

# Convert to a list:
list_of_numbers = Enum.to_list(numbers)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Iterate over the Enum:
Enum.each(numbers, &IO.puts/1)  # Prints each number on a new line

Specialized Collections:

Keyword: Represents unique, case-insensitive keys similar to Clojure keywords.

:my_unique_key    # Defines a keyword
Keyword.atom?(:my_unique_key)   # => true
Use code with caution.
Atom: Mutable single-value cell similar to Clojure atoms.

counter = Atom.new(0)
Process.sleep(1000)  # Simulate some delay
Atom.get(counter)   # => 0 (initial value)
Atom.update!(counter, &(&1 + 1))  # Increments counter to 1
Atom.get(counter)   # => 1 (updated value)

Process: Represents a running Erlang process (unique to Elixir).

spawn fn ->
  IO.puts "Hello from a separate process!"
end

# Processes run concurrently, so the output might not appear immediately

Note: This is just a small sample of Elixir data structures. I encourage you to explore their documentation and experiment further to gain a deeper understanding of their capabilities and how to use them effectively in your projects.

Remember, while syntax might differ slightly between languages, the core concepts of data structures often translate well. Use this overview as a stepping stone to further exploration and practical application!

}}}

